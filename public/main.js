/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r,n,i,o,s,a={"./app/classes/detection.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=new class{isPhone(){return this.isPhoneChecked||(this.isPhoneChecked=!0,this.isPhoneCheck=document.documentElement.classList.contains("phone")),this.isPhoneCheck}isTablet(){return this.TabletChecked||(this.TabletChecked=!0,this.TabletCheck=document.documentElement.classList.contains("tablet")),this.TabletCheck}isDesktop(){return this.DesktopChecked||(this.DesktopChecked=!0,this.DesktopCheck=document.documentElement.classList.contains("desktop")),this.DesktopCheck}}},"./app/classes/page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/gsap/index.js"),i=r("./node_modules/gsap/ScrollTrigger.js"),o=r("./node_modules/split-type/dist/index.js"),s=r("./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs"),a=r("./node_modules/prefix/index.js"),l=r.n(a);class c{constructor({element:e,elements:t}){this.element=e,this.elements=t,this.el=document.querySelector(e),this.nav=document.querySelector(".navigation__wrapper"),this.socials=document.querySelector(".socials"),this.elements={container:document.querySelector(".navigation__logo__container"),left:document.querySelector(".navigation__logo__letters__left__span "),middle:document.querySelector(".navigation__logo__letters__middle"),a_left:document.querySelector(".navigation__logo__letter.a__left"),dash:document.querySelector(".navigation__logo__letter.dash"),a_right:document.querySelector(".navigation__logo__letter.a__right"),right:document.querySelector(".navigation__logo__letters__right__span"),nav_menu:document.querySelector(".navigation__menu")},this.services=document.querySelector(".home__services"),this.DragText=document.querySelector(".cursor__text1"),this.transformPrefix=l()("transform"),n.default.registerPlugin(i.ScrollTrigger)}create(){this.scroll={current:0,target:0,last:0,limit:0,move:0},console.log(this.el),this.createAnimation(),this.scrollDirection()}onWheel(e){const{deltaY:t}=e;this.scroll.target+=t}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight)}update(){this.scroll.target=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=parseFloat(n.default.utils.interpolate(this.scroll.current,this.scroll.target,.1)).toFixed(2),this.scroll.current<.01&&(this.scroll.current=0),this.scroll.move=parseFloat(this.scroll.target-this.scroll.current).toFixed(2),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}smoothScroll(){console.log("lenis init",this.el);const e=new s.default({lerp:.1,smooth:!0});window.requestAnimationFrame((function t(r){e.raf(r),window.requestAnimationFrame(t)}))}scrollDirection(){this.lastScrollTop=0,this.currentScroll=0,window.addEventListener("scroll",this.getDirection.bind(this),!1),window.addEventListener("touchmove",this.getMobileDirection.bind(this))}getDirection(){const e=this.services.classList.contains("in-view");this.currentScroll=window.pageYOffset||document.documentElement.scrollTop,this.currentScroll>this.lastScrollTop?this.direction="down":this.direction="up",this.lastScrollTop=this.currentScroll<=0?0:this.currentScroll,"down"===this.direction&&window.pageYOffset>270||e?this.downScroll():(this.upScroll(),this.DragText.classList.add("none"))}getMobileDirection(e){const t=this.services.classList.contains("in-view");this.currentPoint=e.clientX||e.touches[0].clientX,null!=this.lastPoint&&this.lastPoint<this.currentPoint?this.direction="swiped down":null!=this.lastPoint&&this.lastPoint>this.currentPoint&&(this.direction="swiped up"),"swiped up"===this.direction&&this.currentPoint>270||t?this.downScroll():(this.upScroll(),this.DragText.classList.add("none")),this.lastPoint=this.currentPoint}downScroll(){this.nav.classList.add("hide"),this.socials.classList.add("hide")}upScroll(){this.nav.classList.remove("hide"),this.socials.classList.remove("hide")}createAnimation(){this.animations=[],this.typeSplit=new o.default("[data-split]",{types:"words, chars",tagName:"span"}),this.elementsTitles=document.querySelectorAll('[data-split="title"]'),this.elementsParagraph=document.querySelectorAll('[data-split="paragraph"]')}}},"./app/components/cursor.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});class n{constructor(){this.links=document.querySelectorAll("a")}createCursor(){const e=document.querySelector(".cursor"),t=document.querySelector(".cursor2");document.addEventListener("mousemove",(function(t){const r=t.clientX,n=t.clientY;e.style.transform=`translate3d(calc(${r}px - 50%), calc(${n}px - 50%), 0)`})),document.addEventListener("mousemove",(function(e){const r=e.clientX,n=e.clientY;t.style.transform=`translate3d(calc(${r}px - 50%), calc(${n}px - 50%), 0)`,t.classList.remove("none")})),document.addEventListener("mousedown",(function(){e.classList.add("click"),t.classList.add("cursorinnerhover")})),document.addEventListener("mouseup",(function(){e.classList.remove("click"),t.classList.remove("cursorinnerhover")})),this.links.forEach((t=>{t.addEventListener("mouseover",(()=>{e.classList.add("hover")})),t.addEventListener("mouseleave",(()=>{e.classList.remove("hover")}))}))}}},"./app/components/preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/gsap/index.js"),i=r("./node_modules/events/events.js"),o=r.n(i),s=r("./app/classes/detection.js");class a extends(o()){constructor(){super(),this.elements={container:document.querySelector(".preloader__logo__container"),left:document.querySelector(".preloader__logo__letters__left__span "),middle:document.querySelector(".preloader__logo__letters__middle"),a_left:document.querySelector(".a__left"),dash:document.querySelector(".dash"),a_right:document.querySelector(".a__right"),right:document.querySelector(".preloader__logo__letters__right__span"),images:document.querySelectorAll("[data-src]"),progress_bar:document.querySelector(".preloader__progress__bar__wrapper")},this.length=0,this.moveDistance=0,this.tl=n.default.timeline({onRepeat:()=>{},repeatDelay:.3,defaults:{ease:"expo.out",duration:.6,delay:.3}}),this.resize(),this.createLoader(),this.animateLogo()}animateLogo(){this.tl.repeat(-1),this.tl.yoyo(!0),n.default.set(this.elements.container,{scale:1}),this.tl.to(this.elements.left,{x:"-120%",opacity:0},"0").to(this.elements.right,{x:"200%",opacity:0},"0").to(this.elements.middle,{x:"50%"},"0").to(this.elements.dash,{x:"-1200%"},"0").to(this.elements.a_right,{x:"-788%"},"0")}getMoveDistance(){const e=document.querySelector(".navigation__link"),t=(document.querySelector(".navigation__wrapper").getBoundingClientRect().height-e.getBoundingClientRect().height)/2;let r=0;(s.default.isDesktop()||s.default.isTablet())&&(r=this.elements.container.getBoundingClientRect().height),s.default.isPhone()&&(r=this.elements.container.getBoundingClientRect().height/.5);const n=(r-.67*r)/2;this.moveDistance=this.elements.container.offsetTop+n-t}resize(){window.addEventListener("resize",this.getMoveDistance())}revertLogo(){this.tl.yoyo(!1),this.tl.repeat(0),this.tl.to(this.elements.left,{x:"0%",opacity:1},"0").to(this.elements.right,{x:"0%",opacity:1},"0").to(this.elements.middle,{x:"0%"},"0").to(this.elements.dash,{x:"0%"},"0").to(this.elements.a_right,{x:"0%"},"0"),s.default.isPhone()&&console.log("phone"),n.default.timeline().to(this.elements.container,{scale:.67,y:`-${this.moveDistance}px`,duration:.8,onComplete:()=>{this.emit("completed"),console.log("preloader completed")}}).to(".preloader__progress__bar__wrapper",{autoAlpha:0},"0")}async allLoaded(){await this.tl.repeat(5),this.revertLogo()}createLoader(){const e=this.elements.images.length,t=[...this.elements.images],r=[],n=this;t.forEach(((t,i)=>{window.addEventListener("load",(i=>{const o=document.querySelector(".preloader__progress"),s=new window.Image;s.onload=function(){r.push(s),this.length=r.length;const t=this.length/e,i=Math.round(100*t);o.style.width=`${i}%`,1===t&&n.allLoaded(),s.classList.add("loaded")},s.src=t.getAttribute("data-src"),t.src=t.getAttribute("data-src")}))}))}}},"./app/components/slider.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/prefix/index.js"),i=r.n(n),o=r("./node_modules/gsap/index.js"),s=r("./node_modules/gsap/ScrollTrigger.js"),a=r("./app/classes/detection.js");const l=(e,t,r)=>(1-r)*e+r*t;class c{constructor(e){this.el=document.querySelector(e.el),this.wrap=this.el.querySelector(e.wrap),this.items=this.el.querySelectorAll(e.item),this.bar=document.querySelector(e.bar),this.leftBtn=document.querySelector(".btn__left"),this.rightBtn=document.querySelector(".btn__right"),this.section=document.querySelector(".home__services"),this.wrapper=document.querySelector(".home__services__wrapper"),this.slider=document.querySelector(".home__services__gallery"),this.DragText=document.querySelector(".cursor__text1"),this.progressNumber=document.querySelector(".home__services__nav__progress__progress__number"),this.init(),console.log("slider created"),this.inView=!1,this.centerSlide=null,this.transformPrefix=i()("transform"),o.default.registerPlugin(s.ScrollTrigger),this.scroll()}init(){this.progress=0,this.speed=0,this.oldX=0,this.x=0,this.playrate=0,this.bindings(),this.calculate(),this.activeSlide(),this.events(),this.raf()}bindings(){["events","calculate","raf","handleWheel","handleLeftClicks","handleRightClicks","move","raf","handleTouchStart","handleTouchMove","handleTouchEnd","activeSlide"].forEach((e=>{this[e]=this[e].bind(this)}))}calculate(){this.windowWidth=window.innerWidth,this.wrapWidth=this.slider.getBoundingClientRect().width,this.ItemWidth=this.wrapWidth/this.items.length,(a.default.isDesktop()||a.default.isTablet())&&(this.minScroll=this.wrap.getBoundingClientRect().left-this.ItemWidth,this.windowCenter=this.windowWidth/2+.25*this.ItemWidth,this.windowLeft=this.windowWidth/2-.75*this.ItemWidth),a.default.isPhone()&&(this.minScroll=this.wrap.getBoundingClientRect().left,this.windowCenter=this.windowWidth/2+.25*this.ItemWidth,this.windowLeft=this.minScroll-20,console.log(this.windowLeft,this.windowCenter)),this.maxScroll=this.wrapWidth-this.el.clientWidth-this.minScroll,this.sectionTop=this.section.getBoundingClientRect().top}activeSlide(){this.items.forEach(((e,t)=>{this.itemBoundsLeft=e.getBoundingClientRect().left,this.isCenter=this.itemBoundsLeft<this.windowCenter&&this.itemBoundsLeft>this.windowLeft,this.isCenter?(this.centerSlide=e,this.centerSlideIndex=t,this.centerSlide.classList.add("active")):e.classList.remove("active")}))}activeSlideClick(){this.items.forEach(((e,t)=>{this.rightClick?(this.itemBoundsLeft=e.getBoundingClientRect().left-this.ItemWidth,console.log("right click")):(this.itemBoundsLeft=e.getBoundingClientRect().left+this.ItemWidth,console.log("left click")),this.isCenter=this.itemBoundsLeft<this.windowCenter&&this.itemBoundsLeft>this.windowLeft,this.isCenter?(this.centerSlide=e,this.centerSlideIndex=t,this.centerSlide.classList.add("active")):e.classList.remove("active")}))}handleWheel(e){this.inView&&(this.inView?this.progress+=e.deltaY:this.progress=0,this.move())}handleLeftClicks(e){this.rightClick=!1,console.log("left click"),this.progress-=this.ItemWidth,this.activeSlideClick(),this.progress<=this.minScroll-100&&(console.log("gallery start",this.items[0].getBoundingClientRect().left),this.slideEnd=this.items[this.items.length-1],this.progress-=this.ItemWidth,this.items.forEach(((e,t)=>{e.classList.remove("active")})),this.progress=0,setTimeout((()=>{this.progress=this.maxScroll,this.slideEnd.classList.add("active"),this.centerSlideIndex=this.items.length-1}),1e3))}handleRightClicks(e){this.clicked=!0,this.rightClick=!0,console.log("right click"),this.progress+=this.ItemWidth,this.activeSlideClick(),this.progress>=this.maxScroll&&(this.slideStart=this.items[0],this.items.forEach(((e,t)=>{e.classList.remove("active")})),this.progress=this.maxScroll,setTimeout((()=>{this.progress=this.minScroll,this.slideStart.classList.add("active"),this.centerSlideIndex=0}),1e3))}handleTouchStart(e){e.preventDefault(),this.inView&&(this.dragging=!0,this.startX=e.clientX||e.touches[0].clientX,this.el.classList.add("dragging"),this.DragText.classList.add("none"),this.click=!1)}handleTouchMove(e){if(this.click=!1,!this.inView)return;if(!this.dragging)return!1;const t=e.clientX||e.touches[0].clientX;this.progress+=2.5*(this.startX-t),this.startX=t,this.move()}handleTouchEnd(){this.click=!1,this.inView&&(this.dragging=!1,this.el.classList.remove("dragging"),this.DragText.classList.remove("none"))}move(){var e,t,r;this.click=!1,this.progress=(e=this.progress,t=this.minScroll,r=this.maxScroll,Math.max(t,Math.min(e,r))),this.activeSlide()}events(){window.addEventListener("resize",this.calculate),window.addEventListener("wheel",this.handleWheel),this.rightBtn.addEventListener("click",this.handleRightClicks),this.leftBtn.addEventListener("click",this.handleLeftClicks),this.el.addEventListener("touchstart",this.handleTouchStart),this.el.addEventListener("touchmove",this.handleTouchMove),this.el.addEventListener("touchend",this.handleTouchEnd),window.addEventListener("mousedown",this.handleTouchStart),window.addEventListener("mousemove",this.handleTouchMove),window.addEventListener("mouseup",this.handleTouchEnd),document.body.addEventListener("mouseleave",this.handleTouchEnd)}scroll(){const e=this;this.slideY=this.wrapWidth+this.ItemWidth-window.innerWidth,this.tl=o.default.timeline({scrollTrigger:{trigger:".home__about",start:"bottom 10%",toggleActions:"restart complete none reset"}}),this.tl.to(".home__about__scrolltext .word",{y:"100%",opacity:0,duration:.5}),a.default.isDesktop()||a.default.isTablet()?this.tl1=o.default.timeline({scrollTrigger:{trigger:".home__services",start:"top top",end:`+=${this.slideY}`,toggleActions:"restart complete none reset",pin:".home__services",scrub:1,onEnter:function(){e.inView=!0,e.section.classList.add("in-view")},onLeave:function(){e.DragText.classList.add("none"),e.section.classList.remove("in-view")},onLeaveBack:function(){e.DragText.classList.add("none"),e.section.classList.remove("in-view")},onEnterBack:function(){e.section.classList.add("in-view"),e.DragText.classList.remove("none")}}}):this.tl1=o.default.timeline({scrollTrigger:{trigger:".home__services",start:"top top",end:"bottom top",toggleActions:"restart complete none reset",markers:{startColor:"white",start:"services"},pin:!0,onEnter:function(){e.inView=!0,e.section.classList.add("in-view")},onLeave:function(){e.section.classList.remove("in-view")},onLeaveBack:function(){e.section.classList.remove("in-view")},onEnterBack:function(){e.section.classList.add("in-view")},onUpdate:function(t){e.scrollSlider=t.progress*e.slideY,e.progress=+e.scrollSlider,e.move(),t.markerEnd.textContent=`end: ${e.progress.toFixed(2)}`,console.log(e.progress,e.scrollSlider,t.markerEnd.textContent)}}}),this.tl.from(".home__services__gallery__wrapper",{display:"none"}).to(".home__services__wrapper",{opacity:1,delay:5,duration:.5,ease:"expo.out",onComplete:function(){e.inView=!0,e.DragText.classList.remove("none")}}),this.section.classList.contains("in-view")||this.DragText.classList.add("none")}moveSlider(){this.sectionTop=this.section.getBoundingClientRect().top,this.raf()}raf(){this.inView&&(this.x=l(this.x,this.progress,.1),this.playrate=this.x/this.maxScroll,this.progressNum=this.centerSlideIndex+1,this.progressNumber.innerHTML=`0${this.progressNum}/07`,this.wrap.style[this.transformPrefix]=`translateX(${-this.x}px)`,this.bar.style[this.transformPrefix]=`scaleX(${.18+.82*this.playrate})`,this.speed=Math.min(100,this.oldX-this.x),this.oldX=this.x,this.scale=l(this.scale,this.speed,.1),this.items.forEach((e=>{e.style[this.transformPrefix]=`scale(${1-.002*Math.abs(this.speed)})`,e.querySelector("img").style[this.transformPrefix]=`scaleX(${1+.004*Math.abs(this.speed)})`})))}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./app/classes/detection.js"),i=r("./app/components/cursor.js"),o=r("./app/components/preloader.js"),s=r("./app/components/slider.js"),a=r("./app/pages/about/index.js"),l=r("./app/pages/home/index.js");new class{constructor(){this.createContent(),this.createPages(),this.createPreloader(),this.addEventListeners(),this.update()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPreloader(){window.scrollTo(0,0),this.preloader=new o.default,this.preloader.once("completed",(()=>{document.body.classList.remove("no-scroll"),this.page.animatePageIn(),this.createCursor()}))}createSlider(){this.scroll=new s.default({el:".home__services__gallery__wrapper",wrap:".home__services__gallery",item:".home__services__service",bar:".home__services__nav__progress__progress__bar__progress"})}createPages(){this.pages={home:new l.default,about:new a.default},this.page=this.pages[this.template],this.page.create(),this.page.smoothScroll(),this.onResize(),this.createSlider()}createCursor(){n.default.isDesktop()&&(this.cursor=new i.default,this.cursor.createCursor())}onResize(){this.page&&this.page.onResize&&(this.page.onResize(),console.log("resize"))}onWheel(e){this.page&&this.page.onWheel&&this.page.onWheel(e)}update(){this.scroll.moveSlider(),this.page&&this.page.update,this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("wheel",this.onWheel.bind(this)),window.addEventListener("load",(()=>{window.scrollTo(0,0)}))}}},"./app/pages/about/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/page.js");class i extends n.default{constructor(){super({element:".about"})}create(){}}},"./app/pages/home/animateImages.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/gsap/index.js"),i=r("./node_modules/gsap/ScrollTrigger.js");class o{constructor(){n.default.registerPlugin(i.ScrollTrigger),this.homeAbout=document.querySelector(".home__about"),this.mainText=document.querySelector(".home__about__maintext"),this.subWords=document.querySelectorAll(".home__about__subtext .word"),this.Medias=document.querySelectorAll(".about__idea__media"),this.tl1=n.default.timeline({scrollTrigger:{trigger:".home__about",start:"top top",end:"2500 bottom",toggleActions:"restart complete restart reset",scrub:1,pin:".home__about"}})}isPhone(){console.log("animate phone images"),n.default.set(this.Medias,{opacity:0,scale:.1});const e=1.5;this.tl1.addLabel("imgT","+=2.5").addLabel("time","1.5").from(".home__about__maintext .word",{yPercent:100,duration:.6,ease:"power1.out",stagger:{amount:.2}}).from(".home__about__subtext .char",{opacity:0,x:"1em",duration:.6,ease:"power2.out",stagger:{amount:.4}}).to(this.Medias,{delay:.5,duration:1.5,opacity:1,scale:1},"-=1.5").to(this.Medias[0],{duration:e,width:"82%",height:"52%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[1],{duration:e,width:"76%",height:"52%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[2],{duration:e,width:"82%",height:"50%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[3],{duration:e,width:"82%",height:"48%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[4],{duration:e,width:"70%",height:"48%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[5],{duration:e,width:"79%",height:"47%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[6],{duration:e,width:"85%",height:"48%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[7],{duration:e,width:"79%",height:"49%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(".home__about__maintext .word",{yPercent:100,duration:.6,delay:.5,ease:"power1.out",stagger:{amount:.2}},"-=0.5").to(".home__about__subtext .word",{yPercent:100,duration:.6,ease:"power1.out",stagger:{amount:.2}},"-=0.2").to(".home__about__movingtext",{autoAlpha:1,left:0,duration:1.5}).to(".home__about__movingtext",{x:"-20%",duration:6})}isDesktop(){console.log("animate desktop images"),n.default.set(this.Medias,{opacity:0,scale:.1});const e=1.5;this.tl1.addLabel("imgT","+=2.5").addLabel("time","1.5").from(".home__about__maintext .word",{yPercent:100,duration:.6,ease:"power1.out",stagger:{amount:.2}}).from(".home__about__subtext .char",{opacity:0,x:"1em",duration:.6,ease:"power2.out",stagger:{amount:.4}}).to(this.Medias,{delay:.5,duration:1.5,opacity:1,scale:1},"-=1.5").to(this.Medias[0],{duration:e,width:"32%",height:"90%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[1],{duration:e,width:"29.6%",height:"90%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[2],{duration:e,width:"32%",height:"90%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[3],{duration:e,width:"32%",height:"83%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[4],{duration:e,width:"27%",height:"83%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[5],{duration:e,width:"30%",height:"82%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[6],{duration:e,width:"33%",height:"84%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(this.Medias[7],{duration:e,width:"30.5%",height:"78%",left:"50%",top:"50%",xPercent:-50,yPercent:-50,x:0,y:0},"imgT").to(".home__about__maintext .word",{yPercent:100,duration:.6,delay:.5,ease:"power1.out",stagger:{amount:.2}},"-=0.5").to(".home__about__subtext .word",{yPercent:100,duration:.6,ease:"power1.out",stagger:{amount:.2}},"-=0.2").to(".home__about__movingtext",{autoAlpha:1,left:0,duration:1.5}).to(".home__about__movingtext",{x:"-15%",duration:6})}}},"./app/pages/home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./app/classes/page.js"),i=r("./node_modules/gsap/index.js"),o=r("./node_modules/gsap/ScrollTrigger.js"),s=r("./app/classes/detection.js"),a=r("./app/pages/home/animateImages.js");class l extends n.default{constructor(){super({element:".home"}),this.elements={wrapper:document.querySelector(".home__wrapper"),nav:document.querySelector(".navigation"),nav_menu:document.querySelector(".navigation__menu"),preloader:document.querySelector(".preloader"),nav_link:document.querySelector(".navigation__link"),preloader__logo:document.querySelector(".preloader__logo__container")},i.default.registerPlugin(o.ScrollTrigger)}create(){super.create(),this.animateHomeAbout()}animatePageIn(){console.log("animate home"),this.tl=i.default.timeline({defaults:{ease:"expo.out"}}),this.tl.to(this.elements.nav,{y:"0%",autoAlpha:1,duration:.8}).set(this.elements.nav_link,{autoAlpha:1}).set(this.elements.preloader__logo,{autoAlpha:0}).to(this.elements.nav_menu,{y:"0%",duration:.4,autoAlpha:1}).to(this.elements.preloader,{y:"-100%",duration:.6,delay:.4}).to(this.elements.preloader,{autoAlpha:0,display:"none"}).from(".home__hero__maintext .word",{autoAlpha:0,y:"100%",duration:.5,stagger:.2,ease:"expo.out"}).from(".home__hero__subtext .char",{opacity:0,x:"1em",duration:.4,ease:"power2.out",stagger:{amount:.2}}).from(".home__hero__line__wrapper",{scaleY:0,transformOrigin:"top",opacity:0}).from(".socials",{autoAlpha:0,y:"100%",duration:1,ease:"expo.out"},"-=1").from(".socials__links a ",{autoAlpha:0,y:"100%",duration:1,stagger:.2,ease:"expo.out"}).from(".home__hero__discover",{autoAlpha:0,y:"100%",duration:.4,ease:"expo.out"},"-=0.5")}animateHomeAbout(){this.desktop=s.default.isDesktop(),this.tablet=s.default.isTablet(),this.phone=s.default.isPhone(),console.log(this.phone),this.AnimateImages=new a.default,this.phone?this.AnimateImages.isPhone():this.AnimateImages.isDesktop(),this.tl2=i.default.timeline({scrollTrigger:{trigger:".home__about",start:"bottom 80%",end:"bottom 20%",toggleActions:"restart complete resume reset"}}),i.default.set(".home__services__wrapper",{opacity:0}),this.tl2.to(".home__about__transition__white",{scaleY:1,duration:.3,ease:"power1.out"}).to(".home__about__transition__black",{scaleY:1,duration:.3,ease:"power1.out"}).set(".home__about",{opacity:0}).to(".home__about__transition__white",{scaleY:0,duration:.4,ease:"power1.in",transformOrigin:"top"}).to(".home__about__transition__black",{scaleY:0,duration:.3,ease:"power1.in",transformOrigin:"top"}).fromTo(".home__about__scrolltext .word",{y:"100%",opacity:0},{y:"0%",opacity:1,duration:.4,ease:"power1.out",stagger:{amount:.2}},"<")}}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=s;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},i={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},o={23:"</i>",24:"</u>",29:"</del>"};function s(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)m/g,(function(e,t){var n=i[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var s=o[t];return s?(r.pop(),s):""})),s=r.length;return s>0&&(n+=Array(s+1).join("</span>")),n}function a(e){for(var t in i[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],i[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],i[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";i[t]="color:#"+r,t=parseInt(t),i[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){o[e]="</span>"})),s.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var i=e.hasOwnProperty(n)?e[n]:null;if(i){if("reset"===n){if("string"==typeof i&&(i=[i]),!Array.isArray(i)||0===i.length||i.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var o=r[n];i[0]||(i[0]=o[0]),1!==i.length&&i[1]||(i=[i[0]]).push(o[1]),i=i.slice(0,2)}else if("string"!=typeof i)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=i}else t[n]=r[n]}a(t)},s.reset=function(){a(r)},s.tags={},Object.defineProperty?(Object.defineProperty(s.tags,"open",{get:function(){return i}}),Object.defineProperty(s.tags,"close",{get:function(){return o}})):(s.tags.open=i,s.tags.close=o),s.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,r)}(e,i,{once:!0})}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var i,o,s,c;if(a(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),s=o[t]),void 0===s)s=o[t]=r,++e._eventsCount;else if("function"==typeof s?s=o[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=l(e))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=u.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):f(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function g(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var c=l.length,u=f(l,c);for(r=0;r<c;++r)n(u[r],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,i,o,s;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return d(this,e,!0)},o.prototype.rawListeners=function(e){return d(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>Ee,default:()=>Ee,_getBBox:()=>W,_createElement:()=>I,checkPrefix:()=>z});var n,i,o,s,a,l,c,u,h=r("./node_modules/gsap/gsap-core.js"),d={},p=180/Math.PI,f=Math.PI/180,g=Math.atan2,m=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,y=/[\s,\(]\S/,_={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},b=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},T=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},E=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},k=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},S=function(e,t,r){return e.style[t]=r},q=function(e,t,r){return e.style.setProperty(t,r)},A=function(e,t,r){return e._gsap[t]=r},C=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},O=function(e,t,r,n,i){var o=e._gsap;o.scaleX=o.scaleY=r,o.renderTransform(i,o)},L=function(e,t,r,n,i){var o=e._gsap;o[t]=r,o.renderTransform(i,o)},D="transform",P=D+"Origin",M=function(e,t){var r=this,n=this.target,i=n.style;if(e in d){if(this.tfm=this.tfm||{},"transform"!==e&&(~(e=_[e]||e).indexOf(",")?e.split(",").forEach((function(e){return r.tfm[e]=J(n,e)})):this.tfm[e]=n._gsap.x?n._gsap[e]:J(n,e)),this.props.indexOf(D)>=0)return;n._gsap.svg&&(this.svgo=n.getAttribute("data-svg-origin"),this.props.push(P,t,"")),e=D}(i||t)&&this.props.push(e,t,i[e])},R=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},j=function(){var e,t,r=this.props,n=this.target,i=n.style,o=n._gsap;for(e=0;e<r.length;e+=3)r[e+1]?n[r[e]]=r[e+2]:r[e+2]?i[r[e]]=r[e+2]:i.removeProperty(r[e].replace(m,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)o[t]=this.tfm[t];o.svg&&(o.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),!(e=c())||e.isStart||i[D]||(R(i),o.uncache=1)}},N=function(e,t){var r={target:e,props:[],revert:j,save:M};return t&&t.split(",").forEach((function(e){return r.save(e)})),r},I=function(e,t){var r=i.createElementNS?i.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):i.createElement(e);return r.style?r:i.createElement(e)},F=function e(t,r,n){var i=getComputedStyle(t);return i[r]||i.getPropertyValue(r.replace(m,"-$1").toLowerCase())||i.getPropertyValue(r)||!n&&e(t,z(r)||r,1)||""},B="O,Moz,ms,Ms,Webkit".split(","),z=function(e,t,r){var n=(t||a).style,i=5;if(e in n&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(B[i]+e in n););return i<0?null:(3===i?"ms":i>=0?B[i]:"")+e},U=function(){"undefined"!=typeof window&&window.document&&(n=window,i=n.document,o=i.documentElement,a=I("div")||{style:{}},I("div"),D=z(D),P=D+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!z("perspective"),c=h.gsap.core.reverting,s=1)},H=function e(t){var r,n=I("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,s=this.nextSibling,a=this.style.cssText;if(o.appendChild(n),n.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return i&&(s?i.insertBefore(this,s):i.appendChild(this)),o.removeChild(n),this.style.cssText=a,r},V=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},W=function(e){var t;try{t=e.getBBox()}catch(r){t=H.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===H||(t=H.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+V(e,["x","cx","x1"])||0,y:+V(e,["y","cy","y1"])||0,width:0,height:0}},Y=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!W(e))},X=function(e,t){if(t){var r=e.style;t in d&&t!==P&&(t=D),r.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty(t.replace(m,"-$1").toLowerCase())):r.removeAttribute(t)}},G=function(e,t,r,n,i,o){var s=new h.PropTween(e._pt,t,r,0,1,o?k:E);return e._pt=s,s.b=n,s.e=i,e._props.push(r),s},$={deg:1,rad:1,turn:1},K={grid:1,flex:1},Z=function e(t,r,n,o){var s,l,c,u,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",g=a.style,m=v.test(r),y="svg"===t.tagName.toLowerCase(),_=(y?"client":"offset")+(m?"Width":"Height"),b=100,w="px"===o,x="%"===o;return o===f||!p||$[o]||$[f]?p:("px"!==f&&!w&&(p=e(t,r,n,"px")),u=t.getCTM&&Y(t),!x&&"%"!==f||!d[r]&&!~r.indexOf("adius")?(g[m?"width":"height"]=b+(w?f:o),l=~r.indexOf("adius")||"em"===o&&t.appendChild&&!y?t:t.parentNode,u&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==i&&l.appendChild||(l=i.body),(c=l._gsap)&&x&&c.width&&m&&c.time===h._ticker.time&&!c.uncache?(0,h._round)(p/c.width*b):((x||"%"===f)&&!K[F(l,"display")]&&(g.position=F(t,"position")),l===t&&(g.position="static"),l.appendChild(a),s=a[_],l.removeChild(a),g.position="absolute",m&&x&&((c=(0,h._getCache)(l)).time=h._ticker.time,c.width=l[_]),(0,h._round)(w?s*p/b:s&&p?b/s*p:0))):(s=u?t.getBBox()[m?"width":"height"]:t[_],(0,h._round)(x?p/s*b:p/100*s)))},J=function(e,t,r,n){var i;return s||U(),t in _&&"transform"!==t&&~(t=_[t]).indexOf(",")&&(t=t.split(",")[0]),d[t]&&"transform"!==t?(i=ce(e,n),i="transformOrigin"!==t?i[t]:i.svg?i.origin:ue(F(e,P))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||n||~(i+"").indexOf("calc("))&&(i=re[t]&&re[t](e,t,r)||F(e,t)||(0,h._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(i+"").trim().indexOf(" ")?Z(e,t,i,r)+r:i},Q=function(e,t,r,n){if(!r||"none"===r){var i=z(t,e,1),o=i&&F(e,i,1);o&&o!==r?(t=i,r=o):"borderColor"===t&&(r=F(e,"borderTopColor"))}var s,a,l,c,u,d,p,f,g,m,v,y=new h.PropTween(this._pt,e.style,t,0,1,h._renderComplexString),_=0,b=0;if(y.b=r,y.e=n,r+="","auto"===(n+="")&&(e.style[t]=n,n=F(e,t)||n,e.style[t]=r),s=[r,n],(0,h._colorStringFilter)(s),n=s[1],l=(r=s[0]).match(h._numWithUnitExp)||[],(n.match(h._numWithUnitExp)||[]).length){for(;a=h._numWithUnitExp.exec(n);)p=a[0],g=n.substring(_,a.index),u?u=(u+1)%5:"rgba("!==g.substr(-5)&&"hsla("!==g.substr(-5)||(u=1),p!==(d=l[b++]||"")&&(c=parseFloat(d)||0,v=d.substr((c+"").length),"="===p.charAt(1)&&(p=(0,h._parseRelative)(c,p)+v),f=parseFloat(p),m=p.substr((f+"").length),_=h._numWithUnitExp.lastIndex-m.length,m||(m=m||h._config.units[t]||v,_===n.length&&(n+=m,y.e+=m)),v!==m&&(c=Z(e,t,d,m)||0),y._pt={_next:y._pt,p:g||1===b?g:",",s:c,c:f-c,m:u&&u<4||"zIndex"===t?Math.round:0});y.c=_<n.length?n.substring(_,n.length):""}else y.r="display"===t&&"none"===n?k:E;return h._relExp.test(n)&&(y.e=0),this._pt=y,y},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,n,i,o=t.t,s=o.style,a=t.u,l=o._gsap;if("all"===a||!0===a)s.cssText="",n=1;else for(i=(a=a.split(",")).length;--i>-1;)r=a[i],d[r]&&(n=1,r="transformOrigin"===r?P:D),X(o,r);n&&(X(o,D),l&&(l.svg&&o.removeAttribute("transform"),ce(o,1),l.uncache=1,R(s)))}},re={clearProps:function(e,t,r,n,i){if("isFromStart"!==i.data){var o=e._pt=new h.PropTween(e._pt,t,r,0,0,te);return o.u=n,o.pr=-10,o.tween=i,e._props.push(r),1}}},ne=[1,0,0,1,0,0],ie={},oe=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},se=function(e){var t=F(e,D);return oe(t)?ne:t.substr(7).match(h._numExp).map(h._round)},ae=function(e,t){var r,n,i,s,a=e._gsap||(0,h._getCache)(e),l=e.style,c=se(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(c=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?ne:c:(c!==ne||e.offsetParent||e===o||a.svg||(i=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(s=1,n=e.nextElementSibling,o.appendChild(e)),c=se(e),i?l.display=i:X(e,"display"),s&&(n?r.insertBefore(e,n):r?r.appendChild(e):o.removeChild(e))),t&&c.length>6?[c[0],c[1],c[4],c[5],c[12],c[13]]:c)},le=function(e,t,r,n,i,o){var s,a,l,c=e._gsap,u=i||ae(e,!0),h=c.xOrigin||0,d=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,g=u[0],m=u[1],v=u[2],y=u[3],_=u[4],b=u[5],w=t.split(" "),x=parseFloat(w[0])||0,T=parseFloat(w[1])||0;r?u!==ne&&(a=g*y-m*v)&&(l=x*(-m/a)+T*(g/a)-(g*b-m*_)/a,x=x*(y/a)+T*(-v/a)+(v*b-y*_)/a,T=l):(x=(s=W(e)).x+(~w[0].indexOf("%")?x/100*s.width:x),T=s.y+(~(w[1]||w[0]).indexOf("%")?T/100*s.height:T)),n||!1!==n&&c.smooth?(_=x-h,b=T-d,c.xOffset=p+(_*g+b*v)-_,c.yOffset=f+(_*m+b*y)-b):c.xOffset=c.yOffset=0,c.xOrigin=x,c.yOrigin=T,c.smooth=!!n,c.origin=t,c.originIsAbsolute=!!r,e.style[P]="0px 0px",o&&(G(o,c,"xOrigin",h,x),G(o,c,"yOrigin",d,T),G(o,c,"xOffset",p,c.xOffset),G(o,c,"yOffset",f,c.yOffset)),e.setAttribute("data-svg-origin",x+" "+T)},ce=function(e,t){var r=e._gsap||new h.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var n,i,o,s,a,l,c,d,m,v,y,_,b,w,x,T,E,k,S,q,A,C,O,L,M,R,j,N,I,B,z,U,H=e.style,V=r.scaleX<0,W="px",X="deg",G=getComputedStyle(e),$=F(e,P)||"0";return n=i=o=l=c=d=m=v=y=0,s=a=1,r.svg=!(!e.getCTM||!Y(e)),G.translate&&("none"===G.translate&&"none"===G.scale&&"none"===G.rotate||(H[D]=("none"!==G.translate?"translate3d("+(G.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==G.rotate?"rotate("+G.rotate+") ":"")+("none"!==G.scale?"scale("+G.scale.split(" ").join(",")+") ":"")+("none"!==G[D]?G[D]:"")),H.scale=H.rotate=H.translate="none"),w=ae(e,r.svg),r.svg&&(r.uncache?(M=e.getBBox(),$=r.xOrigin-M.x+"px "+(r.yOrigin-M.y)+"px",L=""):L=!t&&e.getAttribute("data-svg-origin"),le(e,L||$,!!L||r.originIsAbsolute,!1!==r.smooth,w)),_=r.xOrigin||0,b=r.yOrigin||0,w!==ne&&(k=w[0],S=w[1],q=w[2],A=w[3],n=C=w[4],i=O=w[5],6===w.length?(s=Math.sqrt(k*k+S*S),a=Math.sqrt(A*A+q*q),l=k||S?g(S,k)*p:0,(m=q||A?g(q,A)*p+l:0)&&(a*=Math.abs(Math.cos(m*f))),r.svg&&(n-=_-(_*k+b*q),i-=b-(_*S+b*A))):(U=w[6],B=w[7],j=w[8],N=w[9],I=w[10],z=w[11],n=w[12],i=w[13],o=w[14],c=(x=g(U,I))*p,x&&(L=C*(T=Math.cos(-x))+j*(E=Math.sin(-x)),M=O*T+N*E,R=U*T+I*E,j=C*-E+j*T,N=O*-E+N*T,I=U*-E+I*T,z=B*-E+z*T,C=L,O=M,U=R),d=(x=g(-q,I))*p,x&&(T=Math.cos(-x),z=A*(E=Math.sin(-x))+z*T,k=L=k*T-j*E,S=M=S*T-N*E,q=R=q*T-I*E),l=(x=g(S,k))*p,x&&(L=k*(T=Math.cos(x))+S*(E=Math.sin(x)),M=C*T+O*E,S=S*T-k*E,O=O*T-C*E,k=L,C=M),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,d=180-d),s=(0,h._round)(Math.sqrt(k*k+S*S+q*q)),a=(0,h._round)(Math.sqrt(O*O+U*U)),x=g(C,O),m=Math.abs(x)>2e-4?x*p:0,y=z?1/(z<0?-z:z):0),r.svg&&(L=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!oe(F(e,D)),L&&e.setAttribute("transform",L))),Math.abs(m)>90&&Math.abs(m)<270&&(V?(s*=-1,m+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,m+=m<=0?180:-180)),t=t||r.uncache,r.x=n-((r.xPercent=n&&(!t&&r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-n)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+W,r.y=i-((r.yPercent=i&&(!t&&r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+W,r.z=o+W,r.scaleX=(0,h._round)(s),r.scaleY=(0,h._round)(a),r.rotation=(0,h._round)(l)+X,r.rotationX=(0,h._round)(c)+X,r.rotationY=(0,h._round)(d)+X,r.skewX=m+X,r.skewY=v+X,r.transformPerspective=y+W,(r.zOrigin=parseFloat($.split(" ")[2])||0)&&(H[P]=ue($)),r.xOffset=r.yOffset=0,r.force3D=h._config.force3D,r.renderTransform=r.svg?ve:u?me:de,r.uncache=0,r},ue=function(e){return(e=e.split(" "))[0]+" "+e[1]},he=function(e,t,r){var n=(0,h.getUnit)(t);return(0,h._round)(parseFloat(t)+parseFloat(Z(e,"x",r+"px",n)))+n},de=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,me(e,t)},pe="0deg",fe="0px",ge=") ",me=function(e,t){var r=t||this,n=r.xPercent,i=r.yPercent,o=r.x,s=r.y,a=r.z,l=r.rotation,c=r.rotationY,u=r.rotationX,h=r.skewX,d=r.skewY,p=r.scaleX,g=r.scaleY,m=r.transformPerspective,v=r.force3D,y=r.target,_=r.zOrigin,b="",w="auto"===v&&e&&1!==e||!0===v;if(_&&(u!==pe||c!==pe)){var x,T=parseFloat(c)*f,E=Math.sin(T),k=Math.cos(T);T=parseFloat(u)*f,x=Math.cos(T),o=he(y,o,E*x*-_),s=he(y,s,-Math.sin(T)*-_),a=he(y,a,k*x*-_+_)}m!==fe&&(b+="perspective("+m+ge),(n||i)&&(b+="translate("+n+"%, "+i+"%) "),(w||o!==fe||s!==fe||a!==fe)&&(b+=a!==fe||w?"translate3d("+o+", "+s+", "+a+") ":"translate("+o+", "+s+ge),l!==pe&&(b+="rotate("+l+ge),c!==pe&&(b+="rotateY("+c+ge),u!==pe&&(b+="rotateX("+u+ge),h===pe&&d===pe||(b+="skew("+h+", "+d+ge),1===p&&1===g||(b+="scale("+p+", "+g+ge),y.style[D]=b||"translate(0, 0)"},ve=function(e,t){var r,n,i,o,s,a=t||this,l=a.xPercent,c=a.yPercent,u=a.x,d=a.y,p=a.rotation,g=a.skewX,m=a.skewY,v=a.scaleX,y=a.scaleY,_=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,T=a.yOffset,E=a.forceCSS,k=parseFloat(u),S=parseFloat(d);p=parseFloat(p),g=parseFloat(g),(m=parseFloat(m))&&(g+=m=parseFloat(m),p+=m),p||g?(p*=f,g*=f,r=Math.cos(p)*v,n=Math.sin(p)*v,i=Math.sin(p-g)*-y,o=Math.cos(p-g)*y,g&&(m*=f,s=Math.tan(g-m),i*=s=Math.sqrt(1+s*s),o*=s,m&&(s=Math.tan(m),r*=s=Math.sqrt(1+s*s),n*=s)),r=(0,h._round)(r),n=(0,h._round)(n),i=(0,h._round)(i),o=(0,h._round)(o)):(r=v,o=y,n=i=0),(k&&!~(u+"").indexOf("px")||S&&!~(d+"").indexOf("px"))&&(k=Z(_,"x",u,"px"),S=Z(_,"y",d,"px")),(b||w||x||T)&&(k=(0,h._round)(k+b-(b*r+w*i)+x),S=(0,h._round)(S+w-(b*n+w*o)+T)),(l||c)&&(s=_.getBBox(),k=(0,h._round)(k+l/100*s.width),S=(0,h._round)(S+c/100*s.height)),s="matrix("+r+","+n+","+i+","+o+","+k+","+S+")",_.setAttribute("transform",s),E&&(_.style[D]=s)},ye=function(e,t,r,n,i){var o,s,a=360,l=(0,h._isString)(i),c=parseFloat(i)*(l&&~i.indexOf("rad")?p:1)-n,u=n+c+"deg";return l&&("short"===(o=i.split("_")[1])&&(c%=a)!==c%180&&(c+=c<0?a:-360),"cw"===o&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===o&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),e._pt=s=new h.PropTween(e._pt,t,r,n,c,w),s.e=u,s.u="deg",e._props.push(r),s},_e=function(e,t){for(var r in t)e[r]=t[r];return e},be=function(e,t,r){var n,i,o,s,a,l,c,u=_e({},r._gsap),p=r.style;for(i in u.svg?(o=r.getAttribute("transform"),r.setAttribute("transform",""),p[D]=t,n=ce(r,1),X(r,D),r.setAttribute("transform",o)):(o=getComputedStyle(r)[D],p[D]=t,n=ce(r,1),p[D]=o),d)(o=u[i])!==(s=n[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(a=(0,h.getUnit)(o)!==(c=(0,h.getUnit)(s))?Z(r,i,o,c):parseFloat(o),l=parseFloat(s),e._pt=new h.PropTween(e._pt,n,i,a,l-a,b),e._pt.u=c||0,e._props.push(i));_e(n,u)};(0,h._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",n="Right",i="Bottom",o="Left",s=(t<3?[r,n,i,o]:[r+o,r+n,i+n,i+o]).map((function(r){return t<2?e+r:"border"+r+e}));re[t>1?"border"+e:e]=function(e,t,r,n,i){var o,a;if(arguments.length<4)return o=s.map((function(t){return J(e,t,r)})),5===(a=o.join(" ")).split(o[0]).length?o[0]:a;o=(n+"").split(" "),a={},s.forEach((function(e,t){return a[e]=o[t]=o[t]||o[(t-1)/2|0]})),e.init(t,a,i)}}));var we,xe,Te,Ee={name:"css",register:U,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,n,i){var o,a,l,c,u,p,f,g,m,v,w,E,k,S,q,A,C,O,L,M,R=this._props,j=e.style,I=r.vars.startAt;for(f in s||U(),this.styles=this.styles||N(e),A=this.styles.props,this.tween=r,t)if("autoRound"!==f&&(a=t[f],!h._plugins[f]||!(0,h._checkPlugin)(f,t,r,n,e,i)))if(u=typeof a,p=re[f],"function"===u&&(u=typeof(a=a.call(r,n,e,i))),"string"===u&&~a.indexOf("random(")&&(a=(0,h._replaceRandom)(a)),p)p(this,e,f,a,r)&&(q=1);else if("--"===f.substr(0,2))o=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",h._colorExp.lastIndex=0,h._colorExp.test(o)||(g=(0,h.getUnit)(o),m=(0,h.getUnit)(a)),m?g!==m&&(o=Z(e,f,o,m)+m):g&&(a+=g),this.add(j,"setProperty",o,a,n,i,0,0,f),R.push(f),A.push(f,0,j[f]);else if("undefined"!==u){if(I&&f in I?(o="function"==typeof I[f]?I[f].call(r,n,e,i):I[f],(0,h._isString)(o)&&~o.indexOf("random(")&&(o=(0,h._replaceRandom)(o)),(0,h.getUnit)(o+"")||(o+=h._config.units[f]||(0,h.getUnit)(J(e,f))||""),"="===(o+"").charAt(1)&&(o=J(e,f))):o=J(e,f),c=parseFloat(o),(v="string"===u&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in _&&("autoAlpha"===f&&(1===c&&"hidden"===J(e,"visibility")&&l&&(c=0),A.push("visibility",0,j.visibility),G(this,j,"visibility",c?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=_[f]).indexOf(",")&&(f=f.split(",")[0])),w=f in d)if(this.styles.save(f),E||((k=e._gsap).renderTransform&&!t.parseTransform||ce(e,t.parseTransform),S=!1!==t.smoothOrigin&&k.smooth,(E=this._pt=new h.PropTween(this._pt,j,D,0,1,k.renderTransform,k,0,-1)).dep=1),"scale"===f)this._pt=new h.PropTween(this._pt,k,"scaleY",c,(v?(0,h._parseRelative)(c,v+l):l)-c||0,b),this._pt.u=0,R.push("scaleY",f),f+="X";else{if("transformOrigin"===f){A.push(P,0,j[P]),O=void 0,L=void 0,M=void 0,O=(C=a).split(" "),L=O[0],M=O[1]||"50%","top"!==L&&"bottom"!==L&&"left"!==M&&"right"!==M||(C=L,L=M,M=C),O[0]=ee[L]||L,O[1]=ee[M]||M,a=O.join(" "),k.svg?le(e,a,0,S,0,this):((m=parseFloat(a.split(" ")[2])||0)!==k.zOrigin&&G(this,k,"zOrigin",k.zOrigin,m),G(this,j,f,ue(o),ue(a)));continue}if("svgOrigin"===f){le(e,a,1,S,0,this);continue}if(f in ie){ye(this,k,f,c,v?(0,h._parseRelative)(c,v+a):a);continue}if("smoothOrigin"===f){G(this,k,"smooth",k.smooth,a);continue}if("force3D"===f){k[f]=a;continue}if("transform"===f){be(this,a,e);continue}}else f in j||(f=z(f)||f);if(w||(l||0===l)&&(c||0===c)&&!y.test(a)&&f in j)l||(l=0),(g=(o+"").substr((c+"").length))!==(m=(0,h.getUnit)(a)||(f in h._config.units?h._config.units[f]:g))&&(c=Z(e,f,o,m)),this._pt=new h.PropTween(this._pt,w?k:j,f,c,(v?(0,h._parseRelative)(c,v+l):l)-c,w||"px"!==m&&"zIndex"!==f||!1===t.autoRound?b:T),this._pt.u=m||0,g!==m&&"%"!==m&&(this._pt.b=o,this._pt.r=x);else if(f in j)Q.call(this,e,f,o,v?v+a:a);else{if(!(f in e)){(0,h._missingPlugin)(f,a);continue}this.add(e,f,o||e[f],v?v+a:a,n,i)}w||(f in j?A.push(f,0,j[f]):A.push(f,1,o||e[f])),R.push(f)}q&&(0,h._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!c())for(var r=t._pt;r;)r.r(e,r.d),r=r._next;else t.styles.revert()},get:J,aliases:_,getSetter:function(e,t,r){var n=_[t];return n&&n.indexOf(",")<0&&(t=n),t in d&&t!==P&&(e._gsap.x||J(e,"x"))?r&&l===r?"scale"===t?C:A:(l=r||{})&&("scale"===t?O:L):e.style&&!(0,h._isUndefined)(e.style[t])?S:~t.indexOf("-")?q:(0,h._getSetter)(e,t)},core:{_removeProperty:X,_getMatrix:ae}};h.gsap.utils.checkPrefix=z,h.gsap.core.getStyleSaver=N,we="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xe="rotation,rotationX,rotationY,skewX,skewY",Te=(0,h._forEachName)(we+","+xe+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){d[e]=1})),(0,h._forEachName)(xe,(function(e){h._config.units[e]="deg",ie[e]=1})),_[Te[13]]=we+","+xe,(0,h._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");_[t[1]]=Te[t[0]]})),(0,h._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){h._config.units[e]="px"})),h.gsap.registerPlugin(Ee)},"./node_modules/gsap/Observer.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r.r(t),r.d(t,{Observer:()=>B,default:()=>B,_isViewport:()=>E,_scrollers:()=>_,_getScrollFunc:()=>M,_getProxyProp:()=>T,_proxies:()=>b,_getVelocityProp:()=>R,_vertical:()=>D,_horizontal:()=>L,_getTarget:()=>P});var i,o,s,a,l,c,u,h,d,p,f,g,m=function(){return i||"undefined"!=typeof window&&(i=window.gsap)&&i.registerPlugin&&i},v=1,y=[],_=[],b=[],w=Date.now,x=function(e,t){return t},T=function(e,t){return~b.indexOf(e)&&b[b.indexOf(e)+1][t]},E=function(e){return!!~p.indexOf(e)},k=function(e,t,r,n,i){return e.addEventListener(t,r,{passive:!n,capture:!!i})},S=function(e,t,r,n){return e.removeEventListener(t,r,!!n)},q="scrollLeft",A="scrollTop",C=function(){return f&&f.isPressed||_.cache++},O=function(e,t){var r=function r(n){if(n||0===n){v&&(s.history.scrollRestoration="manual");var i=f&&f.isPressed;n=r.v=Math.round(n)||(f&&f.iOS?1:0),e(n),r.cacheID=_.cache,i&&x("ss",n)}else(t||_.cache!==r.cacheID||x("ref"))&&(r.cacheID=_.cache,r.v=e());return r.v+r.offset};return r.offset=0,e&&r},L={s:q,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:O((function(e){return arguments.length?s.scrollTo(e,D.sc()):s.pageXOffset||a.scrollLeft||l.scrollLeft||c.scrollLeft||0}))},D={s:A,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:L,sc:O((function(e){return arguments.length?s.scrollTo(L.sc(),e):s.pageYOffset||a.scrollTop||l.scrollTop||c.scrollTop||0}))},P=function(e){return i.utils.toArray(e)[0]||("string"==typeof e&&!1!==i.config().nullTargetWarn?console.warn("Element not found:",e):null)},M=function(e,t){var r=t.s,n=t.sc;E(e)&&(e=a.scrollingElement||l);var o=_.indexOf(e),s=n===D.sc?1:2;!~o&&(o=_.push(e)-1),_[o+s]||e.addEventListener("scroll",C);var c=_[o+s],u=c||(_[o+s]=O(T(e,r),!0)||(E(e)?n:O((function(t){return arguments.length?e[r]=t:e[r]}))));return u.target=e,c||(u.smooth="smooth"===i.getProperty(e,"scrollBehavior")),u},R=function(e,t,r){var n=e,i=e,o=w(),s=o,a=t||50,l=Math.max(500,3*a),c=function(e,t){var l=w();t||l-o>a?(i=n,n=e,s=o,o=l):r?n+=e:n=i+(e-i)/(l-s)*(o-s)};return{update:c,reset:function(){i=n=r?0:n,s=o=0},getVelocity:function(e){var t=s,a=i,u=w();return(e||0===e)&&e!==n&&c(e),o===s||u-s>l?0:(n+(r?a:-a))/((r?u:o)-t)*1e3}}},j=function(e,t){return t&&!e._gsapAllow&&e.preventDefault(),e.changedTouches?e.changedTouches[0]:e},N=function(e){var t=Math.max.apply(Math,e),r=Math.min.apply(Math,e);return Math.abs(t)>=Math.abs(r)?t:r},I=function(){var e,t,r,n;(d=i.core.globals().ScrollTrigger)&&d.core&&(e=d.core,t=e.bridge||{},r=e._scrollers,n=e._proxies,r.push.apply(r,_),n.push.apply(n,b),_=r,b=n,x=function(e,r){return t[e](r)})},F=function(e){return(i=e||m())&&"undefined"!=typeof document&&document.body&&(s=window,a=document,l=a.documentElement,c=a.body,p=[s,a,l,c],i.utils.clamp,h="onpointerenter"in c?"pointer":"mouse",u=B.isTouch=s.matchMedia&&s.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in s||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,g=B.eventTypes=("ontouchstart"in l?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in l?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return v=0}),500),I(),o=1),o};L.op=D,_.cache=0;var B=function(){function e(e){this.init(e)}var t,r,p;return e.prototype.init=function(e){o||F(i)||console.warn("Please gsap.registerPlugin(Observer)"),d||I();var t=e.tolerance,r=e.dragMinimum,n=e.type,p=e.target,m=e.lineHeight,v=e.debounce,_=e.preventDefault,b=e.onStop,x=e.onStopDelay,T=e.ignore,q=e.wheelSpeed,A=e.event,O=e.onDragStart,B=e.onDragEnd,z=e.onDrag,U=e.onPress,H=e.onRelease,V=e.onRight,W=e.onLeft,Y=e.onUp,X=e.onDown,G=e.onChangeX,$=e.onChangeY,K=e.onChange,Z=e.onToggleX,J=e.onToggleY,Q=e.onHover,ee=e.onHoverEnd,te=e.onMove,re=e.ignoreCheck,ne=e.isNormalizer,ie=e.onGestureStart,oe=e.onGestureEnd,se=e.onWheel,ae=e.onEnable,le=e.onDisable,ce=e.onClick,ue=e.scrollSpeed,he=e.capture,de=e.allowClicks,pe=e.lockAxis,fe=e.onLockAxis;this.target=p=P(p)||l,this.vars=e,T&&(T=i.utils.toArray(T)),t=t||1e-9,r=r||0,q=q||1,ue=ue||1,n=n||"wheel,touch,pointer",v=!1!==v,m||(m=parseFloat(s.getComputedStyle(c).lineHeight)||22);var ge,me,ve,ye,_e,be,we,xe=this,Te=0,Ee=0,ke=M(p,L),Se=M(p,D),qe=ke(),Ae=Se(),Ce=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===g[0],Oe=E(p),Le=p.ownerDocument||a,De=[0,0,0],Pe=[0,0,0],Me=0,Re=function(){return Me=w()},je=function(e,t){return(xe.event=e)&&T&&~T.indexOf(e.target)||t&&Ce&&"touch"!==e.pointerType||re&&re(e,t)},Ne=function(){var e=xe.deltaX=N(De),r=xe.deltaY=N(Pe),n=Math.abs(e)>=t,i=Math.abs(r)>=t;K&&(n||i)&&K(xe,e,r,De,Pe),n&&(V&&xe.deltaX>0&&V(xe),W&&xe.deltaX<0&&W(xe),G&&G(xe),Z&&xe.deltaX<0!=Te<0&&Z(xe),Te=xe.deltaX,De[0]=De[1]=De[2]=0),i&&(X&&xe.deltaY>0&&X(xe),Y&&xe.deltaY<0&&Y(xe),$&&$(xe),J&&xe.deltaY<0!=Ee<0&&J(xe),Ee=xe.deltaY,Pe[0]=Pe[1]=Pe[2]=0),(ye||ve)&&(te&&te(xe),ve&&(z(xe),ve=!1),ye=!1),be&&!(be=!1)&&fe&&fe(xe),_e&&(se(xe),_e=!1),ge=0},Ie=function(e,t,r){De[r]+=e,Pe[r]+=t,xe._vx.update(e),xe._vy.update(t),v?ge||(ge=requestAnimationFrame(Ne)):Ne()},Fe=function(e,t){pe&&!we&&(xe.axis=we=Math.abs(e)>Math.abs(t)?"x":"y",be=!0),"y"!==we&&(De[2]+=e,xe._vx.update(e,!0)),"x"!==we&&(Pe[2]+=t,xe._vy.update(t,!0)),v?ge||(ge=requestAnimationFrame(Ne)):Ne()},Be=function(e){if(!je(e,1)){var t=(e=j(e,_)).clientX,n=e.clientY,i=t-xe.x,o=n-xe.y,s=xe.isDragging;xe.x=t,xe.y=n,(s||Math.abs(xe.startX-t)>=r||Math.abs(xe.startY-n)>=r)&&(z&&(ve=!0),s||(xe.isDragging=!0),Fe(i,o),s||O&&O(xe))}},ze=xe.onPress=function(e){je(e,1)||(xe.axis=we=null,me.pause(),xe.isPressed=!0,e=j(e),Te=Ee=0,xe.startX=xe.x=e.clientX,xe.startY=xe.y=e.clientY,xe._vx.reset(),xe._vy.reset(),k(ne?p:Le,g[1],Be,_,!0),xe.deltaX=xe.deltaY=0,U&&U(xe))},Ue=function(e){if(!je(e,1)){S(ne?p:Le,g[1],Be,!0);var t=xe.isDragging&&(Math.abs(xe.x-xe.startX)>3||Math.abs(xe.y-xe.startY)>3),r=j(e);t||(xe._vx.reset(),xe._vy.reset(),_&&de&&i.delayedCall(.08,(function(){if(w()-Me>300&&!e.defaultPrevented)if(e.target.click)e.target.click();else if(Le.createEvent){var t=Le.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,s,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(t)}}))),xe.isDragging=xe.isGesturing=xe.isPressed=!1,b&&!ne&&me.restart(!0),B&&t&&B(xe),H&&H(xe,t)}},He=function(e){return e.touches&&e.touches.length>1&&(xe.isGesturing=!0)&&ie(e,xe.isDragging)},Ve=function(){return(xe.isGesturing=!1)||oe(xe)},We=function(e){if(!je(e)){var t=ke(),r=Se();Ie((t-qe)*ue,(r-Ae)*ue,1),qe=t,Ae=r,b&&me.restart(!0)}},Ye=function(e){if(!je(e)){e=j(e,_),se&&(_e=!0);var t=(1===e.deltaMode?m:2===e.deltaMode?s.innerHeight:1)*q;Ie(e.deltaX*t,e.deltaY*t,0),b&&!ne&&me.restart(!0)}},Xe=function(e){if(!je(e)){var t=e.clientX,r=e.clientY,n=t-xe.x,i=r-xe.y;xe.x=t,xe.y=r,ye=!0,(n||i)&&Fe(n,i)}},Ge=function(e){xe.event=e,Q(xe)},$e=function(e){xe.event=e,ee(xe)},Ke=function(e){return je(e)||j(e,_)&&ce(xe)};me=xe._dc=i.delayedCall(x||.25,(function(){xe._vx.reset(),xe._vy.reset(),me.pause(),b&&b(xe)})).pause(),xe.deltaX=xe.deltaY=0,xe._vx=R(0,50,!0),xe._vy=R(0,50,!0),xe.scrollX=ke,xe.scrollY=Se,xe.isDragging=xe.isGesturing=xe.isPressed=!1,xe.enable=function(e){return xe.isEnabled||(k(Oe?Le:p,"scroll",C),n.indexOf("scroll")>=0&&k(Oe?Le:p,"scroll",We,_,he),n.indexOf("wheel")>=0&&k(p,"wheel",Ye,_,he),(n.indexOf("touch")>=0&&u||n.indexOf("pointer")>=0)&&(k(p,g[0],ze,_,he),k(Le,g[2],Ue),k(Le,g[3],Ue),de&&k(p,"click",Re,!1,!0),ce&&k(p,"click",Ke),ie&&k(Le,"gesturestart",He),oe&&k(Le,"gestureend",Ve),Q&&k(p,h+"enter",Ge),ee&&k(p,h+"leave",$e),te&&k(p,h+"move",Xe)),xe.isEnabled=!0,e&&e.type&&ze(e),ae&&ae(xe)),xe},xe.disable=function(){xe.isEnabled&&(y.filter((function(e){return e!==xe&&E(e.target)})).length||S(Oe?Le:p,"scroll",C),xe.isPressed&&(xe._vx.reset(),xe._vy.reset(),S(ne?p:Le,g[1],Be,!0)),S(Oe?Le:p,"scroll",We,he),S(p,"wheel",Ye,he),S(p,g[0],ze,he),S(Le,g[2],Ue),S(Le,g[3],Ue),S(p,"click",Re,!0),S(p,"click",Ke),S(Le,"gesturestart",He),S(Le,"gestureend",Ve),S(p,h+"enter",Ge),S(p,h+"leave",$e),S(p,h+"move",Xe),xe.isEnabled=xe.isPressed=xe.isDragging=!1,le&&le(xe))},xe.kill=function(){xe.disable();var e=y.indexOf(xe);e>=0&&y.splice(e,1),f===xe&&(f=0)},y.push(xe),ne&&E(p)&&(f=xe),xe.enable(A)},t=e,(r=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&n(t.prototype,r),p&&n(t,p),e}();B.version="3.11.3",B.create=function(e){return new B(e)},B.register=F,B.getAll=function(){return y.slice()},B.getById=function(e){return y.filter((function(t){return t.vars.id===e}))[0]},m()&&i.registerPlugin(B)},"./node_modules/gsap/ScrollTrigger.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ScrollTrigger:()=>at,default:()=>at});var n,i,o,s,a,l,c,u,h,d,p,f,g,m,v,y,_,b,w,x,T,E,k,S,q,A,C,O,L,D,P,M,R,j,N=r("./node_modules/gsap/Observer.js"),I=1,F=Date.now,B=F(),z=0,U=0,H=function(){return m=1},V=function(){return m=0},W=function(e){return e},Y=function(e){return Math.round(1e5*e)/1e5||0},X=function(){return"undefined"!=typeof window},G=function(){return n||X()&&(n=window.gsap)&&n.registerPlugin&&n},$=function(e){return!!~c.indexOf(e)},K=function(e){return(0,N._getProxyProp)(e,"getBoundingClientRect")||($(e)?function(){return rt.width=o.innerWidth,rt.height=o.innerHeight,rt}:function(){return ve(e)})},Z=function(e,t){var r=t.s,n=t.d2,i=t.d,s=t.a;return(r="scroll"+n)&&(s=(0,N._getProxyProp)(e,r))?s()-K(e)()[i]:$(e)?(a[r]||l[r])-(o["inner"+n]||a["client"+n]||l["client"+n]):e[r]-e["offset"+n]},J=function(e,t){for(var r=0;r<w.length;r+=3)(!t||~t.indexOf(w[r+1]))&&e(w[r],w[r+1],w[r+2])},Q=function(e){return"string"==typeof e},ee=function(e){return"function"==typeof e},te=function(e){return"number"==typeof e},re=function(e){return"object"==typeof e},ne=function(e,t,r){return e&&e.progress(t?0:1)&&r&&e.pause()},ie=function(e,t){if(e.enabled){var r=t(e);r&&r.totalTime&&(e.callbackAnimation=r)}},oe=Math.abs,se="left",ae="right",le="bottom",ce="width",ue="height",he="padding",de="margin",pe="Width",fe="px",ge=function(e){return o.getComputedStyle(e)},me=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},ve=function(e,t){var r=t&&"matrix(1, 0, 0, 1, 0, 0)"!==ge(e)[v]&&n.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),i=e.getBoundingClientRect();return r&&r.progress(0).kill(),i},ye=function(e,t){var r=t.d2;return e["offset"+r]||e["client"+r]||0},_e=function(e){var t,r=[],n=e.labels,i=e.duration();for(t in n)r.push(n[t]/i);return r},be=function(e){var t=n.utils.snap(e),r=Array.isArray(e)&&e.slice(0).sort((function(e,t){return e-t}));return r?function(e,n,i){var o;if(void 0===i&&(i=.001),!n)return t(e);if(n>0){for(e-=i,o=0;o<r.length;o++)if(r[o]>=e)return r[o];return r[o-1]}for(o=r.length,e+=i;o--;)if(r[o]<=e)return r[o];return r[0]}:function(r,n,i){void 0===i&&(i=.001);var o=t(r);return!n||Math.abs(o-r)<i||o-r<0==n<0?o:t(n<0?r-e:r+e)}},we=function(e,t,r,n){return r.split(",").forEach((function(r){return e(t,r,n)}))},xe=function(e,t,r,n,i){return e.addEventListener(t,r,{passive:!n,capture:!!i})},Te=function(e,t,r,n){return e.removeEventListener(t,r,!!n)},Ee=function(e,t,r){return r&&r.wheelHandler&&e(t,"wheel",r)},ke={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Se={toggleActions:"play",anticipatePin:0},qe={top:0,left:0,center:.5,bottom:1,right:1},Ae=function(e,t){if(Q(e)){var r=e.indexOf("="),n=~r?+(e.charAt(r-1)+1)*parseFloat(e.substr(r+1)):0;~r&&(e.indexOf("%")>r&&(n*=t/100),e=e.substr(0,r-1)),e=n+(e in qe?qe[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)}return e},Ce=function(e,t,r,n,i,o,a,c){var u=i.startColor,h=i.endColor,d=i.fontSize,p=i.indent,f=i.fontWeight,g=s.createElement("div"),m=$(r)||"fixed"===(0,N._getProxyProp)(r,"pinType"),v=-1!==e.indexOf("scroller"),y=m?l:r,_=-1!==e.indexOf("start"),b=_?u:h,w="border-color:"+b+";font-size:"+d+";color:"+b+";font-weight:"+f+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return w+="position:"+((v||c)&&m?"fixed;":"absolute;"),(v||c||!m)&&(w+=(n===N._vertical?ae:le)+":"+(o+parseFloat(p))+"px;"),a&&(w+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),g._isStart=_,g.setAttribute("class","gsap-marker-"+e+(t?" marker-"+t:"")),g.style.cssText=w,g.innerText=t||0===t?e+"-"+t:e,y.children[0]?y.insertBefore(g,y.children[0]):y.appendChild(g),g._offset=g["offset"+n.op.d2],Oe(g,0,n,_),g},Oe=function(e,t,r,i){var o={display:"block"},s=r[i?"os2":"p2"],a=r[i?"p2":"os2"];e._isFlipped=i,o[r.a+"Percent"]=i?-100:0,o[r.a]=i?"1px":0,o["border"+s+pe]=1,o["border"+a+pe]=0,o[r.p]=t+"px",n.set(e,o)},Le=[],De={},Pe=function(){return F()-z>34&&(P||(P=requestAnimationFrame($e)))},Me=function(){(!k||!k.isPressed||k.startX>l.clientWidth)&&(N._scrollers.cache++,k?P||(P=requestAnimationFrame($e)):$e(),z||Be("scrollStart"),z=F())},Re=function(){A=o.innerWidth,q=o.innerHeight},je=function(){N._scrollers.cache++,!g&&!E&&!s.fullscreenElement&&!s.webkitFullscreenElement&&(!S||A!==o.innerWidth||Math.abs(o.innerHeight-q)>.25*o.innerHeight)&&u.restart(!0)},Ne={},Ie=[],Fe=function e(){return Te(at,"scrollEnd",e)||Ye(!0)},Be=function(e){return Ne[e]&&Ne[e].map((function(e){return e()}))||Ie},ze=[],Ue=function(e){for(var t=0;t<ze.length;t+=5)(!e||ze[t+4]&&ze[t+4].query===e)&&(ze[t].style.cssText=ze[t+1],ze[t].getBBox&&ze[t].setAttribute("transform",ze[t+2]||""),ze[t+3].uncache=1)},He=function(e,t){var r;for(y=0;y<Le.length;y++)!(r=Le[y])||t&&r._ctx!==t||(e?r.kill(1):r.revert(!0,!0));t&&Ue(t),t||Be("revert")},Ve=function(e,t){N._scrollers.cache++,(t||!M)&&N._scrollers.forEach((function(e){return ee(e)&&e.cacheID++&&(e.rec=0)})),Q(e)&&(o.history.scrollRestoration=L=e)},We=0,Ye=function(e,t){if(!z||e){M=at.isRefreshing=!0,N._scrollers.forEach((function(e){return ee(e)&&e.cacheID++&&(e.rec=e())}));var r=Be("refreshInit");x&&at.sort(),t||He(),N._scrollers.forEach((function(e){ee(e)&&(e.smooth&&(e.target.style.scrollBehavior="auto"),e(0))})),Le.slice(0).forEach((function(e){return e.refresh()})),Le.forEach((function(e,t){if(e._subPinOffset&&e.pin){var r=e.vars.horizontal?"offsetWidth":"offsetHeight",n=e.pin[r];e.revert(!0,1),e.adjustPinSpacing(e.pin[r]-n),e.revert(!1,1)}})),Le.forEach((function(e){return"max"===e.vars.end&&e.setPositions(e.start,Math.max(e.start+1,Z(e.scroller,e._dir)))})),r.forEach((function(e){return e&&e.render&&e.render(-1)})),N._scrollers.forEach((function(e){ee(e)&&(e.smooth&&requestAnimationFrame((function(){return e.target.style.scrollBehavior="smooth"})),e.rec&&e(e.rec))})),Ve(L,1),u.pause(),We++,$e(2),Le.forEach((function(e){return ee(e.vars.onRefresh)&&e.vars.onRefresh(e)})),M=at.isRefreshing=!1,Be("refresh")}else xe(at,"scrollEnd",Fe)},Xe=0,Ge=1,$e=function(e){if(!M||2===e){at.isUpdating=!0,j&&j.update(0);var t=Le.length,r=F(),n=r-B>=50,i=t&&Le[0].scroll();if(Ge=Xe>i?-1:1,Xe=i,n&&(z&&!m&&r-z>200&&(z=0,Be("scrollEnd")),p=B,B=r),Ge<0){for(y=t;y-- >0;)Le[y]&&Le[y].update(0,n);Ge=1}else for(y=0;y<t;y++)Le[y]&&Le[y].update(0,n);at.isUpdating=!1}P=0},Ke=[se,"top",le,ae,"marginBottom","marginRight","marginTop","marginLeft","display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Ze=Ke.concat([ce,ue,"boxSizing","maxWidth","maxHeight","position",de,he,"paddingTop","paddingRight","paddingBottom","paddingLeft"]),Je=function(e,t,r,n){if(!e._gsap.swappedIn){for(var i,o=Ke.length,s=t.style,a=e.style;o--;)s[i=Ke[o]]=r[i];s.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(s.display="inline-block"),a.bottom=a.right="auto",s.flexBasis=r.flexBasis||"auto",s.overflow="visible",s.boxSizing="border-box",s.width=ye(e,N._horizontal)+fe,s.height=ye(e,N._vertical)+fe,s.padding=a.margin=a.top=a.left="0",et(n),a.width=a.maxWidth=r.width,a.height=a.maxHeight=r.height,a.padding=r.padding,e.parentNode!==t&&(e.parentNode.insertBefore(t,e),t.appendChild(e)),e._gsap.swappedIn=!0}},Qe=/([A-Z])/g,et=function(e){if(e){var t,r,i=e.t.style,o=e.length,s=0;for((e.t._gsap||n.core.getCache(e.t)).uncache=1;s<o;s+=2)r=e[s+1],t=e[s],r?i[t]=r:i[t]&&i.removeProperty(t.replace(Qe,"-$1").toLowerCase())}},tt=function(e){for(var t=Ze.length,r=e.style,n=[],i=0;i<t;i++)n.push(Ze[i],r[Ze[i]]);return n.t=e,n},rt={left:0,top:0},nt=function(e,t,r,n,i,o,s,c,u,h,d,p,f){ee(e)&&(e=e(c)),Q(e)&&"max"===e.substr(0,3)&&(e=p+("="===e.charAt(4)?Ae("0"+e.substr(3),r):0));var g,m,v,y=f?f.time():0;if(f&&f.seek(0),te(e))s&&Oe(s,r,n,!0);else{ee(t)&&(t=t(c));var _,b,w,x,T=(e||"0").split(" ");v=(0,N._getTarget)(t)||l,(_=ve(v)||{})&&(_.left||_.top)||"none"!==ge(v).display||(x=v.style.display,v.style.display="block",_=ve(v),x?v.style.display=x:v.style.removeProperty("display")),b=Ae(T[0],_[n.d]),w=Ae(T[1]||"0",r),e=_[n.p]-u[n.p]-h+b+i-w,s&&Oe(s,w,n,r-w<20||s._isStart&&w>20),r-=r-w}if(o){var E=e+r,k=o._isStart;g="scroll"+n.d2,Oe(o,E,n,k&&E>20||!k&&(d?Math.max(l[g],a[g]):o.parentNode[g])<=E+1),d&&(u=ve(s),d&&(o.style[n.op.p]=u[n.op.p]-n.op.m-o._offset+fe))}return f&&v&&(g=ve(v),f.seek(p),m=ve(v),f._caScrollDist=g[n.p]-m[n.p],e=e/f._caScrollDist*p),f&&f.seek(y),f?e:Math.round(e)},it=/(webkit|moz|length|cssText|inset)/i,ot=function(e,t,r,i){if(e.parentNode!==t){var o,s,a=e.style;if(t===l){for(o in e._stOrig=a.cssText,s=ge(e))+o||it.test(o)||!s[o]||"string"!=typeof a[o]||"0"===o||(a[o]=s[o]);a.top=r,a.left=i}else a.cssText=e._stOrig;n.core.getCache(e).uncache=1,t.appendChild(e)}},st=function(e,t){var r,i,o=(0,N._getScrollFunc)(e,t),s="_scroll"+t.p2,a=function t(a,l,c,u,h){var d=t.tween,p=l.onComplete,f={};return c=c||o(),h=u&&h||0,u=u||a-c,d&&d.kill(),r=Math.round(c),l[s]=a,l.modifiers=f,f[s]=function(e){return(e=Math.round(o()))!==r&&e!==i&&Math.abs(e-r)>3&&Math.abs(e-i)>3?(d.kill(),t.tween=0):e=c+u*d.ratio+h*d.ratio*d.ratio,i=r,r=Math.round(e)},l.onComplete=function(){t.tween=0,p&&p.call(d)},d=t.tween=n.to(e,l)};return e[s]=o,o.wheelHandler=function(){return a.tween&&a.tween.kill()&&(a.tween=0)},xe(e,"wheel",o.wheelHandler),a},at=function(){function e(t,r){i||e.register(n)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(t,r)}return e.prototype.init=function(t,r){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),U){var i,c,u,f,v,_,b,w,E,k,S,q,A,C,L,P,B,H,V,X,G,J,se,ae,le,ce,ue,we,Ee,qe,Oe,Pe,Re,Ne,Ie,Be,ze,Ue,He,Ve,Xe,$e=t=me(Q(t)||te(t)||t.nodeType?{trigger:t}:t,Se),Ke=$e.onUpdate,Ze=$e.toggleClass,Qe=$e.id,it=$e.onToggle,at=$e.onRefresh,lt=$e.scrub,ct=$e.trigger,ut=$e.pin,ht=$e.pinSpacing,dt=$e.invalidateOnRefresh,pt=$e.anticipatePin,ft=$e.onScrubComplete,gt=$e.onSnapComplete,mt=$e.once,vt=$e.snap,yt=$e.pinReparent,_t=$e.pinSpacer,bt=$e.containerAnimation,wt=$e.fastScrollEnd,xt=$e.preventOverlaps,Tt=t.horizontal||t.containerAnimation&&!1!==t.horizontal?N._horizontal:N._vertical,Et=!lt&&0!==lt,kt=(0,N._getTarget)(t.scroller||o),St=n.core.getCache(kt),qt=$(kt),At="fixed"===("pinType"in t?t.pinType:(0,N._getProxyProp)(kt,"pinType")||qt&&"fixed"),Ct=[t.onEnter,t.onLeave,t.onEnterBack,t.onLeaveBack],Ot=Et&&t.toggleActions.split(" "),Lt="markers"in t?t.markers:Se.markers,Dt=qt?0:parseFloat(ge(kt)["border"+Tt.p2+pe])||0,Pt=this,Mt=t.onRefreshInit&&function(){return t.onRefreshInit(Pt)},Rt=function(e,t,r){var n=r.d,i=r.d2,s=r.a;return(s=(0,N._getProxyProp)(e,"getBoundingClientRect"))?function(){return s()[n]}:function(){return(t?o["inner"+i]:e["client"+i])||0}}(kt,qt,Tt),jt=function(e,t){return!t||~N._proxies.indexOf(e)?K(e):function(){return rt}}(kt,qt),Nt=0,It=0,Ft=(0,N._getScrollFunc)(kt,Tt);if(O(Pt),Pt._dir=Tt,pt*=45,Pt.scroller=kt,Pt.scroll=bt?bt.time.bind(bt):Ft,f=Ft(),Pt.vars=t,r=r||t.animation,"refreshPriority"in t&&(x=1,-9999===t.refreshPriority&&(j=Pt)),St.tweenScroll=St.tweenScroll||{top:st(kt,N._vertical),left:st(kt,N._horizontal)},Pt.tweenTo=i=St.tweenScroll[Tt.p],Pt.scrubDuration=function(e){(Oe=te(e)&&e)?qe?qe.duration(e):qe=n.to(r,{ease:"expo",totalProgress:"+=0.001",duration:Oe,paused:!0,onComplete:function(){return ft&&ft(Pt)}}):(qe&&qe.progress(1).kill(),qe=0)},r&&(r.vars.lazy=!1,r._initted||!1!==r.vars.immediateRender&&!1!==t.immediateRender&&r.duration()&&r.render(0,!0,!0),Pt.animation=r.pause(),r.scrollTrigger=Pt,Pt.scrubDuration(lt),we=0,Qe||(Qe=r.vars.id)),Le.push(Pt),vt&&(re(vt)&&!vt.push||(vt={snapTo:vt}),"scrollBehavior"in l.style&&n.set(qt?[l,a]:kt,{scrollBehavior:"auto"}),N._scrollers.forEach((function(e){return ee(e)&&e.target===(qt?s.scrollingElement||a:kt)&&(e.smooth=!1)})),u=ee(vt.snapTo)?vt.snapTo:"labels"===vt.snapTo?function(e){return function(t){return n.utils.snap(_e(e),t)}}(r):"labelsDirectional"===vt.snapTo?(He=r,function(e,t){return be(_e(He))(e,t.direction)}):!1!==vt.directional?function(e,t){return be(vt.snapTo)(e,F()-It<500?0:t.direction)}:n.utils.snap(vt.snapTo),Pe=vt.duration||{min:.1,max:2},Pe=re(Pe)?d(Pe.min,Pe.max):d(Pe,Pe),Re=n.delayedCall(vt.delay||Oe/2||.1,(function(){var e=Ft(),t=F()-It<500,o=i.tween;if(!(t||Math.abs(Pt.getVelocity())<10)||o||m||Nt===e)Pt.isActive&&Nt!==e&&Re.restart(!0);else{var s=(e-_)/A,a=r&&!Et?r.totalProgress():s,l=t?0:(a-Ee)/(F()-p)*1e3||0,c=n.utils.clamp(-s,1-s,oe(l/2)*l/.185),h=s+(!1===vt.inertia?0:c),f=d(0,1,u(h,Pt)),g=Math.round(_+f*A),v=vt,y=v.onStart,w=v.onInterrupt,x=v.onComplete;if(e<=b&&e>=_&&g!==e){if(o&&!o._initted&&o.data<=oe(g-e))return;!1===vt.inertia&&(c=f-s),i(g,{duration:Pe(oe(.185*Math.max(oe(h-a),oe(f-a))/l/.05||0)),ease:vt.ease||"power3",data:oe(g-e),onInterrupt:function(){return Re.restart(!0)&&w&&w(Pt)},onComplete:function(){Pt.update(),Nt=Ft(),we=Ee=r&&!Et?r.totalProgress():Pt.progress,gt&&gt(Pt),x&&x(Pt)}},e,c*A,g-e-c*A),y&&y(Pt,i.tween)}}})).pause()),Qe&&(De[Qe]=Pt),(Ue=(ct=Pt.trigger=(0,N._getTarget)(ct||ut))&&ct._gsap&&ct._gsap.stRevert)&&(Ue=Ue(Pt)),ut=!0===ut?ct:(0,N._getTarget)(ut),Q(Ze)&&(Ze={targets:ct,className:Ze}),ut&&(!1===ht||ht===de||(ht=!(!ht&&ut.parentNode&&ut.parentNode.style&&"flex"===ge(ut.parentNode).display)&&he),Pt.pin=ut,(c=n.core.getCache(ut)).spacer?C=c.pinState:(_t&&((_t=(0,N._getTarget)(_t))&&!_t.nodeType&&(_t=_t.current||_t.nativeElement),c.spacerIsNative=!!_t,_t&&(c.spacerState=tt(_t))),c.spacer=B=_t||s.createElement("div"),B.classList.add("pin-spacer"),Qe&&B.classList.add("pin-spacer-"+Qe),c.pinState=C=tt(ut)),!1!==t.force3D&&n.set(ut,{force3D:!0}),Pt.spacer=B=c.spacer,ue=ge(ut),se=ue[ht+Tt.os2],V=n.getProperty(ut),X=n.quickSetter(ut,Tt.a,fe),Je(ut,B,ue),P=tt(ut)),Lt){q=re(Lt)?me(Lt,ke):ke,k=Ce("scroller-start",Qe,kt,Tt,q,0),S=Ce("scroller-end",Qe,kt,Tt,q,0,k),H=k["offset"+Tt.op.d2];var Bt=(0,N._getTarget)((0,N._getProxyProp)(kt,"content")||kt);w=this.markerStart=Ce("start",Qe,Bt,Tt,q,H,0,bt),E=this.markerEnd=Ce("end",Qe,Bt,Tt,q,H,0,bt),bt&&(ze=n.quickSetter([w,E],Tt.a,fe)),At||N._proxies.length&&!0===(0,N._getProxyProp)(kt,"fixedMarkers")||(Xe=ge(Ve=qt?l:kt).position,Ve.style.position="absolute"===Xe||"fixed"===Xe?Xe:"relative",n.set([k,S],{force3D:!0}),le=n.quickSetter(k,Tt.a,fe),ce=n.quickSetter(S,Tt.a,fe))}if(bt){var zt=bt.vars.onUpdate,Ut=bt.vars.onUpdateParams;bt.eventCallback("onUpdate",(function(){Pt.update(0,0,1),zt&&zt.apply(Ut||[])}))}Pt.previous=function(){return Le[Le.indexOf(Pt)-1]},Pt.next=function(){return Le[Le.indexOf(Pt)+1]},Pt.revert=function(e,t){if(!t)return Pt.kill(!0);var n=!1!==e||!Pt.enabled,i=g;n!==Pt.isReverted&&(n&&(Ie=Math.max(Ft(),Pt.scroll.rec||0),Ne=Pt.progress,Be=r&&r.progress()),w&&[w,E,k,S].forEach((function(e){return e.style.display=n?"none":"block"})),n&&(g=1,Pt.update(n)),ut&&(n?function(e,t,r){et(r);var n=e._gsap;if(n.spacerIsNative)et(n.spacerState);else if(e._gsap.swappedIn){var i=t.parentNode;i&&(i.insertBefore(e,t),i.removeChild(t))}e._gsap.swappedIn=!1}(ut,B,C):(!yt||!Pt.isActive)&&Je(ut,B,ge(ut),ae)),n||Pt.update(n),g=i,Pt.isReverted=n)},Pt.refresh=function(o,s){if(!g&&Pt.enabled||s)if(ut&&o&&z)xe(e,"scrollEnd",Fe);else{!M&&Mt&&Mt(Pt),g=1,It=F(),i.tween&&(i.tween.kill(),i.tween=0),qe&&qe.pause(),dt&&r&&r.revert({kill:!1}).invalidate(),Pt.isReverted||Pt.revert(!0,!0),Pt._subPinOffset=!1;for(var a,c,u,h,d,p,m,y,x,q,O=Rt(),D=jt(),R=bt?bt.duration():Z(kt,Tt),j=0,I=0,U=t.end,H=t.endTrigger||ct,W=t.start||(0!==t.start&&ct?ut?"0 0":"0 100%":0),Y=Pt.pinnedContainer=t.pinnedContainer&&(0,N._getTarget)(t.pinnedContainer),X=ct&&Math.max(0,Le.indexOf(Pt))||0,$=X;$--;)(p=Le[$]).end||p.refresh(0,1)||(g=1),!(m=p.pin)||m!==ct&&m!==ut||p.isReverted||(q||(q=[]),q.unshift(p),p.revert(!0,!0)),p!==Le[$]&&(X--,$--);for(ee(W)&&(W=W(Pt)),_=nt(W,ct,O,Tt,Ft(),w,k,Pt,D,Dt,At,R,bt)||(ut?-.001:0),ee(U)&&(U=U(Pt)),Q(U)&&!U.indexOf("+=")&&(~U.indexOf(" ")?U=(Q(W)?W.split(" ")[0]:"")+U:(j=Ae(U.substr(2),O),U=Q(W)?W:_+j,H=ct)),b=Math.max(_,nt(U||(H?"100% 0":R),H,O,Tt,Ft()+j,E,S,Pt,D,Dt,At,R,bt))||-.001,A=b-_||(_-=.01)&&.001,j=0,$=X;$--;)(m=(p=Le[$]).pin)&&p.start-p._pinPush<=_&&!bt&&p.end>0&&(a=p.end-p.start,(m===ct&&p.start-p._pinPush<_||m===Y)&&!te(W)&&(j+=a*(1-p.progress)),m===ut&&(I+=a));if(_+=j,b+=j,Pt._pinPush=I,w&&j&&((a={})[Tt.a]="+="+j,Y&&(a[Tt.p]="-="+Ft()),n.set([w,E],a)),ut)a=ge(ut),h=Tt===N._vertical,u=Ft(),G=parseFloat(V(Tt.a))+I,!R&&b>1&&((qt?l:kt).style["overflow-"+Tt.a]="scroll"),Je(ut,B,a),P=tt(ut),c=ve(ut,!0),y=At&&(0,N._getScrollFunc)(kt,h?N._horizontal:N._vertical)(),ht&&((ae=[ht+Tt.os2,A+I+fe]).t=B,($=ht===he?ye(ut,Tt)+A+I:0)&&ae.push(Tt.d,$+fe),et(ae),Y&&Le.forEach((function(e){e.pin===Y&&!1!==e.vars.pinSpacing&&(e._subPinOffset=!0)})),At&&Ft(Ie)),At&&((d={top:c.top+(h?u-_:y)+fe,left:c.left+(h?y:u-_)+fe,boxSizing:"border-box",position:"fixed"}).width=d.maxWidth=Math.ceil(c.width)+fe,d.height=d.maxHeight=Math.ceil(c.height)+fe,d.margin=d.marginTop=d.marginRight=d.marginBottom=d.marginLeft="0",d.padding=a.padding,d.paddingTop=a.paddingTop,d.paddingRight=a.paddingRight,d.paddingBottom=a.paddingBottom,d.paddingLeft=a.paddingLeft,L=function(e,t,r){for(var n,i=[],o=e.length,s=r?8:0;s<o;s+=2)n=e[s],i.push(n,n in t?t[n]:e[s+1]);return i.t=e.t,i}(C,d,yt),M&&Ft(0)),r?(x=r._initted,T(1),r.render(r.duration(),!0,!0),J=V(Tt.a)-G+A+I,A!==J&&At&&L.splice(L.length-2,2),r.render(0,!0,!0),x||r.invalidate(!0),r.parent||r.totalTime(r.totalTime()),T(0)):J=A;else if(ct&&Ft()&&!bt)for(c=ct.parentNode;c&&c!==l;)c._pinOffset&&(_-=c._pinOffset,b-=c._pinOffset),c=c.parentNode;q&&q.forEach((function(e){return e.revert(!1,!0)})),Pt.start=_,Pt.end=b,f=v=M?Ie:Ft(),bt||M||(f<Ie&&Ft(Ie),Pt.scroll.rec=0),Pt.revert(!1,!0),Re&&(Nt=-1,Pt.isActive&&Ft(_+A*Ne),Re.restart(!0)),g=0,r&&Et&&(r._initted||Be)&&r.progress()!==Be&&r.progress(Be,!0).render(r.time(),!0,!0),(Ne!==Pt.progress||bt)&&(r&&!Et&&r.totalProgress(Ne,!0),Pt.progress=(f-_)/A===Ne?0:Ne),ut&&ht&&(B._pinOffset=Math.round(Pt.progress*J)),at&&!M&&at(Pt)}},Pt.getVelocity=function(){return(Ft()-v)/(F()-p)*1e3||0},Pt.endAnimation=function(){ne(Pt.callbackAnimation),r&&(qe?qe.progress(1):r.paused()?Et||ne(r,Pt.direction<0,1):ne(r,r.reversed()))},Pt.labelToScroll=function(e){return r&&r.labels&&(_||Pt.refresh()||_)+r.labels[e]/r.duration()*A||0},Pt.getTrailing=function(e){var t=Le.indexOf(Pt),r=Pt.direction>0?Le.slice(0,t).reverse():Le.slice(t+1);return(Q(e)?r.filter((function(t){return t.vars.preventOverlaps===e})):r).filter((function(e){return Pt.direction>0?e.end<=_:e.start>=b}))},Pt.update=function(e,t,n){if(!bt||n||e){var o,s,a,c,u,d,m,y=M?Ie:Pt.scroll(),w=e?0:(y-_)/A,x=w<0?0:w>1?1:w||0,T=Pt.progress;if(t&&(v=f,f=bt?Ft():y,vt&&(Ee=we,we=r&&!Et?r.totalProgress():x)),pt&&!x&&ut&&!g&&!I&&z&&_<y+(y-v)/(F()-p)*pt&&(x=1e-4),x!==T&&Pt.enabled){if(c=(u=(o=Pt.isActive=!!x&&x<1)!==(!!T&&T<1))||!!x!=!!T,Pt.direction=x>T?1:-1,Pt.progress=x,c&&!g&&(s=x&&!T?0:1===x?1:1===T?2:3,Et&&(a=!u&&"none"!==Ot[s+1]&&Ot[s+1]||Ot[s],m=r&&("complete"===a||"reset"===a||a in r))),xt&&(u||m)&&(m||lt||!r)&&(ee(xt)?xt(Pt):Pt.getTrailing(xt).forEach((function(e){return e.endAnimation()}))),Et||(!qe||g||I?r&&r.totalProgress(x,!!g):((bt||j&&j!==Pt)&&qe.render(qe._dp._time-qe._start),qe.resetTo?qe.resetTo("totalProgress",x,r._tTime/r._tDur):(qe.vars.totalProgress=x,qe.invalidate().restart()))),ut)if(e&&ht&&(B.style[ht+Tt.os2]=se),At){if(c){if(d=!e&&x>T&&b+1>y&&y+1>=Z(kt,Tt),yt)if(e||!o&&!d)ot(ut,B);else{var E=ve(ut,!0),S=y-_;ot(ut,l,E.top+(Tt===N._vertical?S:0)+fe,E.left+(Tt===N._vertical?0:S)+fe)}et(o||d?L:P),J!==A&&x<1&&o||X(G+(1!==x||d?0:J))}}else X(Y(G+J*x));vt&&!i.tween&&!g&&!I&&Re.restart(!0),Ze&&(u||mt&&x&&(x<1||!D))&&h(Ze.targets).forEach((function(e){return e.classList[o||mt?"add":"remove"](Ze.className)})),Ke&&!Et&&!e&&Ke(Pt),c&&!g?(Et&&(m&&("complete"===a?r.pause().totalProgress(1):"reset"===a?r.restart(!0).pause():"restart"===a?r.restart(!0):r[a]()),Ke&&Ke(Pt)),!u&&D||(it&&u&&ie(Pt,it),Ct[s]&&ie(Pt,Ct[s]),mt&&(1===x?Pt.kill(!1,1):Ct[s]=0),u||Ct[s=1===x?1:3]&&ie(Pt,Ct[s])),wt&&!o&&Math.abs(Pt.getVelocity())>(te(wt)?wt:2500)&&(ne(Pt.callbackAnimation),qe?qe.progress(1):ne(r,"reverse"===a?1:!x,1))):Et&&Ke&&!g&&Ke(Pt)}if(ce){var q=bt?y/bt.duration()*(bt._caScrollDist||0):y;le(q+(k._isFlipped?1:0)),ce(q)}ze&&ze(-y/bt.duration()*(bt._caScrollDist||0))}},Pt.enable=function(t,r){Pt.enabled||(Pt.enabled=!0,xe(kt,"resize",je),xe(qt?s:kt,"scroll",Me),Mt&&xe(e,"refreshInit",Mt),!1!==t&&(Pt.progress=Ne=0,f=v=Nt=Ft()),!1!==r&&Pt.refresh())},Pt.getTween=function(e){return e&&i?i.tween:qe},Pt.setPositions=function(e,t){ut&&(G+=e-_,J+=t-e-A,ht===he&&Pt.adjustPinSpacing(t-e-A)),Pt.start=_=e,Pt.end=b=t,A=t-e,Pt.update()},Pt.adjustPinSpacing=function(e){if(ae){var t=ae.indexOf(Tt.d)+1;ae[t]=parseFloat(ae[t])+e+fe,ae[1]=parseFloat(ae[1])+e+fe,et(ae)}},Pt.disable=function(t,r){if(Pt.enabled&&(!1!==t&&Pt.revert(!0,!0),Pt.enabled=Pt.isActive=!1,r||qe&&qe.pause(),Ie=0,c&&(c.uncache=1),Mt&&Te(e,"refreshInit",Mt),Re&&(Re.pause(),i.tween&&i.tween.kill()&&(i.tween=0)),!qt)){for(var n=Le.length;n--;)if(Le[n].scroller===kt&&Le[n]!==Pt)return;Te(kt,"resize",je),Te(kt,"scroll",Me)}},Pt.kill=function(e,n){Pt.disable(e,n),qe&&!n&&qe.kill(),Qe&&delete De[Qe];var i=Le.indexOf(Pt);i>=0&&Le.splice(i,1),i===y&&Ge>0&&y--,i=0,Le.forEach((function(e){return e.scroller===Pt.scroller&&(i=1)})),i||M||(Pt.scroll.rec=0),r&&(r.scrollTrigger=null,e&&r.revert({kill:!1}),n||r.kill()),w&&[w,E,k,S].forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),j===Pt&&(j=0),ut&&(c&&(c.uncache=1),i=0,Le.forEach((function(e){return e.pin===ut&&i++})),i||(c.spacer=0)),t.onKill&&t.onKill(Pt)},Pt.enable(!1,!1),Ue&&Ue(Pt),r&&r.add&&!A?n.delayedCall(.01,(function(){return _||b||Pt.refresh()}))&&(A=.01)&&(_=b=0):Pt.refresh(),ut&&function(){if(R!==We){var e=R=We;requestAnimationFrame((function(){return e===We&&Ye(!0)}))}}()}else this.update=this.refresh=this.kill=W},e.register=function(t){return i||(n=t||G(),X()&&window.document&&e.enable(),i=U),i},e.defaults=function(e){if(e)for(var t in e)Se[t]=e[t];return Se},e.disable=function(e,t){U=0,Le.forEach((function(r){return r[t?"kill":"disable"](e)})),Te(o,"wheel",Me),Te(s,"scroll",Me),clearInterval(f),Te(s,"touchcancel",W),Te(l,"touchstart",W),we(Te,s,"pointerdown,touchstart,mousedown",H),we(Te,s,"pointerup,touchend,mouseup",V),u.kill(),J(Te);for(var r=0;r<N._scrollers.length;r+=3)Ee(Te,N._scrollers[r],N._scrollers[r+1]),Ee(Te,N._scrollers[r],N._scrollers[r+2])},e.enable=function(){if(o=window,s=document,a=s.documentElement,l=s.body,n&&(h=n.utils.toArray,d=n.utils.clamp,O=n.core.context||W,T=n.core.suppressOverwrites||W,L=o.history.scrollRestoration||"auto",n.core.globals("ScrollTrigger",e),l)){U=1,N.Observer.register(n),e.isTouch=N.Observer.isTouch,C=N.Observer.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),xe(o,"wheel",Me),c=[o,s,a,l],n.matchMedia?(e.matchMedia=function(e){var t,r=n.matchMedia();for(t in e)r.add(t,e[t]);return r},n.addEventListener("matchMediaInit",(function(){return He()})),n.addEventListener("matchMediaRevert",(function(){return Ue()})),n.addEventListener("matchMedia",(function(){Ye(0,1),Be("matchMedia")})),n.matchMedia("(orientation: portrait)",(function(){return Re(),Re}))):console.warn("Requires GSAP 3.11.0 or later"),Re(),xe(s,"scroll",Me);var t,r,p=l.style,g=p.borderTopStyle,m=n.core.Animation.prototype;for(m.revert||Object.defineProperty(m,"revert",{value:function(){return this.time(-.01,!0)}}),p.borderTopStyle="solid",t=ve(l),N._vertical.m=Math.round(t.top+N._vertical.sc())||0,N._horizontal.m=Math.round(t.left+N._horizontal.sc())||0,g?p.borderTopStyle=g:p.removeProperty("border-top-style"),f=setInterval(Pe,250),n.delayedCall(.5,(function(){return I=0})),xe(s,"touchcancel",W),xe(l,"touchstart",W),we(xe,s,"pointerdown,touchstart,mousedown",H),we(xe,s,"pointerup,touchend,mouseup",V),v=n.utils.checkPrefix("transform"),Ze.push(v),i=F(),u=n.delayedCall(.2,Ye).pause(),w=[s,"visibilitychange",function(){var e=o.innerWidth,t=o.innerHeight;s.hidden?(_=e,b=t):_===e&&b===t||je()},s,"DOMContentLoaded",Ye,o,"load",Ye,o,"resize",je],J(xe),Le.forEach((function(e){return e.enable(0,1)})),r=0;r<N._scrollers.length;r+=3)Ee(Te,N._scrollers[r],N._scrollers[r+1]),Ee(Te,N._scrollers[r],N._scrollers[r+2])}},e.config=function(t){"limitCallbacks"in t&&(D=!!t.limitCallbacks);var r=t.syncInterval;r&&clearInterval(f)||(f=r)&&setInterval(Pe,r),"ignoreMobileResize"in t&&(S=1===e.isTouch&&t.ignoreMobileResize),"autoRefreshEvents"in t&&(J(Te)||J(xe,t.autoRefreshEvents||"none"),E=-1===(t.autoRefreshEvents+"").indexOf("resize"))},e.scrollerProxy=function(e,t){var r=(0,N._getTarget)(e),n=N._scrollers.indexOf(r),i=$(r);~n&&N._scrollers.splice(n,i?6:2),t&&(i?N._proxies.unshift(o,t,l,t,a,t):N._proxies.unshift(r,t))},e.clearMatchMedia=function(e){Le.forEach((function(t){return t._ctx&&t._ctx.query===e&&t._ctx.kill(!0,!0)}))},e.isInViewport=function(e,t,r){var n=(Q(e)?(0,N._getTarget)(e):e).getBoundingClientRect(),i=n[r?ce:ue]*t||0;return r?n.right-i>0&&n.left+i<o.innerWidth:n.bottom-i>0&&n.top+i<o.innerHeight},e.positionInViewport=function(e,t,r){Q(e)&&(e=(0,N._getTarget)(e));var n=e.getBoundingClientRect(),i=n[r?ce:ue],s=null==t?i/2:t in qe?qe[t]*i:~t.indexOf("%")?parseFloat(t)*i/100:parseFloat(t)||0;return r?(n.left+s)/o.innerWidth:(n.top+s)/o.innerHeight},e.killAll=function(e){if(Le.forEach((function(e){return"ScrollSmoother"!==e.vars.id&&e.kill()})),!0!==e){var t=Ne.killAll||[];Ne={},t.forEach((function(e){return e()}))}},e}();at.version="3.11.3",at.saveStyles=function(e){return e?h(e).forEach((function(e){if(e&&e.style){var t=ze.indexOf(e);t>=0&&ze.splice(t,5),ze.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),n.core.getCache(e),O())}})):ze},at.revert=function(e,t){return He(!e,t)},at.create=function(e,t){return new at(e,t)},at.refresh=function(e){return e?je():(i||at.register())&&Ye(!0)},at.update=$e,at.clearScrollMemory=Ve,at.maxScroll=function(e,t){return Z(e,t?N._horizontal:N._vertical)},at.getScrollFunc=function(e,t){return(0,N._getScrollFunc)((0,N._getTarget)(e),t?N._horizontal:N._vertical)},at.getById=function(e){return De[e]},at.getAll=function(){return Le.filter((function(e){return"ScrollSmoother"!==e.vars.id}))},at.isScrolling=function(){return!!z},at.snapDirectional=be,at.addEventListener=function(e,t){var r=Ne[e]||(Ne[e]=[]);~r.indexOf(t)||r.push(t)},at.removeEventListener=function(e,t){var r=Ne[e],n=r&&r.indexOf(t);n>=0&&r.splice(n,1)},at.batch=function(e,t){var r,i=[],o={},s=t.interval||.016,a=t.batchMax||1e9,l=function(e,t){var r=[],i=[],o=n.delayedCall(s,(function(){t(r,i),r=[],i=[]})).pause();return function(e){r.length||o.restart(!0),r.push(e.trigger),i.push(e),a<=r.length&&o.progress(1)}};for(r in t)o[r]="on"===r.substr(0,2)&&ee(t[r])&&"onRefreshInit"!==r?l(0,t[r]):t[r];return ee(a)&&(a=a(),xe(at,"refresh",(function(){return a=t.batchMax()}))),h(e).forEach((function(e){var t={};for(r in o)t[r]=o[r];t.trigger=e,i.push(at.create(t))})),i};var lt,ct=function(e,t,r,n){return t>n?e(n):t<0&&e(0),r>n?(n-t)/(r-t):r<0?t/(t-r):1},ut=function e(t,r){!0===r?t.style.removeProperty("touch-action"):t.style.touchAction=!0===r?"auto":r?"pan-"+r+(N.Observer.isTouch?" pinch-zoom":""):"none",t===a&&e(l,r)},ht={auto:1,scroll:1},dt=function(e){var t,r=e.event,i=e.target,o=e.axis,s=(r.changedTouches?r.changedTouches[0]:r).target,a=s._gsap||n.core.getCache(s),l=F();if(!a._isScrollT||l-a._isScrollT>2e3){for(;s&&s.scrollHeight<=s.clientHeight;)s=s.parentNode;a._isScroll=s&&!$(s)&&s!==i&&(ht[(t=ge(s)).overflowY]||ht[t.overflowX]),a._isScrollT=l}(a._isScroll||"x"===o)&&(r.stopPropagation(),r._gsapAllow=!0)},pt=function(e,t,r,n){return N.Observer.create({target:e,capture:!0,debounce:!1,lockAxis:!0,type:t,onWheel:n=n&&dt,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return r&&xe(s,N.Observer.eventTypes[0],gt,!1,!0)},onDisable:function(){return Te(s,N.Observer.eventTypes[0],gt,!0)}})},ft=/(input|label|select|textarea)/i,gt=function(e){var t=ft.test(e.target.tagName);(t||lt)&&(e._gsapAllow=!0,lt=t)},mt=function(e){re(e)||(e={}),e.preventDefault=e.isNormalizer=e.allowClicks=!0,e.type||(e.type="wheel,touch"),e.debounce=!!e.debounce,e.id=e.id||"normalizer";var t,r,i,s,l,c,u,h,p=e,f=p.normalizeScrollX,g=p.momentum,m=p.allowNestedScroll,v=(0,N._getTarget)(e.target)||a,y=n.core.globals().ScrollSmoother,_=y&&y.get(),b=C&&(e.content&&(0,N._getTarget)(e.content)||_&&!1!==e.content&&!_.smooth()&&_.content()),w=(0,N._getScrollFunc)(v,N._vertical),x=(0,N._getScrollFunc)(v,N._horizontal),T=1,E=(N.Observer.isTouch&&o.visualViewport?o.visualViewport.scale*o.visualViewport.width:o.outerWidth)/o.innerWidth,k=0,S=ee(g)?function(){return g(t)}:function(){return g||2.8},q=pt(v,e.type,!0,m),A=function(){return s=!1},O=W,L=W,D=function(){r=Z(v,N._vertical),L=d(C?1:0,r),f&&(O=d(0,Z(v,N._horizontal))),i=We},P=function(){b._gsap.y=Y(parseFloat(b._gsap.y)+w.offset)+"px",b.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(b._gsap.y)+", 0, 1)",w.offset=w.cacheID=0},M=function(){D(),l.isActive()&&l.vars.scrollY>r&&(w()>r?l.progress(1)&&w(r):l.resetTo("scrollY",r))};return b&&n.set(b,{y:"+=0"}),e.ignoreCheck=function(e){return C&&"touchmove"===e.type&&function(){if(s){requestAnimationFrame(A);var e=Y(t.deltaY/2),r=L(w.v-e);if(b&&r!==w.v+w.offset){w.offset=r-w.v;var n=Y((parseFloat(b&&b._gsap.y)||0)-w.offset);b.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+n+", 0, 1)",b._gsap.y=n+"px",w.cacheID=N._scrollers.cache,$e()}return!0}w.offset&&P(),s=!0}()||T>1.05&&"touchstart"!==e.type||t.isGesturing||e.touches&&e.touches.length>1},e.onPress=function(){var e=T;T=Y((o.visualViewport&&o.visualViewport.scale||1)/E),l.pause(),e!==T&&ut(v,T>1.01||!f&&"x"),c=x(),u=w(),D(),i=We},e.onRelease=e.onGestureStart=function(e,t){if(w.offset&&P(),t){N._scrollers.cache++;var i,o,s=S();f&&(o=(i=x())+.05*s*-e.velocityX/.227,s*=ct(x,i,o,Z(v,N._horizontal)),l.vars.scrollX=O(o)),o=(i=w())+.05*s*-e.velocityY/.227,s*=ct(w,i,o,Z(v,N._vertical)),l.vars.scrollY=L(o),l.invalidate().duration(s).play(.01),(C&&l.vars.scrollY>=r||i>=r-1)&&n.to({},{onUpdate:M,duration:s})}else h.restart(!0)},e.onWheel=function(){l._ts&&l.pause(),F()-k>1e3&&(i=0,k=F())},e.onChange=function(e,t,r,n,o){if(We!==i&&D(),t&&f&&x(O(n[2]===t?c+(e.startX-e.x):x()+t-n[1])),r){w.offset&&P();var s=o[2]===r,a=s?u+e.startY-e.y:w()+r-o[1],l=L(a);s&&a!==l&&(u+=l-a),w(l)}(r||t)&&$e()},e.onEnable=function(){ut(v,!f&&"x"),at.addEventListener("refresh",M),xe(o,"resize",M),w.smooth&&(w.target.style.scrollBehavior="auto",w.smooth=x.smooth=!1),q.enable()},e.onDisable=function(){ut(v,!0),Te(o,"resize",M),at.removeEventListener("refresh",M),q.kill()},e.lockAxis=!1!==e.lockAxis,(t=new N.Observer(e)).iOS=C,C&&!w()&&w(1),C&&n.ticker.add(W),h=t._dc,l=n.to(t,{ease:"power4",paused:!0,scrollX:f?"+=0.1":"+=0",scrollY:"+=0.1",onComplete:h.vars.onComplete}),t};at.sort=function(e){return Le.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},at.observe=function(e){return new N.Observer(e)},at.normalizeScroll=function(e){if(void 0===e)return k;if(!0===e&&k)return k.enable();if(!1===e)return k&&k.kill();var t=e instanceof N.Observer?e:mt(e);return k&&k.target===t.target&&k.kill(),$(t.target)&&(k=t),t},at.core={_getVelocityProp:N._getVelocityProp,_inputObserver:pt,_scrollers:N._scrollers,_proxies:N._proxies,bridge:{ss:function(){z||Be("scrollStart"),z=F()},ref:function(){return g}}},G()&&n.registerPlugin(at)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{GSCache:()=>Yt,Animation:()=>Xt,Timeline:()=>Gt,Tween:()=>or,PropTween:()=>_r,gsap:()=>Lr,Power0:()=>Dr,Power1:()=>Pr,Power2:()=>Mr,Power3:()=>Rr,Power4:()=>jr,Linear:()=>Nr,Quad:()=>Ir,Cubic:()=>Fr,Quart:()=>Br,Quint:()=>zr,Strong:()=>Ur,Elastic:()=>Hr,Back:()=>Vr,SteppedEase:()=>Wr,Bounce:()=>Yr,Sine:()=>Xr,Expo:()=>Gr,Circ:()=>$r,TweenMax:()=>or,TweenLite:()=>or,TimelineMax:()=>Gt,TimelineLite:()=>Gt,default:()=>Lr,wrap:()=>gt,wrapYoyo:()=>mt,distribute:()=>at,random:()=>ut,snap:()=>ct,normalize:()=>pt,getUnit:()=>Qe,clamp:()=>et,splitColor:()=>qt,toArray:()=>it,selector:()=>ot,mapRange:()=>yt,pipe:()=>ht,unitize:()=>dt,interpolate:()=>_t,shuffle:()=>st,_getProperty:()=>pe,_numExp:()=>z,_numWithUnitExp:()=>U,_isString:()=>O,_isUndefined:()=>P,_renderComplexString:()=>pr,_relExp:()=>V,_setDefaults:()=>Te,_removeLinkedListItem:()=>Ce,_forEachName:()=>fe,_sortPropTweensByPriority:()=>yr,_colorStringFilter:()=>Dt,_replaceRandom:()=>vt,_checkPlugin:()=>Qt,_plugins:()=>se,_ticker:()=>Pt,_config:()=>b,_roundModifier:()=>lt,_round:()=>ge,_missingPlugin:()=>K,_getSetter:()=>ur,_getCache:()=>de,_colorExp:()=>Ot,_parseRelative:()=>ve});var o,s,a,l,c,u,h,d,p,f,g,m,v,y,_,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},w={duration:.5,overwrite:!1,delay:0},x=1e8,T=1e-8,E=2*Math.PI,k=E/4,S=0,q=Math.sqrt,A=Math.cos,C=Math.sin,O=function(e){return"string"==typeof e},L=function(e){return"function"==typeof e},D=function(e){return"number"==typeof e},P=function(e){return void 0===e},M=function(e){return"object"==typeof e},R=function(e){return!1!==e},j=function(){return"undefined"!=typeof window},N=function(e){return L(e)||O(e)},I="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},F=Array.isArray,B=/(?:-?\.?\d|\.)+/gi,z=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,U=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,H=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,V=/[+-]=-?[.\d]+/,W=/[^,'"\[\]\s]+/gi,Y=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,X={},G={},$=function(e){return(G=Ee(e,X))&&Lr},K=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},Z=function(e,t){return!t&&console.warn(e)},J=function(e,t){return e&&(X[e]=t)&&G&&(G[e]=t)||X},Q=function(){return 0},ee={suppressEvents:!0,isStart:!0,kill:!1},te={suppressEvents:!0,kill:!1},re={suppressEvents:!0},ne={},ie=[],oe={},se={},ae={},le=30,ce=[],ue="",he=function(e){var t,r,n=e[0];if(M(n)||L(n)||(e=[e]),!(t=(n._gsap||{}).harness)){for(r=ce.length;r--&&!ce[r].targetTest(n););t=ce[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Yt(e[r],t)))||e.splice(r,1);return e},de=function(e){return e._gsap||he(it(e))[0]._gsap},pe=function(e,t,r){return(r=e[t])&&L(r)?e[t]():P(r)&&e.getAttribute&&e.getAttribute(t)||r},fe=function(e,t){return(e=e.split(",")).forEach(t)||e},ge=function(e){return Math.round(1e5*e)/1e5||0},me=function(e){return Math.round(1e7*e)/1e7||0},ve=function(e,t){var r=t.charAt(0),n=parseFloat(t.substr(2));return e=parseFloat(e),"+"===r?e+n:"-"===r?e-n:"*"===r?e*n:e/n},ye=function(e,t){for(var r=t.length,n=0;e.indexOf(t[n])<0&&++n<r;);return n<r},_e=function(){var e,t,r=ie.length,n=ie.slice(0);for(oe={},ie.length=0,e=0;e<r;e++)(t=n[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},be=function(e,t,r,n){ie.length&&_e(),e.render(t,r,n||s&&t<0&&(e._initted||e._startAt)),ie.length&&_e()},we=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(W).length<2?t:O(e)?e.trim():e},xe=function(e){return e},Te=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Ee=function(e,t){for(var r in t)e[r]=t[r];return e},ke=function e(t,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(t[n]=M(r[n])?e(t[n]||(t[n]={}),r[n]):r[n]);return t},Se=function(e,t){var r,n={};for(r in e)r in t||(n[r]=e[r]);return n},qe=function(e){var t,r=e.parent||l,n=e.keyframes?(t=F(e.keyframes),function(e,r){for(var n in r)n in e||"duration"===n&&t||"ease"===n||(e[n]=r[n])}):Te;if(R(e.inherit))for(;r;)n(e,r.vars.defaults),r=r.parent||r._dp;return e},Ae=function(e,t,r,n,i){void 0===r&&(r="_first"),void 0===n&&(n="_last");var o,s=e[n];if(i)for(o=t[i];s&&s[i]>o;)s=s._prev;return s?(t._next=s._next,s._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[n]=t,t._prev=s,t.parent=t._dp=e,t},Ce=function(e,t,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i=t._prev,o=t._next;i?i._next=o:e[r]===t&&(e[r]=o),o?o._prev=i:e[n]===t&&(e[n]=i),t._next=t._prev=t.parent=null},Oe=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},Le=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},De=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Pe=function(e,t,r,n){return e._startAt&&(s?e._startAt.revert(te):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,n))},Me=function e(t){return!t||t._ts&&e(t.parent)},Re=function(e){return e._repeat?je(e._tTime,e=e.duration()+e._rDelay)*e:0},je=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Ne=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ie=function(e){return e._end=me(e._start+(e._tDur/Math.abs(e._ts||e._rts||T)||0))},Fe=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=me(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ie(e),r._dirty||Le(r,e)),e},Be=function(e,t){var r;if((t._time||t._initted&&!t._dur)&&(r=Ne(e.rawTime(),t),(!t._dur||Je(0,t.totalDuration(),r)-t._tTime>T)&&t.render(r,!0)),Le(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},ze=function(e,t,r,n){return t.parent&&Oe(t),t._start=me((D(r)?r:r||e!==l?$e(e,r,t):e._time)+t._delay),t._end=me(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Ae(e,t,"_first","_last",e._sort?"_start":0),We(t)||(e._recent=t),n||Be(e,t),e._ts<0&&Fe(e,e._tTime),e},Ue=function(e,t){return(X.ScrollTrigger||K("scrollTrigger",t))&&X.ScrollTrigger.create(t,e)},He=function(e,t,r,n,i){return er(e,t,i),e._initted?!r&&e._pt&&!s&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Pt.frame?(ie.push(e),e._lazy=[i,n],1):void 0:1},Ve=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},We=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Ye=function(e,t,r,n){var i=e._repeat,o=me(t)||0,s=e._tTime/e._tDur;return s&&!n&&(e._time*=o/e._dur),e._dur=o,e._tDur=i?i<0?1e10:me(o*(i+1)+e._rDelay*i):o,s>0&&!n&&Fe(e,e._tTime=e._tDur*s),e.parent&&Ie(e),r||Le(e.parent,e),e},Xe=function(e){return e instanceof Gt?Le(e):Ye(e,e._dur)},Ge={_start:0,endTime:Q,totalDuration:Q},$e=function e(t,r,n){var i,o,s,a=t.labels,l=t._recent||Ge,c=t.duration()>=x?l.endTime(!1):t._dur;return O(r)&&(isNaN(r)||r in a)?(o=r.charAt(0),s="%"===r.substr(-1),i=r.indexOf("="),"<"===o||">"===o?(i>=0&&(r=r.replace(/=/,"")),("<"===o?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(s?(i<0?l:n).totalDuration()/100:1)):i<0?(r in a||(a[r]=c),a[r]):(o=parseFloat(r.charAt(i-1)+r.substr(i+1)),s&&n&&(o=o/100*(F(n)?n[0]:n).totalDuration()),i>1?e(t,r.substr(0,i-1),n)+o:c+o)):null==r?c:+r},Ke=function(e,t,r){var n,i,o=D(t[1]),s=(o?2:1)+(e<2?0:1),a=t[s];if(o&&(a.duration=t[1]),a.parent=r,e){for(n=a,i=r;i&&!("immediateRender"in n);)n=i.vars.defaults||{},i=R(i.vars.inherit)&&i.parent;a.immediateRender=R(n.immediateRender),e<2?a.runBackwards=1:a.startAt=t[s-1]}return new or(t[0],a,t[s+1])},Ze=function(e,t){return e||0===e?t(e):t},Je=function(e,t,r){return r<e?e:r>t?t:r},Qe=function(e,t){return O(e)&&(t=Y.exec(e))?t[1]:""},et=function(e,t,r){return Ze(r,(function(r){return Je(e,t,r)}))},tt=[].slice,rt=function(e,t){return e&&M(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&M(e[0]))&&!e.nodeType&&e!==c},nt=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var n;return O(e)&&!t||rt(e,1)?(n=r).push.apply(n,it(e)):r.push(e)}))||r},it=function(e,t,r){return a&&!t&&a.selector?a.selector(e):!O(e)||r||!u&&Mt()?F(e)?nt(e,r):rt(e)?tt.call(e,0):e?[e]:[]:tt.call((t||h).querySelectorAll(e),0)},ot=function(e){return e=it(e)[0]||Z("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return it(t,r.querySelectorAll?r:r===e?Z("Invalid scope")||h.createElement("div"):e)}},st=function(e){return e.sort((function(){return.5-Math.random()}))},at=function(e){if(L(e))return e;var t=M(e)?e:{each:e},r=zt(t.ease),n=t.from||0,i=parseFloat(t.base)||0,o={},s=n>0&&n<1,a=isNaN(n)||s,l=t.axis,c=n,u=n;return O(n)?c=u={center:.5,edges:.5,end:1}[n]||0:!s&&a&&(c=n[0],u=n[1]),function(e,s,h){var d,p,f,g,m,v,y,_,b,w=(h||t).length,T=o[w];if(!T){if(!(b="auto"===t.grid?0:(t.grid||[1,x])[1])){for(y=-x;y<(y=h[b++].getBoundingClientRect().left)&&b<w;);b--}for(T=o[w]=[],d=a?Math.min(b,w)*c-.5:n%b,p=b===x?0:a?w*u/b-.5:n/b|0,y=0,_=x,v=0;v<w;v++)f=v%b-d,g=p-(v/b|0),T[v]=m=l?Math.abs("y"===l?g:f):q(f*f+g*g),m>y&&(y=m),m<_&&(_=m);"random"===n&&st(T),T.max=y-_,T.min=_,T.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===n?-1:1),T.b=w<0?i-w:i,T.u=Qe(t.amount||t.each)||0,r=r&&w<0?Ft(r):r}return w=(T[e]-T.min)/T.max||0,me(T.b+(r?r(w):w)*T.v)+T.u}},lt=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(r){var n=me(Math.round(parseFloat(r)/e)*e*t);return(n-n%1)/t+(D(r)?0:Qe(r))}},ct=function(e,t){var r,n,i=F(e);return!i&&M(e)&&(r=i=e.radius||x,e.values?(e=it(e.values),(n=!D(e[0]))&&(r*=r)):e=lt(e.increment)),Ze(t,i?L(e)?function(t){return n=e(t),Math.abs(n-t)<=r?n:t}:function(t){for(var i,o,s=parseFloat(n?t.x:t),a=parseFloat(n?t.y:0),l=x,c=0,u=e.length;u--;)(i=n?(i=e[u].x-s)*i+(o=e[u].y-a)*o:Math.abs(e[u]-s))<l&&(l=i,c=u);return c=!r||l<=r?e[c]:t,n||c===t||D(t)?c:c+Qe(t)}:lt(e))},ut=function(e,t,r,n){return Ze(F(e)?!t:!0===r?!!(r=0):!n,(function(){return F(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*n)/n}))},ht=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},dt=function(e,t){return function(r){return e(parseFloat(r))+(t||Qe(r))}},pt=function(e,t,r){return yt(e,t,0,1,r)},ft=function(e,t,r){return Ze(r,(function(r){return e[~~t(r)]}))},gt=function e(t,r,n){var i=r-t;return F(t)?ft(t,e(0,t.length),r):Ze(n,(function(e){return(i+(e-t)%i)%i+t}))},mt=function e(t,r,n){var i=r-t,o=2*i;return F(t)?ft(t,e(0,t.length-1),r):Ze(n,(function(e){return t+((e=(o+(e-t)%o)%o||0)>i?o-e:e)}))},vt=function(e){for(var t,r,n,i,o=0,s="";~(t=e.indexOf("random(",o));)n=e.indexOf(")",t),i="["===e.charAt(t+7),r=e.substr(t+7,n-t-7).match(i?W:B),s+=e.substr(o,t-o)+ut(i?r:+r[0],i?0:+r[1],+r[2]||1e-5),o=n+1;return s+e.substr(o,e.length-o)},yt=function(e,t,r,n,i){var o=t-e,s=n-r;return Ze(i,(function(t){return r+((t-e)/o*s||0)}))},_t=function e(t,r,n,i){var o=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!o){var s,a,l,c,u,h=O(t),d={};if(!0===n&&(i=1)&&(n=null),h)t={p:t},r={p:r};else if(F(t)&&!F(r)){for(l=[],c=t.length,u=c-2,a=1;a<c;a++)l.push(e(t[a-1],t[a]));c--,o=function(e){e*=c;var t=Math.min(u,~~e);return l[t](e-t)},n=r}else i||(t=Ee(F(t)?[]:{},t));if(!l){for(s in r)Jt.call(d,t,s,"get",r[s]);o=function(e){return fr(e,d)||(h?t.p:t)}}}return Ze(n,o)},bt=function(e,t,r){var n,i,o,s=e.labels,a=x;for(n in s)(i=s[n]-t)<0==!!r&&i&&a>(i=Math.abs(i))&&(o=n,a=i);return o},wt=function(e,t,r){var n,i,o,s=e.vars,l=s[t],c=a,u=e._ctx;if(l)return n=s[t+"Params"],i=s.callbackScope||e,r&&ie.length&&_e(),u&&(a=u),o=n?l.apply(i,n):l.call(i),a=c,o},xt=function(e){return Oe(e),e.scrollTrigger&&e.scrollTrigger.kill(!!s),e.progress()<1&&wt(e,"onInterrupt"),e},Tt=function(e){var t=(e=!e.name&&e.default||e).name,r=L(e),n=t&&!r&&e.init?function(){this._props=[]}:e,i={init:Q,render:fr,add:Jt,kill:mr,modifier:gr,rawVars:0},o={targetTest:0,get:0,getSetter:ur,aliases:{},register:0};if(Mt(),e!==n){if(se[t])return;Te(n,Te(Se(e,i),o)),Ee(n.prototype,Ee(i,Se(e,o))),se[n.prop=t]=n,e.targetTest&&(ce.push(n),ne[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}J(t,n),e.register&&e.register(Lr,n,_r)},Et=255,kt={aqua:[0,Et,Et],lime:[0,Et,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Et],navy:[0,0,128],white:[Et,Et,Et],olive:[128,128,0],yellow:[Et,Et,0],orange:[Et,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Et,0,0],pink:[Et,192,203],cyan:[0,Et,Et],transparent:[Et,Et,Et,0]},St=function(e,t,r){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*Et+.5|0},qt=function(e,t,r){var n,i,o,s,a,l,c,u,h,d,p=e?D(e)?[e>>16,e>>8&Et,e&Et]:0:kt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),kt[e])p=kt[e];else if("#"===e.charAt(0)){if(e.length<6&&(n=e.charAt(1),i=e.charAt(2),o=e.charAt(3),e="#"+n+n+i+i+o+o+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Et,p&Et,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Et,e&Et]}else if("hsl"===e.substr(0,3))if(p=d=e.match(B),t){if(~e.indexOf("="))return p=e.match(z),r&&p.length<4&&(p[3]=1),p}else s=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(i=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=St(s+1/3,n,i),p[1]=St(s,n,i),p[2]=St(s-1/3,n,i);else p=e.match(B)||kt.transparent;p=p.map(Number)}return t&&!d&&(n=p[0]/Et,i=p[1]/Et,o=p[2]/Et,l=((c=Math.max(n,i,o))+(u=Math.min(n,i,o)))/2,c===u?s=a=0:(h=c-u,a=l>.5?h/(2-c-u):h/(c+u),s=c===n?(i-o)/h+(i<o?6:0):c===i?(o-n)/h+2:(n-i)/h+4,s*=60),p[0]=~~(s+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},At=function(e){var t=[],r=[],n=-1;return e.split(Ot).forEach((function(e){var i=e.match(U)||[];t.push.apply(t,i),r.push(n+=i.length+1)})),t.c=r,t},Ct=function(e,t,r){var n,i,o,s,a="",l=(e+a).match(Ot),c=t?"hsla(":"rgba(",u=0;if(!l)return e;if(l=l.map((function(e){return(e=qt(e,t,1))&&c+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(o=At(e),(n=r.c).join(a)!==o.c.join(a)))for(s=(i=e.replace(Ot,"1").split(U)).length-1;u<s;u++)a+=i[u]+(~n.indexOf(u)?l.shift()||c+"0,0,0,0)":(o.length?o:l.length?l:r).shift());if(!i)for(s=(i=e.split(Ot)).length-1;u<s;u++)a+=i[u]+l[u];return a+i[s]},Ot=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in kt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Lt=/hsl[a]?\(/,Dt=function(e){var t,r=e.join(" ");if(Ot.lastIndex=0,Ot.test(r))return t=Lt.test(r),e[1]=Ct(e[1],t),e[0]=Ct(e[0],t,At(e[1])),!0},Pt=function(){var e,t,r,n,i,o,s=Date.now,a=500,l=33,p=s(),f=p,m=1e3/240,v=m,y=[],_=function r(c){var u,h,d,g,_=s()-f,b=!0===c;if(_>a&&(p+=_-l),((u=(d=(f+=_)-p)-v)>0||b)&&(g=++n.frame,i=d-1e3*n.time,n.time=d/=1e3,v+=u+(u>=m?4:m-u),h=1),b||(e=t(r)),h)for(o=0;o<y.length;o++)y[o](d,i,g,c)};return n={time:0,frame:0,tick:function(){_(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){d&&(!u&&j()&&(c=u=window,h=c.document||{},X.gsap=Lr,(c.gsapVersions||(c.gsapVersions=[])).push(Lr.version),$(G||c.GreenSockGlobals||!c.gsap&&c||{}),r=c.requestAnimationFrame),e&&n.sleep(),t=r||function(e){return setTimeout(e,v-1e3*n.time+1|0)},g=1,_(2))},sleep:function(){(r?c.cancelAnimationFrame:clearTimeout)(e),g=0,t=Q},lagSmoothing:function(e,t){a=e||1e8,l=Math.min(t,a,0)},fps:function(e){m=1e3/(e||240),v=1e3*n.time+m},add:function(e,t,r){var i=t?function(t,r,o,s){e(t,r,o,s),n.remove(i)}:e;return n.remove(e),y[r?"unshift":"push"](i),Mt(),i},remove:function(e,t){~(t=y.indexOf(e))&&y.splice(t,1)&&o>=t&&o--},_listeners:y}}(),Mt=function(){return!g&&Pt.wake()},Rt={},jt=/^[\d.\-M][\d.\-,\s]/,Nt=/["']/g,It=function(e){for(var t,r,n,i={},o=e.substr(1,e.length-3).split(":"),s=o[0],a=1,l=o.length;a<l;a++)r=o[a],t=a!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,t),i[s]=isNaN(n)?n.replace(Nt,"").trim():+n,s=r.substr(t+1).trim();return i},Ft=function(e){return function(t){return 1-e(1-t)}},Bt=function e(t,r){for(var n,i=t._first;i;)i instanceof Gt?e(i,r):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===r||(i.timeline?e(i.timeline,r):(n=i._ease,i._ease=i._yEase,i._yEase=n,i._yoyo=r)),i=i._next},zt=function(e,t){return e&&(L(e)?e:Rt[e]||function(e){var t,r,n,i,o=(e+"").split("("),s=Rt[o[0]];return s&&o.length>1&&s.config?s.config.apply(null,~e.indexOf("{")?[It(o[1])]:(t=e,r=t.indexOf("(")+1,n=t.indexOf(")"),i=t.indexOf("(",r),t.substring(r,~i&&i<n?t.indexOf(")",n+1):n)).split(",").map(we)):Rt._CE&&jt.test(e)?Rt._CE("",e):s}(e))||t},Ut=function(e,t,r,n){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===n&&(n=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,o={easeIn:t,easeOut:r,easeInOut:n};return fe(e,(function(e){for(var t in Rt[e]=X[e]=o,Rt[i=e.toLowerCase()]=r,o)Rt[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Rt[e+"."+t]=o[t]})),o},Ht=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Vt=function e(t,r,n){var i=r>=1?r:1,o=(n||(t?.3:.45))/(r<1?r:1),s=o/E*(Math.asin(1/i)||0),a=function(e){return 1===e?1:i*Math.pow(2,-10*e)*C((e-s)*o)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Ht(a);return o=E/o,l.config=function(r,n){return e(t,r,n)},l},Wt=function e(t,r){void 0===r&&(r=1.70158);var n=function(e){return e?--e*e*((r+1)*e+r)+1:0},i="out"===t?n:"in"===t?function(e){return 1-n(1-e)}:Ht(n);return i.config=function(r){return e(t,r)},i};fe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Ut(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),Rt.Linear.easeNone=Rt.none=Rt.Linear.easeIn,Ut("Elastic",Vt("in"),Vt("out"),Vt()),m=7.5625,y=1/(v=2.75),Ut("Bounce",(function(e){return 1-_(1-e)}),_=function(e){return e<y?m*e*e:e<.7272727272727273?m*Math.pow(e-1.5/v,2)+.75:e<.9090909090909092?m*(e-=2.25/v)*e+.9375:m*Math.pow(e-2.625/v,2)+.984375}),Ut("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Ut("Circ",(function(e){return-(q(1-e*e)-1)})),Ut("Sine",(function(e){return 1===e?1:1-A(e*k)})),Ut("Back",Wt("in"),Wt("out"),Wt()),Rt.SteppedEase=Rt.steps=X.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,n=e+(t?0:1),i=t?1:0;return function(e){return((n*Je(0,.99999999,e)|0)+i)*r}}},w.ease=Rt["quad.out"],fe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return ue+=e+","+e+"Params,"}));var Yt=function(e,t){this.id=S++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:pe,this.set=t?t.getSetter:ur},Xt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Ye(this,+e.duration,1,1),this.data=e.data,a&&(this._ctx=a,a.data.push(this)),g||Pt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Ye(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Mt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Fe(this,e),!r._dp||r.parent||Be(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&ze(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===T||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),be(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Re(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Re(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?je(this._tTime,r)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Ne(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Je(-this._delay,this._tDur,t),!0),Ie(this),De(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Mt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==T&&(this._tTime-=T)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&ze(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(R(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ne(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=re);var t=s;return s=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),s=t,this},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(t._ts||1),t=t._dp;return!this.parent&&this.vars.immediateRender?-1:r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Xe(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Xe(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime($e(this,e),R(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,R(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-T))},t.eventCallback=function(e,t,r){var n=this.vars;return arguments.length>1?(t?(n[e]=t,r&&(n[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete n[e],this):n[e]},t.then=function(e){var t=this;return new Promise((function(r){var n=L(e)?e:xe,i=function(){var e=t.then;t.then=null,L(n)&&(n=n(t))&&(n.then||n===t)&&(t.then=e),r(n),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i}))},t.kill=function(){xt(this)},e}();Te(Xt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Gt=function(e){function t(t,r){var i;return void 0===t&&(t={}),(i=e.call(this,t)||this).labels={},i.smoothChildTiming=!!t.smoothChildTiming,i.autoRemoveChildren=!!t.autoRemoveChildren,i._sort=R(t.sortChildren),l&&ze(t.parent||l,n(i),r),t.reversed&&i.reverse(),t.paused&&i.paused(!0),t.scrollTrigger&&Ue(n(i),t.scrollTrigger),i}i(t,e);var r=t.prototype;return r.to=function(e,t,r){return Ke(0,arguments,this),this},r.from=function(e,t,r){return Ke(1,arguments,this),this},r.fromTo=function(e,t,r,n){return Ke(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,qe(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new or(e,t,$e(this,r),1),this},r.call=function(e,t,r){return ze(this,or.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,n,i,o,s){return r.duration=t,r.stagger=r.stagger||n,r.onComplete=o,r.onCompleteParams=s,r.parent=this,new or(e,r,$e(this,i)),this},r.staggerFrom=function(e,t,r,n,i,o,s){return r.runBackwards=1,qe(r).immediateRender=R(r.immediateRender),this.staggerTo(e,t,r,n,i,o,s)},r.staggerFromTo=function(e,t,r,n,i,o,s,a){return n.startAt=r,qe(n).immediateRender=R(n.immediateRender),this.staggerTo(e,t,n,i,o,s,a)},r.render=function(e,t,r){var n,i,o,a,c,u,h,d,p,f,g,m,v=this._time,y=this._dirty?this.totalDuration():this._tDur,_=this._dur,b=e<=0?0:me(e),w=this._zTime<0!=e<0&&(this._initted||!_);if(this!==l&&b>y&&e>=0&&(b=y),b!==this._tTime||r||w){if(v!==this._time&&_&&(b+=this._time-v,e+=this._time-v),n=b,p=this._start,u=!(d=this._ts),w&&(_||(v=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(g=this._yoyo,c=_+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*c+e,t,r);if(n=me(b%c),b===y?(a=this._repeat,n=_):((a=~~(b/c))&&a===b/c&&(n=_,a--),n>_&&(n=_)),f=je(this._tTime,c),!v&&this._tTime&&f!==a&&(f=a),g&&1&a&&(n=_-n,m=1),a!==f&&!this._lock){var x=g&&1&f,E=x===(g&&1&a);if(a<f&&(x=!x),v=x?0:_,this._lock=1,this.render(v||(m?0:me(a*c)),t,!_)._lock=0,this._tTime=b,!t&&this.parent&&wt(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),v&&v!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(_=this._dur,y=this._tDur,E&&(this._lock=2,v=x?_:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Bt(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(h=function(e,t,r){var n;if(r>t)for(n=e._first;n&&n._start<=r;){if("isPause"===n.data&&n._start>t)return n;n=n._next}else for(n=e._last;n&&n._start>=r;){if("isPause"===n.data&&n._start<t)return n;n=n._prev}}(this,me(v),me(n)),h&&(b-=n-(n=h._start))),this._tTime=b,this._time=n,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,v=0),!v&&n&&!t&&(wt(this,"onStart"),this._tTime!==b))return this;if(n>=v&&e>=0)for(i=this._first;i;){if(o=i._next,(i._act||n>=i._start)&&i._ts&&h!==i){if(i.parent!==this)return this.render(e,t,r);if(i.render(i._ts>0?(n-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(n-i._start)*i._ts,t,r),n!==this._time||!this._ts&&!u){h=0,o&&(b+=this._zTime=-1e-8);break}}i=o}else{i=this._last;for(var k=e<0?e:n;i;){if(o=i._prev,(i._act||k<=i._end)&&i._ts&&h!==i){if(i.parent!==this)return this.render(e,t,r);if(i.render(i._ts>0?(k-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(k-i._start)*i._ts,t,r||s&&(i._initted||i._startAt)),n!==this._time||!this._ts&&!u){h=0,o&&(b+=this._zTime=k?-1e-8:T);break}}i=o}}if(h&&!t&&(this.pause(),h.render(n>=v?0:-1e-8)._zTime=n>=v?1:-1,this._ts))return this._start=p,Ie(this),this.render(e,t,r);this._onUpdate&&!t&&wt(this,"onUpdate",!0),(b===y&&this._tTime>=this.totalDuration()||!b&&v)&&(p!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((e||!_)&&(b===y&&this._ts>0||!b&&this._ts<0)&&Oe(this,1),t||e<0&&!v||!b&&!v&&y||(wt(this,b===y&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<y&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(D(t)||(t=$e(this,t,e)),!(e instanceof Xt)){if(F(e))return e.forEach((function(e){return r.add(e,t)})),this;if(O(e))return this.addLabel(e,t);if(!L(e))return this;e=or.delayedCall(0,e)}return this!==e?ze(this,e,t):this},r.getChildren=function(e,t,r,n){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===n&&(n=-x);for(var i=[],o=this._first;o;)o._start>=n&&(o instanceof or?t&&i.push(o):(r&&i.push(o),e&&i.push.apply(i,o.getChildren(!0,t,r)))),o=o._next;return i},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return O(e)?this.removeLabel(e):L(e)?this.killTweensOf(e):(Ce(this,e),e===this._recent&&(this._recent=this._last),Le(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=me(Pt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=$e(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var n=or.delayedCall(0,t||Q,r);return n.data="isPause",this._hasPause=1,ze(this,n,$e(this,e))},r.removePause=function(e){var t=this._first;for(e=$e(this,e);t;)t._start===e&&"isPause"===t.data&&Oe(t),t=t._next},r.killTweensOf=function(e,t,r){for(var n=this.getTweensOf(e,r),i=n.length;i--;)$t!==n[i]&&n[i].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,n=[],i=it(e),o=this._first,s=D(t);o;)o instanceof or?ye(o._targets,i)&&(s?(!$t||o._initted&&o._ts)&&o.globalTime(0)<=t&&o.globalTime(o.totalDuration())>t:!t||o.isActive())&&n.push(o):(r=o.getTweensOf(i,t)).length&&n.push.apply(n,r),o=o._next;return n},r.tweenTo=function(e,t){t=t||{};var r,n=this,i=$e(n,e),o=t,s=o.startAt,a=o.onStart,l=o.onStartParams,c=o.immediateRender,u=or.to(n,Te({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(s&&"time"in s?s.time:n._time))/n.timeScale())||T,onStart:function(){if(n.pause(),!r){var e=t.duration||Math.abs((i-(s&&"time"in s?s.time:n._time))/n.timeScale());u._dur!==e&&Ye(u,e,0,1).render(u._time,!0,!0),r=1}a&&a.apply(u,l||[])}},t));return c?u.render(0):u},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Te({startAt:{time:$e(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),bt(this,$e(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),bt(this,$e(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+T)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var n,i=this._first,o=this.labels;i;)i._start>=r&&(i._start+=e,i._end+=e),i=i._next;if(t)for(n in o)o[n]>=r&&(o[n]+=e);return Le(this)},r.invalidate=function(t){var r=this._first;for(this._lock=0;r;)r.invalidate(t),r=r._next;return e.prototype.invalidate.call(this,t)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Le(this)},r.totalDuration=function(e){var t,r,n,i=0,o=this,s=o._last,a=x;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-e:e));if(o._dirty){for(n=o.parent;s;)t=s._prev,s._dirty&&s.totalDuration(),(r=s._start)>a&&o._sort&&s._ts&&!o._lock?(o._lock=1,ze(o,s,r-s._delay,1)._lock=0):a=r,r<0&&s._ts&&(i-=r,(!n&&!o._dp||n&&n.smoothChildTiming)&&(o._start+=r/o._ts,o._time-=r,o._tTime-=r),o.shiftChildren(-r,!1,-Infinity),a=0),s._end>i&&s._ts&&(i=s._end),s=t;Ye(o,o===l&&o._time>i?o._time:i,1,1),o._dirty=0}return o._tDur},t.updateRoot=function(e){if(l._ts&&(be(l,Ne(e,l)),p=Pt.frame),Pt.frame>=le){le+=b.autoSleep||120;var t=l._first;if((!t||!t._ts)&&b.autoSleep&&Pt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Pt.sleep()}}},t}(Xt);Te(Gt.prototype,{_lock:0,_hasPause:0,_forcing:0});var $t,Kt,Zt=function(e,t,r,n,i,o,s){var a,l,c,u,h,d,p,f,g=new _r(this._pt,e,t,0,1,pr,null,i),m=0,v=0;for(g.b=r,g.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=vt(n)),o&&(o(f=[r,n],e,t),r=f[0],n=f[1]),l=r.match(H)||[];a=H.exec(n);)u=a[0],h=n.substring(m,a.index),c?c=(c+1)%5:"rgba("===h.substr(-5)&&(c=1),u!==l[v++]&&(d=parseFloat(l[v-1])||0,g._pt={_next:g._pt,p:h||1===v?h:",",s:d,c:"="===u.charAt(1)?ve(d,u)-d:parseFloat(u)-d,m:c&&c<4?Math.round:0},m=H.lastIndex);return g.c=m<n.length?n.substring(m,n.length):"",g.fp=s,(V.test(n)||p)&&(g.e=0),this._pt=g,g},Jt=function(e,t,r,n,i,o,s,a,l,c){L(n)&&(n=n(i||0,e,o));var u,h=e[t],d="get"!==r?r:L(h)?l?e[t.indexOf("set")||!L(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():h,p=L(h)?l?lr:ar:sr;if(O(n)&&(~n.indexOf("random(")&&(n=vt(n)),"="===n.charAt(1)&&((u=ve(d,n)+(Qe(d)||0))||0===u)&&(n=u)),!c||d!==n||Kt)return isNaN(d*n)||""===n?(!h&&!(t in e)&&K(t,n),Zt.call(this,e,t,d,n,p,a||b.stringFilter,l)):(u=new _r(this._pt,e,t,+d||0,n-(d||0),"boolean"==typeof h?dr:hr,0,p),l&&(u.fp=l),s&&u.modifier(s,this,e),this._pt=u)},Qt=function(e,t,r,n,i,o){var s,a,l,c;if(se[e]&&!1!==(s=new se[e]).init(i,s.rawVars?t[e]:function(e,t,r,n,i){if(L(e)&&(e=rr(e,i,t,r,n)),!M(e)||e.style&&e.nodeType||F(e)||I(e))return O(e)?rr(e,i,t,r,n):e;var o,s={};for(o in e)s[o]=rr(e[o],i,t,r,n);return s}(t[e],n,i,o,r),r,n,o)&&(r._pt=a=new _r(r._pt,i,e,0,1,s.render,s,0,s.priority),r!==f))for(l=r._ptLookup[r._targets.indexOf(i)],c=s._props.length;c--;)l[s._props[c]]=a;return s},er=function e(t,r,n){var i,a,c,u,h,d,p,f,g,m,v,y,_,b=t.vars,E=b.ease,k=b.startAt,S=b.immediateRender,q=b.lazy,A=b.onUpdate,C=b.onUpdateParams,O=b.callbackScope,L=b.runBackwards,D=b.yoyoEase,P=b.keyframes,M=b.autoRevert,j=t._dur,N=t._startAt,I=t._targets,F=t.parent,B=F&&"nested"===F.data?F.vars.targets:I,z="auto"===t._overwrite&&!o,U=t.timeline;if(U&&(!P||!E)&&(E="none"),t._ease=zt(E,w.ease),t._yEase=D?Ft(zt(!0===D?E:D,w.ease)):0,D&&t._yoyo&&!t._repeat&&(D=t._yEase,t._yEase=t._ease,t._ease=D),t._from=!U&&!!b.runBackwards,!U||P&&!b.stagger){if(y=(f=I[0]?de(I[0]).harness:0)&&b[f.prop],i=Se(b,ne),N&&(N._zTime<0&&N.progress(1),r<0&&L&&S&&!M?N.render(-1,!0):N.revert(L&&j?te:ee),N._lazy=0),k){if(Oe(t._startAt=or.set(I,Te({data:"isStart",overwrite:!1,parent:F,immediateRender:!0,lazy:R(q),startAt:null,delay:0,onUpdate:A,onUpdateParams:C,callbackScope:O,stagger:0},k))),t._startAt._dp=0,r<0&&(s||!S&&!M)&&t._startAt.revert(te),S&&j&&r<=0&&n<=0)return void(r&&(t._zTime=r))}else if(L&&j&&!N)if(r&&(S=!1),c=Te({overwrite:!1,data:"isFromStart",lazy:S&&R(q),immediateRender:S,stagger:0,parent:F},i),y&&(c[f.prop]=y),Oe(t._startAt=or.set(I,c)),t._startAt._dp=0,r<0&&(s?t._startAt.revert(te):t._startAt.render(-1,!0)),t._zTime=r,S){if(!r)return}else e(t._startAt,T,T);for(t._pt=t._ptCache=0,q=j&&R(q)||q&&!j,a=0;a<I.length;a++){if(p=(h=I[a])._gsap||he(I)[a]._gsap,t._ptLookup[a]=m={},oe[p.id]&&ie.length&&_e(),v=B===I?a:B.indexOf(h),f&&!1!==(g=new f).init(h,y||i,t,v,B)&&(t._pt=u=new _r(t._pt,h,g.name,0,1,g.render,g,0,g.priority),g._props.forEach((function(e){m[e]=u})),g.priority&&(d=1)),!f||y)for(c in i)se[c]&&(g=Qt(c,i,t,v,h,B))?g.priority&&(d=1):m[c]=u=Jt.call(t,h,c,"get",i[c],v,B,0,b.stringFilter);t._op&&t._op[a]&&t.kill(h,t._op[a]),z&&t._pt&&($t=t,l.killTweensOf(h,m,t.globalTime(r)),_=!t.parent,$t=0),t._pt&&q&&(oe[p.id]=1)}d&&yr(t),t._onInit&&t._onInit(t)}t._onUpdate=A,t._initted=(!t._op||t._pt)&&!_,P&&r<=0&&U.render(x,!0,!0)},tr=function(e,t,r,n){var i,o,s=t.ease||n||"power1.inOut";if(F(t))o=r[e]||(r[e]=[]),t.forEach((function(e,r){return o.push({t:r/(t.length-1)*100,v:e,e:s})}));else for(i in t)o=r[i]||(r[i]=[]),"ease"===i||o.push({t:parseFloat(e),v:t[i],e:s})},rr=function(e,t,r,n,i){return L(e)?e.call(t,r,n,i):O(e)&&~e.indexOf("random(")?vt(e):e},nr=ue+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",ir={};fe(nr+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return ir[e]=1}));var or=function(e){function t(t,r,i,s){var a;"number"==typeof r&&(i.duration=r,r=i,i=null);var c,u,h,d,p,f,g,m,v=(a=e.call(this,s?r:qe(r))||this).vars,y=v.duration,_=v.delay,w=v.immediateRender,x=v.stagger,T=v.overwrite,E=v.keyframes,k=v.defaults,S=v.scrollTrigger,q=v.yoyoEase,A=r.parent||l,C=(F(t)||I(t)?D(t[0]):"length"in r)?[t]:it(t);if(a._targets=C.length?he(C):Z("GSAP target "+t+" not found. https://greensock.com",!b.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=T,E||x||N(y)||N(_)){if(r=a.vars,(c=a.timeline=new Gt({data:"nested",defaults:k||{},targets:A&&"nested"===A.data?A.vars.targets:C})).kill(),c.parent=c._dp=n(a),c._start=0,x||N(y)||N(_)){if(d=C.length,g=x&&at(x),M(x))for(p in x)~nr.indexOf(p)&&(m||(m={}),m[p]=x[p]);for(u=0;u<d;u++)(h=Se(r,ir)).stagger=0,q&&(h.yoyoEase=q),m&&Ee(h,m),f=C[u],h.duration=+rr(y,n(a),u,f,C),h.delay=(+rr(_,n(a),u,f,C)||0)-a._delay,!x&&1===d&&h.delay&&(a._delay=_=h.delay,a._start+=_,h.delay=0),c.to(f,h,g?g(u,f,C):0),c._ease=Rt.none;c.duration()?y=_=0:a.timeline=0}else if(E){qe(Te(c.vars.defaults,{ease:"none"})),c._ease=zt(E.ease||r.ease||"none");var O,L,P,j=0;if(F(E))E.forEach((function(e){return c.to(C,e,">")})),c.duration();else{for(p in h={},E)"ease"===p||"easeEach"===p||tr(p,E[p],h,E.easeEach);for(p in h)for(O=h[p].sort((function(e,t){return e.t-t.t})),j=0,u=0;u<O.length;u++)(P={ease:(L=O[u]).e,duration:(L.t-(u?O[u-1].t:0))/100*y})[p]=L.v,c.to(C,P,j),j+=P.duration;c.duration()<y&&c.to({},{duration:y-c.duration()})}}y||a.duration(y=c.duration())}else a.timeline=0;return!0!==T||o||($t=n(a),l.killTweensOf(C),$t=0),ze(A,n(a),i),r.reversed&&a.reverse(),r.paused&&a.paused(!0),(w||!y&&!E&&a._start===me(A._time)&&R(w)&&Me(n(a))&&"nested"!==A.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-_)||0)),S&&Ue(n(a),S),a}i(t,e);var r=t.prototype;return r.render=function(e,t,r){var n,i,o,a,l,c,u,h,d,p=this._time,f=this._tDur,g=this._dur,m=e<0,v=e>f-T&&!m?f:e<T?0:e;if(g){if(v!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(n=v,h=this.timeline,this._repeat){if(a=g+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*a+e,t,r);if(n=me(v%a),v===f?(o=this._repeat,n=g):((o=~~(v/a))&&o===v/a&&(n=g,o--),n>g&&(n=g)),(c=this._yoyo&&1&o)&&(d=this._yEase,n=g-n),l=je(this._tTime,a),n===p&&!r&&this._initted)return this._tTime=v,this;o!==l&&(h&&this._yEase&&Bt(h,c),!this.vars.repeatRefresh||c||this._lock||(this._lock=r=1,this.render(me(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(He(this,m?e:n,r,t,v))return this._tTime=0,this;if(p!==this._time)return this;if(g!==this._dur)return this.render(e,t,r)}if(this._tTime=v,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(d||this._ease)(n/g),this._from&&(this.ratio=u=1-u),n&&!p&&!t&&(wt(this,"onStart"),this._tTime!==v))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;h&&h.render(e<0?e:!n&&c?-1e-8:h._dur*h._ease(n/this._dur),t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(m&&Pe(this,e,0,r),wt(this,"onUpdate")),this._repeat&&o!==l&&this.vars.onRepeat&&!t&&this.parent&&wt(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(m&&!this._onUpdate&&Pe(this,e,0,!0),(e||!g)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Oe(this,1),t||m&&!p||!(v||p||c)||(wt(this,v===f?"onComplete":"onReverseComplete",!0),this._prom&&!(v<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,n){var i,o,a,l=e.ratio,c=t<0||!t&&(!e._start&&Ve(e)&&(e._initted||!We(e))||(e._ts<0||e._dp._ts<0)&&!We(e))?0:1,u=e._rDelay,h=0;if(u&&e._repeat&&(h=Je(0,e._tDur,t),o=je(h,u),e._yoyo&&1&o&&(c=1-c),o!==je(e._tTime,u)&&(l=1-c,e.vars.repeatRefresh&&e._initted&&e.invalidate())),c!==l||s||n||e._zTime===T||!t&&e._zTime){if(!e._initted&&He(e,t,n,r,h))return;for(a=e._zTime,e._zTime=t||(r?T:0),r||(r=t&&!a),e.ratio=c,e._from&&(c=1-c),e._time=0,e._tTime=h,i=e._pt;i;)i.r(c,i.d),i=i._next;t<0&&Pe(e,t,0,!0),e._onUpdate&&!r&&wt(e,"onUpdate"),h&&e._repeat&&!r&&e.parent&&wt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===c&&(c&&Oe(e,1),r||s||(wt(e,c?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},r.resetTo=function(e,t,r,n){g||Pt.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||er(this,i),function(e,t,r,n,i,o,s){var a,l,c,u,h=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!h)for(h=e._ptCache[t]=[],c=e._ptLookup,u=e._targets.length;u--;){if((a=c[u][t])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==t&&a.fp!==t;)a=a._next;if(!a)return Kt=1,e.vars[t]="+=0",er(e,s),Kt=0,1;h.push(a)}for(u=h.length;u--;)(a=(l=h[u])._pt||l).s=!n&&0!==n||i?a.s+(n||0)+o*a.c:n,a.c=r-a.s,l.e&&(l.e=ge(r)+Qe(l.e)),l.b&&(l.b=a.s+Qe(l.b))}(this,e,t,r,n,this._ease(i/this._dur),i)?this.resetTo(e,t,r,n):(Fe(this,0),this.parent||Ae(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?xt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,$t&&!0!==$t.vars.overwrite)._first||xt(this),this.parent&&r!==this.timeline.totalDuration()&&Ye(this,this._dur*this.timeline._tDur/r,0,1),this}var n,i,o,s,a,l,c,u=this._targets,h=e?it(e):u,d=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,n=r===t.length;n&&r--&&e[r]===t[r];);return r<0}(u,h))return"all"===t&&(this._pt=0),xt(this);for(n=this._op=this._op||[],"all"!==t&&(O(t)&&(a={},fe(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,n,i,o,s=e[0]?de(e[0]).harness:0,a=s&&s.aliases;if(!a)return t;for(n in r=Ee({},t),a)if(n in r)for(i=(o=a[n].split(",")).length;i--;)r[o[i]]=r[n];return r}(u,t)),c=u.length;c--;)if(~h.indexOf(u[c]))for(a in i=d[c],"all"===t?(n[c]=t,s=i,o={}):(o=n[c]=n[c]||{},s=t),s)(l=i&&i[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Ce(this,l,"_pt"),delete i[a]),"all"!==o&&(o[a]=1);return this._initted&&!this._pt&&p&&xt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return Ke(1,arguments)},t.delayedCall=function(e,r,n,i){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:i})},t.fromTo=function(e,t,r){return Ke(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return l.killTweensOf(e,t,r)},t}(Xt);Te(or.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),fe("staggerTo,staggerFrom,staggerFromTo",(function(e){or[e]=function(){var t=new Gt,r=tt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var sr=function(e,t,r){return e[t]=r},ar=function(e,t,r){return e[t](r)},lr=function(e,t,r,n){return e[t](n.fp,r)},cr=function(e,t,r){return e.setAttribute(t,r)},ur=function(e,t){return L(e[t])?ar:P(e[t])&&e.setAttribute?cr:sr},hr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},dr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},pr=function(e,t){var r=t._pt,n="";if(!e&&t.b)n=t.b;else if(1===e&&t.e)n=t.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+n,r=r._next;n+=t.c}t.set(t.t,t.p,n,t)},fr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},gr=function(e,t,r,n){for(var i,o=this._pt;o;)i=o._next,o.p===n&&o.modifier(e,t,r),o=i},mr=function(e){for(var t,r,n=this._pt;n;)r=n._next,n.p===e&&!n.op||n.op===e?Ce(this,n,"_pt"):n.dep||(t=1),n=r;return!t},vr=function(e,t,r,n){n.mSet(e,t,n.m.call(n.tween,r,n.mt),n)},yr=function(e){for(var t,r,n,i,o=e._pt;o;){for(t=o._next,r=n;r&&r.pr>o.pr;)r=r._next;(o._prev=r?r._prev:i)?o._prev._next=o:n=o,(o._next=r)?r._prev=o:i=o,o=t}e._pt=n},_r=function(){function e(e,t,r,n,i,o,s,a,l){this.t=t,this.s=n,this.c=i,this.p=r,this.r=o||hr,this.d=s||this,this.set=a||sr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=vr,this.m=e,this.mt=r,this.tween=t},e}();fe(ue+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return ne[e]=1})),X.TweenMax=X.TweenLite=or,X.TimelineLite=X.TimelineMax=Gt,l=new Gt({sortChildren:!1,defaults:w,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Dt;var br=[],wr={},xr=[],Tr=0,Er=function(e){return(wr[e]||xr).map((function(e){return e()}))},kr=function(){var e=Date.now(),t=[];e-Tr>2&&(Er("matchMediaInit"),br.forEach((function(e){var r,n,i,o,s=e.queries,a=e.conditions;for(n in s)(r=c.matchMedia(s[n]).matches)&&(i=1),r!==a[n]&&(a[n]=r,o=1);o&&(e.revert(),i&&t.push(e))})),Er("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e)})),Tr=e,Er("matchMedia"))},Sr=function(){function e(e,t){this.selector=t&&ot(t),this.data=[],this._r=[],this.isReverted=!1,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,r){L(e)&&(r=t,t=e,e=L);var n=this,i=function(){var e,i=a,o=n.selector;return i&&i!==n&&i.data.push(n),r&&(n.selector=ot(r)),a=n,e=t.apply(n,arguments),L(e)&&n._r.push(e),a=i,n.selector=o,n.isReverted=!1,e};return n.last=i,e===L?i(n):e?n[e]=i:i},t.ignore=function(e){var t=a;a=null,e(this),a=t},t.getTweens=function(){var t=[];return this.data.forEach((function(r){return r instanceof e?t.push.apply(t,r.getTweens()):r instanceof or&&!(r.parent&&"nested"===r.parent.data)&&t.push(r)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var r=this;if(e){var n=this.getTweens();this.data.forEach((function(e){"isFlip"===e.data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(e){return n.splice(n.indexOf(e),1)})))})),n.map((function(e){return{g:e.globalTime(0),t:e}})).sort((function(e,t){return t.g-e.g||-1})).forEach((function(t){return t.t.revert(e)})),this.data.forEach((function(t){return!(t instanceof Xt)&&t.revert&&t.revert(e)})),this._r.forEach((function(t){return t(e,r)})),this.isReverted=!0}else this.data.forEach((function(e){return e.kill&&e.kill()}));if(this.clear(),t){var i=br.indexOf(this);~i&&br.splice(i,1)}},t.revert=function(e){this.kill(e||{})},e}(),qr=function(){function e(e){this.contexts=[],this.scope=e}var t=e.prototype;return t.add=function(e,t,r){M(e)||(e={matches:e});var n,i,o,s=new Sr(0,r||this.scope),a=s.conditions={};for(i in this.contexts.push(s),t=s.add("onMatch",t),s.queries=e,e)"all"===i?o=1:(n=c.matchMedia(e[i]))&&(br.indexOf(s)<0&&br.push(s),(a[i]=n.matches)&&(o=1),n.addListener?n.addListener(kr):n.addEventListener("change",kr));return o&&t(s),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Ar={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return Tt(e)}))},timeline:function(e){return new Gt(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,r,n){O(e)&&(e=it(e)[0]);var i=de(e||{}).get,o=r?xe:we;return"native"===r&&(r=""),e?t?o((se[t]&&se[t].get||i)(e,t,r,n)):function(t,r,n){return o((se[t]&&se[t].get||i)(e,t,r,n))}:e},quickSetter:function(e,t,r){if((e=it(e)).length>1){var n=e.map((function(e){return Lr.quickSetter(e,t,r)})),i=n.length;return function(e){for(var t=i;t--;)n[t](e)}}e=e[0]||{};var o=se[t],s=de(e),a=s.harness&&(s.harness.aliases||{})[t]||t,l=o?function(t){var n=new o;f._pt=0,n.init(e,r?t+r:t,f,0,[e]),n.render(1,n),f._pt&&fr(1,f)}:s.set(e,a);return o?l:function(t){return l(e,a,r?t+r:t,s,1)}},quickTo:function(e,t,r){var n,i=Lr.to(e,Ee(((n={})[t]="+=0.1",n.paused=!0,n),r||{})),o=function(e,r,n){return i.resetTo(t,e,r,n)};return o.tween=i,o},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=zt(e.ease,w.ease)),ke(w,e||{})},config:function(e){return ke(b,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,n=e.plugins,i=e.defaults,o=e.extendTimeline;(n||"").split(",").forEach((function(e){return e&&!se[e]&&!X[e]&&Z(t+" effect requires "+e+" plugin.")})),ae[t]=function(e,t,n){return r(it(e),Te(t||{},i),n)},o&&(Gt.prototype[t]=function(e,r,n){return this.add(ae[t](e,M(r)?r:(n=r)&&{},this),n)})},registerEase:function(e,t){Rt[e]=zt(t)},parseEase:function(e,t){return arguments.length?zt(e,t):Rt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,n,i=new Gt(e);for(i.smoothChildTiming=R(e.smoothChildTiming),l.remove(i),i._dp=0,i._time=i._tTime=l._time,r=l._first;r;)n=r._next,!t&&!r._dur&&r instanceof or&&r.vars.onComplete===r._targets[0]||ze(i,r,r._start-r._delay),r=n;return ze(l,i,0),i},context:function(e,t){return e?new Sr(e,t):a},matchMedia:function(e){return new qr(e)},matchMediaRefresh:function(){return br.forEach((function(e){var t,r,n=e.conditions;for(r in n)n[r]&&(n[r]=!1,t=1);t&&e.revert()}))||kr()},addEventListener:function(e,t){var r=wr[e]||(wr[e]=[]);~r.indexOf(t)||r.push(t)},removeEventListener:function(e,t){var r=wr[e],n=r&&r.indexOf(t);n>=0&&r.splice(n,1)},utils:{wrap:gt,wrapYoyo:mt,distribute:at,random:ut,snap:ct,normalize:pt,getUnit:Qe,clamp:et,splitColor:qt,toArray:it,selector:ot,mapRange:yt,pipe:ht,unitize:dt,interpolate:_t,shuffle:st},install:$,effects:ae,ticker:Pt,updateRoot:Gt.updateRoot,plugins:se,globalTimeline:l,core:{PropTween:_r,globals:J,Tween:or,Timeline:Gt,Animation:Xt,getCache:de,_removeLinkedListItem:Ce,reverting:function(){return s},context:function(e){return e&&a&&(a.data.push(e),e._ctx=a),a},suppressOverwrites:function(e){return o=e}}};fe("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Ar[e]=or[e]})),Pt.add(Gt.updateRoot),f=Ar.to({},{duration:0});var Cr=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},Or=function(e,t){return{name:e,rawVars:1,init:function(e,r,n){n._onInit=function(e){var n,i;if(O(r)&&(n={},fe(r,(function(e){return n[e]=1})),r=n),t){for(i in n={},r)n[i]=t(r[i]);r=n}!function(e,t){var r,n,i,o=e._targets;for(r in t)for(n=o.length;n--;)(i=e._ptLookup[n][r])&&(i=i.d)&&(i._pt&&(i=Cr(i,r)),i&&i.modifier&&i.modifier(t[r],e,o[n],r))}(e,r)}}}},Lr=Ar.registerPlugin({name:"attr",init:function(e,t,r,n,i){var o,s,a;for(o in this.tween=r,t)a=e.getAttribute(o)||"",(s=this.add(e,"setAttribute",(a||0)+"",t[o],n,i,0,0,o)).op=o,s.b=a,this._props.push(o)},render:function(e,t){for(var r=t._pt;r;)s?r.set(r.t,r.p,r.b,r):r.r(e,r.d),r=r._next}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r],0,0,0,0,0,1)}},Or("roundProps",lt),Or("modifiers"),Or("snap",ct))||Ar;or.version=Gt.version=Lr.version="3.11.3",d=1,j()&&Mt();var Dr=Rt.Power0,Pr=Rt.Power1,Mr=Rt.Power2,Rr=Rt.Power3,jr=Rt.Power4,Nr=Rt.Linear,Ir=Rt.Quad,Fr=Rt.Cubic,Br=Rt.Quart,zr=Rt.Quint,Ur=Rt.Strong,Hr=Rt.Elastic,Vr=Rt.Back,Wr=Rt.SteppedEase,Yr=Rt.Bounce,Xr=Rt.Sine,Gr=Rt.Expo,$r=Rt.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{gsap:()=>o,default:()=>o,CSSPlugin:()=>i.CSSPlugin,TweenMax:()=>s,TweenLite:()=>n.TweenLite,TimelineMax:()=>n.TimelineMax,TimelineLite:()=>n.TimelineLite,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Linear:()=>n.Linear,Quad:()=>n.Quad,Cubic:()=>n.Cubic,Quart:()=>n.Quart,Quint:()=>n.Quint,Strong:()=>n.Strong,Elastic:()=>n.Elastic,Back:()=>n.Back,SteppedEase:()=>n.SteppedEase,Bounce:()=>n.Bounce,Sine:()=>n.Sine,Expo:()=>n.Expo,Circ:()=>n.Circ});var n=r("./node_modules/gsap/gsap-core.js"),i=r("./node_modules/gsap/CSSPlugin.js"),o=n.gsap.registerPlugin(i.CSSPlugin)||n.gsap,s=o.core.Tween},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=r("./node_modules/html-entities/lib/named-references.js"),o=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),s=r("./node_modules/html-entities/lib/surrogate-pairs.js"),a=n(n({},i.namedReferences),{all:i.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},c={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===(u=(o=void 0===t?c:t).mode)?"specialChars":u,n=void 0===(f=o.numeric)?"decimal":f,i=o.level;if(!e)return"";var o,u,h=l[r],d=a[void 0===i?"all":i].characters,p="hexadecimal"===n;if(h.lastIndex=0,o=h.exec(e)){u="";var f=0;do{f!==o.index&&(u+=e.substring(f,o.index));var g=d[i=o[0]];if(!g){var m=i.length>1?s.getCodePoint(i,0):i.charCodeAt(0);g=(p?"&#x"+m.toString(16):"&#"+m)+";"}u+=g,f=o.index+i.length}while(o=h.exec(e));f!==e.length&&(u+=e.substring(f))}else u=e;return u};var u={scope:"body",level:"all"},h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,p={xml:{strict:h,attribute:d,body:i.bodyRegExps.xml},html4:{strict:h,attribute:d,body:i.bodyRegExps.html4},html5:{strict:h,attribute:d,body:i.bodyRegExps.html5}},f=n(n({},p),{all:p.html5}),g=String.fromCharCode,m=g(65533),v={level:"all"};t.decodeEntity=function(e,t){var r=void 0===(n=(void 0===t?v:t).level)?"all":n;if(!e)return"";var n=e,i=(e[e.length-1],a[r].entities[e]);if(i)n=i;else if("&"===e[0]&&"#"===e[1]){var l=e[2],c="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));n=c>=1114111?m:c>65535?s.fromCodePoint(c):g(o.numericUnicodeMap[c]||c)}return n},t.decode=function(e,t){var r=void 0===t?u:t,n=r.level,i=void 0===n?"all":n,l=r.scope,c=void 0===l?"xml"===i?"strict":"body":l;if(!e)return"";var h=f[i][c],d=a[i].entities,p="attribute"===c,v="strict"===c;h.lastIndex=0;var y,_=h.exec(e);if(_){y="";var b=0;do{b!==_.index&&(y+=e.substring(b,_.index));var w=_[0],x=w,T=w[w.length-1];if(p&&"="===T)x=w;else if(v&&";"!==T)x=w;else{var E=d[w];if(E)x=E;else if("&"===w[0]&&"#"===w[1]){var k=w[2],S="x"==k||"X"==k?parseInt(w.substr(3),16):parseInt(w.substr(2));x=S>=1114111?m:S>65535?s.fromCodePoint(S):g(o.numericUnicodeMap[S]||S)}}y+=x,b=_.index+w.length}while(_=h.exec(e));b!==e.length&&(y+=e.substring(b))}else y=e;return y}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),i=Object.create(null),o="undefined"==typeof document,s=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function c(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return s.call(t,(function(t){if(t.href){var i=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);h(i)&&!0!==t.visited&&i&&(l(t,i),r=!0)}})),r}function u(){var e=document.querySelectorAll("link");s.call(e,(function(e){!0!==e.visited&&l(e)}))}function h(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(o)return console.log("no window.document found, will not HMR CSS"),a;var r,s,l,h=function(e){var t=i[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),o=r[r.length-1];o&&(t=o.src)}i[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),i=r&&r[1];return i&&e?e.split(",").map((function(e){var r=new RegExp("".concat(i,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,i),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=c(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void u();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),u())},s=50,l=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(l),l=setTimeout(n,s)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],n=/([A-Z])/g,i={};function o(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),i=r.length;i--;){var o=r[i]+n;if(void 0!==t[o])return o}return e}e.exports=function(e){return e in i?i[e]:i[e]=o(e)},e.exports.dash=function(e){return e=o(e),n.test(e)&&(e="-"+e.replace(n,"-$1"),n.lastIndex=0),e.toLowerCase()}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,i){r=r||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(r);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var c=0;c<l;++c){var u,h,d,p,f=e[c].replace(s,"%20"),g=f.indexOf(n);g>=0?(u=f.substr(0,g),h=f.substr(g+1)):(u=f,h=""),d=decodeURIComponent(u),p=decodeURIComponent(h),t(o,d)?Array.isArray(o[d])?o[d].push(p):o[d]=[o[d],p]:o[d]=p}return o}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,i){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(i){var o=encodeURIComponent(t(i))+n;return Array.isArray(e[i])?e[i].map((function(e){return o+encodeURIComponent(t(e))})).join(r):o+encodeURIComponent(t(e[i]))})).join(r):i?encodeURIComponent(t(i))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/split-type/dist/index.js":(e,t,r)=>{"use strict";function n(e,t){return Object.getOwnPropertyNames(Object(e)).reduce(((r,n)=>{const i=Object.getOwnPropertyDescriptor(Object(e),n),o=Object.getOwnPropertyDescriptor(Object(t),n);return Object.defineProperty(r,n,o||i)}),{})}function i(e){return"string"==typeof e}function o(e){return Array.isArray(e)}function s(e={}){const t=n(e);let r;return void 0!==t.types?r=t.types:void 0!==t.split&&(r=t.split),void 0!==r&&(t.types=(i(r)||o(r)?String(r):"").split(",").map((e=>String(e).trim())).filter((e=>/((line)|(word)|(char))/i.test(e)))),(t.absolute||t.position)&&(t.absolute=t.absolute||/absolute/.test(e.position)),t}function a(e){const t=i(e)||o(e)?String(e):"";return{none:!t,lines:/line/i.test(t),words:/word/i.test(t),chars:/char/i.test(t)}}function l(e){return null!==e&&"object"==typeof e}function c(e){return l(e)&&/^(1|3|11)$/.test(e.nodeType)}function u(e){return o(e)?e:null==e?[]:function(e){return l(e)&&function(e){return"number"==typeof e&&e>-1&&e%1==0}(e.length)}(e)?Array.prototype.slice.call(e):[e]}function h(e){let t=e;return i(e)&&(t=/^(#[a-z]\w+)$/.test(e.trim())?document.getElementById(e.trim().slice(1)):document.querySelectorAll(e)),u(t).reduce(((e,t)=>[...e,...u(t).filter(c)]),[])}r.r(t),r.d(t,{default:()=>G}),(()=>{function e(...e){const t=e.length;for(let r=0;r<t;r++){const t=e[r];1===t.nodeType||11===t.nodeType?this.appendChild(t):this.appendChild(document.createTextNode(String(t)))}}function t(...e){for(;this.lastChild;)this.removeChild(this.lastChild);e.length&&this.append(...e)}function r(...e){const t=this.parentNode;let r=e.length;if(t)for(r||t.removeChild(this);r--;){let n=e[r];"object"!=typeof n?n=this.ownerDocument.createTextNode(n):n.parentNode&&n.parentNode.removeChild(n),r?t.insertBefore(this.previousSibling,n):t.replaceChild(n,this)}}"undefined"!=typeof Element&&(Element.prototype.append||(Element.prototype.append=e,DocumentFragment.prototype.append=e),Element.prototype.replaceChildren||(Element.prototype.replaceChildren=t,DocumentFragment.prototype.replaceChildren=t),Element.prototype.replaceWith||(Element.prototype.replaceWith=r,DocumentFragment.prototype.replaceWith=r))})();const{entries:d,keys:p,values:f}=Object,g="_splittype",m={};let v=0;function y(e,t,r){if(!l(e))return console.warn("[data.set] owner is not an object"),null;const n=e[g]||(e[g]=++v),i=m[n]||(m[n]={});return void 0===r?t&&Object.getPrototypeOf(t)===Object.prototype&&(m[n]={...i,...t}):void 0!==t&&(i[t]=r),r}function _(e,t){const r=l(e)?e[g]:null,n=r&&m[r]||{};return void 0===t?n:n[t]}function b(e){const t=e&&e[g];t&&(delete e[t],delete m[t])}const w="\\ud800-\\udfff",x="\\u0300-\\u036f\\ufe20-\\ufe23",T="\\u20d0-\\u20f0",E="\\ufe0e\\ufe0f",k="[\\ud800-\\udfff]",S=`[${x}\\u20d0-\\u20f0]`,q="\\ud83c[\\udffb-\\udfff]",A="[^\\ud800-\\udfff]",C="(?:\\ud83c[\\udde6-\\uddff]){2}",O="[\\ud800-\\udbff][\\udc00-\\udfff]",L="\\u200d",D=`${`(?:${S}|${q})`}?`,P="[\\ufe0e\\ufe0f]?",M=P+D+("(?:\\u200d(?:"+[A,C,O].join("|")+")"+P+D+")*"),R=`(?:${[`${A}${S}?`,S,C,O,k].join("|")}\n)`,j=RegExp(`${q}(?=${q})|${R}${M}`,"g"),N=RegExp(`[${[L,w,x,T,E].join("")}]`);function I(e){return N.test(e)}function F(e){return I(e)?function(e){return e.match(j)||[]}(e):function(e){return e.split("")}(e)}function B(e,t=""){var r;return(e=null==(r=e)?"":String(r))&&i(e)&&!t&&I(e)?F(e):e.split(t)}function z(e,t){const r=document.createElement(e);return t?(Object.keys(t).forEach((e=>{const n=t[e],o=i(n)?n.trim():n;null!==o&&""!==o&&("children"===e?r.append(...u(o)):r.setAttribute(e,o))})),r):r}var U={splitClass:"",lineClass:"line",wordClass:"word",charClass:"char",types:["lines","words","chars"],absolute:!1,tagName:"div"};function H(e,t){const r=a((t=n(U,t)).types),i=t.tagName,o=e.nodeValue,s=document.createDocumentFragment();let l=[],c=[];return/^\s/.test(o)&&s.append(" "),l=function(e,t=" "){return(e?String(e):"").trim().replace(/\s+/g," ").split(t)}(o).reduce(((e,n,o,a)=>{let l,u;return r.chars&&(u=B(n).map((e=>{const r=z(i,{class:`${t.splitClass} ${t.charClass}`,style:"display: inline-block;",children:e});return y(r,"isChar",!0),c=[...c,r],r}))),r.words||r.lines?(l=z(i,{class:`${t.wordClass} ${t.splitClass}`,style:"display: inline-block; "+(r.words&&t.absolute?"position: relative;":""),children:r.chars?u:n}),y(l,{isWord:!0,isWordStart:!0,isWordEnd:!0}),s.appendChild(l)):u.forEach((e=>{s.appendChild(e)})),o<a.length-1&&s.append(" "),r.words?e.concat(l):e}),[]),/\s$/.test(o)&&s.append(" "),e.replaceWith(s),{words:l,chars:c}}function V(e,t){const r=e.nodeType,n={words:[],chars:[]};if(!/(1|3|11)/.test(r))return n;if(3===r&&/\S/.test(e.nodeValue))return H(e,t);const i=u(e.childNodes);if(i.length&&(y(e,"isSplit",!0),!_(e).isRoot)){e.style.display="inline-block",e.style.position="relative";const t=e.nextSibling,r=e.previousSibling,n=e.textContent||"",i=t?t.textContent:" ",o=r?r.textContent:" ";y(e,{isWordEnd:/\s$/.test(n)||/^\s/.test(i),isWordStart:/^\s/.test(n)||/\s$/.test(o)})}return i.reduce(((e,r)=>{const{words:n,chars:i}=V(r,t);return{words:[...e.words,...n],chars:[...e.chars,...i]}}),n)}function W(e){_(e).isWord?(b(e),e.replaceWith(...e.childNodes)):u(e.children).forEach((e=>W(e)))}function Y(e,t,r){const n=a(t.types),i=t.tagName,o=e.getElementsByTagName("*"),s=[];let l,c,h,d=[],p=null,f=[];const g=e.parentElement,m=e.nextElementSibling,v=document.createDocumentFragment(),b=window.getComputedStyle(e),w=b.textAlign,x=.2*parseFloat(b.fontSize);return t.absolute&&(h={left:e.offsetLeft,top:e.offsetTop,width:e.offsetWidth},c=e.offsetWidth,l=e.offsetHeight,y(e,{cssWidth:e.style.width,cssHeight:e.style.height})),u(o).forEach((i=>{const o=i.parentElement===e,{width:a,height:l,top:c,left:u}=function(e,t,r,n){if(!r.absolute)return{top:t?e.offsetTop:null};const i=e.offsetParent,[o,s]=n;let a=0,l=0;if(i&&i!==document.body){const e=i.getBoundingClientRect();a=e.x+o,l=e.y+s}const{width:c,height:u,x:h,y:d}=e.getBoundingClientRect();return{width:c,height:u,top:d+s-l,left:h+o-a}}(i,o,t,r);/^br$/i.test(i.nodeName)||(n.lines&&o&&((null===p||c-p>=x)&&(p=c,s.push(d=[])),d.push(i)),t.absolute&&y(i,{top:c,left:u,width:a,height:l}))})),g&&g.removeChild(e),n.lines&&(f=s.map((e=>{const r=z(i,{class:`${t.splitClass} ${t.lineClass}`,style:`display: block; text-align: ${w}; width: 100%;`});y(r,"isLine",!0);const n={height:0,top:1e4};return v.appendChild(r),e.forEach(((e,t,i)=>{const{isWordEnd:o,top:s,height:a}=_(e),l=i[t+1];n.height=Math.max(n.height,a),n.top=Math.min(n.top,s),r.appendChild(e),o&&_(l).isWordStart&&r.append(" ")})),t.absolute&&y(r,{height:n.height,top:n.top}),r})),n.words||W(v),e.replaceChildren(v)),t.absolute&&(e.style.width=`${e.style.width||c}px`,e.style.height=`${l}px`,u(o).forEach((e=>{const{isLine:t,top:r,left:n,width:i,height:o}=_(e),s=_(e.parentElement),a=!t&&s.isLine;e.style.top=`${a?r-s.top:r}px`,e.style.left=t?`${h.left}px`:n-(a?h.left:0)+"px",e.style.height=`${o}px`,e.style.width=t?`${h.width}px`:`${i}px`,e.style.position="absolute"}))),g&&(m?g.insertBefore(e,m):g.appendChild(e)),f}let X=n(U,{});class G{static get data(){return m}static get defaults(){return X}static set defaults(e){X=n(X,s(e))}static setDefaults(e){return X=n(X,s(e)),U}static revert(e){h(e).forEach((e=>{const{isSplit:t,html:r,cssWidth:n,cssHeight:i}=_(e);t&&(e.innerHTML=r,e.style.width=n||"",e.style.height=i||"",b(e))}))}static create(e,t){return new G(e,t)}constructor(e,t){this.isSplit=!1,this.settings=n(X,s(t)),this.elements=h(e),this.split()}split(e){this.revert(),this.elements.forEach((e=>{y(e,"html",e.innerHTML)})),this.lines=[],this.words=[],this.chars=[];const t=[window.pageXOffset,window.pageYOffset];void 0!==e&&(this.settings=n(this.settings,s(e)));const r=a(this.settings.types);r.none||(this.elements.forEach((e=>{y(e,"isRoot",!0);const{words:t,chars:r}=V(e,this.settings);this.words=[...this.words,...t],this.chars=[...this.chars,...r]})),this.elements.forEach((e=>{if(r.lines||this.settings.absolute){const r=Y(e,this.settings,t);this.lines=[...this.lines,...r]}})),this.isSplit=!0,window.scrollTo(t[0],t[1]),d(m).forEach((([e,{isRoot:t,isSplit:r}])=>{t&&r||(m[e]=null,delete m[e])})))}revert(){this.isSplit&&(this.lines=null,this.words=null,this.chars=null,this.isSplit=!1),G.revert(this.elements)}}},"./node_modules/tiny-emitter/index.js":e=>{function t(){}t.prototype={on:function(e,t,r){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:r}),this},once:function(e,t,r){var n=this;function i(){n.off(e,i),t.apply(r,arguments)}return i._=t,this.on(e,i,r)},emit:function(e){for(var t=[].slice.call(arguments,1),r=((this.e||(this.e={}))[e]||[]).slice(),n=0,i=r.length;n<i;n++)r[n].fn.apply(r[n].ctx,t);return this},off:function(e,t){var r=this.e||(this.e={}),n=r[e],i=[];if(n&&t)for(var o=0,s=n.length;o<s;o++)n[o].fn!==t&&n[o].fn._!==t&&i.push(n[o]);return i.length?r[e]=i:delete r[e],this}},e.exports=t,e.exports.TinyEmitter=t},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(i){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof r.g&&r.g;o.global!==o&&o.window!==o&&o.self;var s,a=2147483647,l=36,c=/^xn--/,u=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function g(e){throw RangeError(d[e])}function m(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+m((e=e.replace(h,".")).split("."),t).join(".")}function y(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function _(e){return m(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=l)e=p(e/35);return p(n+36*e/(e+38))}function x(e){var t,r,n,i,o,s,c,u,h,d,f,m=[],v=e.length,y=0,b=128,x=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&g("not-basic"),m.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<v;){for(o=y,s=1,c=l;i>=v&&g("invalid-input"),((u=(f=e.charCodeAt(i++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||u>p((a-y)/s))&&g("overflow"),y+=u*s,!(u<(h=c<=x?1:c>=x+26?26:c-x));c+=l)s>p(a/(d=l-h))&&g("overflow"),s*=d;x=w(y-o,t=m.length+1,0==o),p(y/t)>a-b&&g("overflow"),b+=p(y/t),y%=t,m.splice(y++,0,b)}return _(m)}function T(e){var t,r,n,i,o,s,c,u,h,d,m,v,_,x,T,E=[];for(v=(e=y(e)).length,t=128,r=0,o=72,s=0;s<v;++s)(m=e[s])<128&&E.push(f(m));for(n=i=E.length,i&&E.push("-");n<v;){for(c=a,s=0;s<v;++s)(m=e[s])>=t&&m<c&&(c=m);for(c-t>p((a-r)/(_=n+1))&&g("overflow"),r+=(c-t)*_,t=c,s=0;s<v;++s)if((m=e[s])<t&&++r>a&&g("overflow"),m==t){for(u=r,h=l;!(u<(d=h<=o?1:h>=o+26?26:h-o));h+=l)T=u-d,x=l-d,E.push(f(b(d+T%x,0))),u=p(T/x);E.push(f(b(u,0))),o=w(r,_,n==i),r=0,++n}++r,++t}return E.join("")}s={version:"1.3.2",ucs2:{decode:y,encode:_},decode:x,encode:T,toASCII:function(e){return v(e,(function(e){return u.test(e)?"xn--"+T(e):e}))},toUnicode:function(e){return v(e,(function(e){return c.test(e)?x(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return s}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),i=r("./node_modules/url/util.js");function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=_,t.resolve=function(e,t){return _(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?_(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=_(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),h=["%","/","?",";","#"].concat(u),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,g={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=r("./node_modules/querystring/index.js");function _(e,t,r){if(e&&i.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),a=-1!==o&&o<e.indexOf("#")?"?":"#",c=e.split(a);c[0]=c[0].replace(/\\/g,"/");var _=e=c.join(a);if(_=_.trim(),!r&&1===e.split("#").length){var b=l.exec(_);if(b)return this.path=_,this.href=_,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=s.exec(_);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,_=_.substr(w.length)}if(r||w||_.match(/^\/\/[^@\/]+@[^@\/]+/)){var T="//"===_.substr(0,2);!T||w&&m[w]||(_=_.substr(2),this.slashes=!0)}if(!m[w]&&(T||w&&!v[w])){for(var E,k,S=-1,q=0;q<d.length;q++){-1!==(A=_.indexOf(d[q]))&&(-1===S||A<S)&&(S=A)}-1!==(k=-1===S?_.lastIndexOf("@"):_.lastIndexOf("@",S))&&(E=_.slice(0,k),_=_.slice(k+1),this.auth=decodeURIComponent(E)),S=-1;for(q=0;q<h.length;q++){var A;-1!==(A=_.indexOf(h[q]))&&(-1===S||A<S)&&(S=A)}-1===S&&(S=_.length),this.host=_.slice(0,S),_=_.slice(S),this.parseHost(),this.hostname=this.hostname||"";var C="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!C)for(var O=this.hostname.split(/\./),L=(q=0,O.length);q<L;q++){var D=O[q];if(D&&!D.match(p)){for(var P="",M=0,R=D.length;M<R;M++)D.charCodeAt(M)>127?P+="x":P+=D[M];if(!P.match(p)){var j=O.slice(0,q),N=O.slice(q+1),I=D.match(f);I&&(j.push(I[1]),N.unshift(I[2])),N.length&&(_="/"+N.join(".")+_),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),C||(this.hostname=n.toASCII(this.hostname));var F=this.port?":"+this.port:"",B=this.hostname||"";this.host=B+F,this.href+=this.host,C&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==_[0]&&(_="/"+_))}if(!g[x])for(q=0,L=u.length;q<L;q++){var z=u[q];if(-1!==_.indexOf(z)){var U=encodeURIComponent(z);U===z&&(U=escape(z)),_=_.split(z).join(U)}}var H=_.indexOf("#");-1!==H&&(this.hash=_.substr(H),_=_.slice(0,H));var V=_.indexOf("?");if(-1!==V?(this.search=_.substr(V),this.query=_.substr(V+1),t&&(this.query=y.parse(this.query)),_=_.slice(0,V)):t&&(this.search="",this.query={}),_&&(this.pathname=_),v[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var W=this.search||"";this.path=F+W}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,s="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(s=y.stringify(this.query));var a=this.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+o+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},o.prototype.resolve=function(e){return this.resolveObject(_(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var r=new o,n=Object.keys(this),s=0;s<n.length;s++){var a=n[s];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),c=0;c<l.length;c++){var u=l[c];"protocol"!==u&&(r[u]=e[u])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var p=h[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||m[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var g=r.pathname||"",y=r.search||"";r.path=g+y}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var _=r.pathname&&"/"===r.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=b||_||r.host&&e.pathname,x=w,T=r.pathname&&r.pathname.split("/")||[],E=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===T[0]?T[0]=r.host:T.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),w=w&&(""===f[0]||""===T[0])),b)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,T=f;else if(f.length)T||(T=[]),T.pop(),T=T.concat(f),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(E)r.hostname=r.host=T.shift(),(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.host=r.hostname=C.shift());return r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!T.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var k=T.slice(-1)[0],S=(r.host||e.host||T.length>1)&&("."===k||".."===k)||""===k,q=0,A=T.length;A>=0;A--)"."===(k=T[A])?T.splice(A,1):".."===k?(T.splice(A,1),q++):q&&(T.splice(A,1),q--);if(!w&&!x)for(;q--;q)T.unshift("..");!w||""===T[0]||T[0]&&"/"===T[0].charAt(0)||T.unshift(""),S&&"/"!==T.join("/").substr(-1)&&T.push("");var C,O=""===T[0]||T[0]&&"/"===T[0].charAt(0);E&&(r.hostname=r.host=O?"":T.length?T.shift():"",(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.host=r.hostname=C.shift()));return(w=w||r.host&&T.length)&&!O&&T.unshift(""),T.length?r.pathname=T.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/virtual-scroll/lib/virtualscroll.js":function(e){e.exports=function(){var e=0;function t(t){return"__private_"+e+++"_"+t}function r(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}function n(){}n.prototype={on:function(e,t,r){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:r}),this},once:function(e,t,r){var n=this;function i(){n.off(e,i),t.apply(r,arguments)}return i._=t,this.on(e,i,r)},emit:function(e){for(var t=[].slice.call(arguments,1),r=((this.e||(this.e={}))[e]||[]).slice(),n=0,i=r.length;n<i;n++)r[n].fn.apply(r[n].ctx,t);return this},off:function(e,t){var r=this.e||(this.e={}),n=r[e],i=[];if(n&&t)for(var o=0,s=n.length;o<s;o++)n[o].fn!==t&&n[o].fn._!==t&&i.push(n[o]);return i.length?r[e]=i:delete r[e],this}};var i=n;i.TinyEmitter=n;var o,s="virtualscroll",a=t("options"),l=t("el"),c=t("emitter"),u=t("event"),h=t("touchStart"),d=t("bodyTouchAction");return function(){function e(e){var t=this;Object.defineProperty(this,a,{writable:!0,value:void 0}),Object.defineProperty(this,l,{writable:!0,value:void 0}),Object.defineProperty(this,c,{writable:!0,value:void 0}),Object.defineProperty(this,u,{writable:!0,value:void 0}),Object.defineProperty(this,h,{writable:!0,value:void 0}),Object.defineProperty(this,d,{writable:!0,value:void 0}),this._onWheel=function(e){var n=r(t,a)[a],i=r(t,u)[u];i.deltaX=e.wheelDeltaX||-1*e.deltaX,i.deltaY=e.wheelDeltaY||-1*e.deltaY,o.isFirefox&&1===e.deltaMode&&(i.deltaX*=n.firefoxMultiplier,i.deltaY*=n.firefoxMultiplier),i.deltaX*=n.mouseMultiplier,i.deltaY*=n.mouseMultiplier,t._notify(e)},this._onMouseWheel=function(e){var n=r(t,u)[u];n.deltaX=e.wheelDeltaX?e.wheelDeltaX:0,n.deltaY=e.wheelDeltaY?e.wheelDeltaY:e.wheelDelta,t._notify(e)},this._onTouchStart=function(e){var n=e.targetTouches?e.targetTouches[0]:e;r(t,h)[h].x=n.pageX,r(t,h)[h].y=n.pageY},this._onTouchMove=function(e){var n=r(t,a)[a];n.preventTouch&&!e.target.classList.contains(n.unpreventTouchClass)&&e.preventDefault();var i=r(t,u)[u],o=e.targetTouches?e.targetTouches[0]:e;i.deltaX=(o.pageX-r(t,h)[h].x)*n.touchMultiplier,i.deltaY=(o.pageY-r(t,h)[h].y)*n.touchMultiplier,r(t,h)[h].x=o.pageX,r(t,h)[h].y=o.pageY,t._notify(e)},this._onKeyDown=function(e){var n=r(t,u)[u];n.deltaX=n.deltaY=0;var i=window.innerHeight-40;switch(e.keyCode){case 37:case 38:n.deltaY=r(t,a)[a].keyStep;break;case 39:case 40:n.deltaY=-r(t,a)[a].keyStep;break;case 32:n.deltaY=i*(e.shiftKey?1:-1);break;default:return}t._notify(e)},r(this,l)[l]=window,e&&e.el&&(r(this,l)[l]=e.el,delete e.el),o||(o={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in document,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1}),r(this,a)[a]=Object.assign({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",useKeyboard:!0,useTouch:!0},e),r(this,c)[c]=new i,r(this,u)[u]={y:0,x:0,deltaX:0,deltaY:0},r(this,h)[h]={x:null,y:null},r(this,d)[d]=null,void 0!==r(this,a)[a].passive&&(this.listenerOptions={passive:r(this,a)[a].passive})}var t=e.prototype;return t._notify=function(e){var t=r(this,u)[u];t.x+=t.deltaX,t.y+=t.deltaY,r(this,c)[c].emit(s,{x:t.x,y:t.y,deltaX:t.deltaX,deltaY:t.deltaY,originalEvent:e})},t._bind=function(){o.hasWheelEvent&&r(this,l)[l].addEventListener("wheel",this._onWheel,this.listenerOptions),o.hasMouseWheelEvent&&r(this,l)[l].addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),o.hasTouch&&r(this,a)[a].useTouch&&(r(this,l)[l].addEventListener("touchstart",this._onTouchStart,this.listenerOptions),r(this,l)[l].addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),o.hasPointer&&o.hasTouchWin&&(r(this,d)[d]=document.body.style.msTouchAction,document.body.style.msTouchAction="none",r(this,l)[l].addEventListener("MSPointerDown",this._onTouchStart,!0),r(this,l)[l].addEventListener("MSPointerMove",this._onTouchMove,!0)),o.hasKeyDown&&r(this,a)[a].useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},t._unbind=function(){o.hasWheelEvent&&r(this,l)[l].removeEventListener("wheel",this._onWheel),o.hasMouseWheelEvent&&r(this,l)[l].removeEventListener("mousewheel",this._onMouseWheel),o.hasTouch&&(r(this,l)[l].removeEventListener("touchstart",this._onTouchStart),r(this,l)[l].removeEventListener("touchmove",this._onTouchMove)),o.hasPointer&&o.hasTouchWin&&(document.body.style.msTouchAction=r(this,d)[d],r(this,l)[l].removeEventListener("MSPointerDown",this._onTouchStart,!0),r(this,l)[l].removeEventListener("MSPointerMove",this._onTouchMove,!0)),o.hasKeyDown&&r(this,a)[a].useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},t.on=function(e,t){r(this,c)[c].on(s,e,t);var n=r(this,c)[c].e;n&&n[s]&&1===n[s].length&&this._bind()},t.off=function(e,t){r(this,c)[c].off(s,e,t);var n=r(this,c)[c].e;(!n[s]||n[s].length<=0)&&this._unbind()},t.destroy=function(){r(this,c)[c].off(),this._unbind()},e}()}()},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/webpack-dev-server/client/utils/log.js");function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){n.log.error(e)}}var t,r,o;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&i(t.prototype,r),o&&i(t,o),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/webpack/hot/log.js"),i=r.n(n),o=r("./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),s=r.n(o),a=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),l=r("./node_modules/webpack-dev-server/client/socket.js"),c=r("./node_modules/webpack-dev-server/client/overlay.js"),u=r("./node_modules/webpack-dev-server/client/utils/log.js"),h=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),p=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js"),f={isUnloading:!1,currentHash:r.h()},g={hot:!1,liveReload:!1,progress:!1,overlay:!1},m=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info");function v(e){i().setLogLevel("verbose"===e||"log"===e?"info":e),(0,u.setLogLevel)(e)}"true"===m.hot&&(g.hot=!0,u.log.info("Hot Module Replacement enabled.")),"true"===m["live-reload"]&&(g.liveReload=!0,u.log.info("Live Reloading enabled.")),m.logging&&(g.logging=m.logging),g.logging&&v(g.logging),self.addEventListener("beforeunload",(function(){f.isUnloading=!0}));var y={hot:function(){"false"!==m.hot&&(g.hot=!0,u.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==m["live-reload"]&&(g.liveReload=!0,u.log.info("Live Reloading enabled."))},invalid:function(){u.log.info("App updated. Recompiling..."),g.overlay&&(0,c.hide)(),(0,h.default)("Invalid")},hash:function(e){f.previousHash=f.currentHash,f.currentHash=e},logging:v,overlay:function(e){"undefined"!=typeof document&&(g.overlay=e)},progress:function(e){g.progress=e},"progress-update":function(e){g.progress&&u.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,h.default)("Progress",e)},"still-ok":function(){u.log.info("Nothing changed."),g.overlay&&(0,c.hide)(),(0,h.default)("StillOk")},ok:function(){(0,h.default)("Ok"),g.overlay&&(0,c.hide)(),(0,d.default)(g,f)},"content-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e){u.log.warn("Warnings while compiling.");var t=e.map((function(e){var t=(0,c.formatProblem)("warning",e),r=t.header,n=t.body;return"".concat(r,"\n").concat(s()(n))}));(0,h.default)("Warnings",t);for(var r=0;r<t.length;r++)u.log.warn(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.warnings)&&(0,c.show)("warning",e),(0,d.default)(g,f)},errors:function(e){u.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,c.formatProblem)("error",e),r=t.header,n=t.body;return"".concat(r,"\n").concat(s()(n))}));(0,h.default)("Errors",t);for(var r=0;r<t.length;r++)u.log.error(t[r]);("boolean"==typeof g.overlay?g.overlay:g.overlay&&g.overlay.errors)&&(0,c.show)("error",e)},error:function(e){u.log.error(e)},close:function(){u.log.info("Disconnected!"),g.overlay&&(0,c.hide)(),(0,h.default)("Close")}},_=(0,p.default)(m);(0,l.default)(_,y)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=o;var s=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),c=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[s]=t,this.getChildLogger=r}var t,n,c;return t=e,n=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this[s](o.error,r)}}},{key:"trace",value:function(){this[s](o.trace,["Trace"])}},{key:"clear",value:function(){this[s](o.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[s](o.groupEnd,t)}},{key:"profile",value:function(e){this[s](o.profile,[e])}},{key:"profileEnd",value:function(e){this[s](o.profileEnd,[e])}},{key:"time",value:function(e){this[a]=this[a]||new Map,this[a].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var n=process.hrtime(t);this[s](o.time,[e].concat(r(n)))}},{key:"timeEnd",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var n=process.hrtime(t);this[a].delete(e),this[s](o.time,[e].concat(r(n)))}},{key:"timeAggregate",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[a].delete(e),this[l]=this[l]||new Map;var n=this[l].get(e);void 0!==n&&(r[1]+n[1]>1e9?(r[0]+=n[0]+1,r[1]=r[1]-1e9+n[1]):(r[0]+=n[0],r[1]+=n[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&this[s](o.time,[e].concat(r(t)))}}}],n&&i(t.prototype,n),c&&i(t,c),e}();t.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function n(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=r("./node_modules/webpack/lib/logging/Logger.js").LogType,s=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,i=e.debug,l=void 0!==i&&i,c=e.console,u="boolean"==typeof l?[function(){return l}]:[].concat(l).map(s),h=a["".concat(r)]||0;return function(e,t,r){var i=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(n(r.slice(1))):["[".concat(e,"]")].concat(n(r)):[]},s=u.some((function(t){return t(e)}));switch(t){case o.debug:if(!s)return;"function"==typeof c.debug?c.debug.apply(c,n(i())):c.log.apply(c,n(i()));break;case o.log:if(!s&&h>a.log)return;c.log.apply(c,n(i()));break;case o.info:if(!s&&h>a.info)return;c.info.apply(c,n(i()));break;case o.warn:if(!s&&h>a.warn)return;c.warn.apply(c,n(i()));break;case o.error:if(!s&&h>a.error)return;c.error.apply(c,n(i()));break;case o.trace:if(!s)return;c.trace();break;case o.groupCollapsed:if(!s&&h>a.log)return;if(!s&&h>a.verbose){"function"==typeof c.groupCollapsed?c.groupCollapsed.apply(c,n(i())):c.log.apply(c,n(i()));break}case o.group:if(!s&&h>a.log)return;"function"==typeof c.group?c.group.apply(c,n(i())):c.log.apply(c,n(i()));break;case o.groupEnd:if(!s&&h>a.log)return;"function"==typeof c.groupEnd&&c.groupEnd();break;case o.time:if(!s&&h>a.log)return;var l=1e3*r[1]+r[2]/1e6,d="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof c.logTime?c.logTime(d):c.log(d);break;case o.profile:"function"==typeof c.profile&&c.profile.apply(c,n(i()));break;case o.profileEnd:"function"==typeof c.profileEnd&&c.profileEnd.apply(c,n(i()));break;case o.clear:if(!s&&h>a.log)return;"function"==typeof c.clear&&c.clear();break;case o.status:if(!s&&h>a.info)return;"function"==typeof c.status?0===r.length?c.status():c.status.apply(c,n(i())):0!==r.length&&c.info.apply(c,n(i()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}var i=r("./client-src/modules/logger/SyncBailHookFake.js"),o=r("./node_modules/webpack/lib/logging/Logger.js").Logger,s=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=s(a);t.getLogger=function(e){return new o((function(r,n){void 0===t.hooks.log.call(e,r,n)&&l(e,r,n)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){n(a,e),l=s(a)},t.hooks={log:new i(["origin","type","args"])}}},r={};function n(t){var i=r[t];if(void 0!==i)return i.exports;var o=r[t]={exports:{}};return e[t](o,o.exports,n),o.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};!function(){n.r(i),n.d(i,{default:function(){return e}});var e=n("./node_modules/webpack/lib/logging/runtime.js")}();var o=t;for(var s in i)o[s]=i[s];i.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":(e,t)=>{!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,t,r){r.r(t),r.d(t,{default:function(){return i}});var n=r("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function i(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,n.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,t,r){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyFirst,r=void 0!==t&&t,n=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(n,r?void 0:"g")}r.r(t),r.d(t,{default:function(){return n}})}},r={};function n(t){var i=r[t];if(void 0!==i)return i.exports;var o=r[t]={exports:{}};return e[t](o,o.exports,n),o.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};!function(){n.r(i);var e=n("./node_modules/strip-ansi/index.js");i.default=e.default}();var o=t;for(var s in i)o[s]=i[s];i.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{formatProblem:()=>d,show:()=>p,hide:()=>h});var n,i,o=r("./node_modules/ansi-html-community/index.js"),s=r.n(o),a=r("./node_modules/html-entities/lib/index.js"),l={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},c=[];function u(e){i?e(i):(c.push(e),n||((n=document.createElement("iframe")).id="webpack-dev-server-client-overlay",n.src="about:blank",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.border="none",n.style.zIndex=9999999999,n.onload=function(){(i=n.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",i.style.position="fixed",i.style.boxSizing="border-box",i.style.left=0,i.style.top=0,i.style.right=0,i.style.bottom=0,i.style.width="100vw",i.style.height="100vh",i.style.backgroundColor="rgba(0, 0, 0, 0.85)",i.style.color="#E8E8E8",i.style.fontFamily="Menlo, Consolas, monospace",i.style.fontSize="large",i.style.padding="2rem",i.style.lineHeight="1.2",i.style.whiteSpace="pre-wrap",i.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){h()})),i.appendChild(e),i.appendChild(t),i.appendChild(document.createElement("br")),i.appendChild(document.createElement("br")),n.contentDocument.body.appendChild(i),c.forEach((function(e){e(i)})),c=[],n.onload=null},document.body.appendChild(n)))}function h(){n&&(document.body.removeChild(n),n=null,i=null)}function d(e,t){var r="warning"===e?"WARNING":"ERROR",n="";if("string"==typeof t)n+=t;else{var i=t.file||"",o=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",s=t.loc;r+="".concat(o||i?" in ".concat(o?"".concat(o).concat(i?" (".concat(i,")"):""):i).concat(s?" ".concat(s):""):""),n+=t.message||""}return{header:r,body:n}}function p(e,t){u((function(){t.forEach((function(t){var r=document.createElement("div"),n=document.createElement("span"),o=d(e,t),c=o.header,u=o.body;n.innerText=c,n.style.color="#".concat(l.red);var h=s()((0,a.encode)(u)),p=document.createElement("div");p.innerHTML=h,r.appendChild(n),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),r.appendChild(p),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),i.appendChild(r)}))}))}s().setColors(l)},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=void 0!==i?void 0!==i.default?i.default:i:n.default,s=0,a=null,l=function(e,t){(a=new o(e)).onOpen((function(){s=0})),a.onClose((function(){if(0===s&&t.close(),a=null,s<=10){var r=1e3*Math.pow(2,s)+100*Math.random();s+=1,setTimeout((function(){l(e,t)}),r)}})),a.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data)}))};const c=l},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/url/url.js");const i=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var i=e.protocol||self.location.protocol;("auto:"===i||t&&r&&"https:"===self.location.protocol)&&(i=self.location.protocol),i=i.replace(/^(?:http|.+-extension|file)/i,"ws");var o="";e.username&&(o=e.username,e.password&&(o=o.concat(":",e.password)));var s=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),a=e.port;a&&"0"!==a||(a=self.location.port);var l="/ws";return e.pathname&&!e.fromCurrentScript&&(l=e.pathname),n.format({protocol:i,auth:o,hostname:s,port:a,pathname:l,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>s,setLogLevel:()=>o});var n=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),i=r.n(n);function o(e){i().configureDefaultLogger({level:e})}o("info");var s=i().getLogger("webpack-dev-server")},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/url/url.js"),i=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const o=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.substr(1).split("&"),o=0;o<r.length;o++){var s=r[o].split("=");t[s[0]]=decodeURIComponent(s[1])}else{var a=(0,i.default)();if(a){var l;try{l=new URL(a,self.location.href)}catch(e){}l&&((t=l).fromCurrentScript=!0)}else(t=n.parse(self.location.href,!0,!0)).fromCurrentScript=!0}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/webpack/hot/emitter.js"),i=r.n(n),o=r("./node_modules/webpack-dev-server/client/utils/log.js");const s=function(e,t){var r=e.hot,n=e.liveReload;if(!t.isUnloading){var s=t.currentHash,a=t.previousHash;if(!(s.indexOf(a)>=0)){var l=self.location.search.toLowerCase(),c=-1===l.indexOf("webpack-dev-server-hot=false"),u=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&c)o.log.info("App hot update..."),i().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(n&&u)var h=self,d=self.setInterval((function(){("about:"!==h.location.protocol||(h=h.parent).parent===h)&&p(h,d)}))}}function p(e,t){clearInterval(t),o.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var n,i=function(){return n.indexOf(r.h())>=0},o=r("./node_modules/webpack/hot/log.js"),s=function t(){e.hot.check(!0).then((function(e){if(!e)return o("warning","[HMR] Cannot find update. Need to do a full reload!"),o("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();i()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),i()&&o("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(o("warning","[HMR] Cannot apply update. Need to do a full reload!"),o("warning","[HMR] "+o.formatError(t)),window.location.reload()):o("warning","[HMR] Update failed: "+o.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){n=t,i()||"idle"!==e.hot.status()||(o("info","[HMR] Checking for updates on the server..."),s())})),o("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var n=e.filter((function(e){return t&&t.indexOf(e)<0})),i=r("./node_modules/webpack/hot/log.js");(n.length>0&&(i("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),n.forEach((function(e){i("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(i("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");i.groupCollapsed("info","[HMR]  - "+t.pop()),i("info","[HMR]  - "+e),i.groupEnd("info")}else i("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&i("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):i("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function i(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var o=console.group||r,s=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=i(o),e.exports.groupCollapsed=i(s),e.exports.groupEnd=i(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)},"./node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/tiny-emitter/index.js"),i=r("./node_modules/virtual-scroll/lib/virtualscroll.js");function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}function s(e,t){let r=e%t;return r<0&&(r+=t),r}const a=["duration","easing"];class l{to(e,t={}){let{duration:r=1,easing:n=(e=>e)}=t,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t.indexOf(r=o[n])>=0||(i[r]=e[r]);return i}(t,a);this.target=e,this.fromKeys=o({},i),this.toKeys=o({},i),this.keys=Object.keys(o({},i)),this.keys.forEach((t=>{this.fromKeys[t]=e[t]})),this.duration=r,this.easing=n,this.currentTime=0,this.isRunning=!0}stop(){this.isRunning=!1}raf(e){if(!this.isRunning)return;this.currentTime=Math.min(this.currentTime+e,this.duration);const t=this.easing(this.progress);this.keys.forEach((e=>{const r=this.fromKeys[e];this.target[e]=r+(this.toKeys[e]-r)*t})),1===t&&this.stop()}get progress(){return this.currentTime/this.duration}}class c extends n{constructor({duration:e=1.2,easing:t=(e=>Math.min(1,1.001-Math.pow(2,-10*e))),smooth:r=!0,mouseMultiplier:n=1,smoothTouch:o=!1,touchMultiplier:s=2,direction:a="vertical",gestureDirection:c="vertical",infinite:u=!1,wrapper:h=window,content:d=document.body}={}){var p,f,g;super(),this.onWindowResize=()=>{this.wrapperWidth=window.innerWidth,this.wrapperHeight=window.innerHeight},this.onWrapperResize=([e])=>{if(e){const t=e.contentRect;this.wrapperWidth=t.width,this.wrapperHeight=t.height}},this.onContentResize=([e])=>{if(e){const t=e.contentRect;this.contentWidth=t.width,this.contentHeight=t.height}},this.onVirtualScroll=({deltaY:e,deltaX:t,originalEvent:r})=>{const n=!!r.composedPath().find((e=>e.hasAttribute&&e.hasAttribute("data-lenis-prevent")));if(r.ctrlKey||n)return;if(this.smooth=r.changedTouches?this.smoothTouch:this.options.smooth,this.stopped)return void r.preventDefault();if(!this.smooth)return;if(4===r.buttons)return;this.smooth&&r.preventDefault();let i=0;i="both"===this.gestureDirection?t+e:"horizontal"===this.gestureDirection?t:e,this.targetScroll-=i,this.scrollTo(this.targetScroll)},this.onScroll=e=>{this.isScrolling&&this.smooth||(this.targetScroll=this.scroll=this.lastScroll=this.wrapperNode[this.scrollProperty],this.notify())},window.lenisVersion="0.2.20",this.options={duration:e,easing:t,smooth:r,mouseMultiplier:n,smoothTouch:o,touchMultiplier:s,direction:a,gestureDirection:c,infinite:u,wrapper:h,content:d},this.duration=e,this.easing=t,this.smooth=r,this.mouseMultiplier=n,this.smoothTouch=o,this.touchMultiplier=s,this.direction=a,this.gestureDirection=c,this.infinite=u,this.wrapperNode=h,this.contentNode=d,this.wrapperNode.addEventListener("scroll",this.onScroll),this.wrapperNode===window?(this.wrapperNode.addEventListener("resize",this.onWindowResize),this.onWindowResize()):(this.wrapperHeight=this.wrapperNode.offsetHeight,this.wrapperWidth=this.wrapperNode.offsetWidth,this.wrapperObserver=new ResizeObserver(this.onWrapperResize),this.wrapperObserver.observe(this.wrapperNode)),this.contentHeight=this.contentNode.offsetHeight,this.contentWidth=this.contentNode.offsetWidth,this.contentObserver=new ResizeObserver(this.onContentResize),this.contentObserver.observe(this.contentNode),this.targetScroll=this.scroll=this.lastScroll=this.wrapperNode[this.scrollProperty],this.animate=new l;const m=(null==(p=navigator)||null==(f=p.userAgentData)?void 0:f.platform)||(null==(g=navigator)?void 0:g.platform)||"unknown";this.virtualScroll=new i({el:this.wrapperNode,firefoxMultiplier:50,mouseMultiplier:this.mouseMultiplier*(m.includes("Win")?.84:.4),touchMultiplier:this.touchMultiplier,passive:!1}),this.virtualScroll.on(this.onVirtualScroll)}get scrollProperty(){let e;return e=this.wrapperNode===window?"horizontal"===this.direction?"scrollX":"scrollY":"horizontal"===this.direction?"scrollLeft":"scrollTop",e}start(){this.stopped=!1}stop(){this.stopped=!0,this.animate.stop()}destroy(){var e;this.wrapperNode===window&&this.wrapperNode.removeEventListener("resize",this.onWindowResize),this.wrapperNode.removeEventListener("scroll",this.onScroll),this.virtualScroll.destroy(),null==(e=this.wrapperObserver)||e.disconnect(),this.contentObserver.disconnect()}get limit(){return"horizontal"===this.direction?this.contentWidth-this.wrapperWidth:this.contentHeight-this.wrapperHeight}raf(e){const t=e-(this.now||0);this.now=e,!this.stopped&&this.smooth&&(this.lastScroll=this.scroll,this.animate.raf(.001*t),this.scroll===this.targetScroll&&(this.lastScroll=this.scroll),this.isScrolling&&(this.setScroll(this.scroll),this.notify()),this.isScrolling=this.scroll!==this.targetScroll)}get velocity(){return this.scroll-this.lastScroll}setScroll(e){let t=this.infinite?s(e,this.limit):e;"horizontal"===this.direction?this.wrapperNode.scrollTo(t,0):this.wrapperNode.scrollTo(0,t)}notify(){let e=this.infinite?s(this.scroll,this.limit):this.scroll;this.emit("scroll",{scroll:e,limit:this.limit,velocity:this.velocity,direction:this.lastScroll<e?1:-1,progress:e/this.limit})}scrollTo(e,{offset:t=0,immediate:r=!1,duration:n=this.duration,easing:i=this.easing}={}){if(null==e)return;let o;if("number"==typeof e)o=e;else if("top"===e||"#top"===e)o=0;else if("bottom"===e)o=this.limit;else{let t;if("string"==typeof e)t=document.querySelector(e);else{if(null==e||!e.nodeType)return;t=e}if(!t)return;let r=0;if(this.wrapperNode!==window){const e=this.wrapperNode.getBoundingClientRect();r="horizontal"===this.direction?e.left:e.top}const n=t.getBoundingClientRect();o=("horizontal"===this.direction?n.left:n.top)+this.scroll-r}o+=t,this.targetScroll=this.infinite?o:Math.max(0,Math.min(o,this.limit)),!this.smooth||r?(this.scroll=this.lastScroll=this.targetScroll,this.setScroll(this.targetScroll)):this.animate.to(this,{duration:n,easing:i,scroll:this.targetScroll})}}}},l={};function c(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=l[e]={id:e,loaded:!1,exports:{}};try{var n={id:e,module:r,factory:a[e],require:c};c.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.loaded=!0,r.exports}c.m=a,c.c=l,c.i=[],c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},c.d=(e,t)=>{for(var r in t)c.o(t,r)&&!c.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},c.hu=e=>e+"."+c.h()+".hot-update.js",c.miniCssF=e=>e+".css",c.hmrF=()=>"main."+c.h()+".hot-update.json",c.h=()=>"932bdd3abbcaa9f4b8ea",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="floema:",c.l=(r,n,i,o)=>{if(e[r])e[r].push(n);else{var s,a;if(void 0!==i)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var h=l[u];if(h.getAttribute("src")==r||h.getAttribute("data-webpack")==t+i){s=h;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,c.nc&&s.setAttribute("nonce",c.nc),s.setAttribute("data-webpack",t+i),s.src=r),e[r]=[n];var d=(t,n)=>{s.onerror=s.onload=null,clearTimeout(p);var i=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(n))),t)return t(n)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=d.bind(null,s.onerror),s.onload=d.bind(null,s.onload),a&&document.head.appendChild(s)}},c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n,i={},o=c.c,s=[],a=[],l="idle";function u(e){l=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t)}function h(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return h(e)}))}function d(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return u("check").then(c.hmrM).then((function(n){return n?u("prepare").then((function(){var i=[];return t=[],r=[],Promise.all(Object.keys(c.hmrC).reduce((function(e,t){return c.hmrC[t](n.c,n.r,n.m,e,r,i),e}),[])).then((function(){return h((function(){return e?f(e):u("ready").then((function(){return i}))}))}))})):u(g()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):f(e)}function f(e){e=e||{},g();var t=r.map((function(t){return t(e)}));r=void 0;var i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return u("abort").then((function(){throw i[0]}));var o=u("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var s,a=u("apply"),l=function(e){s||(s=e)},c=[];return t.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)c.push(t[r])}})),Promise.all([o,a]).then((function(){return s?u("fail").then((function(){throw s})):n?f(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return c}))}))}function g(){if(n)return r||(r=[]),Object.keys(c.hmrI).forEach((function(e){n.forEach((function(t){c.hmrI[e](t,r)}))})),n=void 0,!0}c.hmrD=i,c.i.push((function(f){var g,m,v,y,_=f.module,b=function(r,n){var i=o[n];if(!i)return r;var a=function(t){if(i.hot.active){if(o[t]){var a=o[t].parents;-1===a.indexOf(n)&&a.push(n)}else s=[n],e=t;-1===i.children.indexOf(t)&&i.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),s=[];return r(t)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(a,d,c(d));return a.e=function(e){return function(e){switch(l){case"ready":return u("prepare"),t.push(e),h((function(){return u("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},a}(f.require,f.id);_.hot=(g=f.id,m=_,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==g,_requireSelf:function(){s=m.parents.slice(),e=v?void 0:g,c(g)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":r=[],Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](g,r)})),u("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](g,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(g)}},check:d,apply:p,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:i[g]},e=void 0,y),_.parents=s,_.children=[],s=[],f.require=b})),c.hmrC={},c.hmrI={}})(),(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e})(),r=(e,t,r,n)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=o=>{if(i.onerror=i.onload=null,"load"===o.type)r();else{var s=o&&("load"===o.type?"missing":o.type),a=o&&o.target&&o.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=s,l.request=a,i.parentNode.removeChild(i),n(l)}},i.href=t,document.head.appendChild(i),i},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var i=(s=r[n]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(i===e||i===t))return s}var o=document.getElementsByTagName("style");for(n=0;n<o.length;n++){var s;if((i=(s=o[n]).getAttribute("data-href"))===e||i===t)return s}},i=[],o=[],s=e=>({dispose:()=>{for(var e=0;e<i.length;e++){var t=i[e];t.parentNode&&t.parentNode.removeChild(t)}i.length=0},apply:()=>{for(var e=0;e<o.length;e++)o[e].rel="stylesheet";o.length=0}}),c.hmrC.miniCss=(e,t,a,l,u,h)=>{u.push(s),e.forEach((e=>{var t=c.miniCssF(e),s=c.p+t,a=n(t,s);a&&l.push(new Promise(((t,n)=>{var l=r(e,s,(()=>{l.as="style",l.rel="preload",t()}),n);i.push(a),o.push(l)})))}))},(()=>{var e,t,r,n,i=c.hmrS_jsonp=c.hmrS_jsonp||{main:0},o={};function s(e){return new Promise(((t,r)=>{o[e]=t;var n=c.p+c.hu(e),i=new Error;c.l(n,(t=>{if(o[e]){o[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),s=t&&t.target&&t.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+n+": "+s+")",i.name="ChunkLoadError",i.type=n,i.request=s,r(i)}}))}))}function a(o){function s(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),o=i.id,s=i.chain,l=c.c[o];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(l.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var u=0;u<l.parents.length;u++){var h=l.parents[u],d=c.c[h];if(d){if(d.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([h]),moduleId:o,parentId:h};-1===t.indexOf(h)&&(d.hot._acceptedDependencies[o]?(r[h]||(r[h]=[]),a(r[h],[o])):(delete r[h],t.push(h),n.push({chain:s.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}c.f&&delete c.f.jsonpHmr,e=void 0;var l={},u=[],h={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(c.o(t,p)){var f,g=t[p],m=!1,v=!1,y=!1,_="";switch((f=g?s(p):{type:"disposed",moduleId:p}).chain&&(_="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":o.onDeclined&&o.onDeclined(f),o.ignoreDeclined||(m=new Error("Aborted because of self decline: "+f.moduleId+_));break;case"declined":o.onDeclined&&o.onDeclined(f),o.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+_));break;case"unaccepted":o.onUnaccepted&&o.onUnaccepted(f),o.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+_));break;case"accepted":o.onAccepted&&o.onAccepted(f),v=!0;break;case"disposed":o.onDisposed&&o.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(m)return{error:m};if(v)for(p in h[p]=g,a(u,f.outdatedModules),f.outdatedDependencies)c.o(f.outdatedDependencies,p)&&(l[p]||(l[p]=[]),a(l[p],f.outdatedDependencies[p]));y&&(a(u,[f.moduleId]),h[p]=d)}t=void 0;for(var b,w=[],x=0;x<u.length;x++){var T=u[x],E=c.c[T];E&&(E.hot._selfAccepted||E.hot._main)&&h[T]!==d&&!E.hot._selfInvalidated&&w.push({module:T,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete i[e]})),r=void 0;for(var t,n=u.slice();n.length>0;){var o=n.pop(),s=c.c[o];if(s){var a={},h=s.hot._disposeHandlers;for(x=0;x<h.length;x++)h[x].call(null,a);for(c.hmrD[o]=a,s.hot.active=!1,delete c.c[o],delete l[o],x=0;x<s.children.length;x++){var d=c.c[s.children[x]];d&&((e=d.parents.indexOf(o))>=0&&d.parents.splice(e,1))}}}for(var p in l)if(c.o(l,p)&&(s=c.c[p]))for(b=l[p],x=0;x<b.length;x++)t=b[x],(e=s.children.indexOf(t))>=0&&s.children.splice(e,1)},apply:function(e){for(var t in h)c.o(h,t)&&(c.m[t]=h[t]);for(var r=0;r<n.length;r++)n[r](c);for(var i in l)if(c.o(l,i)){var s=c.c[i];if(s){b=l[i];for(var a=[],d=[],p=[],f=0;f<b.length;f++){var g=b[f],m=s.hot._acceptedDependencies[g],v=s.hot._acceptedErrorHandlers[g];if(m){if(-1!==a.indexOf(m))continue;a.push(m),d.push(v),p.push(g)}}for(var y=0;y<a.length;y++)try{a[y].call(null,b)}catch(t){if("function"==typeof d[y])try{d[y](t,{moduleId:i,dependencyId:p[y]})}catch(r){o.onErrored&&o.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[y],error:r,originalError:t}),o.ignoreErrored||(e(r),e(t))}else o.onErrored&&o.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[y],error:t}),o.ignoreErrored||e(t)}}}for(var _=0;_<w.length;_++){var x=w[_],T=x.module;try{x.require(T)}catch(t){if("function"==typeof x.errorHandler)try{x.errorHandler(t,{moduleId:T,module:c.c[T]})}catch(r){o.onErrored&&o.onErrored({type:"self-accept-error-handler-errored",moduleId:T,error:r,originalError:t}),o.ignoreErrored||(e(r),e(t))}else o.onErrored&&o.onErrored({type:"self-accept-errored",moduleId:T,error:t}),o.ignoreErrored||e(t)}}return u}}}self.webpackHotUpdatefloema=(e,r,i)=>{for(var s in r)c.o(r,s)&&(t[s]=r[s]);i&&n.push(i),o[e]&&(o[e](),o[e]=void 0)},c.hmrI.jsonp=function(e,i){t||(t={},n=[],r=[],i.push(a)),c.o(t,e)||(t[e]=c.m[e])},c.hmrC.jsonp=function(o,l,u,h,d,p){d.push(a),e={},r=l,t=u.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],o.forEach((function(t){c.o(i,t)&&void 0!==i[t]&&(h.push(s(t)),e[t]=!0)})),c.f&&(c.f.jsonpHmr=function(t,r){e&&!c.o(e,t)&&c.o(i,t)&&void 0!==i[t]&&(r.push(s(t)),e[t]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),c("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info"),c("./node_modules/webpack/hot/dev-server.js"),c("./app/index.js");c("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUtwQixXQUFXLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLEVBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFlBQVksRUFBSSxTQUFTLEVBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxPQUFPLEVBQUksT0FBTyxFQUFJLE9BQU8sRUFBSSxZQUFZLEVBQUksT0FBTyxFQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFlBQVksRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFlBQVksRUFBSSxTQUFTLEVBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxPQUFPLEVBQUksT0FBTyxFQUFJLE9BQU8sRUFBSSxZQUFZLEVBQUksT0FBTyxFQUFJLFFBQVEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxZQUFZLEVBQUksUUFBUSxFQUFJLFFBQVEsRUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLGFBQWEsRUFBSSxVQUFVLEVBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZbEIsTUFBTSxDQUFDc0MsU0FBUyxDQUFDLFNBQVMs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QWlCLElBQUksc0JBQXNCLElBQUksbUJBQW1CLElBQUksd0JBQXdCLElBQUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSx1QkFBdUIsSUFBSSxrQkFBa0IsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUksZUFBZSxJQUFJLFNBQVMsS0FBSyxjQUFjLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksaUJBQWlCLElBQUkscUJBQXFCLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxlQUFlLElBQUkscUJBQXFCLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksa0JBQWtCLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssUUFBUSxLQUFLLE9BQU8sSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGdCQUFnQixJQUFJLGtCQUFrQixJQUFJLHNCQUFzQixJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFlBQVksS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxvQkFBb0IsSUFBSSxxQkFBcUIsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGdCQUFnQixJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUkscUJBQXFCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGdCQUFnQixJQUFJLGlCQUFpQixJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksY0FBYyxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUksd0JBQXdCLElBQUksbUJBQW1CLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksdUJBQXVCLElBQUksZUFBZSxJQUFJLG1CQUFtQixJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssZUFBZSxJQUFJLG9CQUFvQixJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksWUFBWSxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLG9CQUFvQixJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLGFBQWEsS0FBSyxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxXQUFXLEtBQUssVUFBVSxLQUFLLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFdBQVcsS0FBSyxnQkFBZ0IsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxjQUFjLElBQUksbUJBQW1CLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksS0FBSyxjQUFjLElBQUksZUFBZSxLQUFLLFVBQVUsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLGNBQWMsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGtCQUFrQixJQUFJLG9CQUFvQixJQUFJLG1CQUFtQixJQUFJLHFCQUFxQixJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZLEtBQUssVUFBVSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLGdCQUFnQixJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGtCQUFrQixJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFdBQVcsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksZ0JBQWdCLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUkscUJBQXFCLElBQUksc0JBQXNCLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxZQUFZLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssYUFBYSxJQUFJLG9CQUFvQixJQUFJLHFCQUFxQixJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEtBQUssWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxPQUFPLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLEtBQUtwQixXQUFXLENBQUMsRUFBSSxVQUFVLElBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxVQUFVLElBQUksUUFBUSxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksT0FBTyxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksWUFBWSxFQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsRUFBSSxRQUFRLElBQUksWUFBWSxFQUFJLFdBQVcsRUFBSSxTQUFTLEdBQUssUUFBUSxHQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLFFBQVEsRUFBSSxPQUFPLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLFlBQVksRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLDBCQUEwQixJQUFJLFNBQVMsRUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksYUFBYSxFQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksa0JBQWtCLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxVQUFVLEVBQUksVUFBVSxHQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksRUFBSSxPQUFPLEdBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksd0JBQXdCLElBQUksc0JBQXNCLElBQUksVUFBVSxJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFFBQVEsSUFBSSxlQUFlLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxTQUFTLEdBQUssUUFBUSxFQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksVUFBVSxJQUFJLHFCQUFxQixJQUFJLHlCQUF5QixFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxFQUFJLGdCQUFnQixJQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksU0FBUyxJQUFJLFVBQVUsRUFBSSxpQkFBaUIsRUFBSSxRQUFRLEdBQUssUUFBUSxJQUFJLHNCQUFzQixJQUFJLFNBQVMsR0FBSyxTQUFTLElBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksT0FBTyxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFNBQVMsR0FBSyxRQUFRLElBQUksUUFBUSxHQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksT0FBTyxFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksUUFBUSxFQUFJLFVBQVUsRUFBSSxrQkFBa0IsRUFBSSxXQUFXLEVBQUksZ0JBQWdCLElBQUksU0FBUyxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksU0FBUyxFQUFJLFVBQVUsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksU0FBUyxFQUFJLGFBQWEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksT0FBTyxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksU0FBUyxFQUFJLGFBQWEsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksUUFBUSxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksV0FBVyxFQUFJLFFBQVEsR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxTQUFTLElBQUksT0FBTyxFQUFJLFdBQVcsRUFBSSxXQUFXLElBQUksU0FBUyxFQUFJLFdBQVcsSUFBSSxxQkFBcUIsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxzQkFBc0IsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxrQkFBa0IsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLGtCQUFrQixJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxHQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxRQUFRLEVBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxRQUFRLEVBQUksUUFBUSxJQUFJLGdCQUFnQixFQUFJLFdBQVcsR0FBSyxRQUFRLElBQUksT0FBTyxHQUFLLFNBQVMsRUFBSSxPQUFPLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxtQkFBbUIsS0FBSyxZQUFZLEdBQUssUUFBUSxJQUFJLFlBQVksSUFBSSxTQUFTLEVBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksT0FBTyxLQUFLLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsS0FBSyxXQUFXLElBQUksa0JBQWtCLEtBQUssdUJBQXVCLElBQUksb0JBQW9CLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLEtBQUssNEJBQTRCLEtBQUssc0JBQXNCLElBQUksVUFBVSxLQUFLLFlBQVksSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLG1CQUFtQixLQUFLLHdCQUF3QixJQUFJLHFCQUFxQixLQUFLLG9CQUFvQixJQUFJLFlBQVksS0FBSyxzQkFBc0IsSUFBSSxZQUFZLEtBQUssVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLEtBQUssWUFBWSxJQUFJLFdBQVcsS0FBSyxxQkFBcUIsS0FBSyxVQUFVLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFdBQVcsRUFBSSxPQUFPLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFdBQVcsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksWUFBWSxHQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLG9CQUFvQixJQUFJLFNBQVMsRUFBSSxRQUFRLEdBQUssUUFBUSxFQUFJLFFBQVEsRUFBSSxPQUFPLElBQUksT0FBTyxFQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxnQkFBZ0IsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFFBQVEsSUFBSSxTQUFTLEdBQUssUUFBUSxFQUFJLGNBQWMsR0FBSyxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsRUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLHNCQUFzQixJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFFBQVEsRUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxxQkFBcUIsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsRUFBSSxVQUFVLElBQUksaUJBQWlCLElBQUksVUFBVSxFQUFJLFlBQVksSUFBSSxRQUFRLElBQUksZ0JBQWdCLEVBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksV0FBVyxJQUFJLE9BQU8sRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEdBQUssUUFBUSxJQUFJLFlBQVksRUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxhQUFhLEVBQUksVUFBVSxJQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksU0FBUyxLQUFLLFFBQVEsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLEdBQUssUUFBUSxJQUFJLGNBQWMsRUFBSSxVQUFVLEtBQUssZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFNBQVMsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxFQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFdBQVcsRUFBSSxVQUFVc0MsRUFBRSxXQUFXLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxxQkFBcUIsSUFBSSxTQUFTLElBQUksVUFBVSxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFlBQVksRUFBSSxVQUFVLEVBQUksWUFBWSxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxFQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksV0FBVyxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksV0FBVyxHQUFLLFFBQVEsR0FBSyxTQUFTLEdBQUssU0FBUyxHQUFLLFFBQVEsRUFBSSxPQUFPLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsR0FBSyxRQUFRLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksUUFBUSxFQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksV0FBVyxFQUFJLGFBQWEsR0FBSyxTQUFTLEVBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFVBQVUsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksWUFBWSxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFNBQVMsRUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsRUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFlBQVksRUFBSSxTQUFTLEVBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxRQUFRLEtBQUssWUFBWSxJQUFJLFNBQVMsR0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxFQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxHQUFLLFFBQVEsRUFBSSxTQUFTLElBQUksY0FBYyxFQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxFQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxZQUFZLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxvQkFBb0IsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxFQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFFBQVEsRUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsR0FBSyxRQUFRLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVdDLEVBQUUsV0FBVyxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsR0FBSyxTQUFTLEVBQUksU0FBUyxJQUFJLFNBQVMsRUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGlCQUFpQixJQUFJLFlBQVksRUFBSSxTQUFTLElBQUksYUFBYSxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksWUFBWSxFQUFJLFFBQVEsRUFBSSxTQUFTLElBQUksa0JBQWtCLEdBQUssUUFBUSxJQUFJLE9BQU8sRUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxFQUFJLFFBQVEsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxRQUFRLElBQUksU0FBUyxFQUFJLFVBQVUsR0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksWUFBWSxFQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksaUJBQWlCLElBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxRQUFRLEVBQUksUUFBUSxFQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFJLFFBQVEsSUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFVBQVVDLEdBQUcsVUFBVSxJQUFJLFNBQVMsRUFBSSxVQUFVLElBQUksVUFBVSxFQUFJLFNBQVMsR0FBSyxTQUFTLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksZUFBZSxFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksY0FBYyxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFdBQVcsR0FBSyxRQUFRLEVBQUksVUFBVSxFQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLHdCQUF3QixFQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxFQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksV0FBVyxFQUFJLFVBQVUsRUFBSSxRQUFRLEVBQUksU0FBUyxJQUFJLFVBQVUsR0FBSyxRQUFRLEVBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsRUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEdBQUssU0FBUyxFQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksUUFBUSxHQUFLLFFBQVEsRUFBSSxVQUFVLEdBQUssU0FBUyxHQUFLLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxhQUFhLEVBQUksV0FBVyxFQUFJLFFBQVEsR0FBSyxRQUFRLEVBQUksV0FBVyxFQUFJLFNBQVMsRUFBSSxTQUFTLEdBQUssU0FBUyxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLGFBQWEsRUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGFBQWEsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxFQUFJLFFBQVEsSUFBSSxVQUFVLEdBQUssUUFBUSxJQUFJLFFBQVEsRUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsR0FBSyxTQUFTLEdBQUssU0FBUyxFQUFJLE9BQU8sSUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLEVBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssVUFBVSxFQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxFQUFJLFdBQVcsRUFBSSxXQUFXLEtBQUssYUFBYSxJQUFJLFNBQVMsRUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFNBQVMsR0FBSyxRQUFRLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxlQUFlLElBQUksU0FBUyxHQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxLQUFLLGFBQWEsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLEtBQUssV0FBVyxLQUFLLFVBQVUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLEtBQUssV0FBVyxLQUFLLFdBQVcsR0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLGVBQWUsSUFBSSxTQUFTLEtBQUssZUFBZSxFQUFJLFdBQVcsRUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFlBQVksSUFBSSxXQUFXLEtBQUssWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFFBQVEsRUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsRUFBSSxVQUFVLElBQUksVUFBVSxHQUFLLFFBQVEsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLEVBQUksVUFBVSxFQUFJLFVBQVUsRUFBSSxZQUFZLElBQUksU0FBUyxHQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEVBQUksU0FBUyxFQUFJLFNBQVMsRUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUksV0FBVyxJQUFJLGFBQWEsRUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLEdBQUssUUFBUSxFQUFJLFFBQVEsRUFBSSxXQUFXLElBQUksVUFBVSxFQUFJLE9BQU8sRUFBSSxVQUFVLEVBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLEdBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxXQUFXLEdBQUssU0FBUyxFQUFJLFFBQVEsSUFBSSxXQUFXLEdBQUssUUFBUSxHQUFLLFNBQVMsSUFBSSxXQUFXLEdBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLEdBQUssUUFBUSxJQUFJLFdBQVcsRUFBSSxRQUFRLEVBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxHQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsR0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksT0FBTyxFQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksZUFBZSxFQUFJLFdBQVcsRUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxhQUFhLElBQUksYUFBYSxFQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEdBQUssUUFBUSxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFFBQVEsRUFBSSxVQUFVLEVBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLEVBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxjQUFjLEtBQUssV0FBVyxLQUFLLFdBQVcsR0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEVBQUksVUFBVSxJQUFJLFdBQVcsRUFBSSxRQUFRLEVBQUksV0FBVyxFQUFJLFdBQVcsRUFBSSxRQUFRLElBQUksV0FBVyxHQUFLLFFBQVEsRUFBSSxVQUFVLEVBQUksYUFBYSxFQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxHQUFLLFNBQVMsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLEdBQUssU0FBUyxFQUFJLFNBQVMsRUFBSSxVQUFVLEVBQUksV0FBVyxJQUFJLFNBQVMsRUFBSSxXQUFXLEVBQUksVUFBVSxFQUFJLFdBQVcsRUFBSSxVQUFVLEVBQUksUUFBUSxFQUFJLFdBQVcsSUFBSSxXQUFXLEdBQUssUUFBUSxFQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLEVBQUksVUFBVSxFQUFJLFVBQVUsR0FBSyxTQUFTLEVBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxFQUFJLFVBQVUsSUFBSSxVQUFVLEdBQUssU0FBUyxJQUFJLFVBQVUsRUFBSSxXQUFXLEVBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEVBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxH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LEVBQW9Ca0ssUUFBUWwyQixNQUFNbytCLElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTaFksT0FBWixDQUNBLElBQUlnWSxFQUFTM1csR0FBSSxNQUFNLElBQUl2OEQsTUFBTSxtQ0FBcUNrekUsRUFBU0MsWUFDL0UsT0FBT0QsRUFBU0UsZ0JDbmZsQnRTLEVBQW9CLDJIQUNwQkEsRUFBb0IsNENBQ3BCQSxFQUFvQixrQkFDTUEsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvZGV0ZWN0aW9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL3BhZ2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvY3Vyc29yLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL3ByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9wYWdlcy9hYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvcGFnZXMvaG9tZS9hbmltYXRlSW1hZ2VzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9wYWdlcy9ob21lL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9hbnNpLWh0bWwtY29tbXVuaXR5L2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9TY3JvbGxUcmlnZ2VyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL2dzYXAtY29yZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL25hbWVkLXJlZmVyZW5jZXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL251bWVyaWMtdW5pY29kZS1tYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3N1cnJvZ2F0ZS1wYWlycy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3ByZWZpeC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZGVjb2RlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9zcGxpdC10eXBlL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3RpbnktZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3ZpcnR1YWwtc2Nyb2xsL2xpYi92aXJ0dWFsc2Nyb2xsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9sb2cuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcmVsb2FkQXBwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9kZXYtc2VydmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vc3R5bGVzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL0BzdHVkaW8tZnJlaWdodC9sZW5pcy9kaXN0L2xlbmlzLm1vZGVybi5tanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiZmxvZW1hOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwidmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0dmFyIG9uTGlua0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzLlxuXHRcdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gbnVsbDtcblx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnKSB7XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLmNvZGUgPSBcIkNTU19DSFVOS19MT0FEX0ZBSUxFRFwiO1xuXHRcdFx0ZXJyLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRlcnIucmVxdWVzdCA9IHJlYWxIcmVmO1xuXHRcdFx0bGlua1RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtUYWcpXG5cdFx0XHRyZWplY3QoZXJyKTtcblx0XHR9XG5cdH1cblx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBvbkxpbmtDb21wbGV0ZTtcblx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cblx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcblx0cmV0dXJuIGxpbmtUYWc7XG59O1xudmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG5cdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiB0YWc7XG5cdH1cblx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG5cdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gdGFnO1xuXHR9XG59O1xudmFyIGxvYWRTdHlsZXNoZWV0ID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG5cdFx0Y3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0fSk7XG59XG4vLyBubyBjaHVuayBsb2FkaW5nXG5cbnZhciBvbGRUYWdzID0gW107XG52YXIgbmV3VGFncyA9IFtdO1xudmFyIGFwcGx5SGFuZGxlciA9IChvcHRpb25zKSA9PiB7XG5cdHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb2xkVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG9sZFRhZyA9IG9sZFRhZ3NbaV07XG5cdFx0XHRpZihvbGRUYWcucGFyZW50Tm9kZSkgb2xkVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkVGFnKTtcblx0XHR9XG5cdFx0b2xkVGFncy5sZW5ndGggPSAwO1xuXHR9LCBhcHBseTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBuZXdUYWdzLmxlbmd0aDsgaSsrKSBuZXdUYWdzW2ldLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRcdG5ld1RhZ3MubGVuZ3RoID0gMDtcblx0fSB9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLm1pbmlDc3MgPSAoY2h1bmtJZHMsIHJlbW92ZWRDaHVua3MsIHJlbW92ZWRNb2R1bGVzLCBwcm9taXNlcywgYXBwbHlIYW5kbGVycywgdXBkYXRlZE1vZHVsZXNMaXN0KSA9PiB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjaHVua0lkcy5mb3JFYWNoKChjaHVua0lkKSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0dmFyIG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgdGFnID0gY3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn0iLCJjbGFzcyBEZXRlY3Rpb24ge1xuICBpc1Bob25lKCkge1xuICAgIGlmICghdGhpcy5pc1Bob25lQ2hlY2tlZCkge1xuICAgICAgdGhpcy5pc1Bob25lQ2hlY2tlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuaXNQaG9uZUNoZWNrID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncGhvbmUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pc1Bob25lQ2hlY2s7XG4gIH1cblxuICBpc1RhYmxldCgpIHtcbiAgICBpZiAoIXRoaXMuVGFibGV0Q2hlY2tlZCkge1xuICAgICAgdGhpcy5UYWJsZXRDaGVja2VkID0gdHJ1ZTtcblxuICAgICAgdGhpcy5UYWJsZXRDaGVjayA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhYmxldCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLlRhYmxldENoZWNrO1xuICB9XG5cbiAgaXNEZXNrdG9wKCkge1xuICAgIGlmICghdGhpcy5EZXNrdG9wQ2hlY2tlZCkge1xuICAgICAgdGhpcy5EZXNrdG9wQ2hlY2tlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuRGVza3RvcENoZWNrID1cbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGVza3RvcCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLkRlc2t0b3BDaGVjaztcbiAgfVxufVxuXG5jb25zdCBEZXRlY3Rpb25NYW5hZ2VyID0gbmV3IERldGVjdGlvbigpO1xuXG5leHBvcnQgZGVmYXVsdCBEZXRlY3Rpb25NYW5hZ2VyO1xuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tICdnc2FwL1Njcm9sbFRyaWdnZXInO1xuXG5pbXBvcnQgU3BsaXRUeXBlIGZyb20gXCJzcGxpdC10eXBlXCI7XG5pbXBvcnQgTGVuaXMgZnJvbSBcIkBzdHVkaW8tZnJlaWdodC9sZW5pc1wiO1xuaW1wb3J0IFByZWZpeCBmcm9tIFwicHJlZml4XCJcbi8vIGltcG9ydCB7IG1hcCB9IGZyb20gXCJsb2Rhc2hcIlxuLy8gaW1wb3J0IFRpdGxlIGZyb20gXCIuLi9hbmltYXRpb25zL1RpdGxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2Uge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICB0aGlzLmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KTtcbiAgICB0aGlzLm5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uX193cmFwcGVyJyk7XG4gICAgdGhpcy5zb2NpYWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNvY2lhbHMnKTtcblxuICAgIHRoaXMuZWxlbWVudHMgPSB7XG4gICAgICBjb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uX19sb2dvX19jb250YWluZXInKSxcbiAgICAgIGxlZnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uX19sb2dvX19sZXR0ZXJzX19sZWZ0X19zcGFuICcpLFxuICAgICAgbWlkZGxlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbl9fbG9nb19fbGV0dGVyc19fbWlkZGxlJyksXG4gICAgICBhX2xlZnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uX19sb2dvX19sZXR0ZXIuYV9fbGVmdCcpLFxuICAgICAgZGFzaDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb25fX2xvZ29fX2xldHRlci5kYXNoJyksXG4gICAgICBhX3JpZ2h0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbl9fbG9nb19fbGV0dGVyLmFfX3JpZ2h0JyksXG4gICAgICByaWdodDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb25fX2xvZ29fX2xldHRlcnNfX3JpZ2h0X19zcGFuJyksXG4gICAgICBuYXZfbWVudTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb25fX21lbnUnKSxcbiAgICB9O1xuXG4gICAgdGhpcy5zZXJ2aWNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX19zZXJ2aWNlcycpXG4gICAgdGhpcy5EcmFnVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXJzb3JfX3RleHQxJyk7XG4gICAgdGhpcy50cmFuc2Zvcm1QcmVmaXggPSBQcmVmaXgoJ3RyYW5zZm9ybScpO1xuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cblxuXG5cblxuICAgIC8vIHRoaXMuYW5pbWF0ZVBhcnRpYWxzKClcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsYXN0OiAwLFxuICAgICAgbGltaXQ6IDAsXG4gICAgICBtb3ZlOiAwLFxuICAgIH07XG4gICAgY29uc29sZS5sb2codGhpcy5lbCk7XG4gICAgdGhpcy5jcmVhdGVBbmltYXRpb24oKTtcbiAgICB0aGlzLnNjcm9sbERpcmVjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50c1xuICAgKi9cbiAgb25XaGVlbChldmVudCkge1xuICAgIGNvbnN0IHsgZGVsdGFZIH0gPSBldmVudDtcblxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBkZWx0YVk7XG4gIH1cblxuICBvblJlc2l6ZSgpIHtcbiAgICAvLyBhbHdheXMgcmVjYWxjdWxhdGUgdGhlIGhlaWdodCBvZiB3cmFwcGVyXG4gICAgaWYgKHRoaXMuZWxlbWVudHMud3JhcHBlcikge1xuICAgICAgdGhpcy5zY3JvbGwubGltaXQgPVxuICAgICAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIH1cbiAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodCA9IHRoaXMuc2Nyb2xsLmxpbWl0O1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc2Nyb2xsLmxpbWl0LCBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodClcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29wXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gZ3NhcC51dGlscy5jbGFtcChcbiAgICAgIDAsXG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCxcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldFxuICAgICk7XG5cbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gcGFyc2VGbG9hdChcbiAgICAgIGdzYXAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5zY3JvbGwudGFyZ2V0LCAwLjEpXG4gICAgKS50b0ZpeGVkKDIpO1xuXG4gICAgaWYgKHRoaXMuc2Nyb2xsLmN1cnJlbnQgPCAwLjAxKSB7XG4gICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gMDtcbiAgICB9XG4gICAgLy8gdGhpcy5zY3JvbGwubGFzdCArPSB0aGlzLnNjcm9sbC5jdXJyZW50O1xuICAgIHRoaXMuc2Nyb2xsLm1vdmUgPSBwYXJzZUZsb2F0KFxuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0IC0gdGhpcy5zY3JvbGwuY3VycmVudFxuICAgICkudG9GaXhlZCgyKTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnNjcm9sbC50YXJnZXQgLSB0aGlzLnNjcm9sbC5tb3ZlLCB0aGlzLnNjcm9sbC50YXJnZXQsICk7XG5cbiAgICBpZiAodGhpcy5lbGVtZW50cy53cmFwcGVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuc3R5bGVbXG4gICAgICAgIHRoaXMudHJhbnNmb3JtUHJlZml4XG4gICAgICBdID0gYHRyYW5zbGF0ZVkoLSR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgO1xuICAgIH1cbiAgfVxuXG4gIHNtb290aFNjcm9sbCgpIHtcbiAgICBjb25zb2xlLmxvZygnbGVuaXMgaW5pdCcsIHRoaXMuZWwpO1xuXG4gICAgY29uc3QgbGVuaXMgPSBuZXcgTGVuaXMoe1xuICAgICAgbGVycDogMC4xLFxuICAgICAgc21vb3RoOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmFmKHRpbWUpIHtcbiAgICAgIGxlbmlzLnJhZih0aW1lKTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gIH1cblxuICBzY3JvbGxEaXJlY3Rpb24oKSB7XG4gICAgdGhpcy5sYXN0U2Nyb2xsVG9wID0gMDtcbiAgICB0aGlzLmN1cnJlbnRTY3JvbGwgPSAwO1xuXG4gICAgLy8gZWxlbWVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIHRhcmdldCBlbGVtZW50IG9uIHdoaWNoIHlvdSBoYXZlIGFwcGxpZWQgc2Nyb2xsLCB1c2Ugd2luZG93IGluIGNhc2Ugb2Ygbm8gdGFyZ2V0IGVsZW1lbnQuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuZ2V0RGlyZWN0aW9uLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5nZXRNb2JpbGVEaXJlY3Rpb24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBnZXREaXJlY3Rpb24oKSB7XG4gICAgY29uc3Qgc2VydmljZXNJbnZpZXcgPSB0aGlzLnNlcnZpY2VzLmNsYXNzTGlzdC5jb250YWlucygnaW4tdmlldycpXG4gICAgLy8gb3Igd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIi4uLi5cbiAgICB0aGlzLmN1cnJlbnRTY3JvbGwgPVxuICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgaWYgKHRoaXMuY3VycmVudFNjcm9sbCA+IHRoaXMubGFzdFNjcm9sbFRvcCkge1xuICAgICAgLy8gZG93bnNjcm9sbCBjb2RlXG4gICAgICB0aGlzLmRpcmVjdGlvbiA9ICdkb3duJztcbiAgICAgIC8vIGFkZCBhIGNsYXNzXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwc2Nyb2xsIGNvZGVcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ3VwJztcbiAgICAgIC8vIHJlbW92ZSBjbGFzc1xuICAgIH1cbiAgICB0aGlzLmxhc3RTY3JvbGxUb3AgPSB0aGlzLmN1cnJlbnRTY3JvbGwgPD0gMCA/IDAgOiB0aGlzLmN1cnJlbnRTY3JvbGw7XG4gICAgLy8gRm9yIE1vYmlsZSBvciBuZWdhdGl2ZSBzY3JvbGxpbmdcbiAgICBpZih0aGlzLmRpcmVjdGlvbiA9PT0gJ2Rvd24nICYmIHdpbmRvdy5wYWdlWU9mZnNldCA+IDI3MCB8fCBzZXJ2aWNlc0ludmlldyApIHtcbiAgICAgIHRoaXMuZG93blNjcm9sbCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBTY3JvbGwoKTtcbiAgICAgIHRoaXMuRHJhZ1RleHQuY2xhc3NMaXN0LmFkZCgnbm9uZScpO1xuICAgIH1cbiAgfVxuXG4gIGdldE1vYmlsZURpcmVjdGlvbihlKSB7XG4gICAgY29uc3Qgc2VydmljZXNJbnZpZXcgPSB0aGlzLnNlcnZpY2VzLmNsYXNzTGlzdC5jb250YWlucygnaW4tdmlldycpO1xuICAgIHRoaXMuY3VycmVudFBvaW50ID0gZS5jbGllbnRYIHx8IGUudG91Y2hlc1swXS5jbGllbnRYO1xuICAgIC8vIHRoaXMuY3VycmVudFBvaW50ID0gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuXG4gICAgaWYgKHRoaXMubGFzdFBvaW50ICE9IG51bGwgJiYgdGhpcy5sYXN0UG9pbnQgPCB0aGlzLmN1cnJlbnRQb2ludCkge1xuICAgICAgLy8gc3dpcGVkIGRvd25cbiAgICAgIC8vIGNvbnNvbGUubG9nKCd5b3Ugc2Nyb2xsZWQgdXAnKTtcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ3N3aXBlZCBkb3duJztcbiAgICB9IGVsc2UgaWYgKHRoaXMubGFzdFBvaW50ICE9IG51bGwgJiYgdGhpcy5sYXN0UG9pbnQgPiB0aGlzLmN1cnJlbnRQb2ludCkge1xuICAgICAgLy8gc3dpcGVkIHVwXG4gICAgICAvLyBjb25zb2xlLmxvZygneW91IHNjcm9sbGVkIGRvd24nKTtcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ3N3aXBlZCB1cCc7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3N3aXBlZCB1cCcgJiYgdGhpcy5jdXJyZW50UG9pbnQgPiAyNzApIHx8XG4gICAgICBzZXJ2aWNlc0ludmlld1xuICAgICkge1xuICAgICAgdGhpcy5kb3duU2Nyb2xsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBTY3JvbGwoKTtcbiAgICAgIHRoaXMuRHJhZ1RleHQuY2xhc3NMaXN0LmFkZCgnbm9uZScpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdFBvaW50ID0gdGhpcy5jdXJyZW50UG9pbnQ7XG4gIH1cblxuXG4gIGRvd25TY3JvbGwoKSB7XG4gICAgdGhpcy5uYXYuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgIHRoaXMuc29jaWFscy5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG5cbiAgfVxuXG4gIHVwU2Nyb2xsKCkge1xuICAgIHRoaXMubmF2LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICB0aGlzLnNvY2lhbHMuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuXG4gIH1cblxuICBjcmVhdGVBbmltYXRpb24oKSB7XG4gICAgdGhpcy5hbmltYXRpb25zID0gW107XG4gICAgdGhpcy50eXBlU3BsaXQgPSBuZXcgU3BsaXRUeXBlKCdbZGF0YS1zcGxpdF0nLCB7XG4gICAgICB0eXBlczogJ3dvcmRzLCBjaGFycycsXG4gICAgICB0YWdOYW1lOiAnc3BhbicsXG4gICAgfSk7XG4gICAgdGhpcy5lbGVtZW50c1RpdGxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNwbGl0PVwidGl0bGVcIl0nKTtcbiAgICB0aGlzLmVsZW1lbnRzUGFyYWdyYXBoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICdbZGF0YS1zcGxpdD1cInBhcmFncmFwaFwiXSdcbiAgICApO1xuXG4gICAgLy8gdGhpcy5lbGVtZW50c1RpdGxlcy5mb3JFYWNoKCh0aXRsZSkgPT4ge1xuICAgIC8vICAgY29uc3Qgd29yZHMgPSBbLi4udGl0bGUucXVlcnlTZWxlY3RvckFsbCgnLndvcmQnKV07XG4gICAgLy8gICB0aGlzLmFuaW1hdGlvblRpdGxlcyA9IG1hcCh3b3JkcywgKHdvcmQsIGluZGV4KSA9PiB7XG4gICAgLy8gICAgIC8vIHJldHVybiBjb25zb2xlLmxvZyhuZXcgVGl0bGUoe1xuICAgIC8vICAgICAvLyAgIGVsZW1lbnQ6IHdvcmQsXG4gICAgLy8gICAgIC8vICAgaXRlbTogdGl0bGUsIH0pKVxuICAgIC8vICAgICByZXR1cm4gbmV3IFRpdGxlKHtcbiAgICAvLyAgICAgICBlbGVtZW50OiB0aXRsZSxcbiAgICAvLyAgICAgICBlbGVtZW50czoge1xuICAgIC8vICAgICAgICAgdGl0bGU6IHdvcmQsXG4gICAgLy8gICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgLy8gICAgICAgfSxcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gICB9KTtcbiAgICAvLyAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uVGl0bGVzKTtcbiAgICAvLyB9KTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmFuaW1hdGlvbnMpXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnNvciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpO1xuICB9XG5cbiAgY3JlYXRlQ3Vyc29yICgpIHtcbiAgICBjb25zdCBjdXJzb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3Vyc29yJyk7XG4gICAgY29uc3QgY3Vyc29yaW5uZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3Vyc29yMicpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IHggPSBlLmNsaWVudFg7XG4gICAgICBjb25zdCB5ID0gZS5jbGllbnRZO1xuICAgICAgY3Vyc29yLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZChjYWxjKCR7eH1weCAtIDUwJSksIGNhbGMoJHt5fXB4IC0gNTAlKSwgMClgO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IHggPSBlLmNsaWVudFg7XG4gICAgICBjb25zdCB5ID0gZS5jbGllbnRZO1xuICAgICAgLy8gY3Vyc29yaW5uZXIuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgLy8gY3Vyc29yaW5uZXIuc3R5bGUudG9wID0geSArICdweCc7XG4gICAgICBjdXJzb3Jpbm5lci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoY2FsYygke3h9cHggLSA1MCUpLCBjYWxjKCR7eX1weCAtIDUwJSksIDApYDtcbiAgICAgIGN1cnNvcmlubmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJub25lXCIpXG5cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdjbGljaycpO1xuICAgICAgY3Vyc29yaW5uZXIuY2xhc3NMaXN0LmFkZCgnY3Vyc29yaW5uZXJob3ZlcicpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdjbGljaycpO1xuICAgICAgY3Vyc29yaW5uZXIuY2xhc3NMaXN0LnJlbW92ZSgnY3Vyc29yaW5uZXJob3ZlcicpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5saW5rcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoJ2hvdmVyJyk7XG4gICAgICB9KTtcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuXG5cbiAgfVxufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCBFdmVudEVtaWl0ZXIgZnJvbSAnZXZlbnRzJ1xuXG5pbXBvcnQgRGV0ZWN0aW9uIGZyb20gJy4uL2NsYXNzZXMvZGV0ZWN0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVsb2FkZXIgZXh0ZW5kcyBFdmVudEVtaWl0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLmVsZW1lbnRzID0ge1xuICAgICAgY29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlbG9hZGVyX19sb2dvX19jb250YWluZXInKSxcbiAgICAgIGxlZnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkZXJfX2xvZ29fX2xldHRlcnNfX2xlZnRfX3NwYW4gJyksXG4gICAgICBtaWRkbGU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkZXJfX2xvZ29fX2xldHRlcnNfX21pZGRsZScpLFxuICAgICAgYV9sZWZ0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYV9fbGVmdCcpLFxuICAgICAgZGFzaDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhc2gnKSxcbiAgICAgIGFfcmlnaHQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hX19yaWdodCcpLFxuICAgICAgcmlnaHQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVsb2FkZXJfX2xvZ29fX2xldHRlcnNfX3JpZ2h0X19zcGFuJyksXG4gICAgICBpbWFnZXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNyY10nKSxcbiAgICAgIHByb2dyZXNzX2JhcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgJy5wcmVsb2FkZXJfX3Byb2dyZXNzX19iYXJfX3dyYXBwZXInXG4gICAgICApLFxuICAgIH07XG5cbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5tb3ZlRGlzdGFuY2UgPSAwXG5cbiAgICB0aGlzLnRsID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICBvblJlcGVhdDogKCkgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncmVwZWF0Jyk7XG4gICAgICB9LFxuICAgICAgcmVwZWF0RGVsYXk6IC4zLFxuICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZWFzZTogJ2V4cG8ub3V0JyxcbiAgICAgICAgZHVyYXRpb246IC42LFxuICAgICAgICBkZWxheTogLjMsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gdGhpcy5nZXRNb3ZlRGlzdGFuY2UoKTtcbiAgICB0aGlzLnJlc2l6ZSgpXG4gICAgdGhpcy5jcmVhdGVMb2FkZXIoKTtcbiAgICB0aGlzLmFuaW1hdGVMb2dvKCk7XG4gIH1cblxuICBhbmltYXRlTG9nbygpIHtcbiAgICB0aGlzLnRsLnJlcGVhdCgtMSlcbiAgICB0aGlzLnRsLnlveW8odHJ1ZSlcblxuICAgIGdzYXAuc2V0KHRoaXMuZWxlbWVudHMuY29udGFpbmVyLCB7IHNjYWxlOjF9KVxuXG4gICAgdGhpcy50bFxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMubGVmdCwgeyB4OiAnLTEyMCUnLCBvcGFjaXR5OiAwLCB9LCAnMCcpXG4gICAgICAudG8odGhpcy5lbGVtZW50cy5yaWdodCwgeyB4OiAnMjAwJScsIG9wYWNpdHk6IDAgfSwgJzAnKVxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMubWlkZGxlLCB7IHg6ICc1MCUnIH0sICcwJylcbiAgICAgIC50byh0aGlzLmVsZW1lbnRzLmRhc2gsIHsgeDogJy0xMjAwJScgfSwgJzAnKVxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMuYV9yaWdodCwgeyB4OiAnLTc4OCUnIH0sICcwJyk7XG4gIH1cblxuICBnZXRNb3ZlRGlzdGFuY2UgKCkge1xuICAgIC8vIGdldCBvZmZzZXQgZnJvbSB0b3AgYmVjYXVzZSBhdCBsb2FkIGl0J3MgMTAwJSBvZmYgc2NyZWVuXG4gICAgY29uc3QgbmF2TGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uX19saW5rJyk7XG4gICAgY29uc3QgbmF2V3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uX193cmFwcGVyJyk7XG5cbiAgICBjb25zdCBuYXZXcmFwcGVySGVpZ2h0ID0gbmF2V3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgY29uc3QgbmF2SGVpZ2h0ID0gbmF2TGluay5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgLy8gbmF2IGxpbmsgaXMgcG9zaXRpb25lZCBjZW50ZXJkIGluIGhlaWdodCB0byBuYXZ3cmFwcGVyXG4gICAgY29uc3QgbmF2TGlua1RvcCA9IChuYXZXcmFwcGVySGVpZ2h0IC0gbmF2SGVpZ2h0KSAvIDI7XG5cbiAgICAvLyBjb25zdCBuYXZUb3AgPSBuYXZMaW5rLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDsgLy8gdGhlIG9mZnNldCBmcm9tIG91dHNpZGUgdGhlIHZpZXdwb3J0XG4gICAgLy8gY29uc3QgbG9hZGVyVG9wID0gdGhpcy5lbGVtZW50cy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICBsZXQgIGxvYWRlckhlaWdodCA9IDBcbiAgICAgaWYgKERldGVjdGlvbi5pc0Rlc2t0b3AoKSB8fCBEZXRlY3Rpb24uaXNUYWJsZXQoKSkge1xuICAgICAgbG9hZGVySGVpZ2h0ID0gdGhpcy5lbGVtZW50cy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICB9XG4gICAgLy8gbG9hZGVyIGhlaWdodCBpcyBzbWFsbGVyIGJlY2F1c2UgaW4gY3NzIHdlIHNjYWxlZCBieSAwLjUgZm9yIG1vYmlsZSBzbyBpIHdpbGwgcmVzY2FsZVxuICAgIGlmIChEZXRlY3Rpb24uaXNQaG9uZSgpKSB7XG4gICAgICAgbG9hZGVySGVpZ2h0ID0gdGhpcy5lbGVtZW50cy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC8gMC41O1xuICAgIH1cbiAgICBjb25zdCBzY2FsZWRMb2FkZXJIZWlnaHQgPSBsb2FkZXJIZWlnaHQgKiAwLjY3O1xuICAgIC8vIGxvYWRlcnRvcCBhZnRlciBzY2FsZVxuICAgIGNvbnN0IHNjYWxlRGlmZiA9IChsb2FkZXJIZWlnaHQgLSBzY2FsZWRMb2FkZXJIZWlnaHQpIC8yO1xuICAgIHRoaXMubW92ZURpc3RhbmNlID0gKHRoaXMuZWxlbWVudHMuY29udGFpbmVyLm9mZnNldFRvcCArIHNjYWxlRGlmZikgLSBuYXZMaW5rVG9wO1xuICAgIC8vIGNvbnNvbGUubG9nKFxuICAgIC8vICAgdGhpcy5tb3ZlRGlzdGFuY2UsIGxvYWRlckhlaWdodFxuICAgIC8vICk7XG4gIH1cblxuICByZXNpemUgKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHNlbGYuZ2V0TW92ZURpc3RhbmNlKCkpXG4gIH1cblxuICByZXZlcnRMb2dvKCkge1xuICAgIHRoaXMudGwueW95byhmYWxzZSlcbiAgICB0aGlzLnRsLnJlcGVhdCgwKTtcblxuXG4gICAgdGhpcy50bFxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMubGVmdCwgeyB4OiAnMCUnLCBvcGFjaXR5OiAxIH0sICcwJylcbiAgICAgIC50byh0aGlzLmVsZW1lbnRzLnJpZ2h0LCB7IHg6ICcwJScsIG9wYWNpdHk6IDEgfSwgJzAnKVxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMubWlkZGxlLCB7IHg6ICcwJScgfSwgJzAnKVxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMuZGFzaCwgeyB4OiAnMCUnIH0sICcwJylcbiAgICAgIC50byh0aGlzLmVsZW1lbnRzLmFfcmlnaHQsIHsgeDogJzAlJyB9LCAnMCcpO1xuICAgICAgaWYgKERldGVjdGlvbi5pc1Bob25lKCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Bob25lJyk7XG4gICAgICB9XG4gICAgICBnc2FwLnRpbWVsaW5lKClcbiAgICAgICAgICAudG8odGhpcy5lbGVtZW50cy5jb250YWluZXIsIHtcbiAgICAgICAgICAgIHNjYWxlOiAwLjY3LFxuICAgICAgICAgICAgeTpgLSR7dGhpcy5tb3ZlRGlzdGFuY2V9cHhgLFxuICAgICAgICAgICAgZHVyYXRpb246IDAuOCxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZWxvYWRlciBjb21wbGV0ZWQnKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50bygnLnByZWxvYWRlcl9fcHJvZ3Jlc3NfX2Jhcl9fd3JhcHBlcicsIHsgYXV0b0FscGhhOiAwIH0sICcwJyk7XG5cblxuXG4gICAgICAvLyBpZiAoRGV0ZWN0aW9uLmlzRGVza3RvcCgpKSB7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKCdkZXNrdG9wJyk7XG4gICAgICAvLyAgIGdzYXBcbiAgICAgIC8vICAgICAudGltZWxpbmUoKVxuICAgICAgLy8gICAgIC50byh0aGlzLmVsZW1lbnRzLmNvbnRhaW5lciwge1xuICAgICAgLy8gICAgICAgc2NhbGU6IDAuNjcsXG4gICAgICAvLyAgICAgICB5OiAnLTU2OS41JScsXG4gICAgICAvLyAgICAgICBkdXJhdGlvbjogMC44LFxuICAgICAgLy8gICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgLy8gICAgICAgICB0aGlzLmVtaXQoJ2NvbXBsZXRlZCcpO1xuICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZygncHJlbG9hZGVyIGNvbXBsZXRlZCcpO1xuICAgICAgLy8gICAgICAgfSxcbiAgICAgIC8vICAgICB9KVxuICAgICAgLy8gICAgIC50bygnLnByZWxvYWRlcl9fcHJvZ3Jlc3NfX2Jhcl9fd3JhcHBlcicsIHsgYXV0b0FscGhhOiAwIH0sICcwJyk7XG4gICAgICAvLyB9IGVsc2VcbiAgICAgIC8vIGlmIChEZXRlY3Rpb24uaXNQaG9uZSgpKSB7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKCdwaG9uZScpO1xuICAgICAgLy8gICBnc2FwXG4gICAgICAvLyAgICAgLnRpbWVsaW5lKClcbiAgICAgIC8vICAgICAudG8odGhpcy5lbGVtZW50cy5jb250YWluZXIsIHtcbiAgICAgIC8vICAgICAgIHNjYWxlOiAwLjY3LFxuICAgICAgLy8gICAgICAgeTogJy05MjEuMCUnLFxuICAgICAgLy8gICAgICAgZHVyYXRpb246IDAuOCxcbiAgICAgIC8vICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgIC8vICAgICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKTtcbiAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ3ByZWxvYWRlciBjb21wbGV0ZWQnKTtcbiAgICAgIC8vICAgICAgIH0sXG4gICAgICAvLyAgICAgfSlcbiAgICAgIC8vICAgICAudG8oJy5wcmVsb2FkZXJfX3Byb2dyZXNzX19iYXJfX3dyYXBwZXInLCB7IGF1dG9BbHBoYTogMCB9LCAnMCcpO1xuICAgICAgLy8gfVxuICAgICAgLy8gZWxzZSBpZiAoRGV0ZWN0aW9uLmlzVGFibGV0KCkpIHtcbiAgICAgIC8vICAgY29uc29sZS5sb2coJ3RhYmxldCcpO1xuICAgICAgLy8gICBnc2FwXG4gICAgICAvLyAgICAgLnRpbWVsaW5lKClcbiAgICAgIC8vICAgICAudG8odGhpcy5lbGVtZW50cy5jb250YWluZXIsIHtcbiAgICAgIC8vICAgICAgIHNjYWxlOiAwLjY3LFxuICAgICAgLy8gICAgICAgeTogJy0xNTAwLjAlJyxcbiAgICAgIC8vICAgICAgIGR1cmF0aW9uOiAwLjgsXG4gICAgICAvLyAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAvLyAgICAgICAgIHRoaXMuZW1pdCgnY29tcGxldGVkJyk7XG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdwcmVsb2FkZXIgY29tcGxldGVkJyk7XG4gICAgICAvLyAgICAgICB9LFxuICAgICAgLy8gICAgIH0pXG4gICAgICAvLyAgICAgLnRvKCcucHJlbG9hZGVyX19wcm9ncmVzc19fYmFyX193cmFwcGVyJywgeyBhdXRvQWxwaGE6IDAgfSwgJzAnKTtcbiAgICAgIC8vIH1cblxuXG4gICAgICAgIC8vIGdzYXBcbiAgICAgICAgLy8gICAudGltZWxpbmUoKVxuICAgICAgICAvLyAgIC50byh0aGlzLmVsZW1lbnRzLmNvbnRhaW5lciwge1xuICAgICAgICAvLyAgICAgc2NhbGU6IDAuNjcsXG4gICAgICAgIC8vICAgICB5OiBEZXRlY3Rpb24uaXNEZXNrdG9wKClcbiAgICAgICAgLy8gICAgICAgPyAnLTU2OS41JSdcbiAgICAgICAgLy8gICAgICAgOiBEZXRlY3Rpb24uaXNUYWJsZXQoKVxuICAgICAgICAvLyAgICAgICA/ICctMTUwMC4wJSdcbiAgICAgICAgLy8gICAgICAgOiBEZXRlY3Rpb24uaXNQaG9uZSgpXG4gICAgICAgIC8vICAgICAgID8gJy05MjEuMCUnXG4gICAgICAgIC8vICAgICAgIDogJycsXG4gICAgICAgIC8vICAgICBkdXJhdGlvbjogMC44LFxuICAgICAgICAvLyAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAvLyAgICAgICB0aGlzLmVtaXQoJ2NvbXBsZXRlZCcpO1xuICAgICAgICAvLyAgICAgICBjb25zb2xlLmxvZygncHJlbG9hZGVyIGNvbXBsZXRlZCcpO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICB9KVxuICAgICAgICAvLyAgIC50bygnLnByZWxvYWRlcl9fcHJvZ3Jlc3NfX2Jhcl9fd3JhcHBlcicsIHsgYXV0b0FscGhhOiAwIH0sICcwJyk7XG5cblxuXG4gIH1cblxuICBhc3luYyBhbGxMb2FkZWQoKSB7XG4gICAgYXdhaXQgdGhpcy50bC5yZXBlYXQoNSk7XG4gICAgdGhpcy5yZXZlcnRMb2dvKClcbiAgfVxuXG4gIGNyZWF0ZUxvYWRlcigpIHtcbiAgICBjb25zdCB0b3RhbCA9IHRoaXMuZWxlbWVudHMuaW1hZ2VzLmxlbmd0aDtcbiAgICBjb25zdCBpbWFnZXMgPSBbLi4udGhpcy5lbGVtZW50cy5pbWFnZXNdO1xuICAgIGNvbnN0IGltZ0VsZW1lbnRzID0gW107XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBpbWFnZXMuZm9yRWFjaCgoaW1nLCBpbmRleCkgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbG9hZFByb2dyZXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZWxvYWRlcl9fcHJvZ3Jlc3MnKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3BhZ2UgaXMgZnVsbHkgbG9hZGVkJywgaW5kZXgpO1xuICAgICAgICBjb25zdCBpbWdFbGVtZW50ID0gbmV3IHdpbmRvdy5JbWFnZSgpO1xuXG4gICAgICAgIGltZ0VsZW1lbnQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGltZ0VsZW1lbnRzLnB1c2goaW1nRWxlbWVudCk7XG5cbiAgICAgICAgICB0aGlzLmxlbmd0aCA9IGltZ0VsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5sZW5ndGggLyB0b3RhbDtcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgucm91bmQocGVyY2VudCAqIDEwMCk7XG5cbiAgICAgICAgICBsb2FkUHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHt3aWR0aH0lYDtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGVkJywgdGhpcy5sZW5ndGgsIHBlcmNlbnQpO1xuXG4gICAgICAgICAgaWYgKHBlcmNlbnQgPT09IDEpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlbGYpO1xuICAgICAgICAgICAgc2VsZi5hbGxMb2FkZWQoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGltZ0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW1nRWxlbWVudC5zcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpO1xuICAgICAgICBpbWcuc3JjID0gaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgUHJlZml4IGZyb20gXCJwcmVmaXhcIlxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tICdnc2FwL1Njcm9sbFRyaWdnZXInO1xuaW1wb3J0IERldGVjdGlvbiBmcm9tICcuLi9jbGFzc2VzL2RldGVjdGlvbidcblxuY29uc3QgbGVycCA9IChmMCwgZjEsIHQpID0+ICgxIC0gdCkgKiBmMCArIHQgKiBmMTtcbmNvbnN0IGNsYW1wID0gKHZhbCwgbWluLCBtYXgpID0+IE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsLCBtYXgpKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhZ1Njcm9sbCB7XG4gIGNvbnN0cnVjdG9yKG9iaikge1xuICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9iai5lbCk7XG4gICAgdGhpcy53cmFwID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKG9iai53cmFwKTtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKG9iai5pdGVtKTtcbiAgICB0aGlzLmJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob2JqLmJhcik7XG4gICAgdGhpcy5sZWZ0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ0bl9fbGVmdCcpO1xuICAgIHRoaXMucmlnaHRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuX19yaWdodCcpO1xuICAgIC8vIHRoaXMuc2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX19zZXJ2aWNlc19fZ2FsbGVyeScpO1xuICAgIHRoaXMuc2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX19zZXJ2aWNlcycpO1xuICAgIHRoaXMud3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX19zZXJ2aWNlc19fd3JhcHBlcicpO1xuICAgIHRoaXMuc2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX3NlcnZpY2VzX19nYWxsZXJ5Jyk7XG4gICAgdGhpcy5EcmFnVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXJzb3JfX3RleHQxJyk7XG4gICAgdGhpcy5wcm9ncmVzc051bWJlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnLmhvbWVfX3NlcnZpY2VzX19uYXZfX3Byb2dyZXNzX19wcm9ncmVzc19fbnVtYmVyJ1xuICAgICk7XG4gICAgdGhpcy5pbml0KCk7XG4gICAgY29uc29sZS5sb2coJ3NsaWRlciBjcmVhdGVkJyk7XG5cbiAgICB0aGlzLmluVmlldyA9IGZhbHNlO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgYWN0aXZlIHNsaWRlXG4gICAgdGhpcy5jZW50ZXJTbGlkZSA9IG51bGxcblxuICAgIHRoaXMudHJhbnNmb3JtUHJlZml4ID0gUHJlZml4KCd0cmFuc2Zvcm0nKTtcbiAgICBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuICAgIHRoaXMuc2Nyb2xsKCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgIC8vIHRoaXMubWluU2Nyb2xsID0gMDtcbiAgICB0aGlzLnNwZWVkID0gMDtcbiAgICB0aGlzLm9sZFggPSAwO1xuICAgIHRoaXMueCA9IDA7XG4gICAgdGhpcy5wbGF5cmF0ZSA9IDA7XG4gICAgLy9cbiAgICB0aGlzLmJpbmRpbmdzKCk7XG4gICAgdGhpcy5jYWxjdWxhdGUoKTtcbiAgICB0aGlzLmFjdGl2ZVNsaWRlKClcbiAgICB0aGlzLmV2ZW50cygpO1xuICAgIHRoaXMucmFmKCk7XG4gIH1cblxuICBiaW5kaW5ncygpIHtcbiAgICBbXG4gICAgICAnZXZlbnRzJyxcbiAgICAgICdjYWxjdWxhdGUnLFxuICAgICAgJ3JhZicsXG4gICAgICAnaGFuZGxlV2hlZWwnLFxuICAgICAgJ2hhbmRsZUxlZnRDbGlja3MnLFxuICAgICAgJ2hhbmRsZVJpZ2h0Q2xpY2tzJyxcbiAgICAgICdtb3ZlJyxcbiAgICAgICdyYWYnLFxuICAgICAgJ2hhbmRsZVRvdWNoU3RhcnQnLFxuICAgICAgJ2hhbmRsZVRvdWNoTW92ZScsXG4gICAgICAnaGFuZGxlVG91Y2hFbmQnLFxuICAgICAgJ2FjdGl2ZVNsaWRlJyxcbiAgICBdLmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXNbaV0gPSB0aGlzW2ldLmJpbmQodGhpcyk7XG4gICAgfSk7XG4gIH1cblxuICBjYWxjdWxhdGUoKSB7XG4gICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgdGhpcy53cmFwV2lkdGggPSB0aGlzLnNsaWRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICB0aGlzLkl0ZW1XaWR0aCA9IHRoaXMud3JhcFdpZHRoIC8gdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgaWYgKERldGVjdGlvbi5pc0Rlc2t0b3AoKSB8fCBEZXRlY3Rpb24uaXNUYWJsZXQoKSkge1xuICAgICAgdGhpcy5taW5TY3JvbGwgPSB0aGlzLndyYXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIHRoaXMuSXRlbVdpZHRoO1xuICAgICAgdGhpcy53aW5kb3dDZW50ZXIgPSB0aGlzLndpbmRvd1dpZHRoIC8gMiArIHRoaXMuSXRlbVdpZHRoICogMC4yNTtcbiAgICAgIHRoaXMud2luZG93TGVmdCA9IHRoaXMud2luZG93V2lkdGggLyAyIC0gdGhpcy5JdGVtV2lkdGggKiAwLjc1O1xuICAgIH1cbiAgICBpZiAoRGV0ZWN0aW9uLmlzUGhvbmUoKSl7XG4gICAgICB0aGlzLm1pblNjcm9sbCA9IHRoaXMud3JhcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0XG4gICAgICB0aGlzLndpbmRvd0NlbnRlciA9IHRoaXMud2luZG93V2lkdGggLyAyICsgdGhpcy5JdGVtV2lkdGggKiAwLjI1O1xuICAgICAgdGhpcy53aW5kb3dMZWZ0ID0gdGhpcy5taW5TY3JvbGwgLSAyMDtcblx0XHRcdGNvbnNvbGUubG9nKHRoaXMud2luZG93TGVmdCwgdGhpcy53aW5kb3dDZW50ZXIpXG4gICAgfVxuICAgICAgLy8gdGhpcy53cmFwLnN0eWxlLndpZHRoID0gYCR7dGhpcy53cmFwV2lkdGh9cHhgO1xuICAgICAgdGhpcy5tYXhTY3JvbGwgPSB0aGlzLndyYXBXaWR0aCAtIHRoaXMuZWwuY2xpZW50V2lkdGggLSB0aGlzLm1pblNjcm9sbDtcbiAgICAvLyAtIHRoaXMubWluU2Nyb2xsO1xuICAgIHRoaXMuc2VjdGlvblRvcCA9IHRoaXMuc2VjdGlvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gIH1cblxuICBhY3RpdmVTbGlkZSAoKSB7XG4gICAgLy8gQ2xpY2tcbiAgICB0aGlzLml0ZW1zLmZvckVhY2goIChpdGVtLCBpbmRleCkgPT4ge1xuXG4gICAgICB0aGlzLml0ZW1Cb3VuZHNMZWZ0ID0gaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0XG5cbiAgICAgIC8vIGNvbnN0IGl0ZW1UaXRsZVNwYW5zID0gaXRlbS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJylcblxuICAgICAgdGhpcy5pc0NlbnRlciA9XG4gICAgICAgIHRoaXMuaXRlbUJvdW5kc0xlZnQgPCB0aGlzLndpbmRvd0NlbnRlciAmJlxuICAgICAgICB0aGlzLml0ZW1Cb3VuZHNMZWZ0ID4gdGhpcy53aW5kb3dMZWZ0O1xuXG4gICAgICBpZiAodGhpcy5pc0NlbnRlcikge1xuICAgICAgICB0aGlzLmNlbnRlclNsaWRlID0gaXRlbVxuICAgICAgICB0aGlzLmNlbnRlclNsaWRlSW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5jZW50ZXJTbGlkZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXG4gICAgICAgIC8vICAgaXRlbVRpdGxlU3BhbnNbMF0uaW5uZXJIVE1MLFxuICAgICAgICAvLyAgIHRoaXMuY2VudGVyU2xpZGUsXG4gICAgICAgIC8vICAgdGhpcy5pdGVtQm91bmRzTGVmdCxcbiAgICAgICAgLy8gICB0aGlzLndpbmRvd0xlZnQsXG4gICAgICAgIC8vICAgdGhpcy53aW5kb3dDZW50ZXJcbiAgICAgICAgLy8gKTtcbiAgICAgICAgLy8gcmVtb3ZlIGFjdGl2ZSBjbGFzcyBmcm9tIHByZXZpb3VzIGFuZCBhZGQgdG8gY3VycmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgfVxuXG4gICAgfSlcbiAgfVxuXG4gIGFjdGl2ZVNsaWRlQ2xpY2sgKCkge1xuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5yaWdodENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pdGVtQm91bmRzTGVmdCA9XG4gICAgICAgICAgICBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB0aGlzLkl0ZW1XaWR0aDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyaWdodCBjbGljaycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1Cb3VuZHNMZWZ0ID1cbiAgICAgICAgICAgIGl0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArIHRoaXMuSXRlbVdpZHRoO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2xlZnQgY2xpY2snKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnN0IGl0ZW1UaXRsZVNwYW5zID0gaXRlbS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJyk7XG5cbiAgICAgICAgdGhpcy5pc0NlbnRlciA9XG4gICAgICAgICAgdGhpcy5pdGVtQm91bmRzTGVmdCA8IHRoaXMud2luZG93Q2VudGVyICYmXG4gICAgICAgICAgdGhpcy5pdGVtQm91bmRzTGVmdCA+IHRoaXMud2luZG93TGVmdDtcblxuICAgICAgICBpZiAodGhpcy5pc0NlbnRlcikge1xuICAgICAgICAgIHRoaXMuY2VudGVyU2xpZGUgPSBpdGVtO1xuICAgICAgICAgIHRoaXMuY2VudGVyU2xpZGVJbmRleCA9IGluZGV4XG4gICAgICAgICAgdGhpcy5jZW50ZXJTbGlkZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVdoZWVsKGUpIHtcbiAgICBpZiAoIXRoaXMuaW5WaWV3KSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmluVmlldykge1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9ncmVzcyArPSBlLmRlbHRhWTtcbiAgfVxuICB0aGlzLm1vdmUoKTtcbn1cblxuaGFuZGxlTGVmdENsaWNrcyhlKSB7XG5cdHRoaXMucmlnaHRDbGljayA9IGZhbHNlXG4gIGNvbnNvbGUubG9nKCdsZWZ0IGNsaWNrJyk7XG4gIHRoaXMucHJvZ3Jlc3MgLT0gdGhpcy5JdGVtV2lkdGg7XG4gIHRoaXMuYWN0aXZlU2xpZGVDbGljaygpO1xuXG4gIC8vIGlmIGF0IHRoZSBzdGFydCBvZiBnYWxsZXJ5IG1vdmUgdG8gZW5kIG9mIHNsaWRlXG4gIGlmICh0aGlzLnByb2dyZXNzIDw9ICh0aGlzLm1pblNjcm9sbCAtMTAwICkpIHtcbiAgICBjb25zb2xlLmxvZygnZ2FsbGVyeSBzdGFydCcsIHRoaXMuaXRlbXNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCk7XG4gICAgdGhpcy5zbGlkZUVuZCA9IHRoaXMuaXRlbXNbdGhpcy5pdGVtcy5sZW5ndGggLSAxXTtcblxuICAgIHRoaXMucHJvZ3Jlc3MgLT0gKHRoaXMuSXRlbVdpZHRoICk7XG4gICAgLy8gcmVtb3ZlIGFjdGl2ZSBjbGFzc1xuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKCAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgIH1cbiAgICAgKVxuXG4gICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuXG4gICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLm1heFNjcm9sbDtcbiAgICAgICB0aGlzLnNsaWRlRW5kLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgdGhpcy5jZW50ZXJTbGlkZUluZGV4ID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlUmlnaHRDbGlja3MoZSkge1xuXHRcdHRoaXMuY2xpY2tlZCA9IHRydWU7XG5cdFx0dGhpcy5yaWdodENsaWNrID0gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZygncmlnaHQgY2xpY2snKTtcbiAgICB0aGlzLnByb2dyZXNzICs9IHRoaXMuSXRlbVdpZHRoO1xuICAgIHRoaXMuYWN0aXZlU2xpZGVDbGljaygpO1xuICAgIC8vIGlmIGF0IHRoZSBlbmQgb2YgZ2FsbGVyeSBtb3ZlIHRvIHN0YXJ0IG9mIHNsaWRlXG4gICAgaWYgKHRoaXMucHJvZ3Jlc3MgPj0gdGhpcy5tYXhTY3JvbGwpIHtcbiAgICAgIHRoaXMuc2xpZGVTdGFydCA9IHRoaXMuaXRlbXNbMF07XG5cbiAgICAgIC8vIHJlbW92ZSBhY3RpdmUgY2xhc3NcbiAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5tYXhTY3JvbGw7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5taW5TY3JvbGw7XG4gICAgICAgIHRoaXMuc2xpZGVTdGFydC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5jZW50ZXJTbGlkZUluZGV4ID0gMFxuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCdnYWxsZXJ5IGVuZCcsIHRoaXMuaXRlbXNbMF0pO1xuICB9XG5cbiAgaGFuZGxlVG91Y2hTdGFydChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmKCF0aGlzLmluVmlldykgcmV0dXJuO1xuICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuICAgIHRoaXMuc3RhcnRYID0gZS5jbGllbnRYIHx8IGUudG91Y2hlc1swXS5jbGllbnRYO1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcbiAgICB0aGlzLkRyYWdUZXh0LmNsYXNzTGlzdC5hZGQoJ25vbmUnKVxuICAgIHRoaXMuY2xpY2sgPSBmYWxzZVxuICB9XG5cbiAgaGFuZGxlVG91Y2hNb3ZlKGUpIHtcbiAgICB0aGlzLmNsaWNrID0gZmFsc2VcbiAgICBpZighdGhpcy5pblZpZXcpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZHJhZ2dpbmcpIHJldHVybiBmYWxzZTtcbiAgICAvLyBjb25zdCB4ID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG4gICAgY29uc3QgeCA9IGUuY2xpZW50WCB8fCBlLnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICB0aGlzLnByb2dyZXNzICs9ICh0aGlzLnN0YXJ0WCAtIHgpICogMi41O1xuICAgIHRoaXMuc3RhcnRYID0geDtcbiAgICB0aGlzLm1vdmUoKTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnByb2dyZXNzKTtcbiAgfVxuXG4gIGhhbmRsZVRvdWNoRW5kKCkge1xuICAgIHRoaXMuY2xpY2sgPSBmYWxzZTtcbiAgICBpZighdGhpcy5pblZpZXcpIHJldHVybjtcbiAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuICAgIHRoaXMuRHJhZ1RleHQuY2xhc3NMaXN0LnJlbW92ZSgnbm9uZScpO1xuICB9XG5cblxuICBtb3ZlKCkge1xuICAgIHRoaXMuY2xpY2sgPSBmYWxzZTtcbiAgICB0aGlzLnByb2dyZXNzID0gY2xhbXAodGhpcy5wcm9ncmVzcywgdGhpcy5taW5TY3JvbGwsIHRoaXMubWF4U2Nyb2xsKTtcbiAgICAgIHRoaXMuYWN0aXZlU2xpZGUoKTtcblxuXG4gIH1cblxuICBldmVudHMoKSB7XG4gICAgLy8gaWYoIXRoaXMuaW5WaWV3KSByZXR1cm47aWYoIXRoaXMuaW5WaWV3KSByZXR1cm47XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2FsY3VsYXRlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZVdoZWVsKTtcbiAgICAvL1xuICAgIHRoaXMucmlnaHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZVJpZ2h0Q2xpY2tzKTtcbiAgICB0aGlzLmxlZnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUxlZnRDbGlja3MpO1xuICAgIC8vXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG4gICAgLy9cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVUb3VjaE1vdmUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG5cbiAgfVxuXG4gIHNjcm9sbCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLnNsaWRlWSA9IHRoaXMud3JhcFdpZHRoICsgdGhpcy5JdGVtV2lkdGggLSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLnRsID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgIHRyaWdnZXI6ICcuaG9tZV9fYWJvdXQnLFxuICAgICAgICBzdGFydDogJ2JvdHRvbSAxMCUnLFxuICAgICAgICB0b2dnbGVBY3Rpb25zOiAncmVzdGFydCBjb21wbGV0ZSBub25lIHJlc2V0JyxcbiAgICAgICAgLy8gbWFya2VyczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGhpcy50bFxuICAgICAgLnRvKCcuaG9tZV9fYWJvdXRfX3Njcm9sbHRleHQgLndvcmQnLCB7XG4gICAgICAgIHk6ICcxMDAlJyxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgZHVyYXRpb246IDAuNSxcbiAgICAgIH0pXG4gICAgICBpZiAoRGV0ZWN0aW9uLmlzRGVza3RvcCgpIHx8IERldGVjdGlvbi5pc1RhYmxldCgpKSB7XG4gICAgICAgIHRoaXMudGwxID0gZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgICAgdHJpZ2dlcjogJy5ob21lX19zZXJ2aWNlcycsXG4gICAgICAgICAgICBzdGFydDogJ3RvcCB0b3AnLFxuICAgICAgICAgICAgLy8gIGVuZDogYCs9JHt0aGlzLndyYXBXaWR0aH0gYm90dG9tYCxcbiAgICAgICAgICAgIGVuZDogYCs9JHt0aGlzLnNsaWRlWX1gLFxuICAgICAgICAgICAgdG9nZ2xlQWN0aW9uczogJ3Jlc3RhcnQgY29tcGxldGUgbm9uZSByZXNldCcsXG4gICAgICAgICAgICAvLyAgbWFya2VyczogdHJ1ZSxcbiAgICAgICAgICAgIHBpbjogJy5ob21lX19zZXJ2aWNlcycsXG4gICAgICAgICAgICBzY3J1YjogMSxcbiAgICAgICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2VsZi5pblZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxmLnNlY3Rpb24uY2xhc3NMaXN0LmFkZCgnaW4tdmlldycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FkZCBub25lJyk7XG4gICAgICAgICAgICAgIHNlbGYuRHJhZ1RleHQuY2xhc3NMaXN0LmFkZCgnbm9uZScpO1xuICAgICAgICAgICAgICBzZWxmLnNlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSgnaW4tdmlldycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTGVhdmVCYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNlbGYuRHJhZ1RleHQuY2xhc3NMaXN0LmFkZCgnbm9uZScpO1xuICAgICAgICAgICAgICBzZWxmLnNlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSgnaW4tdmlldycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRW50ZXJCYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhZGQgbm9uZScpO1xuICAgICAgICAgICAgICBzZWxmLnNlY3Rpb24uY2xhc3NMaXN0LmFkZCgnaW4tdmlldycpO1xuICAgICAgICAgICAgICBzZWxmLkRyYWdUZXh0LmNsYXNzTGlzdC5yZW1vdmUoJ25vbmUnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRsMSA9IGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICAgIHRyaWdnZXI6ICcuaG9tZV9fc2VydmljZXMnLFxuICAgICAgICAgICAgc3RhcnQ6ICd0b3AgdG9wJyxcbiAgICAgICAgICAgIGVuZDogJ2JvdHRvbSB0b3AnLFxuICAgICAgICAgICAgdG9nZ2xlQWN0aW9uczogJ3Jlc3RhcnQgY29tcGxldGUgbm9uZSByZXNldCcsXG4gICAgICAgICAgICBtYXJrZXJzOiB7IHN0YXJ0Q29sb3I6ICd3aGl0ZScsIHN0YXJ0IDogJ3NlcnZpY2VzJyB9LFxuICAgICAgICAgICAgcGluOiB0cnVlLFxuICAgICAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLmluVmlldyA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuc2VjdGlvbi5jbGFzc0xpc3QuYWRkKCdpbi12aWV3Jyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLnNlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSgnaW4tdmlldycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTGVhdmVCYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNlbGYuc2VjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdpbi12aWV3Jyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FbnRlckJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2VsZi5zZWN0aW9uLmNsYXNzTGlzdC5hZGQoJ2luLXZpZXcnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICAgICAgICBzZWxmLnNjcm9sbFNsaWRlciA9IHNjcm9sbC5wcm9ncmVzcyAqIHNlbGYuc2xpZGVZO1xuICAgICAgICAgICAgICBzZWxmLnByb2dyZXNzID0gK3NlbGYuc2Nyb2xsU2xpZGVyO1xuICAgICAgICAgICAgICBzZWxmLm1vdmUoKTtcbiAgICAgICAgICAgICAgc2Nyb2xsLm1hcmtlckVuZC50ZXh0Q29udGVudCA9IGBlbmQ6ICR7c2VsZi5wcm9ncmVzcy50b0ZpeGVkKDIpfWA7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgc2VsZi5zY3JvbGxTbGlkZXIsXG4gICAgICAgICAgICAgICAgc2Nyb2xsLm1hcmtlckVuZC50ZXh0Q29udGVudFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgdGhpcy50bFxuICAgICAgIC5mcm9tKCcuaG9tZV9fc2VydmljZXNfX2dhbGxlcnlfX3dyYXBwZXInLCB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICB9KVxuICAgICAgIC50bygnLmhvbWVfX3NlcnZpY2VzX193cmFwcGVyJywge1xuICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgIGRlbGF5OiA1LFxuICAgICAgICAgZHVyYXRpb246IDAuNSxcbiAgICAgICAgIGVhc2U6ICdleHBvLm91dCcsXG4gICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgIHNlbGYuaW5WaWV3ID0gdHJ1ZTtcbiAgICAgICAgICAgc2VsZi5EcmFnVGV4dC5jbGFzc0xpc3QucmVtb3ZlKCdub25lJyk7XG4gICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdvcGFjaXR5IDEnLCBzZWxmLmluVmlldyk7XG4gICAgICAgICB9LFxuICAgICAgIH0pO1xuXG4gICAgIGlmKCF0aGlzLnNlY3Rpb24uY2xhc3NMaXN0LmNvbnRhaW5zKCdpbi12aWV3JykpIHtcbiAgICAgIHRoaXMuRHJhZ1RleHQuY2xhc3NMaXN0LmFkZCgnbm9uZScpXG4gICAgIH1cbiAgfVxuXG4gIG1vdmVTbGlkZXIgKCkge1xuICAgIHRoaXMuc2VjdGlvblRvcCA9IHRoaXMuc2VjdGlvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5wcm9ncmVzcywgdGhpcy5tYXhTY3JvbGwsIHRoaXMuc2VjdGlvblRvcCk7XG4gICAgdGhpcy5yYWYoKVxuXG4gIH1cblxuICByYWYoKSB7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5pblZpZXcpO1xuICAgIGlmKCF0aGlzLmluVmlldykgcmV0dXJuXG4gICAgdGhpcy54ID0gbGVycCh0aGlzLngsIHRoaXMucHJvZ3Jlc3MsIDAuMSk7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy54LCB0aGlzLnByb2dyZXNzKVxuICAgIHRoaXMucGxheXJhdGUgPSB0aGlzLnggLyB0aGlzLm1heFNjcm9sbDtcbiAgICAvLyB0aGlzLnByb2dyZXNzTnVtID0gTWF0aC5yb3VuZCgoMC4xOCArIHRoaXMucGxheXJhdGUgKiAwLjgyKSAqIDcpO1xuICAgIHRoaXMucHJvZ3Jlc3NOdW0gPSB0aGlzLmNlbnRlclNsaWRlSW5kZXggKyAxO1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuY2VudGVyU2xpZGVJbmRleCArIDEpO1xuICAgIC8vXG4gICAgdGhpcy5wcm9ncmVzc051bWJlci5pbm5lckhUTUwgPSBgMCR7dGhpcy5wcm9ncmVzc051bX0vMDdgXG4gICAgLy9cbiAgICB0aGlzLndyYXAuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gYHRyYW5zbGF0ZVgoJHstdGhpcy54fXB4KWA7XG4gICAgdGhpcy5iYXIuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gYHNjYWxlWCgkezAuMTggKyB0aGlzLnBsYXlyYXRlICogMC44Mn0pYDtcbiAgICAvL1xuICAgIHRoaXMuc3BlZWQgPSBNYXRoLm1pbigxMDAsIHRoaXMub2xkWCAtIHRoaXMueCk7XG4gICAgdGhpcy5vbGRYID0gdGhpcy54O1xuICAgIC8vXG4gICAgdGhpcy5zY2FsZSA9IGxlcnAodGhpcy5zY2FsZSwgdGhpcy5zcGVlZCwgMC4xKTtcbiAgICB0aGlzLml0ZW1zLmZvckVhY2goKGkpID0+IHtcbiAgICAgIGkuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gYHNjYWxlKCR7MSAtIE1hdGguYWJzKHRoaXMuc3BlZWQpICogMC4wMDJ9KWA7XG4gICAgICBpLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpLnN0eWxlW3RoaXMudHJhbnNmb3JtUHJlZml4XSA9IGBzY2FsZVgoJHtcbiAgICAgICAgMSArIE1hdGguYWJzKHRoaXMuc3BlZWQpICogMC4wMDRcbiAgICAgIH0pYDtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEluc3RhbmNlc1xuICovXG5cblxuXG5cblxuLyoqXG4gKiBPbmUgcmFmIHRvIHJ1bGUgZW0gYWxsXG4gKi9cblxuXG5cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAqL1xuLy8gaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCdcbmltcG9ydCBEZXRlY3Rpb24gZnJvbSAnLi9jbGFzc2VzL2RldGVjdGlvbic7XG5cbmltcG9ydCBDdXJzb3IgZnJvbSAnLi9jb21wb25lbnRzL2N1cnNvcic7XG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gJy4vY29tcG9uZW50cy9wcmVsb2FkZXInXG5pbXBvcnQgRHJhZ1Njcm9sbCBmcm9tICcuL2NvbXBvbmVudHMvc2xpZGVyJztcbmltcG9ydCBBYm91dCBmcm9tICcuL3BhZ2VzL2Fib3V0JztcbmltcG9ydCBIb21lIGZyb20gJy4vcGFnZXMvaG9tZS9pbmRleCdcblxuY2xhc3MgQXBwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVDb250ZW50KCk7XG5cbiAgICB0aGlzLmNyZWF0ZVBhZ2VzKCk7XG4gICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKTtcbiAgICAvLyB0aGlzLmNyZWF0ZUFuaW1hdGlvbnMoKVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcblxuXG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIC8vIGNoZWNrIHdoYXQgcGFnZSBjb250ZW50XG4gIGNyZWF0ZUNvbnRlbnQoKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpOyAvLyB0aGlzIGlzIHRoZSB2YWx1ZSBpbiBlYWNoIHB1ZyBmaWxlIHVuZGVyIGJsb2NrIHZhcmlhYmxlc1xuICB9XG5cbiAgLy8gY3JlYXRlUHJlbG9hZGVyXG4gIGNyZWF0ZVByZWxvYWRlcigpIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgdGhpcy5wcmVsb2FkZXIgPSBuZXcgUHJlbG9hZGVyKCk7XG4gICAgdGhpcy5wcmVsb2FkZXIub25jZSgnY29tcGxldGVkJywgKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCduby1zY3JvbGwnKVxuICAgICAgdGhpcy5wYWdlLmFuaW1hdGVQYWdlSW4oKTtcbiAgICAgIHRoaXMuY3JlYXRlQ3Vyc29yKCk7XG4gICAgfSk7XG4gICAgLy8gdGhpcy5wcmVsb2FkZXIuYW5pbWF0ZUxvZ28oKVxuICAgIC8vIHRoaXMucHJlbG9hZGVyLmNyZWF0ZUxvYWRlcigpXG4gIH1cblxuICBjcmVhdGVTbGlkZXIoKSB7XG4gICAgdGhpcy5zY3JvbGwgPSBuZXcgRHJhZ1Njcm9sbCh7XG4gICAgICBlbDogJy5ob21lX19zZXJ2aWNlc19fZ2FsbGVyeV9fd3JhcHBlcicsXG4gICAgICB3cmFwOiAnLmhvbWVfX3NlcnZpY2VzX19nYWxsZXJ5JyxcbiAgICAgIGl0ZW06ICcuaG9tZV9fc2VydmljZXNfX3NlcnZpY2UnLFxuICAgICAgYmFyOiAnLmhvbWVfX3NlcnZpY2VzX19uYXZfX3Byb2dyZXNzX19wcm9ncmVzc19fYmFyX19wcm9ncmVzcycsXG4gICAgfSk7XG4gIH1cblxuXG4gIC8vIGNyZWF0ZSBwYWdlcyBhbmQgc2VsZWN0IGN1cnJlbnQgcGFnZVxuICBjcmVhdGVQYWdlcygpIHtcbiAgICB0aGlzLnBhZ2VzID0ge1xuICAgICAgaG9tZTogbmV3IEhvbWUoKSxcbiAgICAgIGFib3V0OiBuZXcgQWJvdXQoKSxcbiAgICB9O1xuICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV07IC8vIG5vdyB3ZSBhbHdheXMgaGF2ZSBhY2Nlc3MgdG8gY3VyZW50IHBhZ2Ugb24gc2NyZWVuXG4gICAgdGhpcy5wYWdlLmNyZWF0ZSgpO1xuICAgIHRoaXMucGFnZS5zbW9vdGhTY3JvbGwoKVxuICAgIC8vIGNhbGwgcmVzaXplIGFueXRpbWUgcGFnZSBpcyBjcmVhdGVkXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuICAgIC8vIGNhbGwgc2xpZGVyIHdoZW4gcGFnZSBpcyBjcmVhdGVkXG4gICAgdGhpcy5jcmVhdGVTbGlkZXIoKVxuICB9XG5cbiAgLy8gY3VzdG9tIGN1cnNvclxuICBjcmVhdGVDdXJzb3IoKSB7XG4gICAgaWYgKERldGVjdGlvbi5pc0Rlc2t0b3AoKSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSBuZXcgQ3Vyc29yKCk7XG4gICAgICB0aGlzLmN1cnNvci5jcmVhdGVDdXJzb3IoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXZlbnRzXG4gICAqL1xuXG4gIG9uUmVzaXplKCkge1xuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uUmVzaXplKSB7XG4gICAgICB0aGlzLnBhZ2Uub25SZXNpemUoKTtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXNpemUnKTtcbiAgICB9XG4gIH1cblxuICBvbldoZWVsKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2Uub25XaGVlbCkge1xuICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQpO1xuICAgICAgdGhpcy5wYWdlLm9uV2hlZWwoZXZlbnQpO1xuICAgICAgLy8gdGhpcy5wYWdlLmdldERpcmVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyZWF0ZUFuaW1hdGlvbnMgKCkge1xuICAvLyAgIHRoaXMuY3JlYXRlQW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigpO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIExvb3BzXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5zY3JvbGwubW92ZVNsaWRlcigpO1xuXG4gICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2UudXBkYXRlKSB7XG4gICAgICAvLyB0aGlzLnBhZ2UudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuZXJzXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIHRoaXMub25XaGVlbC5iaW5kKHRoaXMpKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwuYmluZCh0aGlzKSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSk7XG4gIH1cbn1cblxuICBuZXcgQXBwKClcbiIsImltcG9ydCBQYWdlIGZyb20gXCIuLi8uLi9jbGFzc2VzL3BhZ2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXQgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudDogJy5hYm91dCdcbiAgICB9KVxuICAgIC8vIGNvbnNvbGUubG9nKCdhYm91dCcpO1xuICB9XG5cbiAgY3JlYXRlKCkge31cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9TY3JvbGxUcmlnZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0ZUltYWdlcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbiAgICB0aGlzLmhvbWVBYm91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX19hYm91dCcpO1xuICAgIHRoaXMubWFpblRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZV9fYWJvdXRfX21haW50ZXh0Jyk7XG4gICAgdGhpcy5zdWJXb3JkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ob21lX19hYm91dF9fc3VidGV4dCAud29yZCcpO1xuICAgIHRoaXMuTWVkaWFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFib3V0X19pZGVhX19tZWRpYScpO1xuXG4gICAgdGhpcy50bDEgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgdHJpZ2dlcjogJy5ob21lX19hYm91dCcsXG4gICAgICAgIHN0YXJ0OiAndG9wIHRvcCcsXG4gICAgICAgIGVuZDogJzI1MDAgYm90dG9tJyxcbiAgICAgICAgdG9nZ2xlQWN0aW9uczogJ3Jlc3RhcnQgY29tcGxldGUgcmVzdGFydCByZXNldCcsXG4gICAgICAgIC8vIG1hcmtlcnM6IHRydWUsXG4gICAgICAgIHNjcnViOiAxLFxuICAgICAgICBwaW46ICcuaG9tZV9fYWJvdXQnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB9XG5cblxuICBpc1Bob25lKCkge1xuICAgIGNvbnNvbGUubG9nKFwiYW5pbWF0ZSBwaG9uZSBpbWFnZXNcIilcbiAgICBnc2FwLnNldCh0aGlzLk1lZGlhcywgeyBvcGFjaXR5OiAwLCBzY2FsZTogMC4xIH0pO1xuXG4gICAgY29uc3QgdGltZSA9IDEuNTtcblxuICAgIHRoaXMudGwxXG4gICAgICAuYWRkTGFiZWwoJ2ltZ1QnLCAnKz0yLjUnKVxuICAgICAgLmFkZExhYmVsKCd0aW1lJywgJzEuNScpXG4gICAgICAuZnJvbSgnLmhvbWVfX2Fib3V0X19tYWludGV4dCAud29yZCcsIHtcbiAgICAgICAgeVBlcmNlbnQ6IDEwMCxcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgZWFzZTogJ3Bvd2VyMS5vdXQnLFxuICAgICAgICBzdGFnZ2VyOiB7IGFtb3VudDogMC4yIH0sXG4gICAgICB9KVxuICAgICAgLmZyb20oJy5ob21lX19hYm91dF9fc3VidGV4dCAuY2hhcicsIHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgeDogJzFlbScsXG4gICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgIGVhc2U6ICdwb3dlcjIub3V0JyxcbiAgICAgICAgc3RhZ2dlcjogeyBhbW91bnQ6IDAuNCB9LFxuICAgICAgfSlcbiAgICAgIC50byhcbiAgICAgICAgdGhpcy5NZWRpYXMsXG4gICAgICAgIHtcbiAgICAgICAgICBkZWxheTogMC41LFxuICAgICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgfSxcbiAgICAgICAgJy09MS41J1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICB0aGlzLk1lZGlhc1swXSxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICAgIHdpZHRoOiAnODIlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc1MiUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgIHRoaXMuTWVkaWFzWzFdLFxuICAgICAgICB7XG4gICAgICAgICAgZHVyYXRpb246IHRpbWUsXG4gICAgICAgICAgd2lkdGg6ICc3NiUnLFxuICAgICAgICAgIGhlaWdodDogJzUyJScsXG4gICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgdG9wOiAnNTAlJyxcbiAgICAgICAgICB4UGVyY2VudDogLTUwLFxuICAgICAgICAgIHlQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICB9LFxuICAgICAgICAnaW1nVCdcbiAgICAgIClcbiAgICAgIC50byhcbiAgICAgICAgdGhpcy5NZWRpYXNbMl0sXG4gICAgICAgIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGltZSxcbiAgICAgICAgICB3aWR0aDogJzgyJScsXG4gICAgICAgICAgaGVpZ2h0OiAnNTAlJyxcbiAgICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgIHhQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeVBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgICdpbWdUJ1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICB0aGlzLk1lZGlhc1szXSxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICAgIHdpZHRoOiAnODIlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc0OCUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgIHRoaXMuTWVkaWFzWzRdLFxuICAgICAgICB7XG4gICAgICAgICAgZHVyYXRpb246IHRpbWUsXG4gICAgICAgICAgd2lkdGg6ICc3MCUnLFxuICAgICAgICAgIGhlaWdodDogJzQ4JScsXG4gICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgdG9wOiAnNTAlJyxcbiAgICAgICAgICB4UGVyY2VudDogLTUwLFxuICAgICAgICAgIHlQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICB9LFxuICAgICAgICAnaW1nVCdcbiAgICAgIClcbiAgICAgIC50byhcbiAgICAgICAgdGhpcy5NZWRpYXNbNV0sXG4gICAgICAgIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGltZSxcbiAgICAgICAgICB3aWR0aDogJzc5JScsXG4gICAgICAgICAgaGVpZ2h0OiAnNDclJyxcbiAgICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgIHhQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeVBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgICdpbWdUJ1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICB0aGlzLk1lZGlhc1s2XSxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICAgIHdpZHRoOiAnODUlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc0OCUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgIHRoaXMuTWVkaWFzWzddLFxuICAgICAgICB7XG4gICAgICAgICAgZHVyYXRpb246IHRpbWUsXG4gICAgICAgICAgd2lkdGg6ICc3OSUnLFxuICAgICAgICAgIGhlaWdodDogJzQ5JScsXG4gICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgdG9wOiAnNTAlJyxcbiAgICAgICAgICB4UGVyY2VudDogLTUwLFxuICAgICAgICAgIHlQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICB9LFxuICAgICAgICAnaW1nVCdcbiAgICAgIClcbiAgICAgIC50byhcbiAgICAgICAgJy5ob21lX19hYm91dF9fbWFpbnRleHQgLndvcmQnLFxuICAgICAgICB7XG4gICAgICAgICAgeVBlcmNlbnQ6IDEwMCxcbiAgICAgICAgICBkdXJhdGlvbjogMC42LFxuICAgICAgICAgIGRlbGF5OiAwLjUsXG4gICAgICAgICAgZWFzZTogJ3Bvd2VyMS5vdXQnLFxuICAgICAgICAgIHN0YWdnZXI6IHsgYW1vdW50OiAwLjIgfSxcbiAgICAgICAgfSxcbiAgICAgICAgJy09MC41J1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICAnLmhvbWVfX2Fib3V0X19zdWJ0ZXh0IC53b3JkJyxcbiAgICAgICAge1xuICAgICAgICAgIHlQZXJjZW50OiAxMDAsXG4gICAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgICBlYXNlOiAncG93ZXIxLm91dCcsXG4gICAgICAgICAgc3RhZ2dlcjogeyBhbW91bnQ6IDAuMiB9LFxuICAgICAgICB9LFxuICAgICAgICAnLT0wLjInXG4gICAgICApXG4gICAgICAudG8oJy5ob21lX19hYm91dF9fbW92aW5ndGV4dCcsIHtcbiAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgfSlcbiAgICAgIC50bygnLmhvbWVfX2Fib3V0X19tb3Zpbmd0ZXh0JywgeyB4OiAnLTIwJScsIGR1cmF0aW9uOiA2IH0pO1xuXG4gIH1cblxuICBpc0Rlc2t0b3AoKSB7XG4gICAgY29uc29sZS5sb2coXCJhbmltYXRlIGRlc2t0b3AgaW1hZ2VzXCIpXG4gICAgZ3NhcC5zZXQodGhpcy5NZWRpYXMsIHsgb3BhY2l0eTogMCwgc2NhbGU6IDAuMSB9KTtcblxuICAgIGNvbnN0IHRpbWUgPSAxLjVcblxuICAgIHRoaXMudGwxXG4gICAgICAuYWRkTGFiZWwoJ2ltZ1QnLCAnKz0yLjUnKVxuICAgICAgLmFkZExhYmVsKCd0aW1lJywgJzEuNScpXG4gICAgICAuZnJvbSgnLmhvbWVfX2Fib3V0X19tYWludGV4dCAud29yZCcsIHtcbiAgICAgICAgeVBlcmNlbnQ6IDEwMCxcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgZWFzZTogJ3Bvd2VyMS5vdXQnLFxuICAgICAgICBzdGFnZ2VyOiB7IGFtb3VudDogMC4yIH0sXG4gICAgICB9KVxuICAgICAgLmZyb20oJy5ob21lX19hYm91dF9fc3VidGV4dCAuY2hhcicsIHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgeDogJzFlbScsXG4gICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgIGVhc2U6ICdwb3dlcjIub3V0JyxcbiAgICAgICAgc3RhZ2dlcjogeyBhbW91bnQ6IDAuNCB9LFxuICAgICAgfSlcbiAgICAgIC50byhcbiAgICAgICAgdGhpcy5NZWRpYXMsXG4gICAgICAgIHtcbiAgICAgICAgICBkZWxheTogMC41LFxuICAgICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgfSxcbiAgICAgICAgJy09MS41J1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICB0aGlzLk1lZGlhc1swXSxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICAgIHdpZHRoOiAnMzIlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc5MCUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgIHRoaXMuTWVkaWFzWzFdLFxuICAgICAgICB7XG4gICAgICAgICAgZHVyYXRpb246IHRpbWUsXG4gICAgICAgICAgd2lkdGg6ICcyOS42JScsXG4gICAgICAgICAgaGVpZ2h0OiAnOTAlJyxcbiAgICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgIHhQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeVBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgICdpbWdUJ1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICB0aGlzLk1lZGlhc1syXSxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICAgIHdpZHRoOiAnMzIlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc5MCUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgIHRoaXMuTWVkaWFzWzNdLFxuICAgICAgICB7XG4gICAgICAgICAgZHVyYXRpb246IHRpbWUsXG4gICAgICAgICAgd2lkdGg6ICczMiUnLFxuICAgICAgICAgIGhlaWdodDogJzgzJScsXG4gICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgdG9wOiAnNTAlJyxcbiAgICAgICAgICB4UGVyY2VudDogLTUwLFxuICAgICAgICAgIHlQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICB9LFxuICAgICAgICAnaW1nVCdcbiAgICAgIClcbiAgICAgIC50byhcbiAgICAgICAgdGhpcy5NZWRpYXNbNF0sXG4gICAgICAgIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGltZSxcbiAgICAgICAgICB3aWR0aDogJzI3JScsXG4gICAgICAgICAgaGVpZ2h0OiAnODMlJyxcbiAgICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgIHhQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeVBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgICdpbWdUJ1xuICAgICAgKVxuICAgICAgLnRvKFxuICAgICAgICB0aGlzLk1lZGlhc1s1XSxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICAgIHdpZHRoOiAnMzAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc4MiUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgIHRoaXMuTWVkaWFzWzZdLFxuICAgICAgICB7XG4gICAgICAgICAgZHVyYXRpb246IHRpbWUsXG4gICAgICAgICAgd2lkdGg6ICczMyUnLFxuICAgICAgICAgIGhlaWdodDogJzg0JScsXG4gICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgdG9wOiAnNTAlJyxcbiAgICAgICAgICB4UGVyY2VudDogLTUwLFxuICAgICAgICAgIHlQZXJjZW50OiAtNTAsXG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICB9LFxuICAgICAgICAnaW1nVCdcbiAgICAgIClcbiAgICAgIC50byhcbiAgICAgICAgdGhpcy5NZWRpYXNbN10sXG4gICAgICAgIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGltZSxcbiAgICAgICAgICB3aWR0aDogJzMwLjUlJyxcbiAgICAgICAgICBoZWlnaHQ6ICc3OCUnLFxuICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgeFBlcmNlbnQ6IC01MCxcbiAgICAgICAgICB5UGVyY2VudDogLTUwLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgJ2ltZ1QnXG4gICAgICApXG4gICAgICAudG8oXG4gICAgICAgICcuaG9tZV9fYWJvdXRfX21haW50ZXh0IC53b3JkJyxcbiAgICAgICAge1xuICAgICAgICAgIHlQZXJjZW50OiAxMDAsXG4gICAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgICBkZWxheTogMC41LFxuICAgICAgICAgIGVhc2U6ICdwb3dlcjEub3V0JyxcbiAgICAgICAgICBzdGFnZ2VyOiB7IGFtb3VudDogMC4yIH0sXG4gICAgICAgIH0sXG4gICAgICAgICctPTAuNSdcbiAgICAgIClcbiAgICAgIC50byhcbiAgICAgICAgJy5ob21lX19hYm91dF9fc3VidGV4dCAud29yZCcsXG4gICAgICAgIHtcbiAgICAgICAgICB5UGVyY2VudDogMTAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgICAgZWFzZTogJ3Bvd2VyMS5vdXQnLFxuICAgICAgICAgIHN0YWdnZXI6IHsgYW1vdW50OiAwLjIgfSxcbiAgICAgICAgfSxcbiAgICAgICAgJy09MC4yJ1xuICAgICAgKVxuICAgICAgLnRvKCcuaG9tZV9fYWJvdXRfX21vdmluZ3RleHQnLCB7IGF1dG9BbHBoYTogMSwgbGVmdDogMCwgZHVyYXRpb246IDEuNSB9KVxuICAgICAgLnRvKCcuaG9tZV9fYWJvdXRfX21vdmluZ3RleHQnLCB7IHg6ICctMTUlJywgZHVyYXRpb246IDYgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQYWdlIGZyb20gXCIuLi8uLi9jbGFzc2VzL3BhZ2VcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9TY3JvbGxUcmlnZ2VyJztcbmltcG9ydCBEZXRlY3Rpb24gZnJvbSAnLi4vLi4vY2xhc3Nlcy9kZXRlY3Rpb24nO1xuaW1wb3J0IEFuaW1hdGVJbWFnZXMgZnJvbSBcIi4vYW5pbWF0ZUltYWdlc1wiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudDogJy5ob21lJyxcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1lbnRzID0ge1xuICAgICAgd3JhcHBlcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX3dyYXBwZXInKSxcbiAgICAgIG5hdjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24nKSxcbiAgICAgIG5hdl9tZW51OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbl9fbWVudScpLFxuICAgICAgcHJlbG9hZGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlbG9hZGVyJyksXG4gICAgICBuYXZfbGluazogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb25fX2xpbmsnKSxcbiAgICAgIHByZWxvYWRlcl9fbG9nbzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZWxvYWRlcl9fbG9nb19fY29udGFpbmVyJyksXG4gICAgfTtcblxuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbiAgICAvLyBjb25zdCBhbGxQcm9qZWN0cyA9IHJlcXVpcmUoJy4uLy4uLy4uL2FwcC5qcycpO1xuICAgIC8vIGNvbnNvbGUubG9nKGFsbFByb2plY3RzKVxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHN1cGVyLmNyZWF0ZSgpXG4gICAgdGhpcy5hbmltYXRlSG9tZUFib3V0KCk7XG5cbiAgfVxuXG5cbiAgYW5pbWF0ZVBhZ2VJbiAoKSB7XG4gICAgY29uc29sZS5sb2coJ2FuaW1hdGUgaG9tZScpO1xuICAgIHRoaXMudGwgPSBnc2FwLnRpbWVsaW5lKHsgZGVmYXVsdHM6IHsgZWFzZTogJ2V4cG8ub3V0J30gfSk7XG4gICAgdGhpcy50bFxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMubmF2LCB7IHk6ICcwJScsIGF1dG9BbHBoYTogMSwgZHVyYXRpb246IDAuOCB9KVxuICAgICAgLnNldCh0aGlzLmVsZW1lbnRzLm5hdl9saW5rLCB7IGF1dG9BbHBoYTogMSB9KVxuICAgICAgLnNldCh0aGlzLmVsZW1lbnRzLnByZWxvYWRlcl9fbG9nbywgeyBhdXRvQWxwaGE6IDAgfSlcbiAgICAgIC50byh0aGlzLmVsZW1lbnRzLm5hdl9tZW51LCB7IHk6ICcwJScsIGR1cmF0aW9uOiAwLjQsIGF1dG9BbHBoYTogMSB9KVxuICAgICAgLnRvKHRoaXMuZWxlbWVudHMucHJlbG9hZGVyLCB7IHk6ICctMTAwJScsIGR1cmF0aW9uOiAwLjYsIGRlbGF5OiAwLjQgfSlcbiAgICAgIC50byh0aGlzLmVsZW1lbnRzLnByZWxvYWRlciwgeyBhdXRvQWxwaGE6IDAsIGRpc3BsYXk6ICdub25lJyB9KVxuICAgICAgLmZyb20oJy5ob21lX19oZXJvX19tYWludGV4dCAud29yZCcsIHtcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICB5OiAnMTAwJScsXG4gICAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICAgIHN0YWdnZXI6IDAuMixcbiAgICAgICAgZWFzZTogJ2V4cG8ub3V0JyxcbiAgICAgIH0pXG4gICAgICAuZnJvbSgnLmhvbWVfX2hlcm9fX3N1YnRleHQgLmNoYXInLCB7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHg6ICcxZW0nLFxuICAgICAgICBkdXJhdGlvbjogMC40LFxuICAgICAgICBlYXNlOiAncG93ZXIyLm91dCcsXG4gICAgICAgIHN0YWdnZXI6IHsgYW1vdW50OiAwLjIgfSxcbiAgICAgIH0pXG4gICAgICAuZnJvbSgnLmhvbWVfX2hlcm9fX2xpbmVfX3dyYXBwZXInLCB7XG4gICAgICAgIHNjYWxlWTogMCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wJyxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgIH0pXG4gICAgICAuZnJvbShcbiAgICAgICAgJy5zb2NpYWxzJyxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgICB5OiAnMTAwJScsXG4gICAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgICAgZWFzZTogJ2V4cG8ub3V0JyxcbiAgICAgICAgfSxcbiAgICAgICAgJy09MSdcbiAgICAgIClcbiAgICAgIC5mcm9tKFxuICAgICAgICAnLnNvY2lhbHNfX2xpbmtzIGEgJyxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgICB5OiAnMTAwJScsXG4gICAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgICAgc3RhZ2dlcjogMC4yLFxuICAgICAgICAgIGVhc2U6ICdleHBvLm91dCcsXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgICAuZnJvbShcbiAgICAgICAgJy5ob21lX19oZXJvX19kaXNjb3ZlcicsXG4gICAgICAgIHsgYXV0b0FscGhhOiAwLCB5OiAnMTAwJScsIGR1cmF0aW9uOiAwLjQsIGVhc2U6ICdleHBvLm91dCcgfSxcbiAgICAgICAgJy09MC41J1xuICAgICAgKTtcblxuICB9XG5cbiAgYW5pbWF0ZUhvbWVBYm91dCAoKSB7XG4gICAgLy8gY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5kZXNrdG9wID0gRGV0ZWN0aW9uLmlzRGVza3RvcCgpO1xuICAgIHRoaXMudGFibGV0ID0gRGV0ZWN0aW9uLmlzVGFibGV0KCk7XG4gICAgdGhpcy5waG9uZSA9IERldGVjdGlvbi5pc1Bob25lKCk7XG4gICAgY29uc29sZS5sb2codGhpcy5waG9uZSk7XG5cbiAgICAvLyBjb25zdCBtbSA9IGdzYXAubWF0Y2hNZWRpYSgpXG4gICAgLy8gY29uc29sZS5sb2cobW0pO1xuXG4gICAgdGhpcy5BbmltYXRlSW1hZ2VzID0gbmV3IEFuaW1hdGVJbWFnZXMoKVxuXG5cbiAgICBpZiAodGhpcy5waG9uZSkge1xuICAgICAgdGhpcy5BbmltYXRlSW1hZ2VzLmlzUGhvbmUoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLkFuaW1hdGVJbWFnZXMuaXNEZXNrdG9wKClcbiAgICB9XG5cblxuICAgICAgdGhpcy50bDIgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgIHRyaWdnZXI6ICcuaG9tZV9fYWJvdXQnLFxuICAgICAgICAgIHN0YXJ0OiAnYm90dG9tIDgwJScsXG4gICAgICAgICAgZW5kOiAnYm90dG9tIDIwJScsXG4gICAgICAgICAgdG9nZ2xlQWN0aW9uczogJ3Jlc3RhcnQgY29tcGxldGUgcmVzdW1lIHJlc2V0JyxcbiAgICAgICAgICAvLyBtYXJrZXJzOiB0cnVlLFxuICAgICAgICAgIC8vIHNjcnViOiAxLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGdzYXAuc2V0KCcuaG9tZV9fc2VydmljZXNfX3dyYXBwZXInLCB7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICB9KTtcbiAgICAgIHRoaXMudGwyXG4gICAgICAgIC50bygnLmhvbWVfX2Fib3V0X190cmFuc2l0aW9uX193aGl0ZScsIHsgc2NhbGVZOiAxLCBkdXJhdGlvbjogMC4zLCBlYXNlOiAncG93ZXIxLm91dCcsIH0pXG4gICAgICAgIC50bygnLmhvbWVfX2Fib3V0X190cmFuc2l0aW9uX19ibGFjaycsIHsgc2NhbGVZOiAxLCBkdXJhdGlvbjogMC4zLCBlYXNlOiAncG93ZXIxLm91dCcsIH0pXG4gICAgICAgIC5zZXQoJy5ob21lX19hYm91dCcsIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB9KVxuICAgICAgICAudG8oJy5ob21lX19hYm91dF9fdHJhbnNpdGlvbl9fd2hpdGUnLCB7XG4gICAgICAgICAgc2NhbGVZOiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAwLjQsXG4gICAgICAgICAgZWFzZTogJ3Bvd2VyMS5pbicsXG4gICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wJyxcbiAgICAgICAgfSlcbiAgICAgICAgLnRvKCcuaG9tZV9fYWJvdXRfX3RyYW5zaXRpb25fX2JsYWNrJywge1xuICAgICAgICAgIHNjYWxlWTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogMC4zLFxuICAgICAgICAgIGVhc2U6ICdwb3dlcjEuaW4nLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCcsXG4gICAgICAgIH0pXG4gICAgICAgIC5mcm9tVG8oXG4gICAgICAgICAgJy5ob21lX19hYm91dF9fc2Nyb2xsdGV4dCAud29yZCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgeTogJzEwMCUnLFxuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHk6ICcwJScsXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgZHVyYXRpb246IDAuNCxcbiAgICAgICAgICAgIGVhc2U6ICdwb3dlcjEub3V0JyxcbiAgICAgICAgICAgIHN0YWdnZXI6IHsgYW1vdW50OiAwLjIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgICc8J1xuICAgICAgICApO1xuXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMS4zXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gdGFyZ2V0Ll9nc2FwLnggPyB0YXJnZXQuX2dzYXBbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldC5fZ3NhcC5zdmcpIHtcbiAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICB9XG5cbiAgKHN0eWxlIHx8IGlzTm90Q1NTKSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIGlzTm90Q1NTLCBzdHlsZVtwcm9wZXJ0eV0pO1xufSxcbiAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICBpZiAoc3R5bGUudHJhbnNsYXRlKSB7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInJvdGF0ZVwiKTtcbiAgfVxufSxcbiAgICBfcmV2ZXJ0U3R5bGUgPSBmdW5jdGlvbiBfcmV2ZXJ0U3R5bGUoKSB7XG4gIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBpLFxuICAgICAgcDtcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAvLyBzdG9yZWQgbGlrZSB0aGlzOiBwcm9wZXJ0eSwgaXNOb3RDU1MsIHZhbHVlXG4gICAgcHJvcHNbaSArIDFdID8gdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHByb3BzW2kgKyAyXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgaWYgKHRoaXMudGZtKSB7XG4gICAgZm9yIChwIGluIHRoaXMudGZtKSB7XG4gICAgICBjYWNoZVtwXSA9IHRoaXMudGZtW3BdO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB0aGlzLnN2Z28gfHwgXCJcIik7XG4gICAgfVxuXG4gICAgaSA9IF9yZXZlcnRpbmcoKTtcblxuICAgIGlmIChpICYmICFpLmlzU3RhcnQgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlLnN0eWxlID8gZSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIGVudmlyb25tZW50cyB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSB3aGVuIGNyZWF0ZWQgd2l0aCBhIG5hbWVzcGFjZSBpbiB3aGljaCBjYXNlIHdlIGRlZmF1bHQgdG8gdGhlIHN0YW5kYXJkIGNyZWF0ZUVsZW1lbnQoKSB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWUuIEFsc28gbm90ZSB0aGF0IHdoZW4gR1NBUCBpcyBlbWJlZGRlZCBkaXJlY3RseSBpbnNpZGUgYW4gU1ZHIGZpbGUsIGNyZWF0ZUVsZW1lbnQoKSB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIHN0eWxlIG9iamVjdCBpbiBGaXJlZm94IChzZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eS5zdWJzdHIoMCwgMikgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzI0NTgzLWhvdy10by1yZXR1cm4tY29sb3JzLXRoYXQtaS1oYWQtYWZ0ZXItcmV2ZXJzZS9cbiAgICB9XG4gIH1cblxuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQuc3R5bGUsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgYSxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0VmFsdWVzLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBjb2xvcixcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIGVuZE51bSxcbiAgICAgIGNodW5rLFxuICAgICAgZW5kVW5pdCxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFZhbHVlcztcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvLyBlbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGVuZCA9PT0gXCJhdXRvXCIpIHtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gc3RhcnQ7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCk7XG4gICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgIG5leHRTaWJsaW5nID8gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIG5leHRTaWJsaW5nKSA6IHBhcmVudCA/IHBhcmVudC5hcHBlbmRDaGlsZCh0YXJnZXQpIDogX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9yY2UyRCAmJiBtYXRyaXgubGVuZ3RoID4gNiA/IFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFsxMl0sIG1hdHJpeFsxM11dIDogbWF0cml4O1xufSxcbiAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICB5T3JpZ2luT2xkID0gY2FjaGUueU9yaWdpbiB8fCAwLFxuICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICBhID0gbWF0cml4WzBdLFxuICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICBkID0gbWF0cml4WzNdLFxuICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgIG9yaWdpblNwbGl0ID0gb3JpZ2luLnNwbGl0KFwiIFwiKSxcbiAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgICBkZXRlcm1pbmFudCxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgeE9yaWdpbiA9IGJvdW5kcy54ICsgKH5vcmlnaW5TcGxpdFswXS5pbmRleE9mKFwiJVwiKSA/IHhPcmlnaW4gLyAxMDAgKiBib3VuZHMud2lkdGggOiB4T3JpZ2luKTtcbiAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pO1xuICB9IGVsc2UgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXggJiYgKGRldGVybWluYW50ID0gYSAqIGQgLSBiICogYykpIHtcbiAgICAvL2lmIGl0J3MgemVybyAobGlrZSBpZiBzY2FsZVggYW5kIHNjYWxlWSBhcmUgemVybyksIHNraXAgaXQgdG8gYXZvaWQgZXJyb3JzIHdpdGggZGl2aWRpbmcgYnkgemVyby5cbiAgICB4ID0geE9yaWdpbiAqIChkIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqICgtYyAvIGRldGVybWluYW50KSArIChjICogdHkgLSBkICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeSA9IHhPcmlnaW4gKiAoLWIgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKGEgLyBkZXRlcm1pbmFudCkgLSAoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHhPcmlnaW4gPSB4O1xuICAgIHlPcmlnaW4gPSB5O1xuICB9XG5cbiAgaWYgKHNtb290aCB8fCBzbW9vdGggIT09IGZhbHNlICYmIGNhY2hlLnNtb290aCkge1xuICAgIHR4ID0geE9yaWdpbiAtIHhPcmlnaW5PbGQ7XG4gICAgdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcbiAgICBjYWNoZS54T2Zmc2V0ID0geE9mZnNldE9sZCArICh0eCAqIGEgKyB0eSAqIGMpIC0gdHg7XG4gICAgY2FjaGUueU9mZnNldCA9IHlPZmZzZXRPbGQgKyAodHggKiBiICsgdHkgKiBkKSAtIHR5O1xuICB9IGVsc2Uge1xuICAgIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGNhY2hlLnhPcmlnaW4gPSB4T3JpZ2luO1xuICBjYWNoZS55T3JpZ2luID0geU9yaWdpbjtcbiAgY2FjaGUuc21vb3RoID0gISFzbW9vdGg7XG4gIGNhY2hlLm9yaWdpbiA9IG9yaWdpbjtcbiAgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSA9ICEhb3JpZ2luSXNBYnNvbHV0ZTtcbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IFwiMHB4IDBweFwiOyAvL290aGVyd2lzZSwgaWYgc29tZW9uZSBzZXRzICBhbiBvcmlnaW4gdmlhIENTUywgaXQgd2lsbCBsaWtlbHkgaW50ZXJmZXJlIHdpdGggdGhlIFNWRyB0cmFuc2Zvcm0gYXR0cmlidXRlIG9uZXMgKGJlY2F1c2UgcmVtZW1iZXIsIHdlJ3JlIGJha2luZyB0aGUgb3JpZ2luIGludG8gdGhlIG1hdHJpeCgpIHZhbHVlKS5cblxuICBpZiAocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9yaWdpblwiLCB4T3JpZ2luT2xkLCB4T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T3JpZ2luXCIsIHlPcmlnaW5PbGQsIHlPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPZmZzZXRcIiwgeE9mZnNldE9sZCwgY2FjaGUueE9mZnNldCk7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9mZnNldFwiLCB5T2Zmc2V0T2xkLCBjYWNoZS55T2Zmc2V0KTtcbiAgfVxuXG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgeE9yaWdpbiArIFwiIFwiICsgeU9yaWdpbik7XG59LFxuICAgIF9wYXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IG5ldyBHU0NhY2hlKHRhcmdldCk7XG5cbiAgaWYgKFwieFwiIGluIGNhY2hlICYmICF1bmNhY2hlICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgaW52ZXJ0ZWRTY2FsZVggPSBjYWNoZS5zY2FsZVggPCAwLFxuICAgICAgcHggPSBcInB4XCIsXG4gICAgICBkZWcgPSBcImRlZ1wiLFxuICAgICAgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCksXG4gICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeixcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcm90YXRpb25YLFxuICAgICAgcm90YXRpb25ZLFxuICAgICAgc2tld1gsXG4gICAgICBza2V3WSxcbiAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgeE9yaWdpbixcbiAgICAgIHlPcmlnaW4sXG4gICAgICBtYXRyaXgsXG4gICAgICBhbmdsZSxcbiAgICAgIGNvcyxcbiAgICAgIHNpbixcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgdDMsXG4gICAgICBhMTMsXG4gICAgICBhMjMsXG4gICAgICBhMzMsXG4gICAgICBhNDIsXG4gICAgICBhNDMsXG4gICAgICBhMzI7XG4gIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG5cbiAgaWYgKGNzLnRyYW5zbGF0ZSkge1xuICAgIC8vIGFjY29tbW9kYXRlIGluZGVwZW5kZW50IHRyYW5zZm9ybXMgYnkgY29tYmluaW5nIHRoZW0gaW50byBub3JtYWwgb25lcy5cbiAgICBpZiAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiB8fCBjcy5zY2FsZSAhPT0gXCJub25lXCIgfHwgY3Mucm90YXRlICE9PSBcIm5vbmVcIikge1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgPyBcInRyYW5zbGF0ZTNkKFwiICsgKGNzLnRyYW5zbGF0ZSArIFwiIDAgMFwiKS5zcGxpdChcIiBcIikuc2xpY2UoMCwgMykuam9pbihcIiwgXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3Mucm90YXRlICE9PSBcIm5vbmVcIiA/IFwicm90YXRlKFwiICsgY3Mucm90YXRlICsgXCIpIFwiIDogXCJcIikgKyAoY3Muc2NhbGUgIT09IFwibm9uZVwiID8gXCJzY2FsZShcIiArIGNzLnNjYWxlLnNwbGl0KFwiIFwiKS5qb2luKFwiLFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJub25lXCIgPyBjc1tfdHJhbnNmb3JtUHJvcF0gOiBcIlwiKTtcbiAgICB9XG5cbiAgICBzdHlsZS5zY2FsZSA9IHN0eWxlLnJvdGF0ZSA9IHN0eWxlLnRyYW5zbGF0ZSA9IFwibm9uZVwiO1xuICB9XG5cbiAgbWF0cml4ID0gX2dldE1hdHJpeCh0YXJnZXQsIGNhY2hlLnN2Zyk7XG5cbiAgaWYgKGNhY2hlLnN2Zykge1xuICAgIGlmIChjYWNoZS51bmNhY2hlKSB7XG4gICAgICAvLyBpZiBjYWNoZS51bmNhY2hlIGlzIHRydWUgKGFuZCBtYXliZSBpZiBvcmlnaW4gaXMgMCwwKSwgd2UgbmVlZCB0byBzZXQgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAoY2FjaGUueE9yaWdpbiAtIGJib3gueCkgKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSBiYm94LnkpICsgXCJweFwiLiBQcmV2aW91c2x5IHdlIGxldCB0aGUgZGF0YS1zdmctb3JpZ2luIHN0YXkgaW5zdGVhZCwgYnV0IHdoZW4gaW50cm9kdWNpbmcgcmV2ZXJ0KCksIGl0IGNvbXBsaWNhdGVkIHRoaW5ncy5cbiAgICAgIHQyID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICAgIG9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gLSB0Mi54ICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gdDIueSkgKyBcInB4XCI7XG4gICAgICB0MSA9IFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQxID0gIXVuY2FjaGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTsgLy8gIFJlbWVtYmVyLCB0byB3b3JrIGFyb3VuZCBicm93c2VyIGluY29uc2lzdGVuY2llcyB3ZSBhbHdheXMgZm9yY2UgU1ZHIGVsZW1lbnRzJyB0cmFuc2Zvcm1PcmlnaW4gdG8gMCwwIGFuZCBvZmZzZXQgdGhlIHRyYW5zbGF0aW9uIGFjY29yZGluZ2x5LlxuICAgIH1cblxuICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIHQxIHx8IG9yaWdpbiwgISF0MSB8fCBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlLCBjYWNoZS5zbW9vdGggIT09IGZhbHNlLCBtYXRyaXgpO1xuICB9XG5cbiAgeE9yaWdpbiA9IGNhY2hlLnhPcmlnaW4gfHwgMDtcbiAgeU9yaWdpbiA9IGNhY2hlLnlPcmlnaW4gfHwgMDtcblxuICBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuICAgIGEgPSBtYXRyaXhbMF07IC8vYTExXG5cbiAgICBiID0gbWF0cml4WzFdOyAvL2EyMVxuXG4gICAgYyA9IG1hdHJpeFsyXTsgLy9hMzFcblxuICAgIGQgPSBtYXRyaXhbM107IC8vYTQxXG5cbiAgICB4ID0gYTEyID0gbWF0cml4WzRdO1xuICAgIHkgPSBhMjIgPSBtYXRyaXhbNV07IC8vMkQgbWF0cml4XG5cbiAgICBpZiAobWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgICAgc2NhbGVZID0gTWF0aC5zcXJ0KGQgKiBkICsgYyAqIGMpO1xuICAgICAgcm90YXRpb24gPSBhIHx8IGIgPyBfYXRhbjIoYiwgYSkgKiBfUkFEMkRFRyA6IDA7IC8vbm90ZTogaWYgc2NhbGVYIGlzIDAsIHdlIGNhbm5vdCBhY2N1cmF0ZWx5IG1lYXN1cmUgcm90YXRpb24uIFNhbWUgZm9yIHNrZXdYIHdpdGggYSBzY2FsZVkgb2YgMC4gVGhlcmVmb3JlLCB3ZSBkZWZhdWx0IHRvIHRoZSBwcmV2aW91c2x5IHJlY29yZGVkIHZhbHVlIChvciB6ZXJvIGlmIHRoYXQgZG9lc24ndCBleGlzdCkuXG5cbiAgICAgIHNrZXdYID0gYyB8fCBkID8gX2F0YW4yKGMsIGQpICogX1JBRDJERUcgKyByb3RhdGlvbiA6IDA7XG4gICAgICBza2V3WCAmJiAoc2NhbGVZICo9IE1hdGguYWJzKE1hdGguY29zKHNrZXdYICogX0RFRzJSQUQpKSk7XG5cbiAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgeCAtPSB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhICsgeU9yaWdpbiAqIGMpO1xuICAgICAgICB5IC09IHlPcmlnaW4gLSAoeE9yaWdpbiAqIGIgKyB5T3JpZ2luICogZCk7XG4gICAgICB9IC8vM0QgbWF0cml4XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYTMyID0gbWF0cml4WzZdO1xuICAgICAgYTQyID0gbWF0cml4WzddO1xuICAgICAgYTEzID0gbWF0cml4WzhdO1xuICAgICAgYTIzID0gbWF0cml4WzldO1xuICAgICAgYTMzID0gbWF0cml4WzEwXTtcbiAgICAgIGE0MyA9IG1hdHJpeFsxMV07XG4gICAgICB4ID0gbWF0cml4WzEyXTtcbiAgICAgIHkgPSBtYXRyaXhbMTNdO1xuICAgICAgeiA9IG1hdHJpeFsxNF07XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMzIsIGEzMyk7XG4gICAgICByb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHOyAvL3JvdGF0aW9uWFxuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhMTIgKiBjb3MgKyBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYTIyICogY29zICsgYTIzICogc2luO1xuICAgICAgICB0MyA9IGEzMiAqIGNvcyArIGEzMyAqIHNpbjtcbiAgICAgICAgYTEzID0gYTEyICogLXNpbiArIGExMyAqIGNvcztcbiAgICAgICAgYTIzID0gYTIyICogLXNpbiArIGEyMyAqIGNvcztcbiAgICAgICAgYTMzID0gYTMyICogLXNpbiArIGEzMyAqIGNvcztcbiAgICAgICAgYTQzID0gYTQyICogLXNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYTEyID0gdDE7XG4gICAgICAgIGEyMiA9IHQyO1xuICAgICAgICBhMzIgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvbllcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMigtYywgYTMzKTtcbiAgICAgIHJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgLSBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYiAqIGNvcyAtIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBjICogY29zIC0gYTMzICogc2luO1xuICAgICAgICBhNDMgPSBkICogc2luICsgYTQzICogY29zO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGIgPSB0MjtcbiAgICAgICAgYyA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWlxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKGIsIGEpO1xuICAgICAgcm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyArIGIgKiBzaW47XG4gICAgICAgIHQyID0gYTEyICogY29zICsgYTIyICogc2luO1xuICAgICAgICBiID0gYiAqIGNvcyAtIGEgKiBzaW47XG4gICAgICAgIGEyMiA9IGEyMiAqIGNvcyAtIGExMiAqIHNpbjtcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBhMTIgPSB0MjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdGF0aW9uWCAmJiBNYXRoLmFicyhyb3RhdGlvblgpICsgTWF0aC5hYnMocm90YXRpb24pID4gMzU5LjkpIHtcbiAgICAgICAgLy93aGVuIHJvdGF0aW9uWSBpcyBzZXQsIGl0IHdpbGwgb2Z0ZW4gYmUgcGFyc2VkIGFzIDE4MCBkZWdyZWVzIGRpZmZlcmVudCB0aGFuIGl0IHNob3VsZCBiZSwgYW5kIHJvdGF0aW9uWCBhbmQgcm90YXRpb24gYm90aCBiZWluZyAxODAgKGl0IGxvb2tzIHRoZSBzYW1lKSwgc28gd2UgYWRqdXN0IGZvciB0aGF0IGhlcmUuXG4gICAgICAgIHJvdGF0aW9uWCA9IHJvdGF0aW9uID0gMDtcbiAgICAgICAgcm90YXRpb25ZID0gMTgwIC0gcm90YXRpb25ZO1xuICAgICAgfVxuXG4gICAgICBzY2FsZVggPSBfcm91bmQoTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYykpO1xuICAgICAgc2NhbGVZID0gX3JvdW5kKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMzIgKiBhMzIpKTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGExMiwgYTIyKTtcbiAgICAgIHNrZXdYID0gTWF0aC5hYnMoYW5nbGUpID4gMC4wMDAyID8gYW5nbGUgKiBfUkFEMkRFRyA6IDA7XG4gICAgICBwZXJzcGVjdGl2ZSA9IGE0MyA/IDEgLyAoYTQzIDwgMCA/IC1hNDMgOiBhNDMpIDogMDtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAvL3NlbnNlIGlmIHRoZXJlIGFyZSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIG9uIGFuIFNWRyBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB3aGVuIHJlbmRlcmluZy4gVGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgaXMgbW9yZSByZWxpYWJsZSBjcm9zcy1icm93c2VyLCBidXQgd2UgY2FuJ3QganVzdCByZW1vdmUgdGhlIENTUyBvbmVzIGJlY2F1c2UgdGhleSBtYXkgYmUgYXBwbGllZCBpbiBhIENTUyBydWxlIHNvbWV3aGVyZSAobm90IGp1c3QgaW5saW5lKS5cbiAgICAgIHQxID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgIGNhY2hlLmZvcmNlQ1NTID0gdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKSB8fCAhX2lzTnVsbFRyYW5zZm9ybShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKSk7XG4gICAgICB0MSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHQxKTtcbiAgICB9XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoc2tld1gpID4gOTAgJiYgTWF0aC5hYnMoc2tld1gpIDwgMjcwKSB7XG4gICAgaWYgKGludmVydGVkU2NhbGVYKSB7XG4gICAgICBzY2FsZVggKj0gLTE7XG4gICAgICBza2V3WCArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIHJvdGF0aW9uICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVkgKj0gLTE7XG4gICAgICBza2V3WCArPSBza2V3WCA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9XG4gIH1cblxuICB1bmNhY2hlID0gdW5jYWNoZSB8fCBjYWNoZS51bmNhY2hlO1xuICBjYWNoZS54ID0geCAtICgoY2FjaGUueFBlcmNlbnQgPSB4ICYmICghdW5jYWNoZSAmJiBjYWNoZS54UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSA9PT0gTWF0aC5yb3VuZCgteCkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldFdpZHRoICogY2FjaGUueFBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS55ID0geSAtICgoY2FjaGUueVBlcmNlbnQgPSB5ICYmICghdW5jYWNoZSAmJiBjYWNoZS55UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMikgPT09IE1hdGgucm91bmQoLXkpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRIZWlnaHQgKiBjYWNoZS55UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnogPSB6ICsgcHg7XG4gIGNhY2hlLnNjYWxlWCA9IF9yb3VuZChzY2FsZVgpO1xuICBjYWNoZS5zY2FsZVkgPSBfcm91bmQoc2NhbGVZKTtcbiAgY2FjaGUucm90YXRpb24gPSBfcm91bmQocm90YXRpb24pICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblggPSBfcm91bmQocm90YXRpb25YKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25ZID0gX3JvdW5kKHJvdGF0aW9uWSkgKyBkZWc7XG4gIGNhY2hlLnNrZXdYID0gc2tld1ggKyBkZWc7XG4gIGNhY2hlLnNrZXdZID0gc2tld1kgKyBkZWc7XG4gIGNhY2hlLnRyYW5zZm9ybVBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmUgKyBweDtcblxuICBpZiAoY2FjaGUuek9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luLnNwbGl0KFwiIFwiKVsyXSkgfHwgMCkge1xuICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IF9maXJzdFR3b09ubHkob3JpZ2luKTtcbiAgfVxuXG4gIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgY2FjaGUuZm9yY2UzRCA9IF9jb25maWcuZm9yY2UzRDtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtID0gY2FjaGUuc3ZnID8gX3JlbmRlclNWR1RyYW5zZm9ybXMgOiBfc3VwcG9ydHMzRCA/IF9yZW5kZXJDU1NUcmFuc2Zvcm1zIDogX3JlbmRlck5vbjNEVHJhbnNmb3JtcztcbiAgY2FjaGUudW5jYWNoZSA9IDA7XG4gIHJldHVybiBjYWNoZTtcbn0sXG4gICAgX2ZpcnN0VHdvT25seSA9IGZ1bmN0aW9uIF9maXJzdFR3b09ubHkodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiIFwiKSlbMF0gKyBcIiBcIiArIHZhbHVlWzFdO1xufSxcbiAgICAvL2ZvciBoYW5kbGluZyB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLCBzdHJpcHBpbmcgb3V0IHRoZSAzcmQgZGltZW5zaW9uXG5fYWRkUHhUcmFuc2xhdGUgPSBmdW5jdGlvbiBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCBzdGFydCwgdmFsdWUpIHtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KHN0YXJ0KTtcbiAgcmV0dXJuIF9yb3VuZChwYXJzZUZsb2F0KHN0YXJ0KSArIHBhcnNlRmxvYXQoX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgdmFsdWUgKyBcInB4XCIsIHVuaXQpKSkgKyB1bml0O1xufSxcbiAgICBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlck5vbjNEVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgY2FjaGUueiA9IFwiMHB4XCI7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IGNhY2hlLnJvdGF0aW9uWCA9IFwiMGRlZ1wiO1xuICBjYWNoZS5mb3JjZTNEID0gMDtcblxuICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfemVyb0RlZyA9IFwiMGRlZ1wiLFxuICAgIF96ZXJvUHggPSBcIjBweFwiLFxuICAgIF9lbmRQYXJlbnRoZXNpcyA9IFwiKSBcIixcbiAgICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueSxcbiAgICAgIHogPSBfcmVmLnosXG4gICAgICByb3RhdGlvbiA9IF9yZWYucm90YXRpb24sXG4gICAgICByb3RhdGlvblkgPSBfcmVmLnJvdGF0aW9uWSxcbiAgICAgIHJvdGF0aW9uWCA9IF9yZWYucm90YXRpb25YLFxuICAgICAgc2tld1ggPSBfcmVmLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlID0gX3JlZi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxcbiAgICAgIGZvcmNlM0QgPSBfcmVmLmZvcmNlM0QsXG4gICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIHpPcmlnaW4gPSBfcmVmLnpPcmlnaW4sXG4gICAgICB0cmFuc2Zvcm1zID0gXCJcIixcbiAgICAgIHVzZTNEID0gZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgcmF0aW8gJiYgcmF0aW8gIT09IDEgfHwgZm9yY2UzRCA9PT0gdHJ1ZTsgLy8gU2FmYXJpIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBpdCBub3QgdG8gcmVuZGVyIDNEIHRyYW5zZm9ybS1vcmlnaW4gdmFsdWVzIHByb3Blcmx5LCBzbyB3ZSBmb3JjZSB0aGUgeiBvcmlnaW4gdG8gMCwgcmVjb3JkIGl0IGluIHRoZSBjYWNoZSwgYW5kIHRoZW4gZG8gdGhlIG1hdGggaGVyZSB0byBvZmZzZXQgdGhlIHRyYW5zbGF0ZSB2YWx1ZXMgYWNjb3JkaW5nbHkgKGJhc2ljYWxseSBkbyB0aGUgM0QgdHJhbnNmb3JtLW9yaWdpbiBwYXJ0IG1hbnVhbGx5KVxuXG5cbiAgaWYgKHpPcmlnaW4gJiYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcgfHwgcm90YXRpb25ZICE9PSBfemVyb0RlZykpIHtcbiAgICB2YXIgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWSkgKiBfREVHMlJBRCxcbiAgICAgICAgYTEzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICBhMzMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIGNvcztcblxuICAgIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblgpICogX0RFRzJSQUQ7XG4gICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHggPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB4LCBhMTMgKiBjb3MgKiAtek9yaWdpbik7XG4gICAgeSA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHksIC1NYXRoLnNpbihhbmdsZSkgKiAtek9yaWdpbik7XG4gICAgeiA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHosIGEzMyAqIGNvcyAqIC16T3JpZ2luICsgek9yaWdpbik7XG4gIH1cblxuICBpZiAodHJhbnNmb3JtUGVyc3BlY3RpdmUgIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicGVyc3BlY3RpdmUoXCIgKyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJ0cmFuc2xhdGUoXCIgKyB4UGVyY2VudCArIFwiJSwgXCIgKyB5UGVyY2VudCArIFwiJSkgXCI7XG4gIH1cblxuICBpZiAodXNlM0QgfHwgeCAhPT0gX3plcm9QeCB8fCB5ICE9PSBfemVyb1B4IHx8IHogIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IHogIT09IF96ZXJvUHggfHwgdXNlM0QgPyBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgXCIgKyB6ICsgXCIpIFwiIDogXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsIFwiICsgeSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlKFwiICsgcm90YXRpb24gKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25ZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVZKFwiICsgcm90YXRpb25ZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWChcIiArIHJvdGF0aW9uWCArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChza2V3WCAhPT0gX3plcm9EZWcgfHwgc2tld1kgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNrZXcoXCIgKyBza2V3WCArIFwiLCBcIiArIHNrZXdZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcyB8fCBcInRyYW5zbGF0ZSgwLCAwKVwiO1xufSxcbiAgICBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJTVkdUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZjIgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmMi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZjIueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZjIueCxcbiAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgcm90YXRpb24gPSBfcmVmMi5yb3RhdGlvbixcbiAgICAgIHNrZXdYID0gX3JlZjIuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYyLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZjIuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgeE9yaWdpbiA9IF9yZWYyLnhPcmlnaW4sXG4gICAgICB5T3JpZ2luID0gX3JlZjIueU9yaWdpbixcbiAgICAgIHhPZmZzZXQgPSBfcmVmMi54T2Zmc2V0LFxuICAgICAgeU9mZnNldCA9IF9yZWYyLnlPZmZzZXQsXG4gICAgICBmb3JjZUNTUyA9IF9yZWYyLmZvcmNlQ1NTLFxuICAgICAgdHggPSBwYXJzZUZsb2F0KHgpLFxuICAgICAgdHkgPSBwYXJzZUZsb2F0KHkpLFxuICAgICAgYTExLFxuICAgICAgYTIxLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdGVtcDtcblxuICByb3RhdGlvbiA9IHBhcnNlRmxvYXQocm90YXRpb24pO1xuICBza2V3WCA9IHBhcnNlRmxvYXQoc2tld1gpO1xuICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuXG4gIGlmIChza2V3WSkge1xuICAgIC8vZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGNvbWJpbmUgYWxsIHNrZXdpbmcgaW50byB0aGUgc2tld1ggYW5kIHJvdGF0aW9uIHZhbHVlcy4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgZGVncmVlcyBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGRlZ3JlZXMgcGx1cyBhIHNrZXdYIG9mIDEwIGRlZ3JlZXMuXG4gICAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcbiAgICBza2V3WCArPSBza2V3WTtcbiAgICByb3RhdGlvbiArPSBza2V3WTtcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiB8fCBza2V3WCkge1xuICAgIHJvdGF0aW9uICo9IF9ERUcyUkFEO1xuICAgIHNrZXdYICo9IF9ERUcyUkFEO1xuICAgIGExMSA9IE1hdGguY29zKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMjEgPSBNYXRoLnNpbihyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTEyID0gTWF0aC5zaW4ocm90YXRpb24gLSBza2V3WCkgKiAtc2NhbGVZO1xuICAgIGEyMiA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgaWYgKHNrZXdYKSB7XG4gICAgICBza2V3WSAqPSBfREVHMlJBRDtcbiAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WCAtIHNrZXdZKTtcbiAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgIGExMiAqPSB0ZW1wO1xuICAgICAgYTIyICo9IHRlbXA7XG5cbiAgICAgIGlmIChza2V3WSkge1xuICAgICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1kpO1xuICAgICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICAgIGExMSAqPSB0ZW1wO1xuICAgICAgICBhMjEgKj0gdGVtcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhMTEgPSBfcm91bmQoYTExKTtcbiAgICBhMjEgPSBfcm91bmQoYTIxKTtcbiAgICBhMTIgPSBfcm91bmQoYTEyKTtcbiAgICBhMjIgPSBfcm91bmQoYTIyKTtcbiAgfSBlbHNlIHtcbiAgICBhMTEgPSBzY2FsZVg7XG4gICAgYTIyID0gc2NhbGVZO1xuICAgIGEyMSA9IGExMiA9IDA7XG4gIH1cblxuICBpZiAodHggJiYgIX4oeCArIFwiXCIpLmluZGV4T2YoXCJweFwiKSB8fCB0eSAmJiAhfih5ICsgXCJcIikuaW5kZXhPZihcInB4XCIpKSB7XG4gICAgdHggPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB4LCBcInB4XCIpO1xuICAgIHR5ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInlcIiwgeSwgXCJweFwiKTtcbiAgfVxuXG4gIGlmICh4T3JpZ2luIHx8IHlPcmlnaW4gfHwgeE9mZnNldCB8fCB5T2Zmc2V0KSB7XG4gICAgdHggPSBfcm91bmQodHggKyB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhMTEgKyB5T3JpZ2luICogYTEyKSArIHhPZmZzZXQpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeU9yaWdpbiAtICh4T3JpZ2luICogYTIxICsgeU9yaWdpbiAqIGEyMikgKyB5T2Zmc2V0KTtcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIC8vVGhlIFNWRyBzcGVjIGRvZXNuJ3Qgc3VwcG9ydCBwZXJjZW50YWdlLWJhc2VkIHRyYW5zbGF0aW9uIGluIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgc28gd2UgbWVyZ2UgaXQgaW50byB0aGUgdHJhbnNsYXRpb24gdG8gc2ltdWxhdGUgaXQuXG4gICAgdGVtcCA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgdHggPSBfcm91bmQodHggKyB4UGVyY2VudCAvIDEwMCAqIHRlbXAud2lkdGgpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeVBlcmNlbnQgLyAxMDAgKiB0ZW1wLmhlaWdodCk7XG4gIH1cblxuICB0ZW1wID0gXCJtYXRyaXgoXCIgKyBhMTEgKyBcIixcIiArIGEyMSArIFwiLFwiICsgYTEyICsgXCIsXCIgKyBhMjIgKyBcIixcIiArIHR4ICsgXCIsXCIgKyB0eSArIFwiKVwiO1xuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRlbXApO1xuICBmb3JjZUNTUyAmJiAodGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRlbXApOyAvL3NvbWUgYnJvd3NlcnMgcHJpb3JpdGl6ZSBDU1MgdHJhbnNmb3JtcyBvdmVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLiBXaGVuIHdlIHNlbnNlIHRoYXQgdGhlIHVzZXIgaGFzIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQsIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gdGhpcyB3YXkgKG90aGVyd2lzZSBzb21lIGJyb3dzZXIgc2ltcGx5IHdvbid0IHJlbmRlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgaGF2ZSBPYmplY3QuYXNzaWduKCksIHNvIHdlIHJlY3JlYXRlIGl0IGhlcmUuXG4gIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0sXG4gICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgLy9mb3IgaGFuZGxpbmcgY2FzZXMgd2hlcmUgc29tZW9uZSBwYXNzZXMgaW4gYSB3aG9sZSB0cmFuc2Zvcm0gc3RyaW5nLCBsaWtlIHRyYW5zZm9ybTogXCJzY2FsZSgyLCAzKSByb3RhdGUoMjBkZWcpIHRyYW5zbGF0ZVkoMzBlbSlcIlxuICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICBleGNsdWRlID0gXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIixcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgZW5kQ2FjaGUsXG4gICAgICBwLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBlbmROdW0sXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRVbml0O1xuXG4gIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIik7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1Qcm9wXTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gc3RhcnRWYWx1ZTtcbiAgfVxuXG4gIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICBzdGFydFZhbHVlID0gc3RhcnRDYWNoZVtwXTtcbiAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgIC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cbiAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfYXNzaWduKGVuZENhY2hlLCBzdGFydENhY2hlKTtcbn07IC8vIGhhbmRsZSBzcGxpdHRpbmcgYXBhcnQgcGFkZGluZywgbWFyZ2luLCBib3JkZXJXaWR0aCwgYW5kIGJvcmRlclJhZGl1cyBpbnRvIHRoZWlyIDQgY29tcG9uZW50cy4gRmlyZWZveCwgZm9yIGV4YW1wbGUsIHdvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5IC0gaXQgd2lsbCBvbmx5IGRvIGJvcmRlclRvcExlZnRSYWRpdXMgYW5kIHRoZSBvdGhlciBjb3JuZXJzLiBXZSBhbHNvIHdhbnQgdG8gaGFuZGxlIHBhZGRpbmdUb3AsIG1hcmdpbkxlZnQsIGJvcmRlclJpZ2h0V2lkdGgsIGV0Yy5cblxuXG5fZm9yRWFjaE5hbWUoXCJwYWRkaW5nLG1hcmdpbixXaWR0aCxSYWRpdXNcIiwgZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gIHZhciB0ID0gXCJUb3BcIixcbiAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICBiID0gXCJCb3R0b21cIixcbiAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBpbmRleCA8IDIgPyBuYW1lICsgc2lkZSA6IFwiYm9yZGVyXCIgKyBzaWRlICsgbmFtZTtcbiAgfSk7XG5cbiAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgdmFyIGEsIHZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIC8vIGdldHRlciwgcGFzc2VkIHRhcmdldCwgcHJvcGVydHksIGFuZCB1bml0IChmcm9tIF9nZXQoKSlcbiAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQocGx1Z2luLCBwcm9wLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgcmV0dXJuIHZhcnMuc3BsaXQoYVswXSkubGVuZ3RoID09PSA1ID8gYVswXSA6IHZhcnM7XG4gICAgfVxuXG4gICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB2YXJzID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgfSk7XG4gICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gIH07XG59KTtcblxuZXhwb3J0IHZhciBDU1NQbHVnaW4gPSB7XG4gIG5hbWU6IFwiY3NzXCIsXG4gIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGU7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcyxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRVbml0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBzbW9vdGgsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBpbmxpbmVQcm9wcztcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTsgLy8gd2UgbWF5IGNhbGwgaW5pdCgpIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZSwgbGlrZSB3aGVuIGFkZGluZyBzcGVjaWFsIHByb3BlcnRpZXMsIHNvIG1ha2Ugc3VyZSB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHJldmVydCBkYXRhIG9yIGlubGluZVByb3BzXG5cbiAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgaW5saW5lUHJvcHMgPSB0aGlzLnN0eWxlcy5wcm9wcztcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKHAsIDAsIHN0eWxlW3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHNvbWVvbmUgaGFyZC1jb2RlcyBhIGNvbXBsZXggdmFsdWUgYXMgdGhlIHN0YXJ0LCBsaWtlIHRvcDogXCJjYWxjKDJ2aCAvIDIpXCIuIFdpdGhvdXQgdGhpcywgaXQnZCB1c2UgdGhlIGNvbXB1dGVkIHZhbHVlIChhbHdheXMgaW4gcHgpXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgZ2V0VW5pdChzdGFydFZhbHVlICsgXCJcIikgfHwgKHN0YXJ0VmFsdWUgKz0gX2NvbmZpZy51bml0c1twXSB8fCBnZXRVbml0KF9nZXQodGFyZ2V0LCBwKSkgfHwgXCJcIik7IC8vIGZvciBjYXNlcyB3aGVuIHNvbWVvbmUgcGFzc2VzIGluIGEgdW5pdGxlc3MgdmFsdWUgbGlrZSB7eDogMTAwfTsgaWYgd2UgdHJ5IHNldHRpbmcgdHJhbnNsYXRlKDEwMCwgMHB4KSBpdCB3b24ndCB3b3JrLlxuXG4gICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTsgLy8gY2FuJ3Qgd29yayB3aXRoIHJlbGF0aXZlIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgcmVsYXRpdmUgJiYgKGVuZFZhbHVlID0gZW5kVmFsdWUuc3Vic3RyKDIpKTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgIGlmIChwID09PSBcImF1dG9BbHBoYVwiKSB7XG4gICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSB3aGVyZSB3ZSBjb250cm9sIHRoZSB2aXNpYmlsaXR5IGFsb25nIHdpdGggb3BhY2l0eS4gV2Ugc3RpbGwgYWxsb3cgdGhlIG9wYWNpdHkgdmFsdWUgdG8gcGFzcyB0aHJvdWdoIGFuZCBnZXQgdHdlZW5lZC5cbiAgICAgICAgICAgIGlmIChzdGFydE51bSA9PT0gMSAmJiBfZ2V0KHRhcmdldCwgXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiICYmIGVuZE51bSkge1xuICAgICAgICAgICAgICAvL2lmIHZpc2liaWxpdHkgaXMgaW5pdGlhbGx5IHNldCB0byBcImhpZGRlblwiLCB3ZSBzaG91bGQgaW50ZXJwcmV0IHRoYXQgYXMgaW50ZW50IHRvIG1ha2Ugb3BhY2l0eSAwIChhIGNvbnZlbmllbmNlKVxuICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goXCJ2aXNpYmlsaXR5XCIsIDAsIHN0eWxlLnZpc2liaWxpdHkpO1xuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnUgPSAwO1xuICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSB7XG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCAwLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7IC8vaW4gY2FzZSBzb21ldGhpbmcgbGlrZSBcImxlZnQgdG9wXCIgb3IgXCJib3R0b20gcmlnaHRcIiBpcyBwYXNzZWQgaW4uIENvbnZlcnQgdG8gcGVyY2VudGFnZXMuXG5cbiAgICAgICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmRVbml0ID0gcGFyc2VGbG9hdChlbmRWYWx1ZS5zcGxpdChcIiBcIilbMl0pIHx8IDA7IC8vaGFuZGxlIHRoZSB6T3JpZ2luIHNlcGFyYXRlbHkhXG5cbiAgICAgICAgICAgICAgZW5kVW5pdCAhPT0gY2FjaGUuek9yaWdpbiAmJiBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJ6T3JpZ2luXCIsIGNhY2hlLnpPcmlnaW4sIGVuZFVuaXQpO1xuXG4gICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgIHRoaXMuX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAvL3doZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJldmVydCBpdCB0byB0aGUgT0xEL09SSUdJTkFMIHZhbHVlICh3aXRoIHRob3NlIHVuaXRzKS4gV2UgcmVjb3JkIHRoYXQgYXMgYSBcImJcIiAoYmVnaW5uaW5nKSBwcm9wZXJ0eSBhbmQgcG9pbnQgdG8gYSByZW5kZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyB0aGF0LiAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgICAgICAgICAgdGhpcy5fcHQuYiA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvL21heWJlIGl0J3Mgbm90IGEgc3R5bGUgLSBpdCBjb3VsZCBiZSBhIHByb3BlcnR5IGFkZGVkIGRpcmVjdGx5IHRvIGFuIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSdsbCB0cnkgdG8gYW5pbWF0ZSB0aGF0LlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBwLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHRoaXMsIHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChwIGluIHN0eWxlID8gaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0aGlzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICBpZiAoZGF0YS50d2Vlbi5fdGltZSB8fCAhX3JldmVydGluZygpKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5nc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4oZnVuY3Rpb24gKHBvc2l0aW9uQW5kU2NhbGUsIHJvdGF0aW9uLCBvdGhlcnMsIGFsaWFzZXMpIHtcbiAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgX2ZvckVhY2hOYW1lKGFsaWFzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICB9KTtcbn0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJweFwiO1xufSk7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcbmV4cG9ydCB7IENTU1BsdWdpbiBhcyBkZWZhdWx0LCBfZ2V0QkJveCwgX2NyZWF0ZUVsZW1lbnQsIF9jaGVja1Byb3BQcmVmaXggYXMgY2hlY2tQcmVmaXggfTsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIVxuICogT2JzZXJ2ZXIgMy4xMS4zXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIGdzYXAsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9jbGFtcCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsLFxuICAgIF9ib2R5LFxuICAgIF9pc1RvdWNoLFxuICAgIF9wb2ludGVyVHlwZSxcbiAgICBTY3JvbGxUcmlnZ2VyLFxuICAgIF9yb290LFxuICAgIF9ub3JtYWxpemVyLFxuICAgIF9ldmVudFR5cGVzLFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3N0YXJ0dXAgPSAxLFxuICAgIF9vYnNlcnZlcnMgPSBbXSxcbiAgICBfc2Nyb2xsZXJzID0gW10sXG4gICAgX3Byb3hpZXMgPSBbXSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0sXG4gICAgX2ludGVncmF0ZSA9IGZ1bmN0aW9uIF9pbnRlZ3JhdGUoKSB7XG4gIHZhciBjb3JlID0gU2Nyb2xsVHJpZ2dlci5jb3JlLFxuICAgICAgZGF0YSA9IGNvcmUuYnJpZGdlIHx8IHt9LFxuICAgICAgc2Nyb2xsZXJzID0gY29yZS5fc2Nyb2xsZXJzLFxuICAgICAgcHJveGllcyA9IGNvcmUuX3Byb3hpZXM7XG4gIHNjcm9sbGVycy5wdXNoLmFwcGx5KHNjcm9sbGVycywgX3Njcm9sbGVycyk7XG4gIHByb3hpZXMucHVzaC5hcHBseShwcm94aWVzLCBfcHJveGllcyk7XG4gIF9zY3JvbGxlcnMgPSBzY3JvbGxlcnM7XG4gIF9wcm94aWVzID0gcHJveGllcztcblxuICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBkYXRhW25hbWVdKHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX2dldFByb3h5UHJvcCA9IGZ1bmN0aW9uIF9nZXRQcm94eVByb3AoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIH5fcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICYmIF9wcm94aWVzW19wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgKyAxXVtwcm9wZXJ0eV07XG59LFxuICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZWwpIHtcbiAgcmV0dXJuICEhfl9yb290LmluZGV4T2YoZWwpO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgbm9uUGFzc2l2ZSwgY2FwdHVyZSkge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiAhbm9uUGFzc2l2ZSxcbiAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgfSk7XG59LFxuICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywgISFjYXB0dXJlKTtcbn0sXG4gICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICBfc2Nyb2xsVG9wID0gXCJzY3JvbGxUb3BcIixcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIHJldHVybiBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX3Njcm9sbGVycy5jYWNoZSsrO1xufSxcbiAgICBfc2Nyb2xsQ2FjaGVGdW5jID0gZnVuY3Rpb24gX3Njcm9sbENhY2hlRnVuYyhmLCBkb05vdENhY2hlKSB7XG4gIHZhciBjYWNoaW5nRnVuYyA9IGZ1bmN0aW9uIGNhY2hpbmdGdW5jKHZhbHVlKSB7XG4gICAgLy8gc2luY2UgcmVhZGluZyB0aGUgc2Nyb2xsVG9wL3Njcm9sbExlZnQvcGFnZU9mZnNldFkvcGFnZU9mZnNldFggY2FuIHRyaWdnZXIgYSBsYXlvdXQsIHRoaXMgZnVuY3Rpb24gYWxsb3dzIHVzIHRvIGNhY2hlIHRoZSB2YWx1ZSBzbyBpdCBvbmx5IGdldHMgcmVhZCBmcmVzaCBhZnRlciBhIFwic2Nyb2xsXCIgZXZlbnQgZmlyZXMgKG9yIHdoaWxlIHdlJ3JlIHJlZnJlc2hpbmcgYmVjYXVzZSB0aGF0IGNhbiBsZW5ndGhlbiB0aGUgcGFnZSBhbmQgYWx0ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbikuIHdoZW4gXCJzb2Z0XCIgaXMgdHJ1ZSwgdGhhdCBtZWFucyBkb24ndCBhY3R1YWxseSBzZXQgdGhlIHNjcm9sbCwgYnV0IGNhY2hlIHRoZSBuZXcgdmFsdWUgaW5zdGVhZCAodXNlZnVsIGluIFNjcm9sbFNtb290aGVyKVxuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgX3N0YXJ0dXAgJiYgKF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIpOyAvLyBvdGhlcndpc2UgdGhlIG5ldyBwb3NpdGlvbiB3aWxsIGdldCBvdmVyd3JpdHRlbiBieSB0aGUgYnJvd3NlciBvbmxvYWQuXG5cbiAgICAgIHZhciBpc05vcm1hbGl6aW5nID0gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkO1xuICAgICAgdmFsdWUgPSBjYWNoaW5nRnVuYy52ID0gTWF0aC5yb3VuZCh2YWx1ZSkgfHwgKF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlPUyA/IDEgOiAwKTsgLy9UT0RPOiBpT1MgQnVnOiBpZiB5b3UgYWxsb3cgaXQgdG8gZ28gdG8gMCwgU2FmYXJpIGNhbiBzdGFydCB0byByZXBvcnQgc3VwZXIgc3RyYW5nZSAod2lsZGx5IGluYWNjdXJhdGUpIHRvdWNoIHBvc2l0aW9ucyFcblxuICAgICAgZih2YWx1ZSk7XG4gICAgICBjYWNoaW5nRnVuYy5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcbiAgICAgIGlzTm9ybWFsaXppbmcgJiYgX2JyaWRnZShcInNzXCIsIHZhbHVlKTsgLy8gc2V0IHNjcm9sbCAobm90aWZ5IFNjcm9sbFRyaWdnZXIgc28gaXQgY2FuIGRpc3BhdGNoIGEgXCJzY3JvbGxTdGFydFwiIGV2ZW50IGlmIG5lY2Vzc2FyeVxuICAgIH0gZWxzZSBpZiAoZG9Ob3RDYWNoZSB8fCBfc2Nyb2xsZXJzLmNhY2hlICE9PSBjYWNoaW5nRnVuYy5jYWNoZUlEIHx8IF9icmlkZ2UoXCJyZWZcIikpIHtcbiAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgY2FjaGluZ0Z1bmMudiA9IGYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGluZ0Z1bmMudiArIGNhY2hpbmdGdW5jLm9mZnNldDtcbiAgfTtcblxuICBjYWNoaW5nRnVuYy5vZmZzZXQgPSAwO1xuICByZXR1cm4gZiAmJiBjYWNoaW5nRnVuYztcbn0sXG4gICAgX2hvcml6b250YWwgPSB7XG4gIHM6IF9zY3JvbGxMZWZ0LFxuICBwOiBcImxlZnRcIixcbiAgcDI6IFwiTGVmdFwiLFxuICBvczogXCJyaWdodFwiLFxuICBvczI6IFwiUmlnaHRcIixcbiAgZDogXCJ3aWR0aFwiLFxuICBkMjogXCJXaWR0aFwiLFxuICBhOiBcInhcIixcbiAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKHZhbHVlLCBfdmVydGljYWwuc2MoKSkgOiBfd2luLnBhZ2VYT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbExlZnRdIHx8IF9kb2NFbFtfc2Nyb2xsTGVmdF0gfHwgX2JvZHlbX3Njcm9sbExlZnRdIHx8IDA7XG4gIH0pXG59LFxuICAgIF92ZXJ0aWNhbCA9IHtcbiAgczogX3Njcm9sbFRvcCxcbiAgcDogXCJ0b3BcIixcbiAgcDI6IFwiVG9wXCIsXG4gIG9zOiBcImJvdHRvbVwiLFxuICBvczI6IFwiQm90dG9tXCIsXG4gIGQ6IFwiaGVpZ2h0XCIsXG4gIGQyOiBcIkhlaWdodFwiLFxuICBhOiBcInlcIixcbiAgb3A6IF9ob3Jpem9udGFsLFxuICBzYzogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8oX2hvcml6b250YWwuc2MoKSwgdmFsdWUpIDogX3dpbi5wYWdlWU9mZnNldCB8fCBfZG9jW19zY3JvbGxUb3BdIHx8IF9kb2NFbFtfc2Nyb2xsVG9wXSB8fCBfYm9keVtfc2Nyb2xsVG9wXSB8fCAwO1xuICB9KVxufSxcbiAgICBfZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gX2dldFRhcmdldCh0KSB7XG4gIHJldHVybiBnc2FwLnV0aWxzLnRvQXJyYXkodClbMF0gfHwgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiICYmIGdzYXAuY29uZmlnKCkubnVsbFRhcmdldFdhcm4gIT09IGZhbHNlID8gY29uc29sZS53YXJuKFwiRWxlbWVudCBub3QgZm91bmQ6XCIsIHQpIDogbnVsbCk7XG59LFxuICAgIF9nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gX2dldFNjcm9sbEZ1bmMoZWxlbWVudCwgX3JlZikge1xuICB2YXIgcyA9IF9yZWYucyxcbiAgICAgIHNjID0gX3JlZi5zYztcbiAgLy8gd2Ugc3RvcmUgdGhlIHNjcm9sbGVyIGZ1bmN0aW9ucyBpbiBhbiBhbHRlcm5hdGluZyBzZXF1ZW5jZWQgQXJyYXkgbGlrZSBbZWxlbWVudCwgdmVydGljYWxTY3JvbGxGdW5jLCBob3Jpem9udGFsU2Nyb2xsRnVuYywgLi4uXSBzbyB0aGF0IHdlIGNhbiBtaW5pbWl6ZSBtZW1vcnksIG1heGltaXplIHBlcmZvcm1hbmNlLCBhbmQgd2UgYWxzbyByZWNvcmQgdGhlIGxhc3QgcG9zaXRpb24gYXMgYSBcIi5yZWNcIiBwcm9wZXJ0eSBpbiBvcmRlciB0byByZXZlcnQgdG8gdGhhdCBhZnRlciByZWZyZXNoaW5nIHRvIGVuc3VyZSB0aGluZ3MgZG9uJ3Qgc2hpZnQgYXJvdW5kLlxuICBfaXNWaWV3cG9ydChlbGVtZW50KSAmJiAoZWxlbWVudCA9IF9kb2Muc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwpO1xuXG4gIHZhciBpID0gX3Njcm9sbGVycy5pbmRleE9mKGVsZW1lbnQpLFxuICAgICAgb2Zmc2V0ID0gc2MgPT09IF92ZXJ0aWNhbC5zYyA/IDEgOiAyO1xuXG4gICF+aSAmJiAoaSA9IF9zY3JvbGxlcnMucHVzaChlbGVtZW50KSAtIDEpO1xuICBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdIHx8IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBfb25TY3JvbGwpOyAvLyBjbGVhciB0aGUgY2FjaGUgd2hlbiBhIHNjcm9sbCBvY2N1cnNcblxuICB2YXIgcHJldiA9IF9zY3JvbGxlcnNbaSArIG9mZnNldF0sXG4gICAgICBmdW5jID0gcHJldiB8fCAoX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSA9IF9zY3JvbGxDYWNoZUZ1bmMoX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSwgdHJ1ZSkgfHwgKF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gc2MgOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZWxlbWVudFtzXSA9IHZhbHVlIDogZWxlbWVudFtzXTtcbiAgfSkpKTtcbiAgZnVuYy50YXJnZXQgPSBlbGVtZW50O1xuICBwcmV2IHx8IChmdW5jLnNtb290aCA9IGdzYXAuZ2V0UHJvcGVydHkoZWxlbWVudCwgXCJzY3JvbGxCZWhhdmlvclwiKSA9PT0gXCJzbW9vdGhcIik7IC8vIG9ubHkgc2V0IGl0IHRoZSBmaXJzdCB0aW1lIChkb24ndCByZXNldCBldmVyeSB0aW1lIGEgc2Nyb2xsRnVuYyBpcyByZXF1ZXN0ZWQgYmVjYXVzZSBwZXJoYXBzIGl0IGhhcHBlbnMgZHVyaW5nIGEgcmVmcmVzaCgpIHdoZW4gaXQncyBkaXNhYmxlZCBpbiBTY3JvbGxUcmlnZ2VyLlxuXG4gIHJldHVybiBmdW5jO1xufSxcbiAgICBfZ2V0VmVsb2NpdHlQcm9wID0gZnVuY3Rpb24gX2dldFZlbG9jaXR5UHJvcCh2YWx1ZSwgbWluVGltZVJlZnJlc2gsIHVzZURlbHRhKSB7XG4gIHZhciB2MSA9IHZhbHVlLFxuICAgICAgdjIgPSB2YWx1ZSxcbiAgICAgIHQxID0gX2dldFRpbWUoKSxcbiAgICAgIHQyID0gdDEsXG4gICAgICBtaW4gPSBtaW5UaW1lUmVmcmVzaCB8fCA1MCxcbiAgICAgIGRyb3BUb1plcm9UaW1lID0gTWF0aC5tYXgoNTAwLCBtaW4gKiAzKSxcbiAgICAgIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSwgZm9yY2UpIHtcbiAgICB2YXIgdCA9IF9nZXRUaW1lKCk7XG5cbiAgICBpZiAoZm9yY2UgfHwgdCAtIHQxID4gbWluKSB7XG4gICAgICB2MiA9IHYxO1xuICAgICAgdjEgPSB2YWx1ZTtcbiAgICAgIHQyID0gdDE7XG4gICAgICB0MSA9IHQ7XG4gICAgfSBlbHNlIGlmICh1c2VEZWx0YSkge1xuICAgICAgdjEgKz0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vdCB0b3RhbGx5IG5lY2Vzc2FyeSwgYnV0IG1ha2VzIGl0IGEgYml0IG1vcmUgYWNjdXJhdGUgYnkgYWRqdXN0aW5nIHRoZSB2MSB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIG5ldyBzbG9wZS4gVGhpcyB3YXkgd2UncmUgbm90IGp1c3QgaWdub3JpbmcgdGhlIGluY29taW5nIGRhdGEuIFJlbW92aW5nIGZvciBub3cgYmVjYXVzZSBpdCBkb2Vzbid0IHNlZW0gdG8gbWFrZSBtdWNoIHByYWN0aWNhbCBkaWZmZXJlbmNlIGFuZCBpdCdzIHByb2JhYmx5IG5vdCB3b3J0aCB0aGUga2IuXG4gICAgICB2MSA9IHYyICsgKHZhbHVlIC0gdjIpIC8gKHQgLSB0MikgKiAodDEgLSB0Mik7XG4gICAgfVxuICB9LFxuICAgICAgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2MiA9IHYxID0gdXNlRGVsdGEgPyAwIDogdjE7XG4gICAgdDIgPSB0MSA9IDA7XG4gIH0sXG4gICAgICBnZXRWZWxvY2l0eSA9IGZ1bmN0aW9uIGdldFZlbG9jaXR5KGxhdGVzdFZhbHVlKSB7XG4gICAgdmFyIHRPbGQgPSB0MixcbiAgICAgICAgdk9sZCA9IHYyLFxuICAgICAgICB0ID0gX2dldFRpbWUoKTtcblxuICAgIChsYXRlc3RWYWx1ZSB8fCBsYXRlc3RWYWx1ZSA9PT0gMCkgJiYgbGF0ZXN0VmFsdWUgIT09IHYxICYmIHVwZGF0ZShsYXRlc3RWYWx1ZSk7XG4gICAgcmV0dXJuIHQxID09PSB0MiB8fCB0IC0gdDIgPiBkcm9wVG9aZXJvVGltZSA/IDAgOiAodjEgKyAodXNlRGVsdGEgPyB2T2xkIDogLXZPbGQpKSAvICgodXNlRGVsdGEgPyB0IDogdDEpIC0gdE9sZCkgKiAxMDAwO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgcmVzZXQ6IHJlc2V0LFxuICAgIGdldFZlbG9jaXR5OiBnZXRWZWxvY2l0eVxuICB9O1xufSxcbiAgICBfZ2V0RXZlbnQgPSBmdW5jdGlvbiBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpIHtcbiAgcHJldmVudERlZmF1bHQgJiYgIWUuX2dzYXBBbGxvdyAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHJldHVybiBlLmNoYW5nZWRUb3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG59LFxuICAgIF9nZXRBYnNvbHV0ZU1heCA9IGZ1bmN0aW9uIF9nZXRBYnNvbHV0ZU1heChhKSB7XG4gIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBhKSxcbiAgICAgIG1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGEpO1xuICByZXR1cm4gTWF0aC5hYnMobWF4KSA+PSBNYXRoLmFicyhtaW4pID8gbWF4IDogbWluO1xufSxcbiAgICBfc2V0U2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxUcmlnZ2VyKCkge1xuICBTY3JvbGxUcmlnZ2VyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxUcmlnZ2VyO1xuICBTY3JvbGxUcmlnZ2VyICYmIFNjcm9sbFRyaWdnZXIuY29yZSAmJiBfaW50ZWdyYXRlKCk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgaWYgKGdzYXAgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcbiAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcbiAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuICAgIF9wb2ludGVyVHlwZSA9IFwib25wb2ludGVyZW50ZXJcIiBpbiBfYm9keSA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiOyAvLyBpc1RvdWNoIGlzIDAgaWYgbm8gdG91Y2gsIDEgaWYgT05MWSB0b3VjaCwgYW5kIDIgaWYgaXQgY2FuIGFjY29tbW9kYXRlIHRvdWNoIGJ1dCBhbHNvIG90aGVyIHR5cGVzIGxpa2UgbW91c2UvcG9pbnRlci5cblxuICAgIF9pc1RvdWNoID0gT2JzZXJ2ZXIuaXNUb3VjaCA9IF93aW4ubWF0Y2hNZWRpYSAmJiBfd2luLm1hdGNoTWVkaWEoXCIoaG92ZXI6IG5vbmUpLCAocG9pbnRlcjogY29hcnNlKVwiKS5tYXRjaGVzID8gMSA6IFwib250b3VjaHN0YXJ0XCIgaW4gX3dpbiB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCA/IDIgOiAwO1xuICAgIF9ldmVudFR5cGVzID0gT2JzZXJ2ZXIuZXZlbnRUeXBlcyA9IChcIm9udG91Y2hzdGFydFwiIGluIF9kb2NFbCA/IFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hjYW5jZWwsdG91Y2hlbmRcIiA6ICEoXCJvbnBvaW50ZXJkb3duXCIgaW4gX2RvY0VsKSA/IFwibW91c2Vkb3duLG1vdXNlbW92ZSxtb3VzZXVwLG1vdXNldXBcIiA6IFwicG9pbnRlcmRvd24scG9pbnRlcm1vdmUscG9pbnRlcmNhbmNlbCxwb2ludGVydXBcIikuc3BsaXQoXCIsXCIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICB9LCA1MDApO1xuXG4gICAgX3NldFNjcm9sbFRyaWdnZXIoKTtcblxuICAgIF9jb3JlSW5pdHRlZCA9IDE7XG4gIH1cblxuICByZXR1cm4gX2NvcmVJbml0dGVkO1xufTtcblxuX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG5fc2Nyb2xsZXJzLmNhY2hlID0gMDtcbmV4cG9ydCB2YXIgT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPYnNlcnZlcih2YXJzKSB7XG4gICAgdGhpcy5pbml0KHZhcnMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE9ic2VydmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycykge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBfaW5pdENvcmUoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpXCIpO1xuICAgIFNjcm9sbFRyaWdnZXIgfHwgX3NldFNjcm9sbFRyaWdnZXIoKTtcbiAgICB2YXIgdG9sZXJhbmNlID0gdmFycy50b2xlcmFuY2UsXG4gICAgICAgIGRyYWdNaW5pbXVtID0gdmFycy5kcmFnTWluaW11bSxcbiAgICAgICAgdHlwZSA9IHZhcnMudHlwZSxcbiAgICAgICAgdGFyZ2V0ID0gdmFycy50YXJnZXQsXG4gICAgICAgIGxpbmVIZWlnaHQgPSB2YXJzLmxpbmVIZWlnaHQsXG4gICAgICAgIGRlYm91bmNlID0gdmFycy5kZWJvdW5jZSxcbiAgICAgICAgcHJldmVudERlZmF1bHQgPSB2YXJzLnByZXZlbnREZWZhdWx0LFxuICAgICAgICBvblN0b3AgPSB2YXJzLm9uU3RvcCxcbiAgICAgICAgb25TdG9wRGVsYXkgPSB2YXJzLm9uU3RvcERlbGF5LFxuICAgICAgICBpZ25vcmUgPSB2YXJzLmlnbm9yZSxcbiAgICAgICAgd2hlZWxTcGVlZCA9IHZhcnMud2hlZWxTcGVlZCxcbiAgICAgICAgZXZlbnQgPSB2YXJzLmV2ZW50LFxuICAgICAgICBvbkRyYWdTdGFydCA9IHZhcnMub25EcmFnU3RhcnQsXG4gICAgICAgIG9uRHJhZ0VuZCA9IHZhcnMub25EcmFnRW5kLFxuICAgICAgICBvbkRyYWcgPSB2YXJzLm9uRHJhZyxcbiAgICAgICAgb25QcmVzcyA9IHZhcnMub25QcmVzcyxcbiAgICAgICAgb25SZWxlYXNlID0gdmFycy5vblJlbGVhc2UsXG4gICAgICAgIG9uUmlnaHQgPSB2YXJzLm9uUmlnaHQsXG4gICAgICAgIG9uTGVmdCA9IHZhcnMub25MZWZ0LFxuICAgICAgICBvblVwID0gdmFycy5vblVwLFxuICAgICAgICBvbkRvd24gPSB2YXJzLm9uRG93bixcbiAgICAgICAgb25DaGFuZ2VYID0gdmFycy5vbkNoYW5nZVgsXG4gICAgICAgIG9uQ2hhbmdlWSA9IHZhcnMub25DaGFuZ2VZLFxuICAgICAgICBvbkNoYW5nZSA9IHZhcnMub25DaGFuZ2UsXG4gICAgICAgIG9uVG9nZ2xlWCA9IHZhcnMub25Ub2dnbGVYLFxuICAgICAgICBvblRvZ2dsZVkgPSB2YXJzLm9uVG9nZ2xlWSxcbiAgICAgICAgb25Ib3ZlciA9IHZhcnMub25Ib3ZlcixcbiAgICAgICAgb25Ib3ZlckVuZCA9IHZhcnMub25Ib3ZlckVuZCxcbiAgICAgICAgb25Nb3ZlID0gdmFycy5vbk1vdmUsXG4gICAgICAgIGlnbm9yZUNoZWNrID0gdmFycy5pZ25vcmVDaGVjayxcbiAgICAgICAgaXNOb3JtYWxpemVyID0gdmFycy5pc05vcm1hbGl6ZXIsXG4gICAgICAgIG9uR2VzdHVyZVN0YXJ0ID0gdmFycy5vbkdlc3R1cmVTdGFydCxcbiAgICAgICAgb25HZXN0dXJlRW5kID0gdmFycy5vbkdlc3R1cmVFbmQsXG4gICAgICAgIG9uV2hlZWwgPSB2YXJzLm9uV2hlZWwsXG4gICAgICAgIG9uRW5hYmxlID0gdmFycy5vbkVuYWJsZSxcbiAgICAgICAgb25EaXNhYmxlID0gdmFycy5vbkRpc2FibGUsXG4gICAgICAgIG9uQ2xpY2sgPSB2YXJzLm9uQ2xpY2ssXG4gICAgICAgIHNjcm9sbFNwZWVkID0gdmFycy5zY3JvbGxTcGVlZCxcbiAgICAgICAgY2FwdHVyZSA9IHZhcnMuY2FwdHVyZSxcbiAgICAgICAgYWxsb3dDbGlja3MgPSB2YXJzLmFsbG93Q2xpY2tzLFxuICAgICAgICBsb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMsXG4gICAgICAgIG9uTG9ja0F4aXMgPSB2YXJzLm9uTG9ja0F4aXM7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHRhcmdldCkgfHwgX2RvY0VsO1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgaWdub3JlICYmIChpZ25vcmUgPSBnc2FwLnV0aWxzLnRvQXJyYXkoaWdub3JlKSk7XG4gICAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDFlLTk7XG4gICAgZHJhZ01pbmltdW0gPSBkcmFnTWluaW11bSB8fCAwO1xuICAgIHdoZWVsU3BlZWQgPSB3aGVlbFNwZWVkIHx8IDE7XG4gICAgc2Nyb2xsU3BlZWQgPSBzY3JvbGxTcGVlZCB8fCAxO1xuICAgIHR5cGUgPSB0eXBlIHx8IFwid2hlZWwsdG91Y2gscG9pbnRlclwiO1xuICAgIGRlYm91bmNlID0gZGVib3VuY2UgIT09IGZhbHNlO1xuICAgIGxpbmVIZWlnaHQgfHwgKGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSkubGluZUhlaWdodCkgfHwgMjIpOyAvLyBub3RlOiBicm93c2VyIG1heSByZXBvcnQgXCJub3JtYWxcIiwgc28gZGVmYXVsdCB0byAyMi5cblxuICAgIHZhciBpZCxcbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICAgIGRyYWdnZWQsXG4gICAgICAgIG1vdmVkLFxuICAgICAgICB3aGVlbGVkLFxuICAgICAgICBsb2NrZWQsXG4gICAgICAgIGF4aXMsXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBwcmV2RGVsdGFYID0gMCxcbiAgICAgICAgcHJldkRlbHRhWSA9IDAsXG4gICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICBzY3JvbGxYID0gc2Nyb2xsRnVuY1goKSxcbiAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCksXG4gICAgICAgIGxpbWl0VG9Ub3VjaCA9IH50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSAmJiAhfnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgJiYgX2V2ZW50VHlwZXNbMF0gPT09IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgLy8gZm9yIGRldmljZXMgdGhhdCBhY2NvbW1vZGF0ZSBtb3VzZSBldmVudHMgYW5kIHRvdWNoIGV2ZW50cywgd2UgbmVlZCB0byBkaXN0aW5ndWlzaC5cbiAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodGFyZ2V0KSxcbiAgICAgICAgb3duZXJEb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBfZG9jLFxuICAgICAgICBkZWx0YVggPSBbMCwgMCwgMF0sXG4gICAgICAgIC8vIHdoZWVsLCBzY3JvbGwsIHBvaW50ZXIvdG91Y2hcbiAgICBkZWx0YVkgPSBbMCwgMCwgMF0sXG4gICAgICAgIG9uQ2xpY2tUaW1lID0gMCxcbiAgICAgICAgY2xpY2tDYXB0dXJlID0gZnVuY3Rpb24gY2xpY2tDYXB0dXJlKCkge1xuICAgICAgcmV0dXJuIG9uQ2xpY2tUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgICAgICBfaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiBfaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCkge1xuICAgICAgcmV0dXJuIChzZWxmLmV2ZW50ID0gZSkgJiYgaWdub3JlICYmIH5pZ25vcmUuaW5kZXhPZihlLnRhcmdldCkgfHwgaXNQb2ludGVyT3JUb3VjaCAmJiBsaW1pdFRvVG91Y2ggJiYgZS5wb2ludGVyVHlwZSAhPT0gXCJ0b3VjaFwiIHx8IGlnbm9yZUNoZWNrICYmIGlnbm9yZUNoZWNrKGUsIGlzUG9pbnRlck9yVG91Y2gpO1xuICAgIH0sXG4gICAgICAgIG9uU3RvcEZ1bmMgPSBmdW5jdGlvbiBvblN0b3BGdW5jKCkge1xuICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIG9uU3RvcCAmJiBvblN0b3Aoc2VsZik7XG4gICAgfSxcbiAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIGR4ID0gc2VsZi5kZWx0YVggPSBfZ2V0QWJzb2x1dGVNYXgoZGVsdGFYKSxcbiAgICAgICAgICBkeSA9IHNlbGYuZGVsdGFZID0gX2dldEFic29sdXRlTWF4KGRlbHRhWSksXG4gICAgICAgICAgY2hhbmdlZFggPSBNYXRoLmFicyhkeCkgPj0gdG9sZXJhbmNlLFxuICAgICAgICAgIGNoYW5nZWRZID0gTWF0aC5hYnMoZHkpID49IHRvbGVyYW5jZTtcblxuICAgICAgb25DaGFuZ2UgJiYgKGNoYW5nZWRYIHx8IGNoYW5nZWRZKSAmJiBvbkNoYW5nZShzZWxmLCBkeCwgZHksIGRlbHRhWCwgZGVsdGFZKTsgLy8gaW4gU2Nyb2xsVHJpZ2dlci5ub3JtYWxpemVTY3JvbGwoKSwgd2UgbmVlZCB0byBrbm93IGlmIGl0IHdhcyB0b3VjaC9wb2ludGVyIHNvIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBkZWx0YVgvZGVsdGFZIEFycmF5cyBiZWZvcmUgd2UgY2xlYXIgdGhlbSBvdXQuXG5cbiAgICAgIGlmIChjaGFuZ2VkWCkge1xuICAgICAgICBvblJpZ2h0ICYmIHNlbGYuZGVsdGFYID4gMCAmJiBvblJpZ2h0KHNlbGYpO1xuICAgICAgICBvbkxlZnQgJiYgc2VsZi5kZWx0YVggPCAwICYmIG9uTGVmdChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VYICYmIG9uQ2hhbmdlWChzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVYICYmIHNlbGYuZGVsdGFYIDwgMCAhPT0gcHJldkRlbHRhWCA8IDAgJiYgb25Ub2dnbGVYKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFYID0gc2VsZi5kZWx0YVg7XG4gICAgICAgIGRlbHRhWFswXSA9IGRlbHRhWFsxXSA9IGRlbHRhWFsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkWSkge1xuICAgICAgICBvbkRvd24gJiYgc2VsZi5kZWx0YVkgPiAwICYmIG9uRG93bihzZWxmKTtcbiAgICAgICAgb25VcCAmJiBzZWxmLmRlbHRhWSA8IDAgJiYgb25VcChzZWxmKTtcbiAgICAgICAgb25DaGFuZ2VZICYmIG9uQ2hhbmdlWShzZWxmKTtcbiAgICAgICAgb25Ub2dnbGVZICYmIHNlbGYuZGVsdGFZIDwgMCAhPT0gcHJldkRlbHRhWSA8IDAgJiYgb25Ub2dnbGVZKHNlbGYpO1xuICAgICAgICBwcmV2RGVsdGFZID0gc2VsZi5kZWx0YVk7XG4gICAgICAgIGRlbHRhWVswXSA9IGRlbHRhWVsxXSA9IGRlbHRhWVsyXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb3ZlZCB8fCBkcmFnZ2VkKSB7XG4gICAgICAgIG9uTW92ZSAmJiBvbk1vdmUoc2VsZik7XG5cbiAgICAgICAgaWYgKGRyYWdnZWQpIHtcbiAgICAgICAgICBvbkRyYWcoc2VsZik7XG4gICAgICAgICAgZHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbG9ja2VkICYmICEobG9ja2VkID0gZmFsc2UpICYmIG9uTG9ja0F4aXMgJiYgb25Mb2NrQXhpcyhzZWxmKTtcblxuICAgICAgaWYgKHdoZWVsZWQpIHtcbiAgICAgICAgb25XaGVlbChzZWxmKTtcbiAgICAgICAgd2hlZWxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZCA9IDA7XG4gICAgfSxcbiAgICAgICAgb25EZWx0YSA9IGZ1bmN0aW9uIG9uRGVsdGEoeCwgeSwgaW5kZXgpIHtcbiAgICAgIGRlbHRhWFtpbmRleF0gKz0geDtcbiAgICAgIGRlbHRhWVtpbmRleF0gKz0geTtcblxuICAgICAgc2VsZi5fdngudXBkYXRlKHgpO1xuXG4gICAgICBzZWxmLl92eS51cGRhdGUoeSk7XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhID0gZnVuY3Rpb24gb25Ub3VjaE9yUG9pbnRlckRlbHRhKHgsIHkpIHtcbiAgICAgIGlmIChsb2NrQXhpcyAmJiAhYXhpcykge1xuICAgICAgICBzZWxmLmF4aXMgPSBheGlzID0gTWF0aC5hYnMoeCkgPiBNYXRoLmFicyh5KSA/IFwieFwiIDogXCJ5XCI7XG4gICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInlcIikge1xuICAgICAgICBkZWx0YVhbMl0gKz0geDtcblxuICAgICAgICBzZWxmLl92eC51cGRhdGUoeCwgdHJ1ZSk7IC8vIHVwZGF0ZSB0aGUgdmVsb2NpdHkgYXMgZnJlcXVlbnRseSBhcyBwb3NzaWJsZSBpbnN0ZWFkIG9mIGluIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gc28gdGhhdCB2ZXJ5IHF1aWNrIHRvdWNoLXNjcm9sbHMgKGZsaWNrcykgZmVlbCBuYXR1cmFsLiBJZiBpdCdzIHRoZSBtb3VzZS90b3VjaC9wb2ludGVyLCBmb3JjZSBpdCBzbyB0aGF0IHdlIGdldCBzbmFwcHkvYWNjdXJhdGUgbW9tZW50dW0gc2Nyb2xsLlxuXG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzICE9PSBcInhcIikge1xuICAgICAgICBkZWx0YVlbMl0gKz0geTtcblxuICAgICAgICBzZWxmLl92eS51cGRhdGUoeSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGRlYm91bmNlID8gaWQgfHwgKGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSkpIDogdXBkYXRlKCk7XG4gICAgfSxcbiAgICAgICAgX29uRHJhZyA9IGZ1bmN0aW9uIF9vbkRyYWcoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICBkeCA9IHggLSBzZWxmLngsXG4gICAgICAgICAgZHkgPSB5IC0gc2VsZi55LFxuICAgICAgICAgIGlzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmc7XG4gICAgICBzZWxmLnggPSB4O1xuICAgICAgc2VsZi55ID0geTtcblxuICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgTWF0aC5hYnMoc2VsZi5zdGFydFggLSB4KSA+PSBkcmFnTWluaW11bSB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WSAtIHkpID49IGRyYWdNaW5pbXVtKSB7XG4gICAgICAgIG9uRHJhZyAmJiAoZHJhZ2dlZCA9IHRydWUpO1xuICAgICAgICBpc0RyYWdnaW5nIHx8IChzZWxmLmlzRHJhZ2dpbmcgPSB0cnVlKTtcbiAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgICAgIGlzRHJhZ2dpbmcgfHwgb25EcmFnU3RhcnQgJiYgb25EcmFnU3RhcnQoc2VsZik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgX29uUHJlc3MgPSBzZWxmLm9uUHJlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuYXhpcyA9IGF4aXMgPSBudWxsO1xuICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIGUgPSBfZ2V0RXZlbnQoZSk7IC8vIG5vdGU6IG1heSBuZWVkIHRvIHByZXZlbnREZWZhdWx0KD8pIFdvbid0IHNpZGUtc2Nyb2xsIG9uIGlPUyBTYWZhcmkgaWYgd2UgZG8sIHRob3VnaC5cblxuICAgICAgcHJldkRlbHRhWCA9IHByZXZEZWx0YVkgPSAwO1xuICAgICAgc2VsZi5zdGFydFggPSBzZWxmLnggPSBlLmNsaWVudFg7XG4gICAgICBzZWxmLnN0YXJ0WSA9IHNlbGYueSA9IGUuY2xpZW50WTtcblxuICAgICAgc2VsZi5fdngucmVzZXQoKTsgLy8gb3RoZXJ3aXNlIHRoZSB0MiBtYXkgYmUgc3RhbGUgaWYgdGhlIHVzZXIgdG91Y2hlcyBhbmQgZmxpY2tzIHN1cGVyIGZhc3QgYW5kIHJlbGVhc2VzIGluIGxlc3MgdGhhbiAyIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0aWNrcywgY2F1c2luZyB2ZWxvY2l0eSB0byBiZSAwLlxuXG5cbiAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgIF9hZGRMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHByZXZlbnREZWZhdWx0LCB0cnVlKTtcblxuICAgICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgICBvblByZXNzICYmIG9uUHJlc3Moc2VsZik7XG4gICAgfSxcbiAgICAgICAgX29uUmVsZWFzZSA9IGZ1bmN0aW9uIF9vblJlbGVhc2UoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuXG4gICAgICB2YXIgd2FzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmcgJiYgKE1hdGguYWJzKHNlbGYueCAtIHNlbGYuc3RhcnRYKSA+IDMgfHwgTWF0aC5hYnMoc2VsZi55IC0gc2VsZi5zdGFydFkpID4gMyksXG4gICAgICAgICAgLy8gc29tZSB0b3VjaCBkZXZpY2VzIG5lZWQgc29tZSB3aWdnbGUgcm9vbSBpbiB0ZXJtcyBvZiBzZW5zaW5nIGNsaWNrcyAtIHRoZSBmaW5nZXIgbWF5IG1vdmUgYSBmZXcgcGl4ZWxzLlxuICAgICAgZXZlbnREYXRhID0gX2dldEV2ZW50KGUpO1xuXG4gICAgICBpZiAoIXdhc0RyYWdnaW5nKSB7XG4gICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICBpZiAocHJldmVudERlZmF1bHQgJiYgYWxsb3dDbGlja3MpIHtcbiAgICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuMDgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgd29uJ3QgdHJ1c3Qgc2NyaXB0LWdlbmVyYXRlZCBjbGlja3MsIHNvIGlmIHRoZSB1c2VyIHRyaWVzIHRvIGNsaWNrIG9uIGEgdmlkZW8gdG8gcGxheSBpdCwgZm9yIGV4YW1wbGUsIGl0IHNpbXBseSB3b24ndCB3b3JrLiBTaW5jZSBhIHJlZ3VsYXIgXCJjbGlja1wiIGV2ZW50IHdpbGwgbW9zdCBsaWtlbHkgYmUgZ2VuZXJhdGVkIGFueXdheSAob25lIHRoYXQgaGFzIGl0cyBpc1RydXN0ZWQgZmxhZyBzZXQgdG8gdHJ1ZSksIHdlIG11c3Qgc2xpZ2h0bHkgZGVsYXkgb3VyIHNjcmlwdC1nZW5lcmF0ZWQgY2xpY2sgc28gdGhhdCB0aGUgXCJyZWFsXCIvdHJ1c3RlZCBvbmUgaXMgcHJpb3JpdGl6ZWQuIFJlbWVtYmVyLCB3aGVuIHRoZXJlIGFyZSBkdXBsaWNhdGUgZXZlbnRzIGluIHF1aWNrIHN1Y2Nlc3Npb24sIHdlIHN1cHByZXNzIGFsbCBidXQgdGhlIGZpcnN0IG9uZS4gU29tZSBicm93c2VycyBkb24ndCBldmVuIHRyaWdnZXIgdGhlIFwicmVhbFwiIG9uZSBhdCBhbGwsIHNvIG91ciBzeW50aGV0aWMgb25lIGlzIGEgc2FmZXR5IHZhbHZlIHRoYXQgZW5zdXJlcyB0aGF0IG5vIG1hdHRlciB3aGF0LCBhIGNsaWNrIGV2ZW50IGRvZXMgZ2V0IGRpc3BhdGNoZWQuXG4gICAgICAgICAgICBpZiAoX2dldFRpbWUoKSAtIG9uQ2xpY2tUaW1lID4gMzAwICYmICFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy9zb21lIGJyb3dzZXJzIChsaWtlIG1vYmlsZSBTYWZhcmkpIGRvbid0IHByb3Blcmx5IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBzeW50aGV0aWNFdmVudCA9IG93bmVyRG9jLmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgICAgICAgICAgc3ludGhldGljRXZlbnQuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCB0cnVlLCBfd2luLCAxLCBldmVudERhdGEuc2NyZWVuWCwgZXZlbnREYXRhLnNjcmVlblksIGV2ZW50RGF0YS5jbGllbnRYLCBldmVudERhdGEuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc3ludGhldGljRXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICBvblN0b3AgJiYgIWlzTm9ybWFsaXplciAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgb25EcmFnRW5kICYmIHdhc0RyYWdnaW5nICYmIG9uRHJhZ0VuZChzZWxmKTtcbiAgICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZiwgd2FzRHJhZ2dpbmcpO1xuICAgIH0sXG4gICAgICAgIF9vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVTdGFydChlKSB7XG4gICAgICByZXR1cm4gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxICYmIChzZWxmLmlzR2VzdHVyaW5nID0gdHJ1ZSkgJiYgb25HZXN0dXJlU3RhcnQoZSwgc2VsZi5pc0RyYWdnaW5nKTtcbiAgICB9LFxuICAgICAgICBfb25HZXN0dXJlRW5kID0gZnVuY3Rpb24gX29uR2VzdHVyZUVuZCgpIHtcbiAgICAgIHJldHVybiAoc2VsZi5pc0dlc3R1cmluZyA9IGZhbHNlKSB8fCBvbkdlc3R1cmVFbmQoc2VsZik7XG4gICAgfSxcbiAgICAgICAgb25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICAgIHkgPSBzY3JvbGxGdW5jWSgpO1xuICAgICAgb25EZWx0YSgoeCAtIHNjcm9sbFgpICogc2Nyb2xsU3BlZWQsICh5IC0gc2Nyb2xsWSkgKiBzY3JvbGxTcGVlZCwgMSk7XG4gICAgICBzY3JvbGxYID0geDtcbiAgICAgIHNjcm9sbFkgPSB5O1xuICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uV2hlZWwgPSBmdW5jdGlvbiBfb25XaGVlbChlKSB7XG4gICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICBvbldoZWVsICYmICh3aGVlbGVkID0gdHJ1ZSk7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IChlLmRlbHRhTW9kZSA9PT0gMSA/IGxpbmVIZWlnaHQgOiBlLmRlbHRhTW9kZSA9PT0gMiA/IF93aW4uaW5uZXJIZWlnaHQgOiAxKSAqIHdoZWVsU3BlZWQ7XG4gICAgICBvbkRlbHRhKGUuZGVsdGFYICogbXVsdGlwbGllciwgZS5kZWx0YVkgKiBtdWx0aXBsaWVyLCAwKTtcbiAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSxcbiAgICAgICAgX29uTW92ZSA9IGZ1bmN0aW9uIF9vbk1vdmUoZSkge1xuICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgIHkgPSBlLmNsaWVudFksXG4gICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgIGR5ID0geSAtIHNlbGYueTtcbiAgICAgIHNlbGYueCA9IHg7XG4gICAgICBzZWxmLnkgPSB5O1xuICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgKGR4IHx8IGR5KSAmJiBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlciA9IGZ1bmN0aW9uIF9vbkhvdmVyKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlcihzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25Ib3ZlckVuZCA9IGZ1bmN0aW9uIF9vbkhvdmVyRW5kKGUpIHtcbiAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgb25Ib3ZlckVuZChzZWxmKTtcbiAgICB9LFxuICAgICAgICBfb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICAgIHJldHVybiBfaWdub3JlQ2hlY2soZSkgfHwgX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSAmJiBvbkNsaWNrKHNlbGYpO1xuICAgIH07XG5cbiAgICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjID0gZ3NhcC5kZWxheWVkQ2FsbChvblN0b3BEZWxheSB8fCAwLjI1LCBvblN0b3BGdW5jKS5wYXVzZSgpO1xuICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgIHNlbGYuX3Z4ID0gX2dldFZlbG9jaXR5UHJvcCgwLCA1MCwgdHJ1ZSk7XG4gICAgc2VsZi5fdnkgPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICBzZWxmLnNjcm9sbFggPSBzY3JvbGxGdW5jWDtcbiAgICBzZWxmLnNjcm9sbFkgPSBzY3JvbGxGdW5jWTtcbiAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcblxuICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghc2VsZi5pc0VuYWJsZWQpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICB0eXBlLmluZGV4T2YoXCJzY3JvbGxcIikgPj0gMCAmJiBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBvblNjcm9sbCwgcHJldmVudERlZmF1bHQsIGNhcHR1cmUpO1xuICAgICAgICB0eXBlLmluZGV4T2YoXCJ3aGVlbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcblxuICAgICAgICBpZiAodHlwZS5pbmRleE9mKFwidG91Y2hcIikgPj0gMCAmJiBfaXNUb3VjaCB8fCB0eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID49IDApIHtcbiAgICAgICAgICBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1szXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBhbGxvd0NsaWNrcyAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIG9uQ2xpY2sgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG4gICAgICAgICAgb25HZXN0dXJlU3RhcnQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuICAgICAgICAgIG9uR2VzdHVyZUVuZCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcbiAgICAgICAgICBvbkhvdmVyICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuICAgICAgICAgIG9uSG92ZXJFbmQgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG4gICAgICAgICAgb25Nb3ZlICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgZSAmJiBlLnR5cGUgJiYgX29uUHJlc3MoZSk7XG4gICAgICAgIG9uRW5hYmxlICYmIG9uRW5hYmxlKHNlbGYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBfb25TY3JvbGwgbGlzdGVuZXIgaWYgdGhlcmUgYXJlbid0IGFueSBvdGhlcnMgdGhhdCByZWx5IG9uIHRoZSBmdW5jdGlvbmFsaXR5LlxuICAgICAgICBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvICE9PSBzZWxmICYmIF9pc1ZpZXdwb3J0KG8udGFyZ2V0KTtcbiAgICAgICAgfSkubGVuZ3RoIHx8IF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgaWYgKHNlbGYuaXNQcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcIndoZWVsXCIsIF9vbldoZWVsLCBjYXB0dXJlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIGNhcHR1cmUpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJsZWF2ZVwiLCBfb25Ib3ZlckVuZCk7XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuXG4gICAgICAgIHNlbGYuaXNFbmFibGVkID0gc2VsZi5pc1ByZXNzZWQgPSBzZWxmLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgb25EaXNhYmxlICYmIG9uRGlzYWJsZShzZWxmKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5raWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5kaXNhYmxlKCk7XG5cbiAgICAgIHZhciBpID0gX29ic2VydmVycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBpID49IDAgJiYgX29ic2VydmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICBfbm9ybWFsaXplciA9PT0gc2VsZiAmJiAoX25vcm1hbGl6ZXIgPSAwKTtcbiAgICB9O1xuXG4gICAgX29ic2VydmVycy5wdXNoKHNlbGYpO1xuXG4gICAgaXNOb3JtYWxpemVyICYmIF9pc1ZpZXdwb3J0KHRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gc2VsZik7XG4gICAgc2VsZi5lbmFibGUoZXZlbnQpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhPYnNlcnZlciwgW3tcbiAgICBrZXk6IFwidmVsb2NpdHlYXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnguZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmVsb2NpdHlZXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdnkuZ2V0VmVsb2NpdHkoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT2JzZXJ2ZXI7XG59KCk7XG5PYnNlcnZlci52ZXJzaW9uID0gXCIzLjExLjNcIjtcblxuT2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbn07XG5cbk9ic2VydmVyLnJlZ2lzdGVyID0gX2luaXRDb3JlO1xuXG5PYnNlcnZlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLnNsaWNlKCk7XG59O1xuXG5PYnNlcnZlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfb2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvLnZhcnMuaWQgPT09IGlkO1xuICB9KVswXTtcbn07XG5cbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcik7XG5leHBvcnQgeyBPYnNlcnZlciBhcyBkZWZhdWx0LCBfaXNWaWV3cG9ydCwgX3Njcm9sbGVycywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9wcm94aWVzLCBfZ2V0VmVsb2NpdHlQcm9wLCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfZ2V0VGFyZ2V0IH07IiwiLyohXG4gKiBTY3JvbGxUcmlnZ2VyIDMuMTEuM1xuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IE9ic2VydmVyLCBfZ2V0VGFyZ2V0LCBfdmVydGljYWwsIF9ob3Jpem9udGFsLCBfc2Nyb2xsZXJzLCBfcHJveGllcywgX2dldFNjcm9sbEZ1bmMsIF9nZXRQcm94eVByb3AsIF9nZXRWZWxvY2l0eVByb3AgfSBmcm9tIFwiLi9PYnNlcnZlci5qc1wiO1xuXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbCxcbiAgICBfYm9keSxcbiAgICBfcm9vdCxcbiAgICBfcmVzaXplRGVsYXksXG4gICAgX3RvQXJyYXksXG4gICAgX2NsYW1wLFxuICAgIF90aW1lMixcbiAgICBfc3luY0ludGVydmFsLFxuICAgIF9yZWZyZXNoaW5nLFxuICAgIF9wb2ludGVySXNEb3duLFxuICAgIF90cmFuc2Zvcm1Qcm9wLFxuICAgIF9pLFxuICAgIF9wcmV2V2lkdGgsXG4gICAgX3ByZXZIZWlnaHQsXG4gICAgX2F1dG9SZWZyZXNoLFxuICAgIF9zb3J0LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX2lnbm9yZVJlc2l6ZSxcbiAgICBfbm9ybWFsaXplcixcbiAgICBfaWdub3JlTW9iaWxlUmVzaXplLFxuICAgIF9iYXNlU2NyZWVuSGVpZ2h0LFxuICAgIF9iYXNlU2NyZWVuV2lkdGgsXG4gICAgX2ZpeElPU0J1ZyxcbiAgICBfY29udGV4dCxcbiAgICBfc2Nyb2xsUmVzdG9yYXRpb24sXG4gICAgX2xpbWl0Q2FsbGJhY2tzLFxuICAgIC8vIGlmIHRydWUsIHdlJ2xsIG9ubHkgdHJpZ2dlciBjYWxsYmFja3MgaWYgdGhlIGFjdGl2ZSBzdGF0ZSB0b2dnbGVzLCBzbyBpZiB5b3Ugc2Nyb2xsIGltbWVkaWF0ZWx5IHBhc3QgYm90aCB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgYSBTY3JvbGxUcmlnZ2VyICh0aHVzIGluYWN0aXZlIHRvIGluYWN0aXZlKSwgbmVpdGhlciBpdHMgb25FbnRlciBub3Igb25MZWF2ZSB3aWxsIGJlIGNhbGxlZC4gVGhpcyBpcyB1c2VmdWwgZHVyaW5nIHN0YXJ0dXAuXG5fc3RhcnR1cCA9IDEsXG4gICAgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICBfdGltZTEgPSBfZ2V0VGltZSgpLFxuICAgIF9sYXN0U2Nyb2xsVGltZSA9IDAsXG4gICAgX2VuYWJsZWQgPSAwLFxuICAgIF9wb2ludGVyRG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfcG9pbnRlckRvd25IYW5kbGVyKCkge1xuICByZXR1cm4gX3BvaW50ZXJJc0Rvd24gPSAxO1xufSxcbiAgICBfcG9pbnRlclVwSGFuZGxlciA9IGZ1bmN0aW9uIF9wb2ludGVyVXBIYW5kbGVyKCkge1xuICByZXR1cm4gX3BvaW50ZXJJc0Rvd24gPSAwO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2godikge1xuICByZXR1cm4gdjtcbn0sXG4gICAgX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gIHJldHVybiBnc2FwIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG59LFxuICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZSkge1xuICByZXR1cm4gISF+X3Jvb3QuaW5kZXhPZihlKTtcbn0sXG4gICAgX2dldEJvdW5kc0Z1bmMgPSBmdW5jdGlvbiBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSB7XG4gIHJldHVybiBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IGZ1bmN0aW9uICgpIHtcbiAgICBfd2luT2Zmc2V0cy53aWR0aCA9IF93aW4uaW5uZXJXaWR0aDtcbiAgICBfd2luT2Zmc2V0cy5oZWlnaHQgPSBfd2luLmlubmVySGVpZ2h0O1xuICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgfSk7XG59LFxuICAgIF9nZXRTaXplRnVuYyA9IGZ1bmN0aW9uIF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgX3JlZikge1xuICB2YXIgZCA9IF9yZWYuZCxcbiAgICAgIGQyID0gX3JlZi5kMixcbiAgICAgIGEgPSBfcmVmLmE7XG4gIHJldHVybiAoYSA9IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpKSA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYSgpW2RdO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoaXNWaWV3cG9ydCA/IF93aW5bXCJpbm5lclwiICsgZDJdIDogc2Nyb2xsZXJbXCJjbGllbnRcIiArIGQyXSkgfHwgMDtcbiAgfTtcbn0sXG4gICAgX2dldE9mZnNldHNGdW5jID0gZnVuY3Rpb24gX2dldE9mZnNldHNGdW5jKGVsZW1lbnQsIGlzVmlld3BvcnQpIHtcbiAgcmV0dXJuICFpc1ZpZXdwb3J0IHx8IH5fcHJveGllcy5pbmRleE9mKGVsZW1lbnQpID8gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF93aW5PZmZzZXRzO1xuICB9O1xufSxcbiAgICBfbWF4U2Nyb2xsID0gZnVuY3Rpb24gX21heFNjcm9sbChlbGVtZW50LCBfcmVmMikge1xuICB2YXIgcyA9IF9yZWYyLnMsXG4gICAgICBkMiA9IF9yZWYyLmQyLFxuICAgICAgZCA9IF9yZWYyLmQsXG4gICAgICBhID0gX3JlZjIuYTtcbiAgcmV0dXJuIChzID0gXCJzY3JvbGxcIiArIGQyKSAmJiAoYSA9IF9nZXRQcm94eVByb3AoZWxlbWVudCwgcykpID8gYSgpIC0gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkoKVtkXSA6IF9pc1ZpZXdwb3J0KGVsZW1lbnQpID8gKF9kb2NFbFtzXSB8fCBfYm9keVtzXSkgLSAoX3dpbltcImlubmVyXCIgKyBkMl0gfHwgX2RvY0VsW1wiY2xpZW50XCIgKyBkMl0gfHwgX2JvZHlbXCJjbGllbnRcIiArIGQyXSkgOiBlbGVtZW50W3NdIC0gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdO1xufSxcbiAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoID0gZnVuY3Rpb24gX2l0ZXJhdGVBdXRvUmVmcmVzaChmdW5jLCBldmVudHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBfYXV0b1JlZnJlc2gubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAoIWV2ZW50cyB8fCB+ZXZlbnRzLmluZGV4T2YoX2F1dG9SZWZyZXNoW2kgKyAxXSkpICYmIGZ1bmMoX2F1dG9SZWZyZXNoW2ldLCBfYXV0b1JlZnJlc2hbaSArIDFdLCBfYXV0b1JlZnJlc2hbaSArIDJdKTtcbiAgfVxufSxcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2NhbGxJZkZ1bmMgPSBmdW5jdGlvbiBfY2FsbElmRnVuYyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpICYmIHZhbHVlKCk7XG59LFxuICAgIF9jb21iaW5lRnVuYyA9IGZ1bmN0aW9uIF9jb21iaW5lRnVuYyhmMSwgZjIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0MSA9IF9jYWxsSWZGdW5jKGYxKSxcbiAgICAgICAgcmVzdWx0MiA9IF9jYWxsSWZGdW5jKGYyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfY2FsbElmRnVuYyhyZXN1bHQxKTtcblxuICAgICAgX2NhbGxJZkZ1bmMocmVzdWx0Mik7XG4gICAgfTtcbiAgfTtcbn0sXG4gICAgX2VuZEFuaW1hdGlvbiA9IGZ1bmN0aW9uIF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCByZXZlcnNlZCwgcGF1c2UpIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MocmV2ZXJzZWQgPyAwIDogMSkgJiYgcGF1c2UgJiYgYW5pbWF0aW9uLnBhdXNlKCk7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhzZWxmLCBmdW5jKSB7XG4gIGlmIChzZWxmLmVuYWJsZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gZnVuYyhzZWxmKTtcbiAgICByZXN1bHQgJiYgcmVzdWx0LnRvdGFsVGltZSAmJiAoc2VsZi5jYWxsYmFja0FuaW1hdGlvbiA9IHJlc3VsdCk7XG4gIH1cbn0sXG4gICAgX2FicyA9IE1hdGguYWJzLFxuICAgIF9zY3JvbGxMZWZ0ID0gXCJzY3JvbGxMZWZ0XCIsXG4gICAgX3Njcm9sbFRvcCA9IFwic2Nyb2xsVG9wXCIsXG4gICAgX2xlZnQgPSBcImxlZnRcIixcbiAgICBfdG9wID0gXCJ0b3BcIixcbiAgICBfcmlnaHQgPSBcInJpZ2h0XCIsXG4gICAgX2JvdHRvbSA9IFwiYm90dG9tXCIsXG4gICAgX3dpZHRoID0gXCJ3aWR0aFwiLFxuICAgIF9oZWlnaHQgPSBcImhlaWdodFwiLFxuICAgIF9SaWdodCA9IFwiUmlnaHRcIixcbiAgICBfTGVmdCA9IFwiTGVmdFwiLFxuICAgIF9Ub3AgPSBcIlRvcFwiLFxuICAgIF9Cb3R0b20gPSBcIkJvdHRvbVwiLFxuICAgIF9wYWRkaW5nID0gXCJwYWRkaW5nXCIsXG4gICAgX21hcmdpbiA9IFwibWFyZ2luXCIsXG4gICAgX1dpZHRoID0gXCJXaWR0aFwiLFxuICAgIF9IZWlnaHQgPSBcIkhlaWdodFwiLFxuICAgIF9weCA9IFwicHhcIixcbiAgICBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0sXG4gICAgX21ha2VQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiBfbWFrZVBvc2l0aW9uYWJsZShlbGVtZW50KSB7XG4gIC8vIGlmIHRoZSBlbGVtZW50IGFscmVhZHkgaGFzIHBvc2l0aW9uOiBhYnNvbHV0ZSBvciBmaXhlZCwgbGVhdmUgdGhhdCwgb3RoZXJ3aXNlIG1ha2UgaXQgcG9zaXRpb246IHJlbGF0aXZlXG4gIHZhciBwb3NpdGlvbiA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uO1xuXG4gIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgPyBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIjtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfZ2V0Qm91bmRzID0gZnVuY3Rpb24gX2dldEJvdW5kcyhlbGVtZW50LCB3aXRob3V0VHJhbnNmb3Jtcykge1xuICB2YXIgdHdlZW4gPSB3aXRob3V0VHJhbnNmb3JtcyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtfdHJhbnNmb3JtUHJvcF0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgZ3NhcC50byhlbGVtZW50LCB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHhQZXJjZW50OiAwLFxuICAgIHlQZXJjZW50OiAwLFxuICAgIHJvdGF0aW9uOiAwLFxuICAgIHJvdGF0aW9uWDogMCxcbiAgICByb3RhdGlvblk6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgc2tld1g6IDAsXG4gICAgc2tld1k6IDBcbiAgfSkucHJvZ3Jlc3MoMSksXG4gICAgICBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB0d2VlbiAmJiB0d2Vlbi5wcm9ncmVzcygwKS5raWxsKCk7XG4gIHJldHVybiBib3VuZHM7XG59LFxuICAgIF9nZXRTaXplID0gZnVuY3Rpb24gX2dldFNpemUoZWxlbWVudCwgX3JlZjMpIHtcbiAgdmFyIGQyID0gX3JlZjMuZDI7XG4gIHJldHVybiBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0gfHwgZWxlbWVudFtcImNsaWVudFwiICsgZDJdIHx8IDA7XG59LFxuICAgIF9nZXRMYWJlbFJhdGlvQXJyYXkgPSBmdW5jdGlvbiBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSB7XG4gIHZhciBhID0gW10sXG4gICAgICBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBkdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uKCksXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBhLnB1c2gobGFiZWxzW3BdIC8gZHVyYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59LFxuICAgIF9nZXRDbG9zZXN0TGFiZWwgPSBmdW5jdGlvbiBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGdzYXAudXRpbHMuc25hcChfZ2V0TGFiZWxSYXRpb0FycmF5KGFuaW1hdGlvbiksIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX3NuYXBEaXJlY3Rpb25hbCA9IGZ1bmN0aW9uIF9zbmFwRGlyZWN0aW9uYWwoc25hcEluY3JlbWVudE9yQXJyYXkpIHtcbiAgdmFyIHNuYXAgPSBnc2FwLnV0aWxzLnNuYXAoc25hcEluY3JlbWVudE9yQXJyYXkpLFxuICAgICAgYSA9IEFycmF5LmlzQXJyYXkoc25hcEluY3JlbWVudE9yQXJyYXkpICYmIHNuYXBJbmNyZW1lbnRPckFycmF5LnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICByZXR1cm4gYSA/IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgfVxuXG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuIHNuYXAodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB2YWx1ZSAtPSB0aHJlc2hvbGQ7IC8vIHRvIGF2b2lkIHJvdW5kaW5nIGVycm9ycy4gSWYgd2UncmUgdG9vIHN0cmljdCwgaXQgbWlnaHQgc25hcCBmb3J3YXJkLCB0aGVuIGltbWVkaWF0ZWx5IGFnYWluLCBhbmQgYWdhaW4uXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldID49IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFbaSAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpID0gYS5sZW5ndGg7XG4gICAgICB2YWx1ZSArPSB0aHJlc2hvbGQ7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGFbaV0gPD0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhWzBdO1xuICB9IDogZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICB9XG5cbiAgICB2YXIgc25hcHBlZCA9IHNuYXAodmFsdWUpO1xuICAgIHJldHVybiAhZGlyZWN0aW9uIHx8IE1hdGguYWJzKHNuYXBwZWQgLSB2YWx1ZSkgPCB0aHJlc2hvbGQgfHwgc25hcHBlZCAtIHZhbHVlIDwgMCA9PT0gZGlyZWN0aW9uIDwgMCA/IHNuYXBwZWQgOiBzbmFwKGRpcmVjdGlvbiA8IDAgPyB2YWx1ZSAtIHNuYXBJbmNyZW1lbnRPckFycmF5IDogdmFsdWUgKyBzbmFwSW5jcmVtZW50T3JBcnJheSk7XG4gIH07XG59LFxuICAgIF9nZXRMYWJlbEF0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsQXREaXJlY3Rpb24odGltZWxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSkodmFsdWUsIHN0LmRpcmVjdGlvbik7XG4gIH07XG59LFxuICAgIF9tdWx0aUxpc3RlbmVyID0gZnVuY3Rpb24gX211bHRpTGlzdGVuZXIoZnVuYywgZWxlbWVudCwgdHlwZXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0eXBlcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiBmdW5jKGVsZW1lbnQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgfSk7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBub25QYXNzaXZlLCBjYXB0dXJlKSB7XG4gIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgIHBhc3NpdmU6ICFub25QYXNzaXZlLFxuICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICB9KTtcbn0sXG4gICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xufSxcbiAgICBfd2hlZWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF93aGVlbExpc3RlbmVyKGZ1bmMsIGVsLCBzY3JvbGxGdW5jKSB7XG4gIHJldHVybiBzY3JvbGxGdW5jICYmIHNjcm9sbEZ1bmMud2hlZWxIYW5kbGVyICYmIGZ1bmMoZWwsIFwid2hlZWxcIiwgc2Nyb2xsRnVuYyk7XG59LFxuICAgIF9tYXJrZXJEZWZhdWx0cyA9IHtcbiAgc3RhcnRDb2xvcjogXCJncmVlblwiLFxuICBlbmRDb2xvcjogXCJyZWRcIixcbiAgaW5kZW50OiAwLFxuICBmb250U2l6ZTogXCIxNnB4XCIsXG4gIGZvbnRXZWlnaHQ6IFwibm9ybWFsXCJcbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICB0b2dnbGVBY3Rpb25zOiBcInBsYXlcIixcbiAgYW50aWNpcGF0ZVBpbjogMFxufSxcbiAgICBfa2V5d29yZHMgPSB7XG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgY2VudGVyOiAwLjUsXG4gIGJvdHRvbTogMSxcbiAgcmlnaHQ6IDFcbn0sXG4gICAgX29mZnNldFRvUHggPSBmdW5jdGlvbiBfb2Zmc2V0VG9QeCh2YWx1ZSwgc2l6ZSkge1xuICBpZiAoX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBlcUluZGV4ID0gdmFsdWUuaW5kZXhPZihcIj1cIiksXG4gICAgICAgIHJlbGF0aXZlID0gfmVxSW5kZXggPyArKHZhbHVlLmNoYXJBdChlcUluZGV4IC0gMSkgKyAxKSAqIHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKGVxSW5kZXggKyAxKSkgOiAwO1xuXG4gICAgaWYgKH5lcUluZGV4KSB7XG4gICAgICB2YWx1ZS5pbmRleE9mKFwiJVwiKSA+IGVxSW5kZXggJiYgKHJlbGF0aXZlICo9IHNpemUgLyAxMDApO1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMCwgZXFJbmRleCAtIDEpO1xuICAgIH1cblxuICAgIHZhbHVlID0gcmVsYXRpdmUgKyAodmFsdWUgaW4gX2tleXdvcmRzID8gX2tleXdvcmRzW3ZhbHVlXSAqIHNpemUgOiB+dmFsdWUuaW5kZXhPZihcIiVcIikgPyBwYXJzZUZsb2F0KHZhbHVlKSAqIHNpemUgLyAxMDAgOiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn0sXG4gICAgX2NyZWF0ZU1hcmtlciA9IGZ1bmN0aW9uIF9jcmVhdGVNYXJrZXIodHlwZSwgbmFtZSwgY29udGFpbmVyLCBkaXJlY3Rpb24sIF9yZWY0LCBvZmZzZXQsIG1hdGNoV2lkdGhFbCwgY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gIHZhciBzdGFydENvbG9yID0gX3JlZjQuc3RhcnRDb2xvcixcbiAgICAgIGVuZENvbG9yID0gX3JlZjQuZW5kQ29sb3IsXG4gICAgICBmb250U2l6ZSA9IF9yZWY0LmZvbnRTaXplLFxuICAgICAgaW5kZW50ID0gX3JlZjQuaW5kZW50LFxuICAgICAgZm9udFdlaWdodCA9IF9yZWY0LmZvbnRXZWlnaHQ7XG5cbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICB1c2VGaXhlZFBvc2l0aW9uID0gX2lzVmlld3BvcnQoY29udGFpbmVyKSB8fCBfZ2V0UHJveHlQcm9wKGNvbnRhaW5lciwgXCJwaW5UeXBlXCIpID09PSBcImZpeGVkXCIsXG4gICAgICBpc1Njcm9sbGVyID0gdHlwZS5pbmRleE9mKFwic2Nyb2xsZXJcIikgIT09IC0xLFxuICAgICAgcGFyZW50ID0gdXNlRml4ZWRQb3NpdGlvbiA/IF9ib2R5IDogY29udGFpbmVyLFxuICAgICAgaXNTdGFydCA9IHR5cGUuaW5kZXhPZihcInN0YXJ0XCIpICE9PSAtMSxcbiAgICAgIGNvbG9yID0gaXNTdGFydCA/IHN0YXJ0Q29sb3IgOiBlbmRDb2xvcixcbiAgICAgIGNzcyA9IFwiYm9yZGVyLWNvbG9yOlwiICsgY29sb3IgKyBcIjtmb250LXNpemU6XCIgKyBmb250U2l6ZSArIFwiO2NvbG9yOlwiICsgY29sb3IgKyBcIjtmb250LXdlaWdodDpcIiArIGZvbnRXZWlnaHQgKyBcIjtwb2ludGVyLWV2ZW50czpub25lO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LWZhbWlseTpzYW5zLXNlcmlmLEFyaWFsO3otaW5kZXg6MTAwMDtwYWRkaW5nOjRweCA4cHg7Ym9yZGVyLXdpZHRoOjA7Ym9yZGVyLXN0eWxlOnNvbGlkO1wiO1xuXG4gIGNzcyArPSBcInBvc2l0aW9uOlwiICsgKChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbikgJiYgdXNlRml4ZWRQb3NpdGlvbiA/IFwiZml4ZWQ7XCIgOiBcImFic29sdXRlO1wiKTtcbiAgKGlzU2Nyb2xsZXIgfHwgY29udGFpbmVyQW5pbWF0aW9uIHx8ICF1c2VGaXhlZFBvc2l0aW9uKSAmJiAoY3NzICs9IChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IF9yaWdodCA6IF9ib3R0b20pICsgXCI6XCIgKyAob2Zmc2V0ICsgcGFyc2VGbG9hdChpbmRlbnQpKSArIFwicHg7XCIpO1xuICBtYXRjaFdpZHRoRWwgJiYgKGNzcyArPSBcImJveC1zaXppbmc6Ym9yZGVyLWJveDt0ZXh0LWFsaWduOmxlZnQ7d2lkdGg6XCIgKyBtYXRjaFdpZHRoRWwub2Zmc2V0V2lkdGggKyBcInB4O1wiKTtcbiAgZS5faXNTdGFydCA9IGlzU3RhcnQ7XG4gIGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJnc2FwLW1hcmtlci1cIiArIHR5cGUgKyAobmFtZSA/IFwiIG1hcmtlci1cIiArIG5hbWUgOiBcIlwiKSk7XG4gIGUuc3R5bGUuY3NzVGV4dCA9IGNzcztcbiAgZS5pbm5lclRleHQgPSBuYW1lIHx8IG5hbWUgPT09IDAgPyB0eXBlICsgXCItXCIgKyBuYW1lIDogdHlwZTtcbiAgcGFyZW50LmNoaWxkcmVuWzBdID8gcGFyZW50Lmluc2VydEJlZm9yZShlLCBwYXJlbnQuY2hpbGRyZW5bMF0pIDogcGFyZW50LmFwcGVuZENoaWxkKGUpO1xuICBlLl9vZmZzZXQgPSBlW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gIF9wb3NpdGlvbk1hcmtlcihlLCAwLCBkaXJlY3Rpb24sIGlzU3RhcnQpO1xuXG4gIHJldHVybiBlO1xufSxcbiAgICBfcG9zaXRpb25NYXJrZXIgPSBmdW5jdGlvbiBfcG9zaXRpb25NYXJrZXIobWFya2VyLCBzdGFydCwgZGlyZWN0aW9uLCBmbGlwcGVkKSB7XG4gIHZhciB2YXJzID0ge1xuICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICB9LFxuICAgICAgc2lkZSA9IGRpcmVjdGlvbltmbGlwcGVkID8gXCJvczJcIiA6IFwicDJcIl0sXG4gICAgICBvcHBvc2l0ZVNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwicDJcIiA6IFwib3MyXCJdO1xuICBtYXJrZXIuX2lzRmxpcHBlZCA9IGZsaXBwZWQ7XG4gIHZhcnNbZGlyZWN0aW9uLmEgKyBcIlBlcmNlbnRcIl0gPSBmbGlwcGVkID8gLTEwMCA6IDA7XG4gIHZhcnNbZGlyZWN0aW9uLmFdID0gZmxpcHBlZCA/IFwiMXB4XCIgOiAwO1xuICB2YXJzW1wiYm9yZGVyXCIgKyBzaWRlICsgX1dpZHRoXSA9IDE7XG4gIHZhcnNbXCJib3JkZXJcIiArIG9wcG9zaXRlU2lkZSArIF9XaWR0aF0gPSAwO1xuICB2YXJzW2RpcmVjdGlvbi5wXSA9IHN0YXJ0ICsgXCJweFwiO1xuICBnc2FwLnNldChtYXJrZXIsIHZhcnMpO1xufSxcbiAgICBfdHJpZ2dlcnMgPSBbXSxcbiAgICBfaWRzID0ge30sXG4gICAgX3JhZklELFxuICAgIF9zeW5jID0gZnVuY3Rpb24gX3N5bmMoKSB7XG4gIHJldHVybiBfZ2V0VGltZSgpIC0gX2xhc3RTY3JvbGxUaW1lID4gMzQgJiYgKF9yYWZJRCB8fCAoX3JhZklEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF91cGRhdGVBbGwpKSk7XG59LFxuICAgIF9vblNjcm9sbCA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgLy8gcHJldmlvdXNseSwgd2UgdHJpZWQgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgYnkgYmF0Y2hpbmcvZGVmZXJyaW5nIHRvIHRoZSBuZXh0IHJlcXVlc3RBbmltYXRpb25GcmFtZSgpLCBidXQgZGlzY292ZXJlZCB0aGF0IFNhZmFyaSBoYXMgYSBmZXcgYnVncyB0aGF0IG1ha2UgdGhpcyB1bndvcmthYmxlIChlc3BlY2lhbGx5IG9uIGlPUykuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xNmM0MzViMTJlZjA5YzM4MTI1MjA0ODE4ZTdiNDVmYz9lZGl0b3JzPTAwMTAgYW5kIGh0dHBzOi8vY29kZXBlbi5pby9HcmVlblNvY2svcGVuL0pqT3hZcFEvM2RkNjVjY2VjNWE2MGYxZDg2MmMzNTVkODRkMTQ1NjI/ZWRpdG9ycz0wMDEwIGFuZCBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9FeGJyUE5hLzA4N2NlZjE5N2RjMzU0NDVhMDk1MWU4OTM1YzQxNTAzP2VkaXRvcnM9MDAxMFxuICBpZiAoIV9ub3JtYWxpemVyIHx8ICFfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX25vcm1hbGl6ZXIuc3RhcnRYID4gX2JvZHkuY2xpZW50V2lkdGgpIHtcbiAgICAvLyBpZiB0aGUgdXNlciBpcyBkcmFnZ2luZyB0aGUgc2Nyb2xsYmFyLCBhbGxvdyBpdC5cbiAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG5cbiAgICBpZiAoX25vcm1hbGl6ZXIpIHtcbiAgICAgIF9yYWZJRCB8fCAoX3JhZklEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF91cGRhdGVBbGwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3VwZGF0ZUFsbCgpOyAvLyBTYWZhcmkgaW4gcGFydGljdWxhciAob24gZGVza3RvcCkgTkVFRFMgdGhlIGltbWVkaWF0ZSB1cGRhdGUgcmF0aGVyIHRoYW4gd2FpdGluZyBmb3IgYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB3aGVyZWFzIGlPUyBzZWVtcyB0byBiZW5lZml0IGZyb20gd2FpdGluZyBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIHRpY2ssIGF0IGxlYXN0IHdoZW4gbm9ybWFsaXppbmcuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9xQllvenFPP2VkaXRvcnM9MDExMFxuXG4gICAgfVxuXG4gICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgIF9sYXN0U2Nyb2xsVGltZSA9IF9nZXRUaW1lKCk7XG4gIH1cbn0sXG4gICAgX3NldEJhc2VEaW1lbnNpb25zID0gZnVuY3Rpb24gX3NldEJhc2VEaW1lbnNpb25zKCkge1xuICBfYmFzZVNjcmVlbldpZHRoID0gX3dpbi5pbm5lcldpZHRoO1xuICBfYmFzZVNjcmVlbkhlaWdodCA9IF93aW4uaW5uZXJIZWlnaHQ7XG59LFxuICAgIF9vblJlc2l6ZSA9IGZ1bmN0aW9uIF9vblJlc2l6ZSgpIHtcbiAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAhX3JlZnJlc2hpbmcgJiYgIV9pZ25vcmVSZXNpemUgJiYgIV9kb2MuZnVsbHNjcmVlbkVsZW1lbnQgJiYgIV9kb2Mud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgJiYgKCFfaWdub3JlTW9iaWxlUmVzaXplIHx8IF9iYXNlU2NyZWVuV2lkdGggIT09IF93aW4uaW5uZXJXaWR0aCB8fCBNYXRoLmFicyhfd2luLmlubmVySGVpZ2h0IC0gX2Jhc2VTY3JlZW5IZWlnaHQpID4gX3dpbi5pbm5lckhlaWdodCAqIDAuMjUpICYmIF9yZXNpemVEZWxheS5yZXN0YXJ0KHRydWUpO1xufSxcbiAgICAvLyBpZ25vcmUgcmVzaXplcyB0cmlnZ2VyZWQgYnkgcmVmcmVzaCgpXG5fbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfc29mdFJlZnJlc2ggPSBmdW5jdGlvbiBfc29mdFJlZnJlc2goKSB7XG4gIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKSB8fCBfcmVmcmVzaEFsbCh0cnVlKTtcbn0sXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnNbdHlwZV0gJiYgX2xpc3RlbmVyc1t0eXBlXS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KSB8fCBfZW1wdHlBcnJheTtcbn0sXG4gICAgX3NhdmVkU3R5bGVzID0gW10sXG4gICAgLy8gd2hlbiBTY3JvbGxUcmlnZ2VyLnNhdmVTdHlsZXMoKSBpcyBjYWxsZWQsIHRoZSBpbmxpbmUgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiB0aGlzIEFycmF5IGluIGEgc2VxdWVudGlhbCBmb3JtYXQgbGlrZSBbZWxlbWVudCwgY3NzVGV4dCwgZ3NDYWNoZSwgbWVkaWFdLiBUaGlzIGtlZXBzIGl0IHZlcnkgbWVtb3J5LWVmZmljaWVudCBhbmQgZmFzdCB0byBpdGVyYXRlIHRocm91Z2guXG5fcmV2ZXJ0UmVjb3JkZWQgPSBmdW5jdGlvbiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBfc2F2ZWRTdHlsZXMubGVuZ3RoOyBpICs9IDUpIHtcbiAgICBpZiAoIW1lZGlhIHx8IF9zYXZlZFN0eWxlc1tpICsgNF0gJiYgX3NhdmVkU3R5bGVzW2kgKyA0XS5xdWVyeSA9PT0gbWVkaWEpIHtcbiAgICAgIF9zYXZlZFN0eWxlc1tpXS5zdHlsZS5jc3NUZXh0ID0gX3NhdmVkU3R5bGVzW2kgKyAxXTtcbiAgICAgIF9zYXZlZFN0eWxlc1tpXS5nZXRCQm94ICYmIF9zYXZlZFN0eWxlc1tpXS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgX3NhdmVkU3R5bGVzW2kgKyAyXSB8fCBcIlwiKTtcbiAgICAgIF9zYXZlZFN0eWxlc1tpICsgM10udW5jYWNoZSA9IDE7XG4gICAgfVxuICB9XG59LFxuICAgIF9yZXZlcnRBbGwgPSBmdW5jdGlvbiBfcmV2ZXJ0QWxsKGtpbGwsIG1lZGlhKSB7XG4gIHZhciB0cmlnZ2VyO1xuXG4gIGZvciAoX2kgPSAwOyBfaSA8IF90cmlnZ2Vycy5sZW5ndGg7IF9pKyspIHtcbiAgICB0cmlnZ2VyID0gX3RyaWdnZXJzW19pXTtcblxuICAgIGlmICh0cmlnZ2VyICYmICghbWVkaWEgfHwgdHJpZ2dlci5fY3R4ID09PSBtZWRpYSkpIHtcbiAgICAgIGlmIChraWxsKSB7XG4gICAgICAgIHRyaWdnZXIua2lsbCgxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1lZGlhICYmIF9yZXZlcnRSZWNvcmRlZChtZWRpYSk7XG4gIG1lZGlhIHx8IF9kaXNwYXRjaChcInJldmVydFwiKTtcbn0sXG4gICAgX2NsZWFyU2Nyb2xsTWVtb3J5ID0gZnVuY3Rpb24gX2NsZWFyU2Nyb2xsTWVtb3J5KHNjcm9sbFJlc3RvcmF0aW9uLCBmb3JjZSkge1xuICAvLyB6ZXJvLW91dCBhbGwgdGhlIHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbnMuIERvbid0IHVzZSBfdHJpZ2dlcnMgYmVjYXVzZSBpZiwgZm9yIGV4YW1wbGUsIC5tYXRjaE1lZGlhKCkgaXMgdXNlZCB0byBjcmVhdGUgc29tZSBTY3JvbGxUcmlnZ2VycyBhbmQgdGhlbiB0aGUgdXNlciByZXNpemVzIGFuZCBpdCByZW1vdmVzIEFMTCBTY3JvbGxUcmlnZ2VycywgYW5kIHRoZW4gZ28gYmFjayB0byBhIHNpemUgd2hlcmUgdGhlcmUgYXJlIFNjcm9sbFRyaWdnZXJzLCBpdCB3b3VsZCBoYXZlIGtlcHQgdGhlIHBvc2l0aW9uKHMpIHNhdmVkIGZyb20gdGhlIGluaXRpYWwgc3RhdGUuXG4gIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgKGZvcmNlIHx8ICFfcmVmcmVzaGluZ0FsbCkgJiYgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiBvYmouY2FjaGVJRCsrICYmIChvYmoucmVjID0gMCk7XG4gIH0pO1xuICBfaXNTdHJpbmcoc2Nyb2xsUmVzdG9yYXRpb24pICYmIChfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBfc2Nyb2xsUmVzdG9yYXRpb24gPSBzY3JvbGxSZXN0b3JhdGlvbik7XG59LFxuICAgIF9yZWZyZXNoaW5nQWxsLFxuICAgIF9yZWZyZXNoSUQgPSAwLFxuICAgIF9xdWV1ZVJlZnJlc2hJRCxcbiAgICBfcXVldWVSZWZyZXNoQWxsID0gZnVuY3Rpb24gX3F1ZXVlUmVmcmVzaEFsbCgpIHtcbiAgLy8gd2UgZG9uJ3Qgd2FudCB0byBjYWxsIF9yZWZyZXNoQWxsKCkgZXZlcnkgdGltZSB3ZSBjcmVhdGUgYSBuZXcgU2Nyb2xsVHJpZ2dlciAoZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMpIC0gaXQncyBiZXR0ZXIgdG8gYmF0Y2ggdGhlbS4gU29tZSBmcmFtZXdvcmtzIGR5bmFtaWNhbGx5IGxvYWQgY29udGVudCBhbmQgd2UgY2FuJ3QgcmVseSBvbiB0aGUgd2luZG93J3MgXCJsb2FkXCIgb3IgXCJET01Db250ZW50TG9hZGVkXCIgZXZlbnRzIHRvIHRyaWdnZXIgaXQuXG4gIGlmIChfcXVldWVSZWZyZXNoSUQgIT09IF9yZWZyZXNoSUQpIHtcbiAgICB2YXIgaWQgPSBfcXVldWVSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaWQgPT09IF9yZWZyZXNoSUQgJiYgX3JlZnJlc2hBbGwodHJ1ZSk7XG4gICAgfSk7XG4gIH1cbn0sXG4gICAgX3JlZnJlc2hBbGwgPSBmdW5jdGlvbiBfcmVmcmVzaEFsbChmb3JjZSwgc2tpcFJldmVydCkge1xuICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFmb3JjZSkge1xuICAgIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyLmlzUmVmcmVzaGluZyA9IHRydWU7XG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiBvYmouY2FjaGVJRCsrICYmIChvYmoucmVjID0gb2JqKCkpO1xuICB9KTsgLy8gZm9yY2UgdGhlIGNsZWFyaW5nIG9mIHRoZSBjYWNoZSBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgdGFrZSBhIGxpdHRsZSB3aGlsZSB0byBkaXNwYXRjaCB0aGUgXCJzY3JvbGxcIiBldmVudCBhbmQgdGhlIHVzZXIgbWF5IGhhdmUgY2hhbmdlZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFuZCB0aGVuIGNhbGxlZCBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKSByaWdodCBhd2F5XG5cblxuICB2YXIgcmVmcmVzaEluaXRzID0gX2Rpc3BhdGNoKFwicmVmcmVzaEluaXRcIik7XG5cbiAgX3NvcnQgJiYgU2Nyb2xsVHJpZ2dlci5zb3J0KCk7XG4gIHNraXBSZXZlcnQgfHwgX3JldmVydEFsbCgpO1xuXG4gIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIG9iai5zbW9vdGggJiYgKG9iai50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIik7IC8vIHNtb290aCBzY3JvbGxpbmcgaW50ZXJmZXJlc1xuXG4gICAgICBvYmooMCk7XG4gICAgfVxuICB9KTtcblxuICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnJlZnJlc2goKTtcbiAgfSk7IC8vIGRvbid0IGxvb3Agd2l0aCBfaSBiZWNhdXNlIGR1cmluZyBhIHJlZnJlc2goKSBzb21lb25lIGNvdWxkIGNhbGwgU2Nyb2xsVHJpZ2dlci51cGRhdGUoKSB3aGljaCB3b3VsZCBpdGVyYXRlIHRocm91Z2ggX2kgcmVzdWx0aW5nIGluIGEgc2tpcC5cblxuXG4gIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgLy8gbmVzdGVkIHBpbnMgKHBpbm5lZENvbnRhaW5lcikgd2l0aCBwaW5TcGFjaW5nIG1heSBleHBhbmQgdGhlIGNvbnRhaW5lciwgc28gd2UgbXVzdCBhY2NvbW1vZGF0ZSB0aGF0IGhlcmUuXG4gICAgaWYgKHQuX3N1YlBpbk9mZnNldCAmJiB0LnBpbikge1xuICAgICAgdmFyIHByb3AgPSB0LnZhcnMuaG9yaXpvbnRhbCA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCIsXG4gICAgICAgICAgb3JpZ2luYWwgPSB0LnBpbltwcm9wXTtcbiAgICAgIHQucmV2ZXJ0KHRydWUsIDEpO1xuICAgICAgdC5hZGp1c3RQaW5TcGFjaW5nKHQucGluW3Byb3BdIC0gb3JpZ2luYWwpO1xuICAgICAgdC5yZXZlcnQoZmFsc2UsIDEpO1xuICAgIH1cbiAgfSk7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC52YXJzLmVuZCA9PT0gXCJtYXhcIiAmJiB0LnNldFBvc2l0aW9ucyh0LnN0YXJ0LCBNYXRoLm1heCh0LnN0YXJ0ICsgMSwgX21heFNjcm9sbCh0LnNjcm9sbGVyLCB0Ll9kaXIpKSk7XG4gIH0pOyAvLyB0aGUgc2Nyb2xsZXIncyBtYXggc2Nyb2xsIHBvc2l0aW9uIG1heSBjaGFuZ2UgYWZ0ZXIgYWxsIHRoZSBTY3JvbGxUcmlnZ2VycyByZWZyZXNoZWQgKGxpa2UgcGlubmluZyBjb3VsZCBwdXNoIGl0IGRvd24pLCBzbyB3ZSBuZWVkIHRvIGxvb3AgYmFjayBhbmQgY29ycmVjdCBhbnkgd2l0aCBlbmQ6IFwibWF4XCIuXG5cblxuICByZWZyZXNoSW5pdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQucmVuZGVyICYmIHJlc3VsdC5yZW5kZXIoLTEpO1xuICB9KTsgLy8gaWYgdGhlIG9uUmVmcmVzaEluaXQoKSByZXR1cm5zIGFuIGFuaW1hdGlvbiAodHlwaWNhbGx5IGEgZ3NhcC5zZXQoKSksIHJldmVydCBpdC4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIHB1dCB0aGluZ3MgaW4gYSBjZXJ0YWluIHNwb3QgYmVmb3JlIHJlZnJlc2hpbmcgZm9yIG1lYXN1cmVtZW50IHB1cnBvc2VzLCBhbmQgdGhlbiBwdXQgdGhpbmdzIGJhY2suXG5cbiAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgb2JqLnNtb290aCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb2JqLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gICAgICB9KTtcbiAgICAgIG9iai5yZWMgJiYgb2JqKG9iai5yZWMpO1xuICAgIH1cbiAgfSk7XG5cbiAgX2NsZWFyU2Nyb2xsTWVtb3J5KF9zY3JvbGxSZXN0b3JhdGlvbiwgMSk7XG5cbiAgX3Jlc2l6ZURlbGF5LnBhdXNlKCk7XG5cbiAgX3JlZnJlc2hJRCsrO1xuXG4gIF91cGRhdGVBbGwoMik7XG5cbiAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24odC52YXJzLm9uUmVmcmVzaCkgJiYgdC52YXJzLm9uUmVmcmVzaCh0KTtcbiAgfSk7XG5cbiAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyLmlzUmVmcmVzaGluZyA9IGZhbHNlO1xuXG4gIF9kaXNwYXRjaChcInJlZnJlc2hcIik7XG59LFxuICAgIF9sYXN0U2Nyb2xsID0gMCxcbiAgICBfZGlyZWN0aW9uID0gMSxcbiAgICBfcHJpbWFyeSxcbiAgICBfdXBkYXRlQWxsID0gZnVuY3Rpb24gX3VwZGF0ZUFsbChmb3JjZSkge1xuICBpZiAoIV9yZWZyZXNoaW5nQWxsIHx8IGZvcmNlID09PSAyKSB7XG4gICAgU2Nyb2xsVHJpZ2dlci5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICBfcHJpbWFyeSAmJiBfcHJpbWFyeS51cGRhdGUoMCk7IC8vIFNjcm9sbFNtb290aGVyIHVzZXMgcmVmcmVzaFByaW9yaXR5IC05OTk5IHRvIGJlY29tZSB0aGUgcHJpbWFyeSB0aGF0IGdldHMgdXBkYXRlZCBiZWZvcmUgYWxsIG90aGVycyBiZWNhdXNlIGl0IGFmZmVjdHMgdGhlIHNjcm9sbCBwb3NpdGlvbi5cblxuICAgIHZhciBsID0gX3RyaWdnZXJzLmxlbmd0aCxcbiAgICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICAgIHJlY29yZFZlbG9jaXR5ID0gdGltZSAtIF90aW1lMSA+PSA1MCxcbiAgICAgICAgc2Nyb2xsID0gbCAmJiBfdHJpZ2dlcnNbMF0uc2Nyb2xsKCk7XG5cbiAgICBfZGlyZWN0aW9uID0gX2xhc3RTY3JvbGwgPiBzY3JvbGwgPyAtMSA6IDE7XG4gICAgX2xhc3RTY3JvbGwgPSBzY3JvbGw7XG5cbiAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgIGlmIChfbGFzdFNjcm9sbFRpbWUgJiYgIV9wb2ludGVySXNEb3duICYmIHRpbWUgLSBfbGFzdFNjcm9sbFRpbWUgPiAyMDApIHtcbiAgICAgICAgX2xhc3RTY3JvbGxUaW1lID0gMDtcblxuICAgICAgICBfZGlzcGF0Y2goXCJzY3JvbGxFbmRcIik7XG4gICAgICB9XG5cbiAgICAgIF90aW1lMiA9IF90aW1lMTtcbiAgICAgIF90aW1lMSA9IHRpbWU7XG4gICAgfVxuXG4gICAgaWYgKF9kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBfaSA9IGw7XG5cbiAgICAgIHdoaWxlIChfaS0tID4gMCkge1xuICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgIH1cblxuICAgICAgX2RpcmVjdGlvbiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IGw7IF9pKyspIHtcbiAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgU2Nyb2xsVHJpZ2dlci5pc1VwZGF0aW5nID0gZmFsc2U7XG4gIH1cblxuICBfcmFmSUQgPSAwO1xufSxcbiAgICBfcHJvcE5hbWVzVG9Db3B5ID0gW19sZWZ0LCBfdG9wLCBfYm90dG9tLCBfcmlnaHQsIF9tYXJnaW4gKyBfQm90dG9tLCBfbWFyZ2luICsgX1JpZ2h0LCBfbWFyZ2luICsgX1RvcCwgX21hcmdpbiArIF9MZWZ0LCBcImRpc3BsYXlcIiwgXCJmbGV4U2hyaW5rXCIsIFwiZmxvYXRcIiwgXCJ6SW5kZXhcIiwgXCJncmlkQ29sdW1uU3RhcnRcIiwgXCJncmlkQ29sdW1uRW5kXCIsIFwiZ3JpZFJvd1N0YXJ0XCIsIFwiZ3JpZFJvd0VuZFwiLCBcImdyaWRBcmVhXCIsIFwianVzdGlmeVNlbGZcIiwgXCJhbGlnblNlbGZcIiwgXCJwbGFjZVNlbGZcIiwgXCJvcmRlclwiXSxcbiAgICBfc3RhdGVQcm9wcyA9IF9wcm9wTmFtZXNUb0NvcHkuY29uY2F0KFtfd2lkdGgsIF9oZWlnaHQsIFwiYm94U2l6aW5nXCIsIFwibWF4XCIgKyBfV2lkdGgsIFwibWF4XCIgKyBfSGVpZ2h0LCBcInBvc2l0aW9uXCIsIF9tYXJnaW4sIF9wYWRkaW5nLCBfcGFkZGluZyArIF9Ub3AsIF9wYWRkaW5nICsgX1JpZ2h0LCBfcGFkZGluZyArIF9Cb3R0b20sIF9wYWRkaW5nICsgX0xlZnRdKSxcbiAgICBfc3dhcFBpbk91dCA9IGZ1bmN0aW9uIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBzdGF0ZSkge1xuICBfc2V0U3RhdGUoc3RhdGUpO1xuXG4gIHZhciBjYWNoZSA9IHBpbi5fZ3NhcDtcblxuICBpZiAoY2FjaGUuc3BhY2VySXNOYXRpdmUpIHtcbiAgICBfc2V0U3RhdGUoY2FjaGUuc3BhY2VyU3RhdGUpO1xuICB9IGVsc2UgaWYgKHBpbi5fZ3NhcC5zd2FwcGVkSW4pIHtcbiAgICB2YXIgcGFyZW50ID0gc3BhY2VyLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHBpbiwgc3BhY2VyKTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChzcGFjZXIpO1xuICAgIH1cbiAgfVxuXG4gIHBpbi5fZ3NhcC5zd2FwcGVkSW4gPSBmYWxzZTtcbn0sXG4gICAgX3N3YXBQaW5JbiA9IGZ1bmN0aW9uIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzLCBzcGFjZXJTdGF0ZSkge1xuICBpZiAoIXBpbi5fZ3NhcC5zd2FwcGVkSW4pIHtcbiAgICB2YXIgaSA9IF9wcm9wTmFtZXNUb0NvcHkubGVuZ3RoLFxuICAgICAgICBzcGFjZXJTdHlsZSA9IHNwYWNlci5zdHlsZSxcbiAgICAgICAgcGluU3R5bGUgPSBwaW4uc3R5bGUsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwID0gX3Byb3BOYW1lc1RvQ29weVtpXTtcbiAgICAgIHNwYWNlclN0eWxlW3BdID0gY3NbcF07XG4gICAgfVxuXG4gICAgc3BhY2VyU3R5bGUucG9zaXRpb24gPSBjcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiID8gXCJhYnNvbHV0ZVwiIDogXCJyZWxhdGl2ZVwiO1xuICAgIGNzLmRpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgKHNwYWNlclN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKTtcbiAgICBwaW5TdHlsZVtfYm90dG9tXSA9IHBpblN0eWxlW19yaWdodF0gPSBcImF1dG9cIjtcbiAgICBzcGFjZXJTdHlsZS5mbGV4QmFzaXMgPSBjcy5mbGV4QmFzaXMgfHwgXCJhdXRvXCI7XG4gICAgc3BhY2VyU3R5bGUub3ZlcmZsb3cgPSBcInZpc2libGVcIjtcbiAgICBzcGFjZXJTdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBzcGFjZXJTdHlsZVtfd2lkdGhdID0gX2dldFNpemUocGluLCBfaG9yaXpvbnRhbCkgKyBfcHg7XG4gICAgc3BhY2VyU3R5bGVbX2hlaWdodF0gPSBfZ2V0U2l6ZShwaW4sIF92ZXJ0aWNhbCkgKyBfcHg7XG4gICAgc3BhY2VyU3R5bGVbX3BhZGRpbmddID0gcGluU3R5bGVbX21hcmdpbl0gPSBwaW5TdHlsZVtfdG9wXSA9IHBpblN0eWxlW19sZWZ0XSA9IFwiMFwiO1xuXG4gICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgIHBpblN0eWxlW193aWR0aF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX1dpZHRoXSA9IGNzW193aWR0aF07XG4gICAgcGluU3R5bGVbX2hlaWdodF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX0hlaWdodF0gPSBjc1tfaGVpZ2h0XTtcbiAgICBwaW5TdHlsZVtfcGFkZGluZ10gPSBjc1tfcGFkZGluZ107XG5cbiAgICBpZiAocGluLnBhcmVudE5vZGUgIT09IHNwYWNlcikge1xuICAgICAgcGluLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNwYWNlciwgcGluKTtcbiAgICAgIHNwYWNlci5hcHBlbmRDaGlsZChwaW4pO1xuICAgIH1cblxuICAgIHBpbi5fZ3NhcC5zd2FwcGVkSW4gPSB0cnVlO1xuICB9XG59LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfc2V0U3RhdGUgPSBmdW5jdGlvbiBfc2V0U3RhdGUoc3RhdGUpIHtcbiAgaWYgKHN0YXRlKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUudC5zdHlsZSxcbiAgICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHAsXG4gICAgICAgIHZhbHVlO1xuICAgIChzdGF0ZS50Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZShzdGF0ZS50KSkudW5jYWNoZSA9IDE7IC8vIG90aGVyd2lzZSB0cmFuc2Zvcm1zIG1heSBiZSBvZmZcblxuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICB2YWx1ZSA9IHN0YXRlW2kgKyAxXTtcbiAgICAgIHAgPSBzdGF0ZVtpXTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3BdID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlW3BdKSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHAucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdGF0ZSA9IGZ1bmN0aW9uIF9nZXRTdGF0ZShlbGVtZW50KSB7XG4gIC8vIHJldHVybnMgYW4gQXJyYXkgd2l0aCBhbHRlcm5hdGluZyB2YWx1ZXMgbGlrZSBbcHJvcGVydHksIHZhbHVlLCBwcm9wZXJ0eSwgdmFsdWVdIGFuZCBhIFwidFwiIHByb3BlcnR5IHBvaW50aW5nIHRvIHRoZSB0YXJnZXQgKGVsZW1lbnQpLiBNYWtlcyBpdCBmYXN0IGFuZCBjaGVhcC5cbiAgdmFyIGwgPSBfc3RhdGVQcm9wcy5sZW5ndGgsXG4gICAgICBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICBzdGF0ZSA9IFtdLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBzdGF0ZS5wdXNoKF9zdGF0ZVByb3BzW2ldLCBzdHlsZVtfc3RhdGVQcm9wc1tpXV0pO1xuICB9XG5cbiAgc3RhdGUudCA9IGVsZW1lbnQ7XG4gIHJldHVybiBzdGF0ZTtcbn0sXG4gICAgX2NvcHlTdGF0ZSA9IGZ1bmN0aW9uIF9jb3B5U3RhdGUoc3RhdGUsIG92ZXJyaWRlLCBvbWl0T2Zmc2V0cykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgaSA9IG9taXRPZmZzZXRzID8gOCA6IDAsXG4gICAgICAvLyBza2lwIHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSBpZiBvbWl0T2Zmc2V0cyBpcyB0cnVlXG4gIHA7XG5cbiAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICBwID0gc3RhdGVbaV07XG4gICAgcmVzdWx0LnB1c2gocCwgcCBpbiBvdmVycmlkZSA/IG92ZXJyaWRlW3BdIDogc3RhdGVbaSArIDFdKTtcbiAgfVxuXG4gIHJlc3VsdC50ID0gc3RhdGUudDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX3dpbk9mZnNldHMgPSB7XG4gIGxlZnQ6IDAsXG4gIHRvcDogMFxufSxcbiAgICAvLyAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgKD8pIEFsbG93IHVzZXJzIHRvIGNhbGN1bGF0ZSB3aGVyZSBhIHRyaWdnZXIgaGl0cyAoc2Nyb2xsIHBvc2l0aW9uKSBsaWtlIGdldFNjcm9sbFBvc2l0aW9uKFwiI2lkXCIsIFwidG9wIGJvdHRvbVwiKVxuLy8gX2dldFNjcm9sbFBvc2l0aW9uID0gKHRyaWdnZXIsIHBvc2l0aW9uLCB7c2Nyb2xsZXIsIGNvbnRhaW5lckFuaW1hdGlvbiwgaG9yaXpvbnRhbH0pID0+IHtcbi8vIFx0c2Nyb2xsZXIgPSBfZ2V0VGFyZ2V0KHNjcm9sbGVyIHx8IF93aW4pO1xuLy8gXHRsZXQgZGlyZWN0aW9uID0gaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsLFxuLy8gXHRcdGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydChzY3JvbGxlcik7XG4vLyBcdF9nZXRTaXplRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCwgZGlyZWN0aW9uKTtcbi8vIFx0cmV0dXJuIF9wYXJzZVBvc2l0aW9uKHBvc2l0aW9uLCBfZ2V0VGFyZ2V0KHRyaWdnZXIpLCBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbikoKSwgZGlyZWN0aW9uLCBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSgpLCAwLCAwLCAwLCBfZ2V0T2Zmc2V0c0Z1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQpKCksIGlzVmlld3BvcnQgPyAwIDogcGFyc2VGbG9hdChfZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxlcilbXCJib3JkZXJcIiArIGRpcmVjdGlvbi5wMiArIF9XaWR0aF0pIHx8IDAsIDAsIGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpIDogX21heFNjcm9sbChzY3JvbGxlciksIGNvbnRhaW5lckFuaW1hdGlvbik7XG4vLyB9LFxuX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbih2YWx1ZSwgdHJpZ2dlciwgc2Nyb2xsZXJTaXplLCBkaXJlY3Rpb24sIHNjcm9sbCwgbWFya2VyLCBtYXJrZXJTY3JvbGxlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBzY3JvbGxlck1heCwgY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gIF9pc0Z1bmN0aW9uKHZhbHVlKSAmJiAodmFsdWUgPSB2YWx1ZShzZWxmKSk7XG5cbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUuc3Vic3RyKDAsIDMpID09PSBcIm1heFwiKSB7XG4gICAgdmFsdWUgPSBzY3JvbGxlck1heCArICh2YWx1ZS5jaGFyQXQoNCkgPT09IFwiPVwiID8gX29mZnNldFRvUHgoXCIwXCIgKyB2YWx1ZS5zdWJzdHIoMyksIHNjcm9sbGVyU2l6ZSkgOiAwKTtcbiAgfVxuXG4gIHZhciB0aW1lID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLnRpbWUoKSA6IDAsXG4gICAgICBwMSxcbiAgICAgIHAyLFxuICAgICAgZWxlbWVudDtcbiAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKDApO1xuXG4gIGlmICghX2lzTnVtYmVyKHZhbHVlKSkge1xuICAgIF9pc0Z1bmN0aW9uKHRyaWdnZXIpICYmICh0cmlnZ2VyID0gdHJpZ2dlcihzZWxmKSk7XG4gICAgdmFyIG9mZnNldHMgPSAodmFsdWUgfHwgXCIwXCIpLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgYm91bmRzLFxuICAgICAgICBsb2NhbE9mZnNldCxcbiAgICAgICAgZ2xvYmFsT2Zmc2V0LFxuICAgICAgICBkaXNwbGF5O1xuICAgIGVsZW1lbnQgPSBfZ2V0VGFyZ2V0KHRyaWdnZXIpIHx8IF9ib2R5O1xuICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoZWxlbWVudCkgfHwge307XG5cbiAgICBpZiAoKCFib3VuZHMgfHwgIWJvdW5kcy5sZWZ0ICYmICFib3VuZHMudG9wKSAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgLy8gaWYgZGlzcGxheSBpcyBcIm5vbmVcIiwgaXQgd29uJ3QgcmVwb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHByb3Blcmx5XG4gICAgICBkaXNwbGF5ID0gZWxlbWVudC5zdHlsZS5kaXNwbGF5O1xuICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICAgIGRpc3BsYXkgPyBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5IDogZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImRpc3BsYXlcIik7XG4gICAgfVxuXG4gICAgbG9jYWxPZmZzZXQgPSBfb2Zmc2V0VG9QeChvZmZzZXRzWzBdLCBib3VuZHNbZGlyZWN0aW9uLmRdKTtcbiAgICBnbG9iYWxPZmZzZXQgPSBfb2Zmc2V0VG9QeChvZmZzZXRzWzFdIHx8IFwiMFwiLCBzY3JvbGxlclNpemUpO1xuICAgIHZhbHVlID0gYm91bmRzW2RpcmVjdGlvbi5wXSAtIHNjcm9sbGVyQm91bmRzW2RpcmVjdGlvbi5wXSAtIGJvcmRlcldpZHRoICsgbG9jYWxPZmZzZXQgKyBzY3JvbGwgLSBnbG9iYWxPZmZzZXQ7XG4gICAgbWFya2VyU2Nyb2xsZXIgJiYgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBnbG9iYWxPZmZzZXQsIGRpcmVjdGlvbiwgc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0IDwgMjAgfHwgbWFya2VyU2Nyb2xsZXIuX2lzU3RhcnQgJiYgZ2xvYmFsT2Zmc2V0ID4gMjApO1xuICAgIHNjcm9sbGVyU2l6ZSAtPSBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQ7IC8vIGFkanVzdCBmb3IgdGhlIG1hcmtlclxuICB9IGVsc2UgaWYgKG1hcmtlclNjcm9sbGVyKSB7XG4gICAgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgdHJ1ZSk7XG4gIH1cblxuICBpZiAobWFya2VyKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gdmFsdWUgKyBzY3JvbGxlclNpemUsXG4gICAgICAgIGlzU3RhcnQgPSBtYXJrZXIuX2lzU3RhcnQ7XG4gICAgcDEgPSBcInNjcm9sbFwiICsgZGlyZWN0aW9uLmQyO1xuXG4gICAgX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgcG9zaXRpb24sIGRpcmVjdGlvbiwgaXNTdGFydCAmJiBwb3NpdGlvbiA+IDIwIHx8ICFpc1N0YXJ0ICYmICh1c2VGaXhlZFBvc2l0aW9uID8gTWF0aC5tYXgoX2JvZHlbcDFdLCBfZG9jRWxbcDFdKSA6IG1hcmtlci5wYXJlbnROb2RlW3AxXSkgPD0gcG9zaXRpb24gKyAxKTtcblxuICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICBzY3JvbGxlckJvdW5kcyA9IF9nZXRCb3VuZHMobWFya2VyU2Nyb2xsZXIpO1xuICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiAobWFya2VyLnN0eWxlW2RpcmVjdGlvbi5vcC5wXSA9IHNjcm9sbGVyQm91bmRzW2RpcmVjdGlvbi5vcC5wXSAtIGRpcmVjdGlvbi5vcC5tIC0gbWFya2VyLl9vZmZzZXQgKyBfcHgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgZWxlbWVudCkge1xuICAgIHAxID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICBjb250YWluZXJBbmltYXRpb24uc2VlayhzY3JvbGxlck1heCk7XG4gICAgcDIgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ID0gcDFbZGlyZWN0aW9uLnBdIC0gcDJbZGlyZWN0aW9uLnBdO1xuICAgIHZhbHVlID0gdmFsdWUgLyBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCAqIHNjcm9sbGVyTWF4O1xuICB9XG5cbiAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHRpbWUpO1xuICByZXR1cm4gY29udGFpbmVyQW5pbWF0aW9uID8gdmFsdWUgOiBNYXRoLnJvdW5kKHZhbHVlKTtcbn0sXG4gICAgX3ByZWZpeEV4cCA9IC8od2Via2l0fG1venxsZW5ndGh8Y3NzVGV4dHxpbnNldCkvaSxcbiAgICBfcmVwYXJlbnQgPSBmdW5jdGlvbiBfcmVwYXJlbnQoZWxlbWVudCwgcGFyZW50LCB0b3AsIGxlZnQpIHtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSB7XG4gICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgICAgcCxcbiAgICAgICAgY3M7XG5cbiAgICBpZiAocGFyZW50ID09PSBfYm9keSkge1xuICAgICAgZWxlbWVudC5fc3RPcmlnID0gc3R5bGUuY3NzVGV4dDsgLy8gcmVjb3JkIG9yaWdpbmFsIGlubGluZSBzdHlsZXMgc28gd2UgY2FuIHJldmVydCB0aGVtIGxhdGVyXG5cbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICAgIGZvciAocCBpbiBjcykge1xuICAgICAgICAvLyBtdXN0IGNvcHkgYWxsIHJlbGV2YW50IHN0eWxlcyB0byBlbnN1cmUgdGhhdCBub3RoaW5nIGNoYW5nZXMgdmlzdWFsbHkgd2hlbiB3ZSByZXBhcmVudCB0byB0aGUgPGJvZHk+LiBTa2lwIHRoZSB2ZW5kb3IgcHJlZml4ZWQgb25lcy5cbiAgICAgICAgaWYgKCErcCAmJiAhX3ByZWZpeEV4cC50ZXN0KHApICYmIGNzW3BdICYmIHR5cGVvZiBzdHlsZVtwXSA9PT0gXCJzdHJpbmdcIiAmJiBwICE9PSBcIjBcIikge1xuICAgICAgICAgIHN0eWxlW3BdID0gY3NbcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3R5bGUudG9wID0gdG9wO1xuICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmNzc1RleHQgPSBlbGVtZW50Ll9zdE9yaWc7XG4gICAgfVxuXG4gICAgZ3NhcC5jb3JlLmdldENhY2hlKGVsZW1lbnQpLnVuY2FjaGUgPSAxO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfVxufSxcbiAgICAvLyBfbWVyZ2VBbmltYXRpb25zID0gYW5pbWF0aW9ucyA9PiB7XG4vLyBcdGxldCB0bCA9IGdzYXAudGltZWxpbmUoe3Ntb290aENoaWxkVGltaW5nOiB0cnVlfSkuc3RhcnRUaW1lKE1hdGgubWluKC4uLmFuaW1hdGlvbnMubWFwKGEgPT4gYS5nbG9iYWxUaW1lKDApKSkpO1xuLy8gXHRhbmltYXRpb25zLmZvckVhY2goYSA9PiB7bGV0IHRpbWUgPSBhLnRvdGFsVGltZSgpOyB0bC5hZGQoYSk7IGEudG90YWxUaW1lKHRpbWUpOyB9KTtcbi8vIFx0dGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBmYWxzZTtcbi8vIFx0cmV0dXJuIHRsO1xuLy8gfSxcbi8vIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHR3ZWVuIHRoZSBzY3JvbGwgcG9zaXRpb24gaW4gdGhlIGRpcmVjdGlvbiBwcm92aWRlZCwgYW5kIHdoZW4gZG9pbmcgc28gaXQnbGwgYWRkIGEgLnR3ZWVuIHByb3BlcnR5IHRvIHRoZSBGVU5DVElPTiBpdHNlbGYsIGFuZCByZW1vdmUgaXQgd2hlbiB0aGUgdHdlZW4gY29tcGxldGVzIG9yIGdldHMga2lsbGVkLiBUaGlzIGdpdmVzIHVzIGEgd2F5IHRvIGhhdmUgbXVsdGlwbGUgU2Nyb2xsVHJpZ2dlcnMgdXNlIGEgY2VudHJhbCBmdW5jdGlvbiBmb3IgYW55IGdpdmVuIHNjcm9sbGVyIGFuZCBzZWUgaWYgdGhlcmUncyBhIHNjcm9sbCB0d2VlbiBydW5uaW5nICh3aGljaCB3b3VsZCBhZmZlY3QgaWYvaG93IHRoaW5ncyBnZXQgdXBkYXRlZClcbl9nZXRUd2VlbkNyZWF0b3IgPSBmdW5jdGlvbiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBkaXJlY3Rpb24pIHtcbiAgdmFyIGdldFNjcm9sbCA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgcHJvcCA9IFwiX3Njcm9sbFwiICsgZGlyZWN0aW9uLnAyLFxuICAgICAgLy8gYWRkIGEgdHdlZW5hYmxlIHByb3BlcnR5IHRvIHRoZSBzY3JvbGxlciB0aGF0J3MgYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLCBsaWtlIF9zY3JvbGxUb3Agb3IgX3Njcm9sbExlZnQuIFRoaXMgd2F5LCBpZiBzb21lb25lIGRvZXMgZ3NhcC5raWxsVHdlZW5zT2Yoc2Nyb2xsZXIpIGl0J2xsIGtpbGwgdGhlIHNjcm9sbCB0d2Vlbi5cbiAgbGFzdFNjcm9sbDEsXG4gICAgICBsYXN0U2Nyb2xsMixcbiAgICAgIGdldFR3ZWVuID0gZnVuY3Rpb24gZ2V0VHdlZW4oc2Nyb2xsVG8sIHZhcnMsIGluaXRpYWxWYWx1ZSwgY2hhbmdlMSwgY2hhbmdlMikge1xuICAgIHZhciB0d2VlbiA9IGdldFR3ZWVuLnR3ZWVuLFxuICAgICAgICBvbkNvbXBsZXRlID0gdmFycy5vbkNvbXBsZXRlLFxuICAgICAgICBtb2RpZmllcnMgPSB7fTtcbiAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUgfHwgZ2V0U2Nyb2xsKCk7XG4gICAgY2hhbmdlMiA9IGNoYW5nZTEgJiYgY2hhbmdlMiB8fCAwOyAvLyBpZiBjaGFuZ2UxIGlzIDAsIHdlIHNldCB0aGF0IHRvIHRoZSBkaWZmZXJlbmNlIGFuZCBpZ25vcmUgY2hhbmdlMi4gT3RoZXJ3aXNlLCB0aGVyZSB3b3VsZCBiZSBhIGNvbXBvdW5kIGVmZmVjdC5cblxuICAgIGNoYW5nZTEgPSBjaGFuZ2UxIHx8IHNjcm9sbFRvIC0gaW5pdGlhbFZhbHVlO1xuICAgIHR3ZWVuICYmIHR3ZWVuLmtpbGwoKTtcbiAgICBsYXN0U2Nyb2xsMSA9IE1hdGgucm91bmQoaW5pdGlhbFZhbHVlKTtcbiAgICB2YXJzW3Byb3BdID0gc2Nyb2xsVG87XG4gICAgdmFycy5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG5cbiAgICBtb2RpZmllcnNbcHJvcF0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChnZXRTY3JvbGwoKSk7IC8vIHJvdW5kIGJlY2F1c2UgaW4gc29tZSBbdmVyeSB1bmNvbW1vbl0gV2luZG93cyBlbnZpcm9ubWVudHMsIGl0IGNhbiBnZXQgcmVwb3J0ZWQgd2l0aCBkZWNpbWFscyBldmVuIHRob3VnaCBpdCB3YXMgc2V0IHdpdGhvdXQuXG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gbGFzdFNjcm9sbDEgJiYgdmFsdWUgIT09IGxhc3RTY3JvbGwyICYmIE1hdGguYWJzKHZhbHVlIC0gbGFzdFNjcm9sbDEpID4gMyAmJiBNYXRoLmFicyh2YWx1ZSAtIGxhc3RTY3JvbGwyKSA+IDMpIHtcbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgc2Nyb2xscywga2lsbCB0aGUgdHdlZW4uIGlPUyBTYWZhcmkgaW50ZXJtaXR0ZW50bHkgbWlzcmVwb3J0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLCBpdCBtYXkgYmUgdGhlIG1vc3QgcmVjZW50bHktc2V0IG9uZSBvciB0aGUgb25lIGJlZm9yZSB0aGF0ISBXaGVuIFNhZmFyaSBpcyB6b29tZWQgKENNRC0rKSwgaXQgb2Z0ZW4gbWlzcmVwb3J0cyBhcyAxIHBpeGVsIG9mZiB0b28hIFNvIGlmIHdlIHNldCB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIDEyNSwgZm9yIGV4YW1wbGUsIGl0J2xsIGFjdHVhbGx5IHJlcG9ydCBpdCBhcyAxMjQuXG4gICAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgICAgZ2V0VHdlZW4udHdlZW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBpbml0aWFsVmFsdWUgKyBjaGFuZ2UxICogdHdlZW4ucmF0aW8gKyBjaGFuZ2UyICogdHdlZW4ucmF0aW8gKiB0d2Vlbi5yYXRpbztcbiAgICAgIH1cblxuICAgICAgbGFzdFNjcm9sbDIgPSBsYXN0U2Nyb2xsMTtcbiAgICAgIHJldHVybiBsYXN0U2Nyb2xsMSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIH07XG5cbiAgICB2YXJzLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUuY2FsbCh0d2Vlbik7XG4gICAgfTtcblxuICAgIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4gPSBnc2FwLnRvKHNjcm9sbGVyLCB2YXJzKTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH07XG5cbiAgc2Nyb2xsZXJbcHJvcF0gPSBnZXRTY3JvbGw7XG5cbiAgZ2V0U2Nyb2xsLndoZWVsSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VHdlZW4udHdlZW4gJiYgZ2V0VHdlZW4udHdlZW4ua2lsbCgpICYmIChnZXRUd2Vlbi50d2VlbiA9IDApO1xuICB9O1xuXG4gIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJ3aGVlbFwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTsgLy8gV2luZG93cyBtYWNoaW5lcyBoYW5kbGUgbW91c2V3aGVlbCBzY3JvbGxpbmcgaW4gY2h1bmtzIChsaWtlIFwiMyBsaW5lcyBwZXIgc2Nyb2xsXCIpIG1lYW5pbmcgdGhlIHR5cGljYWwgc3RyYXRlZ3kgZm9yIGNhbmNlbGxpbmcgdGhlIHNjcm9sbCBpc24ndCBhcyBzZW5zaXRpdmUuIEl0J3MgbXVjaCBtb3JlIGxpa2VseSB0byBtYXRjaCBvbmUgb2YgdGhlIHByZXZpb3VzIDIgc2Nyb2xsIGV2ZW50IHBvc2l0aW9ucy4gU28gd2Uga2lsbCBhbnkgc25hcHBpbmcgYXMgc29vbiBhcyB0aGVyZSdzIGEgd2hlZWwgZXZlbnQuXG5cblxuICByZXR1cm4gZ2V0VHdlZW47XG59O1xuXG5leHBvcnQgdmFyIFNjcm9sbFRyaWdnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbikge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKGdzYXApIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpO1xuICAgIHRoaXMuaW5pdCh2YXJzLCBhbmltYXRpb24pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjcm9sbFRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzLCBhbmltYXRpb24pIHtcbiAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5zdGFydCA9IDA7XG4gICAgdGhpcy52YXJzICYmIHRoaXMua2lsbCh0cnVlLCB0cnVlKTsgLy8gaW4gY2FzZSBpdCdzIGJlaW5nIGluaXR0ZWQgYWdhaW5cblxuICAgIGlmICghX2VuYWJsZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlID0gdGhpcy5yZWZyZXNoID0gdGhpcy5raWxsID0gX3Bhc3NUaHJvdWdoO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhcnMgPSBfc2V0RGVmYXVsdHMoX2lzU3RyaW5nKHZhcnMpIHx8IF9pc051bWJlcih2YXJzKSB8fCB2YXJzLm5vZGVUeXBlID8ge1xuICAgICAgdHJpZ2dlcjogdmFyc1xuICAgIH0gOiB2YXJzLCBfZGVmYXVsdHMpO1xuXG4gICAgdmFyIF92YXJzID0gdmFycyxcbiAgICAgICAgb25VcGRhdGUgPSBfdmFycy5vblVwZGF0ZSxcbiAgICAgICAgdG9nZ2xlQ2xhc3MgPSBfdmFycy50b2dnbGVDbGFzcyxcbiAgICAgICAgaWQgPSBfdmFycy5pZCxcbiAgICAgICAgb25Ub2dnbGUgPSBfdmFycy5vblRvZ2dsZSxcbiAgICAgICAgb25SZWZyZXNoID0gX3ZhcnMub25SZWZyZXNoLFxuICAgICAgICBzY3J1YiA9IF92YXJzLnNjcnViLFxuICAgICAgICB0cmlnZ2VyID0gX3ZhcnMudHJpZ2dlcixcbiAgICAgICAgcGluID0gX3ZhcnMucGluLFxuICAgICAgICBwaW5TcGFjaW5nID0gX3ZhcnMucGluU3BhY2luZyxcbiAgICAgICAgaW52YWxpZGF0ZU9uUmVmcmVzaCA9IF92YXJzLmludmFsaWRhdGVPblJlZnJlc2gsXG4gICAgICAgIGFudGljaXBhdGVQaW4gPSBfdmFycy5hbnRpY2lwYXRlUGluLFxuICAgICAgICBvblNjcnViQ29tcGxldGUgPSBfdmFycy5vblNjcnViQ29tcGxldGUsXG4gICAgICAgIG9uU25hcENvbXBsZXRlID0gX3ZhcnMub25TbmFwQ29tcGxldGUsXG4gICAgICAgIG9uY2UgPSBfdmFycy5vbmNlLFxuICAgICAgICBzbmFwID0gX3ZhcnMuc25hcCxcbiAgICAgICAgcGluUmVwYXJlbnQgPSBfdmFycy5waW5SZXBhcmVudCxcbiAgICAgICAgcGluU3BhY2VyID0gX3ZhcnMucGluU3BhY2VyLFxuICAgICAgICBjb250YWluZXJBbmltYXRpb24gPSBfdmFycy5jb250YWluZXJBbmltYXRpb24sXG4gICAgICAgIGZhc3RTY3JvbGxFbmQgPSBfdmFycy5mYXN0U2Nyb2xsRW5kLFxuICAgICAgICBwcmV2ZW50T3ZlcmxhcHMgPSBfdmFycy5wcmV2ZW50T3ZlcmxhcHMsXG4gICAgICAgIGRpcmVjdGlvbiA9IHZhcnMuaG9yaXpvbnRhbCB8fCB2YXJzLmNvbnRhaW5lckFuaW1hdGlvbiAmJiB2YXJzLmhvcml6b250YWwgIT09IGZhbHNlID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4gICAgICAgIGlzVG9nZ2xlID0gIXNjcnViICYmIHNjcnViICE9PSAwLFxuICAgICAgICBzY3JvbGxlciA9IF9nZXRUYXJnZXQodmFycy5zY3JvbGxlciB8fCBfd2luKSxcbiAgICAgICAgc2Nyb2xsZXJDYWNoZSA9IGdzYXAuY29yZS5nZXRDYWNoZShzY3JvbGxlciksXG4gICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydChzY3JvbGxlciksXG4gICAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSAoXCJwaW5UeXBlXCIgaW4gdmFycyA/IHZhcnMucGluVHlwZSA6IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwicGluVHlwZVwiKSB8fCBpc1ZpZXdwb3J0ICYmIFwiZml4ZWRcIikgPT09IFwiZml4ZWRcIixcbiAgICAgICAgY2FsbGJhY2tzID0gW3ZhcnMub25FbnRlciwgdmFycy5vbkxlYXZlLCB2YXJzLm9uRW50ZXJCYWNrLCB2YXJzLm9uTGVhdmVCYWNrXSxcbiAgICAgICAgdG9nZ2xlQWN0aW9ucyA9IGlzVG9nZ2xlICYmIHZhcnMudG9nZ2xlQWN0aW9ucy5zcGxpdChcIiBcIiksXG4gICAgICAgIG1hcmtlcnMgPSBcIm1hcmtlcnNcIiBpbiB2YXJzID8gdmFycy5tYXJrZXJzIDogX2RlZmF1bHRzLm1hcmtlcnMsXG4gICAgICAgIGJvcmRlcldpZHRoID0gaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIG9uUmVmcmVzaEluaXQgPSB2YXJzLm9uUmVmcmVzaEluaXQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZhcnMub25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICB9LFxuICAgICAgICBnZXRTY3JvbGxlclNpemUgPSBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbiksXG4gICAgICAgIGdldFNjcm9sbGVyT2Zmc2V0cyA9IF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCksXG4gICAgICAgIGxhc3RTbmFwID0gMCxcbiAgICAgICAgbGFzdFJlZnJlc2ggPSAwLFxuICAgICAgICBzY3JvbGxGdW5jID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgIHR3ZWVuVG8sXG4gICAgICAgIHBpbkNhY2hlLFxuICAgICAgICBzbmFwRnVuYyxcbiAgICAgICAgc2Nyb2xsMSxcbiAgICAgICAgc2Nyb2xsMixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgbWFya2VyU3RhcnQsXG4gICAgICAgIG1hcmtlckVuZCxcbiAgICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyLFxuICAgICAgICBtYXJrZXJFbmRUcmlnZ2VyLFxuICAgICAgICBtYXJrZXJWYXJzLFxuICAgICAgICBjaGFuZ2UsXG4gICAgICAgIHBpbk9yaWdpbmFsU3RhdGUsXG4gICAgICAgIHBpbkFjdGl2ZVN0YXRlLFxuICAgICAgICBwaW5TdGF0ZSxcbiAgICAgICAgc3BhY2VyLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHBpbkdldHRlcixcbiAgICAgICAgcGluU2V0dGVyLFxuICAgICAgICBwaW5TdGFydCxcbiAgICAgICAgcGluQ2hhbmdlLFxuICAgICAgICBzcGFjaW5nU3RhcnQsXG4gICAgICAgIHNwYWNlclN0YXRlLFxuICAgICAgICBtYXJrZXJTdGFydFNldHRlcixcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyLFxuICAgICAgICBjcyxcbiAgICAgICAgc25hcDEsXG4gICAgICAgIHNuYXAyLFxuICAgICAgICBzY3J1YlR3ZWVuLFxuICAgICAgICBzY3J1YlNtb290aCxcbiAgICAgICAgc25hcER1ckNsYW1wLFxuICAgICAgICBzbmFwRGVsYXllZENhbGwsXG4gICAgICAgIHByZXZQcm9ncmVzcyxcbiAgICAgICAgcHJldlNjcm9sbCxcbiAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyxcbiAgICAgICAgY2FNYXJrZXJTZXR0ZXIsXG4gICAgICAgIGN1c3RvbVJldmVydFJldHVybjtcblxuICAgIF9jb250ZXh0KHNlbGYpO1xuXG4gICAgc2VsZi5fZGlyID0gZGlyZWN0aW9uO1xuICAgIGFudGljaXBhdGVQaW4gKj0gNDU7XG4gICAgc2VsZi5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgIHNlbGYuc2Nyb2xsID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLnRpbWUuYmluZChjb250YWluZXJBbmltYXRpb24pIDogc2Nyb2xsRnVuYztcbiAgICBzY3JvbGwxID0gc2Nyb2xsRnVuYygpO1xuICAgIHNlbGYudmFycyA9IHZhcnM7XG4gICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uIHx8IHZhcnMuYW5pbWF0aW9uO1xuXG4gICAgaWYgKFwicmVmcmVzaFByaW9yaXR5XCIgaW4gdmFycykge1xuICAgICAgX3NvcnQgPSAxO1xuICAgICAgdmFycy5yZWZyZXNoUHJpb3JpdHkgPT09IC05OTk5ICYmIChfcHJpbWFyeSA9IHNlbGYpOyAvLyB1c2VkIGJ5IFNjcm9sbFNtb290aGVyXG4gICAgfVxuXG4gICAgc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCA9IHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgfHwge1xuICAgICAgdG9wOiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfdmVydGljYWwpLFxuICAgICAgbGVmdDogX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgX2hvcml6b250YWwpXG4gICAgfTtcbiAgICBzZWxmLnR3ZWVuVG8gPSB0d2VlblRvID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbFtkaXJlY3Rpb24ucF07XG5cbiAgICBzZWxmLnNjcnViRHVyYXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHNjcnViU21vb3RoID0gX2lzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZTtcblxuICAgICAgaWYgKCFzY3J1YlNtb290aCkge1xuICAgICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkua2lsbCgpO1xuICAgICAgICBzY3J1YlR3ZWVuID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLmR1cmF0aW9uKHZhbHVlKSA6IHNjcnViVHdlZW4gPSBnc2FwLnRvKGFuaW1hdGlvbiwge1xuICAgICAgICAgIGVhc2U6IFwiZXhwb1wiLFxuICAgICAgICAgIHRvdGFsUHJvZ3Jlc3M6IFwiKz0wLjAwMVwiLFxuICAgICAgICAgIGR1cmF0aW9uOiBzY3J1YlNtb290aCxcbiAgICAgICAgICBwYXVzZWQ6IHRydWUsXG4gICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBvblNjcnViQ29tcGxldGUgJiYgb25TY3J1YkNvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgIGFuaW1hdGlvbi52YXJzLmxhenkgPSBmYWxzZTtcbiAgICAgIGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24udmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiBhbmltYXRpb24uZHVyYXRpb24oKSAmJiBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgc2VsZi5hbmltYXRpb24gPSBhbmltYXRpb24ucGF1c2UoKTtcbiAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gc2VsZjtcbiAgICAgIHNlbGYuc2NydWJEdXJhdGlvbihzY3J1Yik7XG4gICAgICBzbmFwMSA9IDA7XG4gICAgICBpZCB8fCAoaWQgPSBhbmltYXRpb24udmFycy5pZCk7XG4gICAgfVxuXG4gICAgX3RyaWdnZXJzLnB1c2goc2VsZik7XG5cbiAgICBpZiAoc25hcCkge1xuICAgICAgLy8gVE9ETzogcG90ZW50aWFsIGlkZWE6IHVzZSBsZWdpdGltYXRlIENTUyBzY3JvbGwgc25hcHBpbmcgYnkgcHVzaGluZyBpbnZpc2libGUgZWxlbWVudHMgaW50byB0aGUgRE9NIHRoYXQgc2VydmUgYXMgc25hcCBwb3NpdGlvbnMsIGFuZCB0b2dnbGUgdGhlIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQuc3R5bGUuc2Nyb2xsU25hcFR5cGUgb25Ub2dnbGUuIFNlZSBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi9KakxyZ1dNIGZvciBhIHF1aWNrIHByb29mIG9mIGNvbmNlcHQuXG4gICAgICBpZiAoIV9pc09iamVjdChzbmFwKSB8fCBzbmFwLnB1c2gpIHtcbiAgICAgICAgc25hcCA9IHtcbiAgICAgICAgICBzbmFwVG86IHNuYXBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgXCJzY3JvbGxCZWhhdmlvclwiIGluIF9ib2R5LnN0eWxlICYmIGdzYXAuc2V0KGlzVmlld3BvcnQgPyBbX2JvZHksIF9kb2NFbF0gOiBzY3JvbGxlciwge1xuICAgICAgICBzY3JvbGxCZWhhdmlvcjogXCJhdXRvXCJcbiAgICAgIH0pOyAvLyBzbW9vdGggc2Nyb2xsaW5nIGRvZXNuJ3Qgd29yayB3aXRoIHNuYXAuXG5cbiAgICAgIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gX2lzRnVuY3Rpb24obykgJiYgby50YXJnZXQgPT09IChpc1ZpZXdwb3J0ID8gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCA6IHNjcm9sbGVyKSAmJiAoby5zbW9vdGggPSBmYWxzZSk7XG4gICAgICB9KTsgLy8gbm90ZTogc2V0IHNtb290aCB0byBmYWxzZSBvbiBib3RoIHRoZSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBzY3JvbGwgZ2V0dGVycy9zZXR0ZXJzXG5cblxuICAgICAgc25hcEZ1bmMgPSBfaXNGdW5jdGlvbihzbmFwLnNuYXBUbykgPyBzbmFwLnNuYXBUbyA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc1wiID8gX2dldENsb3Nlc3RMYWJlbChhbmltYXRpb24pIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzRGlyZWN0aW9uYWxcIiA/IF9nZXRMYWJlbEF0RGlyZWN0aW9uKGFuaW1hdGlvbikgOiBzbmFwLmRpcmVjdGlvbmFsICE9PSBmYWxzZSA/IGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICAgICAgcmV0dXJuIF9zbmFwRGlyZWN0aW9uYWwoc25hcC5zbmFwVG8pKHZhbHVlLCBfZ2V0VGltZSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAgPyAwIDogc3QuZGlyZWN0aW9uKTtcbiAgICAgIH0gOiBnc2FwLnV0aWxzLnNuYXAoc25hcC5zbmFwVG8pO1xuICAgICAgc25hcER1ckNsYW1wID0gc25hcC5kdXJhdGlvbiB8fCB7XG4gICAgICAgIG1pbjogMC4xLFxuICAgICAgICBtYXg6IDJcbiAgICAgIH07XG4gICAgICBzbmFwRHVyQ2xhbXAgPSBfaXNPYmplY3Qoc25hcER1ckNsYW1wKSA/IF9jbGFtcChzbmFwRHVyQ2xhbXAubWluLCBzbmFwRHVyQ2xhbXAubWF4KSA6IF9jbGFtcChzbmFwRHVyQ2xhbXAsIHNuYXBEdXJDbGFtcCk7XG4gICAgICBzbmFwRGVsYXllZENhbGwgPSBnc2FwLmRlbGF5ZWRDYWxsKHNuYXAuZGVsYXkgfHwgc2NydWJTbW9vdGggLyAyIHx8IDAuMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsID0gc2Nyb2xsRnVuYygpLFxuICAgICAgICAgICAgcmVmcmVzaGVkUmVjZW50bHkgPSBfZ2V0VGltZSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAsXG4gICAgICAgICAgICB0d2VlbiA9IHR3ZWVuVG8udHdlZW47XG5cbiAgICAgICAgaWYgKChyZWZyZXNoZWRSZWNlbnRseSB8fCBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpIDwgMTApICYmICF0d2VlbiAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgIHZhciBwcm9ncmVzcyA9IChzY3JvbGwgLSBzdGFydCkgLyBjaGFuZ2UsXG4gICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHByb2dyZXNzLFxuICAgICAgICAgICAgICB2ZWxvY2l0eSA9IHJlZnJlc2hlZFJlY2VudGx5ID8gMCA6ICh0b3RhbFByb2dyZXNzIC0gc25hcDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogMTAwMCB8fCAwLFxuICAgICAgICAgICAgICBjaGFuZ2UxID0gZ3NhcC51dGlscy5jbGFtcCgtcHJvZ3Jlc3MsIDEgLSBwcm9ncmVzcywgX2Ficyh2ZWxvY2l0eSAvIDIpICogdmVsb2NpdHkgLyAwLjE4NSksXG4gICAgICAgICAgICAgIG5hdHVyYWxFbmQgPSBwcm9ncmVzcyArIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlID8gMCA6IGNoYW5nZTEpLFxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IF9jbGFtcCgwLCAxLCBzbmFwRnVuYyhuYXR1cmFsRW5kLCBzZWxmKSksXG4gICAgICAgICAgICAgIGVuZFNjcm9sbCA9IE1hdGgucm91bmQoc3RhcnQgKyBlbmRWYWx1ZSAqIGNoYW5nZSksXG4gICAgICAgICAgICAgIF9zbmFwID0gc25hcCxcbiAgICAgICAgICAgICAgb25TdGFydCA9IF9zbmFwLm9uU3RhcnQsXG4gICAgICAgICAgICAgIF9vbkludGVycnVwdCA9IF9zbmFwLm9uSW50ZXJydXB0LFxuICAgICAgICAgICAgICBfb25Db21wbGV0ZSA9IF9zbmFwLm9uQ29tcGxldGU7XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsIDw9IGVuZCAmJiBzY3JvbGwgPj0gc3RhcnQgJiYgZW5kU2Nyb2xsICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICAgIGlmICh0d2VlbiAmJiAhdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uZGF0YSA8PSBfYWJzKGVuZFNjcm9sbCAtIHNjcm9sbCkpIHtcbiAgICAgICAgICAgICAgLy8gdGhlcmUncyBhbiBvdmVybGFwcGluZyBzbmFwISBTbyB3ZSBtdXN0IGZpZ3VyZSBvdXQgd2hpY2ggb25lIGlzIGNsb3NlciBhbmQgbGV0IHRoYXQgdHdlZW4gbGl2ZS5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc25hcC5pbmVydGlhID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBjaGFuZ2UxID0gZW5kVmFsdWUgLSBwcm9ncmVzcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHdlZW5UbyhlbmRTY3JvbGwsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IHNuYXBEdXJDbGFtcChfYWJzKE1hdGgubWF4KF9hYnMobmF0dXJhbEVuZCAtIHRvdGFsUHJvZ3Jlc3MpLCBfYWJzKGVuZFZhbHVlIC0gdG90YWxQcm9ncmVzcykpICogMC4xODUgLyB2ZWxvY2l0eSAvIDAuMDUgfHwgMCkpLFxuICAgICAgICAgICAgICBlYXNlOiBzbmFwLmVhc2UgfHwgXCJwb3dlcjNcIixcbiAgICAgICAgICAgICAgZGF0YTogX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpLFxuICAgICAgICAgICAgICAvLyByZWNvcmQgdGhlIGRpc3RhbmNlIHNvIHRoYXQgaWYgYW5vdGhlciBzbmFwIHR3ZWVuIG9jY3VycyAoY29uZmxpY3QpIHdlIGNhbiBwcmlvcml0aXplIHRoZSBjbG9zZXN0IHNuYXAuXG4gICAgICAgICAgICAgIG9uSW50ZXJydXB0OiBmdW5jdGlvbiBvbkludGVycnVwdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSkgJiYgX29uSW50ZXJydXB0ICYmIF9vbkludGVycnVwdChzZWxmKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICAgICAgICAgIHNuYXAxID0gc25hcDIgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgb25TbmFwQ29tcGxldGUgJiYgb25TbmFwQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgICAgX29uQ29tcGxldGUgJiYgX29uQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHNjcm9sbCwgY2hhbmdlMSAqIGNoYW5nZSwgZW5kU2Nyb2xsIC0gc2Nyb2xsIC0gY2hhbmdlMSAqIGNoYW5nZSk7XG4gICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoc2VsZiwgdHdlZW5Uby50d2Vlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaXNBY3RpdmUgJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KS5wYXVzZSgpO1xuICAgIH1cblxuICAgIGlkICYmIChfaWRzW2lkXSA9IHNlbGYpO1xuICAgIHRyaWdnZXIgPSBzZWxmLnRyaWdnZXIgPSBfZ2V0VGFyZ2V0KHRyaWdnZXIgfHwgcGluKTsgLy8gaWYgYSB0cmlnZ2VyIGhhcyBzb21lIGtpbmQgb2Ygc2Nyb2xsLXJlbGF0ZWQgZWZmZWN0IGFwcGxpZWQgdGhhdCBjb3VsZCBjb250YW1pbmF0ZSB0aGUgXCJ5XCIgb3IgXCJ4XCIgcG9zaXRpb24gKGxpa2UgYSBTY3JvbGxTbW9vdGhlciBlZmZlY3QpLCB3ZSBuZWVkZWQgYSB3YXkgdG8gdGVtcG9yYXJpbHkgcmV2ZXJ0IGl0LCBzbyB3ZSB1c2UgdGhlIHN0UmV2ZXJ0IHByb3BlcnR5IG9mIHRoZSBnc0NhY2hlLiBJdCBjYW4gcmV0dXJuIGFub3RoZXIgZnVuY3Rpb24gdGhhdCB3ZSdsbCBjYWxsIGF0IHRoZSBlbmQgc28gaXQgY2FuIHJldHVybiB0byBpdHMgbm9ybWFsIHN0YXRlLlxuXG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuID0gdHJpZ2dlciAmJiB0cmlnZ2VyLl9nc2FwICYmIHRyaWdnZXIuX2dzYXAuc3RSZXZlcnQ7XG4gICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIChjdXN0b21SZXZlcnRSZXR1cm4gPSBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZikpO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICB0YXJnZXRzOiB0cmlnZ2VyLFxuICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgIH0pO1xuXG4gICAgaWYgKHBpbikge1xuICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIHBpbi5wYXJlbnROb2RlICYmIHBpbi5wYXJlbnROb2RlLnN0eWxlICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpOyAvLyBpZiB0aGUgcGFyZW50IGlzIGRpc3BsYXk6IGZsZXgsIGRvbid0IGFwcGx5IHBpblNwYWNpbmcgYnkgZGVmYXVsdC4gV2Ugc2hvdWxkIGNoZWNrIHRoYXQgcGluLnBhcmVudE5vZGUgaXMgYW4gZWxlbWVudCAobm90IHNoYWRvdyBkb20gd2luZG93KVxuXG4gICAgICBzZWxmLnBpbiA9IHBpbjtcbiAgICAgIHBpbkNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHBpbik7XG5cbiAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3BhY2VyIGFuZCBwaW5PcmlnaW5hbFN0YXRlIG9uIHRoZSBjYWNoZSBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgcGlubmluZyB0aGUgc2FtZSBlbGVtZW50IHdpdGggTVVMVElQTEUgU2Nyb2xsVHJpZ2dlcnMgLSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgbXVsdGlwbGUgc3BhY2VycyBvciByZWNvcmQgdGhlIFwib3JpZ2luYWxcIiBwaW4gc3RhdGUgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhZmZlY3RlZCBieSBhbm90aGVyIFNjcm9sbFRyaWdnZXIuXG4gICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICBwaW5TcGFjZXIgPSBfZ2V0VGFyZ2V0KHBpblNwYWNlcik7XG4gICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTsgLy8gZm9yIFJlYWN0ICYgQW5ndWxhclxuXG4gICAgICAgICAgcGluQ2FjaGUuc3BhY2VySXNOYXRpdmUgPSAhIXBpblNwYWNlcjtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluQ2FjaGUuc3BhY2VyID0gc3BhY2VyID0gcGluU3BhY2VyIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICBpZCAmJiBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIgKyBpZCk7XG4gICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSA9IHBpbkNhY2hlLnBpblN0YXRlO1xuICAgICAgfVxuXG4gICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAuc2V0KHBpbiwge1xuICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHNlbGYuc3BhY2VyID0gc3BhY2VyID0gcGluQ2FjaGUuc3BhY2VyO1xuICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgc3BhY2luZ1N0YXJ0ID0gY3NbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdO1xuICAgICAgcGluR2V0dGVyID0gZ3NhcC5nZXRQcm9wZXJ0eShwaW4pO1xuICAgICAgcGluU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihwaW4sIGRpcmVjdGlvbi5hLCBfcHgpOyAvLyBwaW4uZmlyc3RDaGlsZCAmJiAhX21heFNjcm9sbChwaW4sIGRpcmVjdGlvbikgJiYgKHBpbi5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIpOyAvLyBwcm90ZWN0cyBmcm9tIGNvbGxhcHNpbmcgbWFyZ2lucywgYnV0IGNhbiBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGFzIGRlbW9uc3RyYXRlZCBoZXJlOiBodHRwczovL2NvZGVwZW4uaW8vR3JlZW5Tb2NrL3Blbi8xZTQyYzdhNzNiZmE0MDlkMmNmMWUxODRlN2E0MjQ4ZCBzbyBpdCB3YXMgcmVtb3ZlZCBpbiBmYXZvciBvZiBqdXN0IHRlbGxpbmcgcGVvcGxlIHRvIHNldCB1cCB0aGVpciBDU1MgdG8gYXZvaWQgdGhlIGNvbGxhcHNpbmcgbWFyZ2lucyAob3ZlcmZsb3c6IGhpZGRlbiB8IGF1dG8gaXMganVzdCBvbmUgb3B0aW9uLiBBbm90aGVyIGlzIGJvcmRlci10b3A6IDFweCBzb2xpZCB0cmFuc3BhcmVudCkuXG5cbiAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICB9XG5cbiAgICBpZiAobWFya2Vycykge1xuICAgICAgbWFya2VyVmFycyA9IF9pc09iamVjdChtYXJrZXJzKSA/IF9zZXREZWZhdWx0cyhtYXJrZXJzLCBfbWFya2VyRGVmYXVsdHMpIDogX21hcmtlckRlZmF1bHRzO1xuICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLXN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwKTtcbiAgICAgIG1hcmtlckVuZFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwLCBtYXJrZXJTdGFydFRyaWdnZXIpO1xuICAgICAgb2Zmc2V0ID0gbWFya2VyU3RhcnRUcmlnZ2VyW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gICAgICB2YXIgY29udGVudCA9IF9nZXRUYXJnZXQoX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJjb250ZW50XCIpIHx8IHNjcm9sbGVyKTtcblxuICAgICAgbWFya2VyU3RhcnQgPSB0aGlzLm1hcmtlclN0YXJ0ID0gX2NyZWF0ZU1hcmtlcihcInN0YXJ0XCIsIGlkLCBjb250ZW50LCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIG9mZnNldCwgMCwgY29udGFpbmVyQW5pbWF0aW9uKTtcbiAgICAgIG1hcmtlckVuZCA9IHRoaXMubWFya2VyRW5kID0gX2NyZWF0ZU1hcmtlcihcImVuZFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKGNhTWFya2VyU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGRpcmVjdGlvbi5hLCBfcHgpKTtcblxuICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uICYmICEoX3Byb3hpZXMubGVuZ3RoICYmIF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZml4ZWRNYXJrZXJzXCIpID09PSB0cnVlKSkge1xuICAgICAgICBfbWFrZVBvc2l0aW9uYWJsZShpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcik7XG5cbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0sIHtcbiAgICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICB2YXIgb2xkT25VcGRhdGUgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZSxcbiAgICAgICAgICBvbGRQYXJhbXMgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZVBhcmFtcztcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5ldmVudENhbGxiYWNrKFwib25VcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSgwLCAwLCAxKTtcbiAgICAgICAgb2xkT25VcGRhdGUgJiYgb2xkT25VcGRhdGUuYXBwbHkob2xkUGFyYW1zIHx8IFtdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGYucHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyaWdnZXJzW190cmlnZ2Vycy5pbmRleE9mKHNlbGYpIC0gMV07XG4gICAgfTtcblxuICAgIHNlbGYubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgKyAxXTtcbiAgICB9O1xuXG4gICAgc2VsZi5yZXZlcnQgPSBmdW5jdGlvbiAocmV2ZXJ0LCB0ZW1wKSB7XG4gICAgICBpZiAoIXRlbXApIHtcbiAgICAgICAgcmV0dXJuIHNlbGYua2lsbCh0cnVlKTtcbiAgICAgIH0gLy8gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBnc2FwLmNvbnRleHQoKSBhbmQgZ3NhcC5tYXRjaE1lZGlhKCkgd2hpY2ggY2FsbCByZXZlcnQoKVxuXG5cbiAgICAgIHZhciByID0gcmV2ZXJ0ICE9PSBmYWxzZSB8fCAhc2VsZi5lbmFibGVkLFxuICAgICAgICAgIHByZXZSZWZyZXNoaW5nID0gX3JlZnJlc2hpbmc7XG5cbiAgICAgIGlmIChyICE9PSBzZWxmLmlzUmV2ZXJ0ZWQpIHtcbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAvLyBpZiAoIXNlbGYuc2Nyb2xsLnJlYyAmJiAoX3JlZnJlc2hpbmcgfHwgX3JlZnJlc2hpbmdBbGwpKSB7XG4gICAgICAgICAgLy8gXHRzZWxmLnNjcm9sbC5yZWMgPSBzY3JvbGxGdW5jKCk7XG4gICAgICAgICAgLy8gXHRfcmVmcmVzaGluZ0FsbCAmJiBzY3JvbGxGdW5jKDApO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICBwcmV2U2Nyb2xsID0gTWF0aC5tYXgoc2Nyb2xsRnVuYygpLCBzZWxmLnNjcm9sbC5yZWMgfHwgMCk7IC8vIHJlY29yZCB0aGUgc2Nyb2xsIHNvIHdlIGNhbiByZXZlcnQgbGF0ZXIgKHJlcG9zaXRpb25pbmcvcGlubmluZyB0aGluZ3MgY2FuIGFmZmVjdCBzY3JvbGwgcG9zaXRpb24pLiBJbiB0aGUgc3RhdGljIHJlZnJlc2goKSBtZXRob2QsIHdlIGZpcnN0IHJlY29yZCBhbGwgdGhlIHNjcm9sbCBwb3NpdGlvbnMgYXMgYSByZWZlcmVuY2UuXG5cbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgIHByZXZBbmltUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uc3R5bGUuZGlzcGxheSA9IHIgPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBfcmVmcmVzaGluZyA9IDE7XG4gICAgICAgICAgc2VsZi51cGRhdGUocik7IC8vIG1ha2Ugc3VyZSB0aGUgcGluIGlzIGJhY2sgaW4gaXRzIG9yaWdpbmFsIHBvc2l0aW9uIHNvIHRoYXQgYWxsIHRoZSBtZWFzdXJlbWVudHMgYXJlIGNvcnJlY3QuIGRvIHRoaXMgQkVGT1JFIHN3YXBwaW5nIHRoZSBwaW4gb3V0XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGluKSB7XG4gICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBwaW5PcmlnaW5hbFN0YXRlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkgJiYgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgX2dldENvbXB1dGVkU3R5bGUocGluKSwgc3BhY2VyU3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHIgfHwgc2VsZi51cGRhdGUocik7IC8vIHdoZW4gd2UncmUgcmVzdG9yaW5nLCB0aGUgdXBkYXRlIHNob3VsZCBydW4gQUZURVIgc3dhcHBpbmcgdGhlIHBpbiBpbnRvIGl0cyBwaW4tc3BhY2VyLlxuXG4gICAgICAgIF9yZWZyZXNoaW5nID0gcHJldlJlZnJlc2hpbmc7IC8vIHJlc3RvcmUuIFdlIHNldCBpdCB0byB0cnVlIGR1cmluZyB0aGUgdXBkYXRlKCkgc28gdGhhdCB0aGluZ3MgZmlyZSBwcm9wZXJseSBpbiB0aGVyZS5cblxuICAgICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSByO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLnJlZnJlc2ggPSBmdW5jdGlvbiAoc29mdCwgZm9yY2UpIHtcbiAgICAgIGlmICgoX3JlZnJlc2hpbmcgfHwgIXNlbGYuZW5hYmxlZCkgJiYgIWZvcmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbiAmJiBzb2Z0ICYmIF9sYXN0U2Nyb2xsVGltZSkge1xuICAgICAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICFfcmVmcmVzaGluZ0FsbCAmJiBvblJlZnJlc2hJbml0ICYmIG9uUmVmcmVzaEluaXQoc2VsZik7XG4gICAgICBfcmVmcmVzaGluZyA9IDE7XG4gICAgICBsYXN0UmVmcmVzaCA9IF9nZXRUaW1lKCk7XG5cbiAgICAgIGlmICh0d2VlblRvLnR3ZWVuKSB7XG4gICAgICAgIHR3ZWVuVG8udHdlZW4ua2lsbCgpO1xuICAgICAgICB0d2VlblRvLnR3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnBhdXNlKCk7XG4gICAgICBpbnZhbGlkYXRlT25SZWZyZXNoICYmIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucmV2ZXJ0KHtcbiAgICAgICAga2lsbDogZmFsc2VcbiAgICAgIH0pLmludmFsaWRhdGUoKTtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCB8fCBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgIHNlbGYuX3N1YlBpbk9mZnNldCA9IGZhbHNlOyAvLyB3ZSdsbCBzZXQgdGhpcyB0byB0cnVlIGluIHRoZSBzdWItcGlucyBpZiB3ZSBmaW5kIGFueVxuXG4gICAgICB2YXIgc2l6ZSA9IGdldFNjcm9sbGVyU2l6ZSgpLFxuICAgICAgICAgIHNjcm9sbGVyQm91bmRzID0gZ2V0U2Nyb2xsZXJPZmZzZXRzKCksXG4gICAgICAgICAgbWF4ID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgOiBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICAgIG9mZnNldCA9IDAsXG4gICAgICAgICAgb3RoZXJQaW5PZmZzZXQgPSAwLFxuICAgICAgICAgIHBhcnNlZEVuZCA9IHZhcnMuZW5kLFxuICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB2YXJzLmVuZFRyaWdnZXIgfHwgdHJpZ2dlcixcbiAgICAgICAgICBwYXJzZWRTdGFydCA9IHZhcnMuc3RhcnQgfHwgKHZhcnMuc3RhcnQgPT09IDAgfHwgIXRyaWdnZXIgPyAwIDogcGluID8gXCIwIDBcIiA6IFwiMCAxMDAlXCIpLFxuICAgICAgICAgIHBpbm5lZENvbnRhaW5lciA9IHNlbGYucGlubmVkQ29udGFpbmVyID0gdmFycy5waW5uZWRDb250YWluZXIgJiYgX2dldFRhcmdldCh2YXJzLnBpbm5lZENvbnRhaW5lciksXG4gICAgICAgICAgdHJpZ2dlckluZGV4ID0gdHJpZ2dlciAmJiBNYXRoLm1heCgwLCBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSkgfHwgMCxcbiAgICAgICAgICBpID0gdHJpZ2dlckluZGV4LFxuICAgICAgICAgIGNzLFxuICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICBzY3JvbGwsXG4gICAgICAgICAgaXNWZXJ0aWNhbCxcbiAgICAgICAgICBvdmVycmlkZSxcbiAgICAgICAgICBjdXJUcmlnZ2VyLFxuICAgICAgICAgIGN1clBpbixcbiAgICAgICAgICBvcHBvc2l0ZVNjcm9sbCxcbiAgICAgICAgICBpbml0dGVkLFxuICAgICAgICAgIHJldmVydGVkUGlucztcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAvLyB1c2VyIG1pZ2h0IHRyeSB0byBwaW4gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZSwgc28gd2UgbXVzdCBmaW5kIGFueSBwcmlvciB0cmlnZ2VycyB3aXRoIHRoZSBzYW1lIHBpbiwgcmV2ZXJ0IHRoZW0sIGFuZCBkZXRlcm1pbmUgaG93IGxvbmcgdGhleSdyZSBwaW5uaW5nIHNvIHRoYXQgd2UgY2FuIG9mZnNldCB0aGluZ3MgYXBwcm9wcmlhdGVseS4gTWFrZSBzdXJlIHdlIHJldmVydCBmcm9tIGxhc3QgdG8gZmlyc3Qgc28gdGhhdCB0aGluZ3MgXCJyZXdpbmRcIiBwcm9wZXJseS5cbiAgICAgICAgY3VyVHJpZ2dlciA9IF90cmlnZ2Vyc1tpXTtcbiAgICAgICAgY3VyVHJpZ2dlci5lbmQgfHwgY3VyVHJpZ2dlci5yZWZyZXNoKDAsIDEpIHx8IChfcmVmcmVzaGluZyA9IDEpOyAvLyBpZiBpdCdzIGEgdGltZWxpbmUtYmFzZWQgdHJpZ2dlciB0aGF0IGhhc24ndCBiZWVuIGZ1bGx5IGluaXRpYWxpemVkIHlldCBiZWNhdXNlIGl0J3Mgd2FpdGluZyBmb3IgMSB0aWNrLCBqdXN0IGZvcmNlIHRoZSByZWZyZXNoKCkgaGVyZSwgb3RoZXJ3aXNlIGlmIGl0IGNvbnRhaW5zIGEgcGluIHRoYXQncyBzdXBwb3NlZCB0byBhZmZlY3Qgb3RoZXIgU2Nyb2xsVHJpZ2dlcnMgZnVydGhlciBkb3duIHRoZSBwYWdlLCB0aGV5IHdvbid0IGJlIGFkanVzdGVkIHByb3Blcmx5LlxuXG4gICAgICAgIGN1clBpbiA9IGN1clRyaWdnZXIucGluO1xuXG4gICAgICAgIGlmIChjdXJQaW4gJiYgKGN1clBpbiA9PT0gdHJpZ2dlciB8fCBjdXJQaW4gPT09IHBpbikgJiYgIWN1clRyaWdnZXIuaXNSZXZlcnRlZCkge1xuICAgICAgICAgIHJldmVydGVkUGlucyB8fCAocmV2ZXJ0ZWRQaW5zID0gW10pO1xuICAgICAgICAgIHJldmVydGVkUGlucy51bnNoaWZ0KGN1clRyaWdnZXIpOyAvLyB3ZSdsbCByZXZlcnQgZnJvbSBmaXJzdCB0byBsYXN0IHRvIG1ha2Ugc3VyZSB0aGluZ3MgcmVhY2ggdGhlaXIgZW5kIHN0YXRlIHByb3Blcmx5XG5cbiAgICAgICAgICBjdXJUcmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJUcmlnZ2VyICE9PSBfdHJpZ2dlcnNbaV0pIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIGl0IGdvdCByZW1vdmVkLlxuICAgICAgICAgIHRyaWdnZXJJbmRleC0tO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfaXNGdW5jdGlvbihwYXJzZWRTdGFydCkgJiYgKHBhcnNlZFN0YXJ0ID0gcGFyc2VkU3RhcnQoc2VsZikpO1xuICAgICAgc3RhcnQgPSBfcGFyc2VQb3NpdGlvbihwYXJzZWRTdGFydCwgdHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCksIG1hcmtlclN0YXJ0LCBtYXJrZXJTdGFydFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24pIHx8IChwaW4gPyAtMC4wMDEgOiAwKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZEVuZCkgJiYgKHBhcnNlZEVuZCA9IHBhcnNlZEVuZChzZWxmKSk7XG5cbiAgICAgIGlmIChfaXNTdHJpbmcocGFyc2VkRW5kKSAmJiAhcGFyc2VkRW5kLmluZGV4T2YoXCIrPVwiKSkge1xuICAgICAgICBpZiAofnBhcnNlZEVuZC5pbmRleE9mKFwiIFwiKSkge1xuICAgICAgICAgIHBhcnNlZEVuZCA9IChfaXNTdHJpbmcocGFyc2VkU3RhcnQpID8gcGFyc2VkU3RhcnQuc3BsaXQoXCIgXCIpWzBdIDogXCJcIikgKyBwYXJzZWRFbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gX29mZnNldFRvUHgocGFyc2VkRW5kLnN1YnN0cigyKSwgc2l6ZSk7XG4gICAgICAgICAgcGFyc2VkRW5kID0gX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0IDogc3RhcnQgKyBvZmZzZXQ7IC8vIF9wYXJzZVBvc2l0aW9uIHdvbid0IGZhY3RvciBpbiB0aGUgb2Zmc2V0IGlmIHRoZSBzdGFydCBpcyBhIG51bWJlciwgc28gZG8gaXQgaGVyZS5cblxuICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVuZCA9IE1hdGgubWF4KHN0YXJ0LCBfcGFyc2VQb3NpdGlvbihwYXJzZWRFbmQgfHwgKHBhcnNlZEVuZFRyaWdnZXIgPyBcIjEwMCUgMFwiIDogbWF4KSwgcGFyc2VkRW5kVHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCkgKyBvZmZzZXQsIG1hcmtlckVuZCwgbWFya2VyRW5kVHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbikpIHx8IC0wLjAwMTtcbiAgICAgIGNoYW5nZSA9IGVuZCAtIHN0YXJ0IHx8IChzdGFydCAtPSAwLjAxKSAmJiAwLjAwMTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgICBpID0gdHJpZ2dlckluZGV4O1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgIGN1clBpbiA9IGN1clRyaWdnZXIucGluO1xuXG4gICAgICAgIGlmIChjdXJQaW4gJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPD0gc3RhcnQgJiYgIWNvbnRhaW5lckFuaW1hdGlvbiAmJiBjdXJUcmlnZ2VyLmVuZCA+IDApIHtcbiAgICAgICAgICBjcyA9IGN1clRyaWdnZXIuZW5kIC0gY3VyVHJpZ2dlci5zdGFydDtcblxuICAgICAgICAgIGlmICgoY3VyUGluID09PSB0cmlnZ2VyICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDwgc3RhcnQgfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmICFfaXNOdW1iZXIocGFyc2VkU3RhcnQpKSB7XG4gICAgICAgICAgICAvLyBudW1lcmljIHN0YXJ0IHZhbHVlcyBzaG91bGRuJ3QgYmUgb2Zmc2V0IGF0IGFsbCAtIHRyZWF0IHRoZW0gYXMgYWJzb2x1dGVcbiAgICAgICAgICAgIG9mZnNldCArPSBjcyAqICgxIC0gY3VyVHJpZ2dlci5wcm9ncmVzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyUGluID09PSBwaW4gJiYgKG90aGVyUGluT2Zmc2V0ICs9IGNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGFydCArPSBvZmZzZXQ7XG4gICAgICBlbmQgKz0gb2Zmc2V0O1xuICAgICAgc2VsZi5fcGluUHVzaCA9IG90aGVyUGluT2Zmc2V0O1xuXG4gICAgICBpZiAobWFya2VyU3RhcnQgJiYgb2Zmc2V0KSB7XG4gICAgICAgIC8vIG9mZnNldCB0aGUgbWFya2VycyBpZiBuZWNlc3NhcnlcbiAgICAgICAgY3MgPSB7fTtcbiAgICAgICAgY3NbZGlyZWN0aW9uLmFdID0gXCIrPVwiICsgb2Zmc2V0O1xuICAgICAgICBwaW5uZWRDb250YWluZXIgJiYgKGNzW2RpcmVjdGlvbi5wXSA9IFwiLT1cIiArIHNjcm9sbEZ1bmMoKSk7XG4gICAgICAgIGdzYXAuc2V0KFttYXJrZXJTdGFydCwgbWFya2VyRW5kXSwgY3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgICAgaXNWZXJ0aWNhbCA9IGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsO1xuICAgICAgICBzY3JvbGwgPSBzY3JvbGxGdW5jKCk7IC8vIHJlY2FsY3VsYXRlIGJlY2F1c2UgdGhlIHRyaWdnZXJzIGNhbiBhZmZlY3QgdGhlIHNjcm9sbFxuXG4gICAgICAgIHBpblN0YXJ0ID0gcGFyc2VGbG9hdChwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpKSArIG90aGVyUGluT2Zmc2V0O1xuICAgICAgICAhbWF4ICYmIGVuZCA+IDEgJiYgKChpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcikuc3R5bGVbXCJvdmVyZmxvdy1cIiArIGRpcmVjdGlvbi5hXSA9IFwic2Nyb2xsXCIpOyAvLyBtYWtlcyBzdXJlIHRoZSBzY3JvbGxlciBoYXMgYSBzY3JvbGxiYXIsIG90aGVyd2lzZSBpZiBzb21ldGhpbmcgaGFzIHdpZHRoOiAxMDAlLCBmb3IgZXhhbXBsZSwgaXQgd291bGQgYmUgdG9vIGJpZyAoZXhjbHVkZSB0aGUgc2Nyb2xsYmFyKS4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjUxODItc2Nyb2xsdHJpZ2dlci13aWR0aC1vZi1wYWdlLWluY3JlYXNlLXdoZXJlLW1hcmtlcnMtYXJlLXNldC10by1mYWxzZS9cblxuICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTsgLy8gdHJhbnNmb3JtcyB3aWxsIGludGVyZmVyZSB3aXRoIHRoZSB0b3AvbGVmdC9yaWdodC9ib3R0b20gcGxhY2VtZW50LCBzbyByZW1vdmUgdGhlbSB0ZW1wb3JhcmlseS4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZmFjdG9ycyBpbiB0cmFuc2Zvcm1zLlxuXG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKTtcbiAgICAgICAgb3Bwb3NpdGVTY3JvbGwgPSB1c2VGaXhlZFBvc2l0aW9uICYmIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBpc1ZlcnRpY2FsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpKCk7XG5cbiAgICAgICAgaWYgKHBpblNwYWNpbmcpIHtcbiAgICAgICAgICBzcGFjZXJTdGF0ZSA9IFtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMiwgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgKyBfcHhdO1xuICAgICAgICAgIHNwYWNlclN0YXRlLnQgPSBzcGFjZXI7XG4gICAgICAgICAgaSA9IHBpblNwYWNpbmcgPT09IF9wYWRkaW5nID8gX2dldFNpemUocGluLCBkaXJlY3Rpb24pICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgOiAwO1xuICAgICAgICAgIGkgJiYgc3BhY2VyU3RhdGUucHVzaChkaXJlY3Rpb24uZCwgaSArIF9weCk7IC8vIGZvciBib3gtc2l6aW5nOiBib3JkZXItYm94IChtdXN0IGluY2x1ZGUgcGFkZGluZykuXG5cbiAgICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgICAgICAgaWYgKHBpbm5lZENvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gaW4gU2Nyb2xsVHJpZ2dlci5yZWZyZXNoKCksIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgdGhlIHBpbkNvbnRhaW5lcidzIHNpemUgYmVjYXVzZSB0aGlzIHBpblNwYWNpbmcgbWF5IHN0cmV0Y2ggaXQgb3V0LCBidXQgd2UgY2FuJ3QganVzdCBhZGQgdGhlIGV4YWN0IGRpc3RhbmNlIGJlY2F1c2UgZGVwZW5kaW5nIG9uIGxheW91dCwgaXQgbWF5IG5vdCBwdXNoIHRoaW5ncyBkb3duIG9yIGl0IG1heSBvbmx5IGRvIHNvIHBhcnRpYWxseS5cbiAgICAgICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIGlmICh0LnBpbiA9PT0gcGlubmVkQ29udGFpbmVyICYmIHQudmFycy5waW5TcGFjaW5nICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHQuX3N1YlBpbk9mZnNldCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgb3ZlcnJpZGUgPSB7XG4gICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AgKyAoaXNWZXJ0aWNhbCA/IHNjcm9sbCAtIHN0YXJ0IDogb3Bwb3NpdGVTY3JvbGwpICsgX3B4LFxuICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgKyAoaXNWZXJ0aWNhbCA/IG9wcG9zaXRlU2Nyb2xsIDogc2Nyb2xsIC0gc3RhcnQpICsgX3B4LFxuICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCJcbiAgICAgICAgICB9O1xuICAgICAgICAgIG92ZXJyaWRlW193aWR0aF0gPSBvdmVycmlkZVtcIm1heFwiICsgX1dpZHRoXSA9IE1hdGguY2VpbChib3VuZHMud2lkdGgpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19oZWlnaHRdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9IZWlnaHRdID0gTWF0aC5jZWlsKGJvdW5kcy5oZWlnaHQpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19tYXJnaW5dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Ub3BdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9SaWdodF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0JvdHRvbV0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0xlZnRdID0gXCIwXCI7XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1RvcF0gPSBjc1tfcGFkZGluZyArIF9Ub3BdO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1JpZ2h0XSA9IGNzW19wYWRkaW5nICsgX1JpZ2h0XTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Cb3R0b21dID0gY3NbX3BhZGRpbmcgKyBfQm90dG9tXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9MZWZ0XSA9IGNzW19wYWRkaW5nICsgX0xlZnRdO1xuICAgICAgICAgIHBpbkFjdGl2ZVN0YXRlID0gX2NvcHlTdGF0ZShwaW5PcmlnaW5hbFN0YXRlLCBvdmVycmlkZSwgcGluUmVwYXJlbnQpO1xuICAgICAgICAgIF9yZWZyZXNoaW5nQWxsICYmIHNjcm9sbEZ1bmMoMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiBtaWdodCBiZSBhZmZlY3RpbmcgdGhlIHRyYW5zZm9ybSwgc28gd2UgbXVzdCBqdW1wIHRvIHRoZSBlbmQsIGNoZWNrIHRoZSB2YWx1ZSwgYW5kIGNvbXBlbnNhdGUgYWNjb3JkaW5nbHkuIE90aGVyd2lzZSwgd2hlbiBpdCBiZWNvbWVzIHVucGlubmVkLCB0aGUgcGluU2V0dGVyKCkgd2lsbCBnZXQgc2V0IHRvIGEgdmFsdWUgdGhhdCBkb2Vzbid0IGluY2x1ZGUgd2hhdGV2ZXIgdGhlIGFuaW1hdGlvbiBkaWQuXG4gICAgICAgICAgaW5pdHRlZCA9IGFuaW1hdGlvbi5faW5pdHRlZDsgLy8gaWYgbm90LCB3ZSBtdXN0IGludmFsaWRhdGUoKSBhZnRlciB0aGlzIHN0ZXAsIG90aGVyd2lzZSBpdCBjb3VsZCBsb2NrIGluIHN0YXJ0aW5nIHZhbHVlcyBwcmVtYXR1cmVseS5cblxuICAgICAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMoMSk7XG5cbiAgICAgICAgICBhbmltYXRpb24ucmVuZGVyKGFuaW1hdGlvbi5kdXJhdGlvbigpLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBwaW5DaGFuZ2UgPSBwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpIC0gcGluU3RhcnQgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldDtcbiAgICAgICAgICBjaGFuZ2UgIT09IHBpbkNoYW5nZSAmJiB1c2VGaXhlZFBvc2l0aW9uICYmIHBpbkFjdGl2ZVN0YXRlLnNwbGljZShwaW5BY3RpdmVTdGF0ZS5sZW5ndGggLSAyLCAyKTsgLy8gdHJhbnNmb3JtIGlzIHRoZSBsYXN0IHByb3BlcnR5L3ZhbHVlIHNldCBpbiB0aGUgc3RhdGUgQXJyYXkuIFNpbmNlIHRoZSBhbmltYXRpb24gaXMgY29udHJvbGxpbmcgdGhhdCwgd2Ugc2hvdWxkIG9taXQgaXQuXG5cbiAgICAgICAgICBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgfHwgYW5pbWF0aW9uLmludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgICAgYW5pbWF0aW9uLnBhcmVudCB8fCBhbmltYXRpb24udG90YWxUaW1lKGFuaW1hdGlvbi50b3RhbFRpbWUoKSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgYSB0b2dnbGVBY3Rpb24gY2FsbGVkIHBsYXkoKSBhbmQgdGhlbiByZWZyZXNoKCkgaGFwcGVucyBhbmQgd2hlbiB3ZSByZW5kZXIoMSkgYWJvdmUsIGl0IHdvdWxkIGNhdXNlIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgYW5kIGdldCByZW1vdmVkIGZyb20gaXRzIHBhcmVudCwgc28gdGhpcyBtYWtlcyBzdXJlIGl0IGdldHMgcHV0IGJhY2sgaW4uXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpbkNoYW5nZSA9IGNoYW5nZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICYmIHNjcm9sbEZ1bmMoKSAmJiAhY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGl0IG1heSBiZSBJTlNJREUgYSBwaW5uZWQgZWxlbWVudCwgc28gd2FsayB1cCB0aGUgdHJlZSBhbmQgbG9vayBmb3IgYW55IGVsZW1lbnRzIHdpdGggX3Bpbk9mZnNldCB0byBjb21wZW5zYXRlIGJlY2F1c2UgYW55dGhpbmcgd2l0aCBwaW5TcGFjaW5nIHRoYXQncyBhbHJlYWR5IHNjcm9sbGVkIHdvdWxkIHRocm93IG9mZiB0aGUgbWVhc3VyZW1lbnRzIGluIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGJvdW5kcyA9IHRyaWdnZXIucGFyZW50Tm9kZTtcblxuICAgICAgICB3aGlsZSAoYm91bmRzICYmIGJvdW5kcyAhPT0gX2JvZHkpIHtcbiAgICAgICAgICBpZiAoYm91bmRzLl9waW5PZmZzZXQpIHtcbiAgICAgICAgICAgIHN0YXJ0IC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgICAgZW5kIC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJvdW5kcyA9IGJvdW5kcy5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldmVydGVkUGlucyAmJiByZXZlcnRlZFBpbnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5yZXZlcnQoZmFsc2UsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICBzZWxmLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICBzZWxmLmVuZCA9IGVuZDtcbiAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gX3JlZnJlc2hpbmdBbGwgPyBwcmV2U2Nyb2xsIDogc2Nyb2xsRnVuYygpOyAvLyByZXNldCB2ZWxvY2l0eVxuXG4gICAgICBpZiAoIWNvbnRhaW5lckFuaW1hdGlvbiAmJiAhX3JlZnJlc2hpbmdBbGwpIHtcbiAgICAgICAgc2Nyb2xsMSA8IHByZXZTY3JvbGwgJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgc2VsZi5zY3JvbGwucmVjID0gMDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yZXZlcnQoZmFsc2UsIHRydWUpO1xuXG4gICAgICBpZiAoc25hcERlbGF5ZWRDYWxsKSB7XG4gICAgICAgIGxhc3RTbmFwID0gLTE7XG4gICAgICAgIHNlbGYuaXNBY3RpdmUgJiYgc2Nyb2xsRnVuYyhzdGFydCArIGNoYW5nZSAqIHByZXZQcm9ncmVzcyk7IC8vIGp1c3Qgc28gc25hcHBpbmcgZ2V0cyByZS1lbmFibGVkLCBjbGVhciBvdXQgYW55IHJlY29yZGVkIGxhc3QgdmFsdWVcblxuICAgICAgICBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgX3JlZnJlc2hpbmcgPSAwO1xuICAgICAgYW5pbWF0aW9uICYmIGlzVG9nZ2xlICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgcHJldkFuaW1Qcm9ncmVzcykgJiYgYW5pbWF0aW9uLnByb2dyZXNzKCkgIT09IHByZXZBbmltUHJvZ3Jlc3MgJiYgYW5pbWF0aW9uLnByb2dyZXNzKHByZXZBbmltUHJvZ3Jlc3MsIHRydWUpLnJlbmRlcihhbmltYXRpb24udGltZSgpLCB0cnVlLCB0cnVlKTsgLy8gbXVzdCBmb3JjZSBhIHJlLXJlbmRlciBiZWNhdXNlIGlmIHNhdmVTdHlsZXMoKSB3YXMgdXNlZCBvbiB0aGUgdGFyZ2V0KHMpLCB0aGUgc3R5bGVzIGNvdWxkIGhhdmUgYmVlbiB3aXBlZCBvdXQgZHVyaW5nIHRoZSByZWZyZXNoKCkuXG5cbiAgICAgIGlmIChwcmV2UHJvZ3Jlc3MgIT09IHNlbGYucHJvZ3Jlc3MgfHwgY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgZGlyZWN0aW9uIGlzIHNldCBwcm9wZXJseSAod2hlbiByZWZyZXNoaW5nLCBwcm9ncmVzcyBpcyBzZXQgYmFjayB0byAwIGluaXRpYWxseSwgdGhlbiBiYWNrIGFnYWluIHRvIHdoZXJldmVyIGl0IG5lZWRzIHRvIGJlKSBhbmQgdGhhdCBjYWxsYmFja3MgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgYW5pbWF0aW9uICYmICFpc1RvZ2dsZSAmJiBhbmltYXRpb24udG90YWxQcm9ncmVzcyhwcmV2UHJvZ3Jlc3MsIHRydWUpOyAvLyB0byBhdm9pZCBpc3N1ZXMgd2hlcmUgYW5pbWF0aW9uIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQgYXJlbid0IHRyaWdnZXJlZC5cblxuICAgICAgICBzZWxmLnByb2dyZXNzID0gKHNjcm9sbDEgLSBzdGFydCkgLyBjaGFuZ2UgPT09IHByZXZQcm9ncmVzcyA/IDAgOiBwcmV2UHJvZ3Jlc3M7XG4gICAgICB9XG5cbiAgICAgIHBpbiAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuX3Bpbk9mZnNldCA9IE1hdGgucm91bmQoc2VsZi5wcm9ncmVzcyAqIHBpbkNoYW5nZSkpOyAvL1x0XHRcdHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5pbnZhbGlkYXRlKCk7XG5cbiAgICAgIG9uUmVmcmVzaCAmJiAhX3JlZnJlc2hpbmdBbGwgJiYgb25SZWZyZXNoKHNlbGYpOyAvLyB3aGVuIHJlZnJlc2hpbmcgYWxsLCB3ZSBkbyBleHRyYSB3b3JrIHRvIGNvcnJlY3QgcGlubmVkQ29udGFpbmVyIHNpemVzIGFuZCBlbnN1cmUgdGhpbmdzIGRvbid0IGV4Y2VlZCB0aGUgbWF4U2Nyb2xsLCBzbyB3ZSBzaG91bGQgZG8gYWxsIHRoZSByZWZyZXNoZXMgYXQgdGhlIGVuZCBhZnRlciBhbGwgdGhhdCB3b3JrIHNvIHRoYXQgdGhlIHN0YXJ0L2VuZCB2YWx1ZXMgYXJlIGNvcnJlY3RlZC5cbiAgICB9O1xuXG4gICAgc2VsZi5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoc2Nyb2xsRnVuYygpIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiAxMDAwIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6ICFhbmltYXRpb24ucGF1c2VkKCkgPyBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLnJldmVyc2VkKCkpIDogaXNUb2dnbGUgfHwgX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHNlbGYuZGlyZWN0aW9uIDwgMCwgMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYubGFiZWxUb1Njcm9sbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgcmV0dXJuIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ubGFiZWxzICYmIChzdGFydCB8fCBzZWxmLnJlZnJlc2goKSB8fCBzdGFydCkgKyBhbmltYXRpb24ubGFiZWxzW2xhYmVsXSAvIGFuaW1hdGlvbi5kdXJhdGlvbigpICogY2hhbmdlIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHJhaWxpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSxcbiAgICAgICAgICBhID0gc2VsZi5kaXJlY3Rpb24gPiAwID8gX3RyaWdnZXJzLnNsaWNlKDAsIGkpLnJldmVyc2UoKSA6IF90cmlnZ2Vycy5zbGljZShpICsgMSk7XG5cbiAgICAgIHJldHVybiAoX2lzU3RyaW5nKG5hbWUpID8gYS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQudmFycy5wcmV2ZW50T3ZlcmxhcHMgPT09IG5hbWU7XG4gICAgICB9KSA6IGEpLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gc2VsZi5kaXJlY3Rpb24gPiAwID8gdC5lbmQgPD0gc3RhcnQgOiB0LnN0YXJ0ID49IGVuZDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uIChyZXNldCwgcmVjb3JkVmVsb2NpdHksIGZvcmNlRmFrZSkge1xuICAgICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiAhZm9yY2VGYWtlICYmICFyZXNldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzY3JvbGwgPSBfcmVmcmVzaGluZ0FsbCA/IHByZXZTY3JvbGwgOiBzZWxmLnNjcm9sbCgpLFxuICAgICAgICAgIHAgPSByZXNldCA/IDAgOiAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgIGNsaXBwZWQgPSBwIDwgMCA/IDAgOiBwID4gMSA/IDEgOiBwIHx8IDAsXG4gICAgICAgICAgcHJldlByb2dyZXNzID0gc2VsZi5wcm9ncmVzcyxcbiAgICAgICAgICBpc0FjdGl2ZSxcbiAgICAgICAgICB3YXNBY3RpdmUsXG4gICAgICAgICAgdG9nZ2xlU3RhdGUsXG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIHN0YXRlQ2hhbmdlZCxcbiAgICAgICAgICB0b2dnbGVkLFxuICAgICAgICAgIGlzQXRNYXgsXG4gICAgICAgICAgaXNUYWtpbmdBY3Rpb247XG5cbiAgICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgICBzY3JvbGwyID0gc2Nyb2xsMTtcbiAgICAgICAgc2Nyb2xsMSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IHNjcm9sbEZ1bmMoKSA6IHNjcm9sbDtcblxuICAgICAgICBpZiAoc25hcCkge1xuICAgICAgICAgIHNuYXAyID0gc25hcDE7XG4gICAgICAgICAgc25hcDEgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IGNsaXBwZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gYW50aWNpcGF0ZSB0aGUgcGlubmluZyBhIGZldyB0aWNrcyBhaGVhZCBvZiB0aW1lIGJhc2VkIG9uIHZlbG9jaXR5IHRvIGF2b2lkIGEgdmlzdWFsIGdsaXRjaCBkdWUgdG8gdGhlIGZhY3QgdGhhdCBtb3N0IGJyb3dzZXJzIGRvIHNjcm9sbGluZyBvbiBhIHNlcGFyYXRlIHRocmVhZCAobm90IHN5bmNlZCB3aXRoIHJlcXVlc3RBbmltYXRpb25GcmFtZSkuXG5cblxuICAgICAgYW50aWNpcGF0ZVBpbiAmJiAhY2xpcHBlZCAmJiBwaW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCAmJiBfbGFzdFNjcm9sbFRpbWUgJiYgc3RhcnQgPCBzY3JvbGwgKyAoc2Nyb2xsIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiBhbnRpY2lwYXRlUGluICYmIChjbGlwcGVkID0gMC4wMDAxKTtcblxuICAgICAgaWYgKGNsaXBwZWQgIT09IHByZXZQcm9ncmVzcyAmJiBzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgaXNBY3RpdmUgPSBzZWxmLmlzQWN0aXZlID0gISFjbGlwcGVkICYmIGNsaXBwZWQgPCAxO1xuICAgICAgICB3YXNBY3RpdmUgPSAhIXByZXZQcm9ncmVzcyAmJiBwcmV2UHJvZ3Jlc3MgPCAxO1xuICAgICAgICB0b2dnbGVkID0gaXNBY3RpdmUgIT09IHdhc0FjdGl2ZTtcbiAgICAgICAgc3RhdGVDaGFuZ2VkID0gdG9nZ2xlZCB8fCAhIWNsaXBwZWQgIT09ICEhcHJldlByb2dyZXNzOyAvLyBjb3VsZCBnbyBmcm9tIHN0YXJ0IGFsbCB0aGUgd2F5IHRvIGVuZCwgdGh1cyBpdCBkaWRuJ3QgdG9nZ2xlIGJ1dCBpdCBkaWQgY2hhbmdlIHN0YXRlIGluIGEgc2Vuc2UgKG1heSBuZWVkIHRvIGZpcmUgYSBjYWxsYmFjaylcblxuICAgICAgICBzZWxmLmRpcmVjdGlvbiA9IGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgPyAxIDogLTE7XG4gICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBjbGlwcGVkO1xuXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkICYmICFwcmV2UHJvZ3Jlc3MgPyAwIDogY2xpcHBlZCA9PT0gMSA/IDEgOiBwcmV2UHJvZ3Jlc3MgPT09IDEgPyAyIDogMzsgLy8gMCA9IGVudGVyLCAxID0gbGVhdmUsIDIgPSBlbnRlckJhY2ssIDMgPSBsZWF2ZUJhY2sgKHdlIHByaW9yaXRpemUgdGhlIEZJUlNUIGVuY291bnRlciwgdGh1cyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0IHBhc3QgdGhlIG9uRW50ZXIgYW5kIG9uTGVhdmUgaW4gb25lIHRpY2ssIGl0J2QgcHJpb3JpdGl6ZSBvbkVudGVyLlxuXG4gICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSAhdG9nZ2xlZCAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gIT09IFwibm9uZVwiICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSB8fCB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlXTsgLy8gaWYgaXQgZGlkbid0IHRvZ2dsZSwgdGhhdCBtZWFucyBpdCBzaG90IHJpZ2h0IHBhc3QgYW5kIHNpbmNlIHdlIHByaW9yaXRpemUgdGhlIFwiZW50ZXJcIiBhY3Rpb24sIHdlIHNob3VsZCBzd2l0Y2ggdG8gdGhlIFwibGVhdmVcIiBpbiB0aGlzIGNhc2UgKGJ1dCBvbmx5IGlmIG9uZSBpcyBkZWZpbmVkKVxuXG4gICAgICAgICAgICBpc1Rha2luZ0FjdGlvbiA9IGFuaW1hdGlvbiAmJiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIgfHwgYWN0aW9uID09PSBcInJlc2V0XCIgfHwgYWN0aW9uIGluIGFuaW1hdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldmVudE92ZXJsYXBzICYmICh0b2dnbGVkIHx8IGlzVGFraW5nQWN0aW9uKSAmJiAoaXNUYWtpbmdBY3Rpb24gfHwgc2NydWIgfHwgIWFuaW1hdGlvbikgJiYgKF9pc0Z1bmN0aW9uKHByZXZlbnRPdmVybGFwcykgPyBwcmV2ZW50T3ZlcmxhcHMoc2VsZikgOiBzZWxmLmdldFRyYWlsaW5nKHByZXZlbnRPdmVybGFwcykuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LmVuZEFuaW1hdGlvbigpO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKCFpc1RvZ2dsZSkge1xuICAgICAgICAgIGlmIChzY3J1YlR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXApIHtcbiAgICAgICAgICAgIChjb250YWluZXJBbmltYXRpb24gfHwgX3ByaW1hcnkgJiYgX3ByaW1hcnkgIT09IHNlbGYpICYmIHNjcnViVHdlZW4ucmVuZGVyKHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQpOyAvLyBpZiB0aGVyZSdzIGEgc2NydWIgb24gYm90aCB0aGUgY29udGFpbmVyIGFuaW1hdGlvbiBhbmQgdGhpcyBvbmUgKG9yIGEgU2Nyb2xsU21vb3RoZXIpLCB0aGUgdXBkYXRlIG9yZGVyIHdvdWxkIGNhdXNlIHRoaXMgb25lIG5vdCB0byBoYXZlIHJlbmRlcmVkIHlldCwgc28gaXQgd291bGRuJ3QgbWFrZSBhbnkgcHJvZ3Jlc3MgYmVmb3JlIHdlIC5yZXN0YXJ0KCkgaXQgaGVhZGluZyB0b3dhcmQgdGhlIG5ldyBwcm9ncmVzcyBzbyBpdCdkIGFwcGVhciBzdHVjayB0aHVzIHdlIGZvcmNlIGEgcmVuZGVyIGhlcmUuXG5cbiAgICAgICAgICAgIGlmIChzY3J1YlR3ZWVuLnJlc2V0VG8pIHtcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi5yZXNldFRvKFwidG90YWxQcm9ncmVzc1wiLCBjbGlwcGVkLCBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZ2FjeSBzdXBwb3J0IChjb3VydGVzeSksIGJlZm9yZSAzLjEwLjBcbiAgICAgICAgICAgICAgc2NydWJUd2Vlbi52YXJzLnRvdGFsUHJvZ3Jlc3MgPSBjbGlwcGVkO1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKS5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNsaXBwZWQsICEhX3JlZnJlc2hpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICByZXNldCAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuc3R5bGVbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdID0gc3BhY2luZ1N0YXJ0KTtcblxuICAgICAgICAgIGlmICghdXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgICAgcGluU2V0dGVyKF9yb3VuZChwaW5TdGFydCArIHBpbkNoYW5nZSAqIGNsaXBwZWQpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgaXNBdE1heCA9ICFyZXNldCAmJiBjbGlwcGVkID4gcHJldlByb2dyZXNzICYmIGVuZCArIDEgPiBzY3JvbGwgJiYgc2Nyb2xsICsgMSA+PSBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pOyAvLyBpZiBpdCdzIGF0IHRoZSBWRVJZIGVuZCBvZiB0aGUgcGFnZSwgZG9uJ3Qgc3dpdGNoIGF3YXkgZnJvbSBwb3NpdGlvbjogZml4ZWQgYmVjYXVzZSBpdCdzIHBvaW50bGVzcyBhbmQgaXQgY291bGQgY2F1c2UgYSBicmllZiBmbGFzaCB3aGVuIHRoZSB1c2VyIHNjcm9sbHMgYmFjayB1cCAod2hlbiBpdCBnZXRzIHBpbm5lZCBhZ2FpbilcblxuICAgICAgICAgICAgaWYgKHBpblJlcGFyZW50KSB7XG4gICAgICAgICAgICAgIGlmICghcmVzZXQgJiYgKGlzQWN0aXZlIHx8IGlzQXRNYXgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgX29mZnNldCA9IHNjcm9sbCAtIHN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgX2JvZHksIGJvdW5kcy50b3AgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfb2Zmc2V0IDogMCkgKyBfcHgsIGJvdW5kcy5sZWZ0ICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gMCA6IF9vZmZzZXQpICsgX3B4KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBzcGFjZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9zZXRTdGF0ZShpc0FjdGl2ZSB8fCBpc0F0TWF4ID8gcGluQWN0aXZlU3RhdGUgOiBwaW5TdGF0ZSk7XG5cbiAgICAgICAgICAgIHBpbkNoYW5nZSAhPT0gY2hhbmdlICYmIGNsaXBwZWQgPCAxICYmIGlzQWN0aXZlIHx8IHBpblNldHRlcihwaW5TdGFydCArIChjbGlwcGVkID09PSAxICYmICFpc0F0TWF4ID8gcGluQ2hhbmdlIDogMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNuYXAgJiYgIXR3ZWVuVG8udHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCAmJiBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MgJiYgKHRvZ2dsZWQgfHwgb25jZSAmJiBjbGlwcGVkICYmIChjbGlwcGVkIDwgMSB8fCAhX2xpbWl0Q2FsbGJhY2tzKSkgJiYgX3RvQXJyYXkodG9nZ2xlQ2xhc3MudGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0W2lzQWN0aXZlIHx8IG9uY2UgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0odG9nZ2xlQ2xhc3MuY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7IC8vIGNsYXNzZXMgY291bGQgYWZmZWN0IHBvc2l0aW9uaW5nLCBzbyBkbyBpdCBldmVuIGlmIHJlc2V0IG9yIHJlZnJlc2hpbmcgaXMgdHJ1ZS5cblxuICAgICAgICBvblVwZGF0ZSAmJiAhaXNUb2dnbGUgJiYgIXJlc2V0ICYmIG9uVXBkYXRlKHNlbGYpO1xuXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICBpZiAoaXNUYWtpbmdBY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnBhdXNlKCkudG90YWxQcm9ncmVzcygxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzZXRcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpLnBhdXNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc3RhcnRcIikge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblthY3Rpb25dKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb25VcGRhdGUgJiYgb25VcGRhdGUoc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRvZ2dsZWQgfHwgIV9saW1pdENhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gb24gc3RhcnR1cCwgdGhlIHBhZ2UgY291bGQgYmUgc2Nyb2xsZWQgYW5kIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBjYWxsYmFja3MgdGhhdCBkaWRuJ3QgdG9nZ2xlLiBGb3IgZXhhbXBsZSBvbkVudGVyIHNob3VsZG4ndCBmaXJlIGlmIHRoZSBTY3JvbGxUcmlnZ2VyIGlzbid0IGFjdHVhbGx5IGVudGVyZWQuXG4gICAgICAgICAgICBvblRvZ2dsZSAmJiB0b2dnbGVkICYmIF9jYWxsYmFjayhzZWxmLCBvblRvZ2dsZSk7XG4gICAgICAgICAgICBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdICYmIF9jYWxsYmFjayhzZWxmLCBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdKTtcbiAgICAgICAgICAgIG9uY2UgJiYgKGNsaXBwZWQgPT09IDEgPyBzZWxmLmtpbGwoZmFsc2UsIDEpIDogY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSA9IDApOyAvLyBhIGNhbGxiYWNrIHNob3VsZG4ndCBiZSBjYWxsZWQgYWdhaW4gaWYgb25jZSBpcyB0cnVlLlxuXG4gICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgLy8gaXQncyBwb3NzaWJsZSB0byBnbyBjb21wbGV0ZWx5IHBhc3QsIGxpa2UgZnJvbSBiZWZvcmUgdGhlIHN0YXJ0IHRvIGFmdGVyIHRoZSBlbmQgKG9yIHZpY2UtdmVyc2EpIGluIHdoaWNoIGNhc2UgQk9USCBjYWxsYmFja3Mgc2hvdWxkIGJlIGZpcmVkIGluIHRoYXQgb3JkZXJcbiAgICAgICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkID09PSAxID8gMSA6IDM7XG4gICAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmYXN0U2Nyb2xsRW5kICYmICFpc0FjdGl2ZSAmJiBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpID4gKF9pc051bWJlcihmYXN0U2Nyb2xsRW5kKSA/IGZhc3RTY3JvbGxFbmQgOiAyNTAwKSkge1xuICAgICAgICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4ucHJvZ3Jlc3MoMSkgOiBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYWN0aW9uID09PSBcInJldmVyc2VcIiA/IDEgOiAhY2xpcHBlZCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzVG9nZ2xlICYmIG9uVXBkYXRlICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9IC8vIHVwZGF0ZSBhYnNvbHV0ZWx5LXBvc2l0aW9uZWQgbWFya2VycyAob25seSBpZiB0aGUgc2Nyb2xsZXIgaXNuJ3QgdGhlIHZpZXdwb3J0KVxuXG5cbiAgICAgIGlmIChtYXJrZXJFbmRTZXR0ZXIpIHtcbiAgICAgICAgdmFyIG4gPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSA6IHNjcm9sbDtcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIobiArIChtYXJrZXJTdGFydFRyaWdnZXIuX2lzRmxpcHBlZCA/IDEgOiAwKSk7XG4gICAgICAgIG1hcmtlckVuZFNldHRlcihuKTtcbiAgICAgIH1cblxuICAgICAgY2FNYXJrZXJTZXR0ZXIgJiYgY2FNYXJrZXJTZXR0ZXIoLXNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApKTtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlZnJlc2gpIHtcbiAgICAgIGlmICghc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gX2RvYyA6IHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgaWYgKHJlc2V0ICE9PSBmYWxzZSkge1xuICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBwcmV2UHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gbGFzdFNuYXAgPSBzY3JvbGxGdW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZWZyZXNoICE9PSBmYWxzZSAmJiBzZWxmLnJlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5nZXRUd2VlbiA9IGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICByZXR1cm4gc25hcCAmJiB0d2VlblRvID8gdHdlZW5Uby50d2VlbiA6IHNjcnViVHdlZW47XG4gICAgfTtcblxuICAgIHNlbGYuc2V0UG9zaXRpb25zID0gZnVuY3Rpb24gKG5ld1N0YXJ0LCBuZXdFbmQpIHtcbiAgICAgIC8vIGRvZXNuJ3QgcGVyc2lzdCBhZnRlciByZWZyZXNoKCkhIEludGVuZGVkIHRvIGJlIGEgd2F5IHRvIG92ZXJyaWRlIHZhbHVlcyB0aGF0IHdlcmUgc2V0IGR1cmluZyByZWZyZXNoKCksIGxpa2UgeW91IGNvdWxkIHNldCBpdCBpbiBvblJlZnJlc2goKVxuICAgICAgaWYgKHBpbikge1xuICAgICAgICBwaW5TdGFydCArPSBuZXdTdGFydCAtIHN0YXJ0O1xuICAgICAgICBwaW5DaGFuZ2UgKz0gbmV3RW5kIC0gbmV3U3RhcnQgLSBjaGFuZ2U7XG4gICAgICAgIHBpblNwYWNpbmcgPT09IF9wYWRkaW5nICYmIHNlbGYuYWRqdXN0UGluU3BhY2luZyhuZXdFbmQgLSBuZXdTdGFydCAtIGNoYW5nZSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuc3RhcnQgPSBzdGFydCA9IG5ld1N0YXJ0O1xuICAgICAgc2VsZi5lbmQgPSBlbmQgPSBuZXdFbmQ7XG4gICAgICBjaGFuZ2UgPSBuZXdFbmQgLSBuZXdTdGFydDtcbiAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHNlbGYuYWRqdXN0UGluU3BhY2luZyA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgIGlmIChzcGFjZXJTdGF0ZSkge1xuICAgICAgICB2YXIgaSA9IHNwYWNlclN0YXRlLmluZGV4T2YoZGlyZWN0aW9uLmQpICsgMTtcbiAgICAgICAgc3BhY2VyU3RhdGVbaV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlW2ldKSArIGFtb3VudCArIF9weDtcbiAgICAgICAgc3BhY2VyU3RhdGVbMV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlWzFdKSArIGFtb3VudCArIF9weDtcblxuICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAocmVzZXQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHJlc2V0ICE9PSBmYWxzZSAmJiBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgc2VsZi5lbmFibGVkID0gc2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgICAgcHJldlNjcm9sbCA9IDA7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX3JlbW92ZUxpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICAgIHR3ZWVuVG8udHdlZW4gJiYgdHdlZW5Uby50d2Vlbi5raWxsKCkgJiYgKHR3ZWVuVG8udHdlZW4gPSAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWaWV3cG9ydCkge1xuICAgICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGlmIChfdHJpZ2dlcnNbaV0uc2Nyb2xsZXIgPT09IHNjcm9sbGVyICYmIF90cmlnZ2Vyc1tpXSAhPT0gc2VsZikge1xuICAgICAgICAgICAgICByZXR1cm47IC8vZG9uJ3QgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgaWYgdGhlcmUgYXJlIHN0aWxsIG90aGVyIHRyaWdnZXJzIHJlZmVyZW5jaW5nIGl0LlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLmtpbGwgPSBmdW5jdGlvbiAocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgc2VsZi5kaXNhYmxlKHJldmVydCwgYWxsb3dBbmltYXRpb24pO1xuICAgICAgc2NydWJUd2VlbiAmJiAhYWxsb3dBbmltYXRpb24gJiYgc2NydWJUd2Vlbi5raWxsKCk7XG4gICAgICBpZCAmJiBkZWxldGUgX2lkc1tpZF07XG5cbiAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgIGkgPj0gMCAmJiBfdHJpZ2dlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgaSA9PT0gX2kgJiYgX2RpcmVjdGlvbiA+IDAgJiYgX2ktLTsgLy8gaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHJlZnJlc2goKSBvciB1cGRhdGUoKSwgc3BsaWNpbmcgd291bGQgY2F1c2Ugc2tpcHMgaW4gdGhlIGluZGV4LCBzbyBhZGp1c3QuLi5cbiAgICAgIC8vIGlmIG5vIG90aGVyIFNjcm9sbFRyaWdnZXIgaW5zdGFuY2VzIG9mIHRoZSBzYW1lIHNjcm9sbGVyIGFyZSBmb3VuZCwgd2lwZSBvdXQgYW55IHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbi4gT3RoZXJ3aXNlLCBpbiBhIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9uLCBmb3IgZXhhbXBsZSwgaXQgY291bGQgbWFpbnRhaW4gc2Nyb2xsIHBvc2l0aW9uIHdoZW4gaXQgcmVhbGx5IHNob3VsZG4ndC5cblxuICAgICAgaSA9IDA7XG5cbiAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnNjcm9sbGVyID09PSBzZWxmLnNjcm9sbGVyICYmIChpID0gMSk7XG4gICAgICB9KTtcblxuICAgICAgaSB8fCBfcmVmcmVzaGluZ0FsbCB8fCAoc2VsZi5zY3JvbGwucmVjID0gMCk7XG5cbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBudWxsO1xuICAgICAgICByZXZlcnQgJiYgYW5pbWF0aW9uLnJldmVydCh7XG4gICAgICAgICAga2lsbDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGFsbG93QW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5raWxsKCk7XG4gICAgICB9XG5cbiAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIG0ucGFyZW50Tm9kZSAmJiBtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobSk7XG4gICAgICB9KTtcbiAgICAgIF9wcmltYXJ5ID09PSBzZWxmICYmIChfcHJpbWFyeSA9IDApO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQucGluID09PSBwaW4gJiYgaSsrO1xuICAgICAgICB9KTtcblxuICAgICAgICBpIHx8IChwaW5DYWNoZS5zcGFjZXIgPSAwKTsgLy8gaWYgdGhlcmUgYXJlbid0IGFueSBtb3JlIFNjcm9sbFRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZW1vdmUgdGhlIHNwYWNlciwgb3RoZXJ3aXNlIGl0IGNvdWxkIGJlIGNvbnRhbWluYXRlZCB3aXRoIG9sZC9zdGFsZSB2YWx1ZXMgaWYgdGhlIHVzZXIgcmUtY3JlYXRlcyBhIFNjcm9sbFRyaWdnZXIgZm9yIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAgICB9XG5cbiAgICAgIHZhcnMub25LaWxsICYmIHZhcnMub25LaWxsKHNlbGYpO1xuICAgIH07XG5cbiAgICBzZWxmLmVuYWJsZShmYWxzZSwgZmFsc2UpO1xuICAgIGN1c3RvbVJldmVydFJldHVybiAmJiBjdXN0b21SZXZlcnRSZXR1cm4oc2VsZik7XG4gICAgIWFuaW1hdGlvbiB8fCAhYW5pbWF0aW9uLmFkZCB8fCBjaGFuZ2UgPyBzZWxmLnJlZnJlc2goKSA6IGdzYXAuZGVsYXllZENhbGwoMC4wMSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0IHx8IGVuZCB8fCBzZWxmLnJlZnJlc2goKTtcbiAgICB9KSAmJiAoY2hhbmdlID0gMC4wMSkgJiYgKHN0YXJ0ID0gZW5kID0gMCk7IC8vIGlmIHRoZSBhbmltYXRpb24gaXMgYSB0aW1lbGluZSwgaXQgbWF5IG5vdCBoYXZlIGJlZW4gcG9wdWxhdGVkIHlldCwgc28gaXQgd291bGRuJ3QgcmVuZGVyIGF0IHRoZSBwcm9wZXIgcGxhY2Ugb24gdGhlIGZpcnN0IHJlZnJlc2goKSwgdGh1cyB3ZSBzaG91bGQgc2NoZWR1bGUgb25lIGZvciB0aGUgbmV4dCB0aWNrLiBJZiBcImNoYW5nZVwiIGlzIGRlZmluZWQsIHdlIGtub3cgaXQgbXVzdCBiZSByZS1lbmFibGluZywgdGh1cyB3ZSBjYW4gcmVmcmVzaCgpIHJpZ2h0IGF3YXkuXG5cbiAgICBwaW4gJiYgX3F1ZXVlUmVmcmVzaEFsbCgpOyAvLyBwaW5uaW5nIGNvdWxkIGFmZmVjdCB0aGUgcG9zaXRpb25zIG9mIG90aGVyIHRoaW5ncywgc28gbWFrZSBzdXJlIHdlIHF1ZXVlIGEgZnVsbCByZWZyZXNoKClcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29yZSkge1xuICAgIGlmICghX2NvcmVJbml0dGVkKSB7XG4gICAgICBnc2FwID0gY29yZSB8fCBfZ2V0R1NBUCgpO1xuICAgICAgX3dpbmRvd0V4aXN0cygpICYmIHdpbmRvdy5kb2N1bWVudCAmJiBTY3JvbGxUcmlnZ2VyLmVuYWJsZSgpO1xuICAgICAgX2NvcmVJbml0dGVkID0gX2VuYWJsZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb3JlSW5pdHRlZDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmRlZmF1bHRzID0gZnVuY3Rpb24gZGVmYXVsdHMoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgZm9yICh2YXIgcCBpbiBjb25maWcpIHtcbiAgICAgICAgX2RlZmF1bHRzW3BdID0gY29uZmlnW3BdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfZGVmYXVsdHM7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZShyZXNldCwga2lsbCkge1xuICAgIF9lbmFibGVkID0gMDtcblxuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICByZXR1cm4gdHJpZ2dlcltraWxsID8gXCJraWxsXCIgOiBcImRpc2FibGVcIl0ocmVzZXQpO1xuICAgIH0pO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF93aW4sIFwid2hlZWxcIiwgX29uU2Nyb2xsKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgY2xlYXJJbnRlcnZhbChfc3luY0ludGVydmFsKTtcblxuICAgIF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICBfcmVtb3ZlTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpO1xuXG4gICAgX211bHRpTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJkb3duLHRvdWNoc3RhcnQsbW91c2Vkb3duXCIsIF9wb2ludGVyRG93bkhhbmRsZXIpO1xuXG4gICAgX211bHRpTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyLCBfZG9jLCBcInBvaW50ZXJ1cCx0b3VjaGVuZCxtb3VzZXVwXCIsIF9wb2ludGVyVXBIYW5kbGVyKTtcblxuICAgIF9yZXNpemVEZWxheS5raWxsKCk7XG5cbiAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lcik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMV0pO1xuXG4gICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDJdKTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gZG9jdW1lbnQ7XG4gICAgX2RvY0VsID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX2JvZHkgPSBfZG9jLmJvZHk7XG5cbiAgICBpZiAoZ3NhcCkge1xuICAgICAgX3RvQXJyYXkgPSBnc2FwLnV0aWxzLnRvQXJyYXk7XG4gICAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuICAgICAgX2NvbnRleHQgPSBnc2FwLmNvcmUuY29udGV4dCB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzID0gZ3NhcC5jb3JlLnN1cHByZXNzT3ZlcndyaXRlcyB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICBfc2Nyb2xsUmVzdG9yYXRpb24gPSBfd2luLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gfHwgXCJhdXRvXCI7XG4gICAgICBnc2FwLmNvcmUuZ2xvYmFscyhcIlNjcm9sbFRyaWdnZXJcIiwgU2Nyb2xsVHJpZ2dlcik7IC8vIG11c3QgcmVnaXN0ZXIgdGhlIGdsb2JhbCBtYW51YWxseSBiZWNhdXNlIGluIEludGVybmV0IEV4cGxvcmVyLCBmdW5jdGlvbnMgKGNsYXNzZXMpIGRvbid0IGhhdmUgYSBcIm5hbWVcIiBwcm9wZXJ0eS5cblxuICAgICAgaWYgKF9ib2R5KSB7XG4gICAgICAgIF9lbmFibGVkID0gMTtcbiAgICAgICAgT2JzZXJ2ZXIucmVnaXN0ZXIoZ3NhcCk7IC8vIGlzVG91Y2ggaXMgMCBpZiBubyB0b3VjaCwgMSBpZiBPTkxZIHRvdWNoLCBhbmQgMiBpZiBpdCBjYW4gYWNjb21tb2RhdGUgdG91Y2ggYnV0IGFsc28gb3RoZXIgdHlwZXMgbGlrZSBtb3VzZS9wb2ludGVyLlxuXG4gICAgICAgIFNjcm9sbFRyaWdnZXIuaXNUb3VjaCA9IE9ic2VydmVyLmlzVG91Y2g7XG4gICAgICAgIF9maXhJT1NCdWcgPSBPYnNlcnZlci5pc1RvdWNoICYmIC8oaVBhZHxpUGhvbmV8aVBvZHxNYWMpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gc2luY2UgMjAxNywgaU9TIGhhcyBoYWQgYSBidWcgdGhhdCBjYXVzZXMgZXZlbnQuY2xpZW50WC9ZIHRvIGJlIGluYWNjdXJhdGUgd2hlbiBhIHNjcm9sbCBvY2N1cnMsIHRodXMgd2UgbXVzdCBhbHRlcm5hdGUgaWdub3JpbmcgZXZlcnkgb3RoZXIgdG91Y2htb3ZlIGV2ZW50IHRvIHdvcmsgYXJvdW5kIGl0LiBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MTk1NCBhbmQgaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vRXhiclBOYS8wODdjZWYxOTdkYzM1NDQ1YTA5NTFlODkzNWM0MTUwM1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcIndoZWVsXCIsIF9vblNjcm9sbCk7IC8vIG1vc3RseSBmb3IgM3JkIHBhcnR5IHNtb290aCBzY3JvbGxpbmcgbGlicmFyaWVzLlxuXG5cbiAgICAgICAgX3Jvb3QgPSBbX3dpbiwgX2RvYywgX2RvY0VsLCBfYm9keV07XG5cbiAgICAgICAgaWYgKGdzYXAubWF0Y2hNZWRpYSkge1xuICAgICAgICAgIFNjcm9sbFRyaWdnZXIubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgICAgICAgICB2YXIgbW0gPSBnc2FwLm1hdGNoTWVkaWEoKSxcbiAgICAgICAgICAgICAgICBwO1xuXG4gICAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgICBtbS5hZGQocCwgdmFyc1twXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtbTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgZ3NhcC5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYUluaXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZXZlcnRBbGwoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhUmV2ZXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0UmVjb3JkZWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBnc2FwLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9yZWZyZXNoQWxsKDAsIDEpO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGdzYXAubWF0Y2hNZWRpYShcIihvcmllbnRhdGlvbjogcG9ydHJhaXQpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHdoZW4gb3JpZW50YXRpb24gY2hhbmdlcywgd2Ugc2hvdWxkIHRha2UgbmV3IGJhc2UgbWVhc3VyZW1lbnRzIGZvciB0aGUgaWdub3JlTW9iaWxlUmVzaXplIGZlYXR1cmUuXG4gICAgICAgICAgICBfc2V0QmFzZURpbWVuc2lvbnMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIF9zZXRCYXNlRGltZW5zaW9ucztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJSZXF1aXJlcyBHU0FQIDMuMTEuMCBvciBsYXRlclwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9zZXRCYXNlRGltZW5zaW9ucygpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpOyAvLyBzb21lIGJyb3dzZXJzIChsaWtlIENocm9tZSksIHRoZSB3aW5kb3cgc3RvcHMgZGlzcGF0Y2hpbmcgc2Nyb2xsIGV2ZW50cyBvbiB0aGUgd2luZG93IGlmIHlvdSBzY3JvbGwgcmVhbGx5IGZhc3QsIGJ1dCBpdCdzIGNvbnNpc3RlbnQgb24gdGhlIGRvY3VtZW50IVxuXG5cbiAgICAgICAgdmFyIGJvZHlTdHlsZSA9IF9ib2R5LnN0eWxlLFxuICAgICAgICAgICAgYm9yZGVyID0gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlLFxuICAgICAgICAgICAgQW5pbWF0aW9uUHJvdG8gPSBnc2FwLmNvcmUuQW5pbWF0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIEFuaW1hdGlvblByb3RvLnJldmVydCB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uUHJvdG8sIFwicmV2ZXJ0XCIsIHtcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lKC0wLjAxLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pOyAvLyBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoQW5pbWF0aW9uLnJldmVydCgpIHdhcyBhZGRlZCBhZnRlciAzLjEwLjQpXG5cbiAgICAgICAgYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gXCJzb2xpZFwiOyAvLyB3b3JrcyBhcm91bmQgYW4gaXNzdWUgd2hlcmUgYSBtYXJnaW4gb2YgYSBjaGlsZCBlbGVtZW50IGNvdWxkIHRocm93IG9mZiB0aGUgYm91bmRzIG9mIHRoZSBfYm9keSwgbWFraW5nIGl0IHNlZW0gbGlrZSB0aGVyZSdzIGEgbWFyZ2luIHdoZW4gdGhlcmUgYWN0dWFsbHkgaXNuJ3QuIFRoZSBib3JkZXIgZW5zdXJlcyB0aGF0IHRoZSBib3VuZHMgYXJlIGFjY3VyYXRlLlxuXG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoX2JvZHkpO1xuICAgICAgICBfdmVydGljYWwubSA9IE1hdGgucm91bmQoYm91bmRzLnRvcCArIF92ZXJ0aWNhbC5zYygpKSB8fCAwOyAvLyBhY2NvbW1vZGF0ZSB0aGUgb2Zmc2V0IG9mIHRoZSA8Ym9keT4gY2F1c2VkIGJ5IG1hcmdpbnMgYW5kL29yIHBhZGRpbmdcblxuICAgICAgICBfaG9yaXpvbnRhbC5tID0gTWF0aC5yb3VuZChib3VuZHMubGVmdCArIF9ob3Jpem9udGFsLnNjKCkpIHx8IDA7XG4gICAgICAgIGJvcmRlciA/IGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSA9IGJvcmRlciA6IGJvZHlTdHlsZS5yZW1vdmVQcm9wZXJ0eShcImJvcmRlci10b3Atc3R5bGVcIik7IC8vIFRPRE86ICg/KSBtYXliZSBtb3ZlIHRvIGxldmVyYWdpbmcgdGhlIHZlbG9jaXR5IG1lY2hhbmlzbSBpbiBPYnNlcnZlciBhbmQgc2tpcCBpbnRlcnZhbHMuXG5cbiAgICAgICAgX3N5bmNJbnRlcnZhbCA9IHNldEludGVydmFsKF9zeW5jLCAyNTApO1xuICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuNSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfc3RhcnR1cCA9IDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7IC8vIHNvbWUgb2xkZXIgQW5kcm9pZCBkZXZpY2VzIGludGVybWl0dGVudGx5IHN0b3AgZGlzcGF0Y2hpbmcgXCJ0b3VjaG1vdmVcIiBldmVudHMgaWYgd2UgZG9uJ3QgbGlzdGVuIGZvciBcInRvdWNoY2FuY2VsXCIgb24gdGhlIGRvY3VtZW50LlxuXG5cbiAgICAgICAgX2FkZExpc3RlbmVyKF9ib2R5LCBcInRvdWNoc3RhcnRcIiwgX3Bhc3NUaHJvdWdoKTsgLy93b3JrcyBhcm91bmQgU2FmYXJpIGJ1ZzogaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMTQ1MC1kcmFnZ2FibGUtaW4taWZyYW1lLW9uLW1vYmlsZS1pcy1idWdneS9cblxuXG4gICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgICAgIF90cmFuc2Zvcm1Qcm9wID0gZ3NhcC51dGlscy5jaGVja1ByZWZpeChcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfc3RhdGVQcm9wcy5wdXNoKF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgICAgICBfY29yZUluaXR0ZWQgPSBfZ2V0VGltZSgpO1xuICAgICAgICBfcmVzaXplRGVsYXkgPSBnc2FwLmRlbGF5ZWRDYWxsKDAuMiwgX3JlZnJlc2hBbGwpLnBhdXNlKCk7XG4gICAgICAgIF9hdXRvUmVmcmVzaCA9IFtfZG9jLCBcInZpc2liaWxpdHljaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB3ID0gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICBoID0gX3dpbi5pbm5lckhlaWdodDtcblxuICAgICAgICAgIGlmIChfZG9jLmhpZGRlbikge1xuICAgICAgICAgICAgX3ByZXZXaWR0aCA9IHc7XG4gICAgICAgICAgICBfcHJldkhlaWdodCA9IGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChfcHJldldpZHRoICE9PSB3IHx8IF9wcmV2SGVpZ2h0ICE9PSBoKSB7XG4gICAgICAgICAgICBfb25SZXNpemUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9kb2MsIFwiRE9NQ29udGVudExvYWRlZFwiLCBfcmVmcmVzaEFsbCwgX3dpbiwgXCJsb2FkXCIsIF9yZWZyZXNoQWxsLCBfd2luLCBcInJlc2l6ZVwiLCBfb25SZXNpemVdO1xuXG4gICAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyKTtcblxuICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyLmVuYWJsZSgwLCAxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuY29uZmlnID0gZnVuY3Rpb24gY29uZmlnKHZhcnMpIHtcbiAgICBcImxpbWl0Q2FsbGJhY2tzXCIgaW4gdmFycyAmJiAoX2xpbWl0Q2FsbGJhY2tzID0gISF2YXJzLmxpbWl0Q2FsbGJhY2tzKTtcbiAgICB2YXIgbXMgPSB2YXJzLnN5bmNJbnRlcnZhbDtcbiAgICBtcyAmJiBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpIHx8IChfc3luY0ludGVydmFsID0gbXMpICYmIHNldEludGVydmFsKF9zeW5jLCBtcyk7XG4gICAgXCJpZ25vcmVNb2JpbGVSZXNpemVcIiBpbiB2YXJzICYmIChfaWdub3JlTW9iaWxlUmVzaXplID0gU2Nyb2xsVHJpZ2dlci5pc1RvdWNoID09PSAxICYmIHZhcnMuaWdub3JlTW9iaWxlUmVzaXplKTtcblxuICAgIGlmIChcImF1dG9SZWZyZXNoRXZlbnRzXCIgaW4gdmFycykge1xuICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpIHx8IF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyLCB2YXJzLmF1dG9SZWZyZXNoRXZlbnRzIHx8IFwibm9uZVwiKTtcbiAgICAgIF9pZ25vcmVSZXNpemUgPSAodmFycy5hdXRvUmVmcmVzaEV2ZW50cyArIFwiXCIpLmluZGV4T2YoXCJyZXNpemVcIikgPT09IC0xO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnNjcm9sbGVyUHJveHkgPSBmdW5jdGlvbiBzY3JvbGxlclByb3h5KHRhcmdldCwgdmFycykge1xuICAgIHZhciB0ID0gX2dldFRhcmdldCh0YXJnZXQpLFxuICAgICAgICBpID0gX3Njcm9sbGVycy5pbmRleE9mKHQpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodCk7XG5cbiAgICBpZiAofmkpIHtcbiAgICAgIF9zY3JvbGxlcnMuc3BsaWNlKGksIGlzVmlld3BvcnQgPyA2IDogMik7XG4gICAgfVxuXG4gICAgaWYgKHZhcnMpIHtcbiAgICAgIGlzVmlld3BvcnQgPyBfcHJveGllcy51bnNoaWZ0KF93aW4sIHZhcnMsIF9ib2R5LCB2YXJzLCBfZG9jRWwsIHZhcnMpIDogX3Byb3hpZXMudW5zaGlmdCh0LCB2YXJzKTtcbiAgICB9XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jbGVhck1hdGNoTWVkaWEgPSBmdW5jdGlvbiBjbGVhck1hdGNoTWVkaWEocXVlcnkpIHtcbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQuX2N0eCAmJiB0Ll9jdHgucXVlcnkgPT09IHF1ZXJ5ICYmIHQuX2N0eC5raWxsKHRydWUsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIuaXNJblZpZXdwb3J0ID0gZnVuY3Rpb24gaXNJblZpZXdwb3J0KGVsZW1lbnQsIHJhdGlvLCBob3Jpem9udGFsKSB7XG4gICAgdmFyIGJvdW5kcyA9IChfaXNTdHJpbmcoZWxlbWVudCkgPyBfZ2V0VGFyZ2V0KGVsZW1lbnQpIDogZWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIG9mZnNldCA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0gKiByYXRpbyB8fCAwO1xuICAgIHJldHVybiBob3Jpem9udGFsID8gYm91bmRzLnJpZ2h0IC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMubGVmdCArIG9mZnNldCA8IF93aW4uaW5uZXJXaWR0aCA6IGJvdW5kcy5ib3R0b20gLSBvZmZzZXQgPiAwICYmIGJvdW5kcy50b3AgKyBvZmZzZXQgPCBfd2luLmlubmVySGVpZ2h0O1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIucG9zaXRpb25JblZpZXdwb3J0ID0gZnVuY3Rpb24gcG9zaXRpb25JblZpZXdwb3J0KGVsZW1lbnQsIHJlZmVyZW5jZVBvaW50LCBob3Jpem9udGFsKSB7XG4gICAgX2lzU3RyaW5nKGVsZW1lbnQpICYmIChlbGVtZW50ID0gX2dldFRhcmdldChlbGVtZW50KSk7XG4gICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIHNpemUgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdLFxuICAgICAgICBvZmZzZXQgPSByZWZlcmVuY2VQb2ludCA9PSBudWxsID8gc2l6ZSAvIDIgOiByZWZlcmVuY2VQb2ludCBpbiBfa2V5d29yZHMgPyBfa2V5d29yZHNbcmVmZXJlbmNlUG9pbnRdICogc2l6ZSA6IH5yZWZlcmVuY2VQb2ludC5pbmRleE9mKFwiJVwiKSA/IHBhcnNlRmxvYXQocmVmZXJlbmNlUG9pbnQpICogc2l6ZSAvIDEwMCA6IHBhcnNlRmxvYXQocmVmZXJlbmNlUG9pbnQpIHx8IDA7XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyAoYm91bmRzLmxlZnQgKyBvZmZzZXQpIC8gX3dpbi5pbm5lcldpZHRoIDogKGJvdW5kcy50b3AgKyBvZmZzZXQpIC8gX3dpbi5pbm5lckhlaWdodDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmtpbGxBbGwgPSBmdW5jdGlvbiBraWxsQWxsKGFsbG93TGlzdGVuZXJzKSB7XG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIiAmJiB0LmtpbGwoKTtcbiAgICB9KTtcblxuICAgIGlmIChhbGxvd0xpc3RlbmVycyAhPT0gdHJ1ZSkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IF9saXN0ZW5lcnMua2lsbEFsbCB8fCBbXTtcbiAgICAgIF9saXN0ZW5lcnMgPSB7fTtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBmKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNjcm9sbFRyaWdnZXI7XG59KCk7XG5TY3JvbGxUcmlnZ2VyLnZlcnNpb24gPSBcIjMuMTEuM1wiO1xuXG5TY3JvbGxUcmlnZ2VyLnNhdmVTdHlsZXMgPSBmdW5jdGlvbiAodGFyZ2V0cykge1xuICByZXR1cm4gdGFyZ2V0cyA/IF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIC8vIHNhdmVkIHN0eWxlcyBhcmUgcmVjb3JkZWQgaW4gYSBjb25zZWN1dGl2ZSBhbHRlcm5hdGluZyBBcnJheSwgbGlrZSBbZWxlbWVudCwgY3NzVGV4dCwgdHJhbnNmb3JtIGF0dHJpYnV0ZSwgY2FjaGUsIG1hdGNoTWVkaWEsIC4uLl1cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5zdHlsZSkge1xuICAgICAgdmFyIGkgPSBfc2F2ZWRTdHlsZXMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpID49IDAgJiYgX3NhdmVkU3R5bGVzLnNwbGljZShpLCA1KTtcblxuICAgICAgX3NhdmVkU3R5bGVzLnB1c2godGFyZ2V0LCB0YXJnZXQuc3R5bGUuY3NzVGV4dCwgdGFyZ2V0LmdldEJCb3ggJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCksIF9jb250ZXh0KCkpO1xuICAgIH1cbiAgfSkgOiBfc2F2ZWRTdHlsZXM7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJldmVydCA9IGZ1bmN0aW9uIChzb2Z0LCBtZWRpYSkge1xuICByZXR1cm4gX3JldmVydEFsbCghc29mdCwgbWVkaWEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycywgYW5pbWF0aW9uKSB7XG4gIHJldHVybiBuZXcgU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZWZyZXNoID0gZnVuY3Rpb24gKHNhZmUpIHtcbiAgcmV0dXJuIHNhZmUgPyBfb25SZXNpemUoKSA6IChfY29yZUluaXR0ZWQgfHwgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlcigpKSAmJiBfcmVmcmVzaEFsbCh0cnVlKTtcbn07XG5cblNjcm9sbFRyaWdnZXIudXBkYXRlID0gX3VwZGF0ZUFsbDtcblNjcm9sbFRyaWdnZXIuY2xlYXJTY3JvbGxNZW1vcnkgPSBfY2xlYXJTY3JvbGxNZW1vcnk7XG5cblNjcm9sbFRyaWdnZXIubWF4U2Nyb2xsID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgcmV0dXJuIF9tYXhTY3JvbGwoZWxlbWVudCwgaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0U2Nyb2xsRnVuYyA9IGZ1bmN0aW9uIChlbGVtZW50LCBob3Jpem9udGFsKSB7XG4gIHJldHVybiBfZ2V0U2Nyb2xsRnVuYyhfZ2V0VGFyZ2V0KGVsZW1lbnQpLCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfaWRzW2lkXTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX3RyaWdnZXJzLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIjtcbiAgfSk7XG59OyAvLyBpdCdzIGNvbW1vbiBmb3IgcGVvcGxlIHRvIFNjcm9sbFRyaWdnZXIuZ2V0QWxsKHQgPT4gdC5raWxsKCkpIG9uIHBhZ2Ugcm91dGVzLCBmb3IgZXhhbXBsZSwgYW5kIHdlIGRvbid0IHdhbnQgaXQgdG8gcnVpbiBzbW9vdGggc2Nyb2xsaW5nIGJ5IGtpbGxpbmcgdGhlIG1haW4gU2Nyb2xsU21vb3RoZXIgb25lLlxuXG5cblNjcm9sbFRyaWdnZXIuaXNTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIV9sYXN0U2Nyb2xsVGltZTtcbn07XG5cblNjcm9sbFRyaWdnZXIuc25hcERpcmVjdGlvbmFsID0gX3NuYXBEaXJlY3Rpb25hbDtcblxuU2Nyb2xsVHJpZ2dlci5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbn07XG5cblNjcm9sbFRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmJhdGNoID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgdmFyc0NvcHkgPSB7fSxcbiAgICAgIGludGVydmFsID0gdmFycy5pbnRlcnZhbCB8fCAwLjAxNixcbiAgICAgIGJhdGNoTWF4ID0gdmFycy5iYXRjaE1heCB8fCAxZTksXG4gICAgICBwcm94eUNhbGxiYWNrID0gZnVuY3Rpb24gcHJveHlDYWxsYmFjayh0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBlbGVtZW50cyA9IFtdLFxuICAgICAgICB0cmlnZ2VycyA9IFtdLFxuICAgICAgICBkZWxheSA9IGdzYXAuZGVsYXllZENhbGwoaW50ZXJ2YWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGVsZW1lbnRzLCB0cmlnZ2Vycyk7XG4gICAgICBlbGVtZW50cyA9IFtdO1xuICAgICAgdHJpZ2dlcnMgPSBbXTtcbiAgICB9KS5wYXVzZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc2VsZikge1xuICAgICAgZWxlbWVudHMubGVuZ3RoIHx8IGRlbGF5LnJlc3RhcnQodHJ1ZSk7XG4gICAgICBlbGVtZW50cy5wdXNoKHNlbGYudHJpZ2dlcik7XG4gICAgICB0cmlnZ2Vycy5wdXNoKHNlbGYpO1xuICAgICAgYmF0Y2hNYXggPD0gZWxlbWVudHMubGVuZ3RoICYmIGRlbGF5LnByb2dyZXNzKDEpO1xuICAgIH07XG4gIH0sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgdmFyc0NvcHlbcF0gPSBwLnN1YnN0cigwLCAyKSA9PT0gXCJvblwiICYmIF9pc0Z1bmN0aW9uKHZhcnNbcF0pICYmIHAgIT09IFwib25SZWZyZXNoSW5pdFwiID8gcHJveHlDYWxsYmFjayhwLCB2YXJzW3BdKSA6IHZhcnNbcF07XG4gIH1cblxuICBpZiAoX2lzRnVuY3Rpb24oYmF0Y2hNYXgpKSB7XG4gICAgYmF0Y2hNYXggPSBiYXRjaE1heCgpO1xuXG4gICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4KCk7XG4gICAgfSk7XG4gIH1cblxuICBfdG9BcnJheSh0YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB2YXIgY29uZmlnID0ge307XG5cbiAgICBmb3IgKHAgaW4gdmFyc0NvcHkpIHtcbiAgICAgIGNvbmZpZ1twXSA9IHZhcnNDb3B5W3BdO1xuICAgIH1cblxuICAgIGNvbmZpZy50cmlnZ2VyID0gdGFyZ2V0O1xuICAgIHJlc3VsdC5wdXNoKFNjcm9sbFRyaWdnZXIuY3JlYXRlKGNvbmZpZykpO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTsgLy8gdG8gcmVkdWNlIGZpbGUgc2l6ZS4gY2xhbXBzIHRoZSBzY3JvbGwgYW5kIGFsc28gcmV0dXJucyBhIGR1cmF0aW9uIG11bHRpcGxpZXIgc28gdGhhdCBpZiB0aGUgc2Nyb2xsIGdldHMgY2hvcHBlZCBzaG9ydGVyLCB0aGUgZHVyYXRpb24gZ2V0cyBjdXJ0YWlsZWQgYXMgd2VsbCAob3RoZXJ3aXNlIGlmIHlvdSdyZSB2ZXJ5IGNsb3NlIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2UsIGZvciBleGFtcGxlLCBhbmQgc3dpcGUgdXAgcmVhbGx5IGZhc3QsIGl0J2xsIHN1ZGRlbmx5IHNsb3cgZG93biBhbmQgdGFrZSBhIGxvbmcgdGltZSB0byByZWFjaCB0aGUgdG9wKS5cblxuXG52YXIgX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyID0gZnVuY3Rpb24gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmMsIGN1cnJlbnQsIGVuZCwgbWF4KSB7XG4gIGN1cnJlbnQgPiBtYXggPyBzY3JvbGxGdW5jKG1heCkgOiBjdXJyZW50IDwgMCAmJiBzY3JvbGxGdW5jKDApO1xuICByZXR1cm4gZW5kID4gbWF4ID8gKG1heCAtIGN1cnJlbnQpIC8gKGVuZCAtIGN1cnJlbnQpIDogZW5kIDwgMCA/IGN1cnJlbnQgLyAoY3VycmVudCAtIGVuZCkgOiAxO1xufSxcbiAgICBfYWxsb3dOYXRpdmVQYW5uaW5nID0gZnVuY3Rpb24gX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIGRpcmVjdGlvbikge1xuICBpZiAoZGlyZWN0aW9uID09PSB0cnVlKSB7XG4gICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwidG91Y2gtYWN0aW9uXCIpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5zdHlsZS50b3VjaEFjdGlvbiA9IGRpcmVjdGlvbiA9PT0gdHJ1ZSA/IFwiYXV0b1wiIDogZGlyZWN0aW9uID8gXCJwYW4tXCIgKyBkaXJlY3Rpb24gKyAoT2JzZXJ2ZXIuaXNUb3VjaCA/IFwiIHBpbmNoLXpvb21cIiA6IFwiXCIpIDogXCJub25lXCI7IC8vIG5vdGU6IEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IGl0IHBpbmNoLXpvb20gcHJvcGVybHksIGF0IGxlYXN0IGluIGFkZGl0aW9uIHRvIGEgcGFuLXggb3IgcGFuLXkuXG4gIH1cblxuICB0YXJnZXQgPT09IF9kb2NFbCAmJiBfYWxsb3dOYXRpdmVQYW5uaW5nKF9ib2R5LCBkaXJlY3Rpb24pO1xufSxcbiAgICBfb3ZlcmZsb3cgPSB7XG4gIGF1dG86IDEsXG4gIHNjcm9sbDogMVxufSxcbiAgICBfbmVzdGVkU2Nyb2xsID0gZnVuY3Rpb24gX25lc3RlZFNjcm9sbChfcmVmNSkge1xuICB2YXIgZXZlbnQgPSBfcmVmNS5ldmVudCxcbiAgICAgIHRhcmdldCA9IF9yZWY1LnRhcmdldCxcbiAgICAgIGF4aXMgPSBfcmVmNS5heGlzO1xuXG4gIHZhciBub2RlID0gKGV2ZW50LmNoYW5nZWRUb3VjaGVzID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldmVudCkudGFyZ2V0LFxuICAgICAgY2FjaGUgPSBub2RlLl9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZShub2RlKSxcbiAgICAgIHRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgY3M7XG5cbiAgaWYgKCFjYWNoZS5faXNTY3JvbGxUIHx8IHRpbWUgLSBjYWNoZS5faXNTY3JvbGxUID4gMjAwMCkge1xuICAgIC8vIGNhY2hlIGZvciAyIHNlY29uZHMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgICB3aGlsZSAobm9kZSAmJiBub2RlLnNjcm9sbEhlaWdodCA8PSBub2RlLmNsaWVudEhlaWdodCkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBjYWNoZS5faXNTY3JvbGwgPSBub2RlICYmICFfaXNWaWV3cG9ydChub2RlKSAmJiBub2RlICE9PSB0YXJnZXQgJiYgKF9vdmVyZmxvd1soY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSkub3ZlcmZsb3dZXSB8fCBfb3ZlcmZsb3dbY3Mub3ZlcmZsb3dYXSk7XG4gICAgY2FjaGUuX2lzU2Nyb2xsVCA9IHRpbWU7XG4gIH1cblxuICBpZiAoY2FjaGUuX2lzU2Nyb2xsIHx8IGF4aXMgPT09IFwieFwiKSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQuX2dzYXBBbGxvdyA9IHRydWU7XG4gIH1cbn0sXG4gICAgLy8gY2FwdHVyZSBldmVudHMgb24gc2Nyb2xsYWJsZSBlbGVtZW50cyBJTlNJREUgdGhlIDxib2R5PiBhbmQgYWxsb3cgdGhvc2UgYnkgY2FsbGluZyBzdG9wUHJvcGFnYXRpb24oKSB3aGVuIHdlIGZpbmQgYSBzY3JvbGxhYmxlIGFuY2VzdG9yXG5faW5wdXRPYnNlcnZlciA9IGZ1bmN0aW9uIF9pbnB1dE9ic2VydmVyKHRhcmdldCwgdHlwZSwgaW5wdXRzLCBuZXN0ZWQpIHtcbiAgcmV0dXJuIE9ic2VydmVyLmNyZWF0ZSh7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgY2FwdHVyZTogdHJ1ZSxcbiAgICBkZWJvdW5jZTogZmFsc2UsXG4gICAgbG9ja0F4aXM6IHRydWUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBvbldoZWVsOiBuZXN0ZWQgPSBuZXN0ZWQgJiYgX25lc3RlZFNjcm9sbCxcbiAgICBvblByZXNzOiBuZXN0ZWQsXG4gICAgb25EcmFnOiBuZXN0ZWQsXG4gICAgb25TY3JvbGw6IG5lc3RlZCxcbiAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICByZXR1cm4gaW5wdXRzICYmIF9hZGRMaXN0ZW5lcihfZG9jLCBPYnNlcnZlci5ldmVudFR5cGVzWzBdLCBfY2FwdHVyZUlucHV0cywgZmFsc2UsIHRydWUpO1xuICAgIH0sXG4gICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyKF9kb2MsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xufSxcbiAgICBfaW5wdXRFeHAgPSAvKGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkvaSxcbiAgICBfaW5wdXRJc0ZvY3VzZWQsXG4gICAgX2NhcHR1cmVJbnB1dHMgPSBmdW5jdGlvbiBfY2FwdHVyZUlucHV0cyhlKSB7XG4gIHZhciBpc0lucHV0ID0gX2lucHV0RXhwLnRlc3QoZS50YXJnZXQudGFnTmFtZSk7XG5cbiAgaWYgKGlzSW5wdXQgfHwgX2lucHV0SXNGb2N1c2VkKSB7XG4gICAgZS5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgICBfaW5wdXRJc0ZvY3VzZWQgPSBpc0lucHV0O1xuICB9XG59LFxuICAgIF9nZXRTY3JvbGxOb3JtYWxpemVyID0gZnVuY3Rpb24gX2dldFNjcm9sbE5vcm1hbGl6ZXIodmFycykge1xuICBfaXNPYmplY3QodmFycykgfHwgKHZhcnMgPSB7fSk7XG4gIHZhcnMucHJldmVudERlZmF1bHQgPSB2YXJzLmlzTm9ybWFsaXplciA9IHZhcnMuYWxsb3dDbGlja3MgPSB0cnVlO1xuICB2YXJzLnR5cGUgfHwgKHZhcnMudHlwZSA9IFwid2hlZWwsdG91Y2hcIik7XG4gIHZhcnMuZGVib3VuY2UgPSAhIXZhcnMuZGVib3VuY2U7XG4gIHZhcnMuaWQgPSB2YXJzLmlkIHx8IFwibm9ybWFsaXplclwiO1xuXG4gIHZhciBfdmFyczIgPSB2YXJzLFxuICAgICAgbm9ybWFsaXplU2Nyb2xsWCA9IF92YXJzMi5ub3JtYWxpemVTY3JvbGxYLFxuICAgICAgbW9tZW50dW0gPSBfdmFyczIubW9tZW50dW0sXG4gICAgICBhbGxvd05lc3RlZFNjcm9sbCA9IF92YXJzMi5hbGxvd05lc3RlZFNjcm9sbCxcbiAgICAgIHNlbGYsXG4gICAgICBtYXhZLFxuICAgICAgdGFyZ2V0ID0gX2dldFRhcmdldCh2YXJzLnRhcmdldCkgfHwgX2RvY0VsLFxuICAgICAgc21vb3RoZXIgPSBnc2FwLmNvcmUuZ2xvYmFscygpLlNjcm9sbFNtb290aGVyLFxuICAgICAgc21vb3RoZXJJbnN0YW5jZSA9IHNtb290aGVyICYmIHNtb290aGVyLmdldCgpLFxuICAgICAgY29udGVudCA9IF9maXhJT1NCdWcgJiYgKHZhcnMuY29udGVudCAmJiBfZ2V0VGFyZ2V0KHZhcnMuY29udGVudCkgfHwgc21vb3RoZXJJbnN0YW5jZSAmJiB2YXJzLmNvbnRlbnQgIT09IGZhbHNlICYmICFzbW9vdGhlckluc3RhbmNlLnNtb290aCgpICYmIHNtb290aGVySW5zdGFuY2UuY29udGVudCgpKSxcbiAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgc2Nyb2xsRnVuY1ggPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF9ob3Jpem9udGFsKSxcbiAgICAgIHNjYWxlID0gMSxcbiAgICAgIGluaXRpYWxTY2FsZSA9IChPYnNlcnZlci5pc1RvdWNoICYmIF93aW4udmlzdWFsVmlld3BvcnQgPyBfd2luLnZpc3VhbFZpZXdwb3J0LnNjYWxlICogX3dpbi52aXN1YWxWaWV3cG9ydC53aWR0aCA6IF93aW4ub3V0ZXJXaWR0aCkgLyBfd2luLmlubmVyV2lkdGgsXG4gICAgICB3aGVlbFJlZnJlc2ggPSAwLFxuICAgICAgcmVzb2x2ZU1vbWVudHVtRHVyYXRpb24gPSBfaXNGdW5jdGlvbihtb21lbnR1bSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vbWVudHVtKHNlbGYpO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnR1bSB8fCAyLjg7XG4gIH0sXG4gICAgICBsYXN0UmVmcmVzaElELFxuICAgICAgc2tpcFRvdWNoTW92ZSxcbiAgICAgIGlucHV0T2JzZXJ2ZXIgPSBfaW5wdXRPYnNlcnZlcih0YXJnZXQsIHZhcnMudHlwZSwgdHJ1ZSwgYWxsb3dOZXN0ZWRTY3JvbGwpLFxuICAgICAgcmVzdW1lVG91Y2hNb3ZlID0gZnVuY3Rpb24gcmVzdW1lVG91Y2hNb3ZlKCkge1xuICAgIHJldHVybiBza2lwVG91Y2hNb3ZlID0gZmFsc2U7XG4gIH0sXG4gICAgICBzY3JvbGxDbGFtcFggPSBfcGFzc1Rocm91Z2gsXG4gICAgICBzY3JvbGxDbGFtcFkgPSBfcGFzc1Rocm91Z2gsXG4gICAgICB1cGRhdGVDbGFtcHMgPSBmdW5jdGlvbiB1cGRhdGVDbGFtcHMoKSB7XG4gICAgbWF4WSA9IF9tYXhTY3JvbGwodGFyZ2V0LCBfdmVydGljYWwpO1xuICAgIHNjcm9sbENsYW1wWSA9IF9jbGFtcChfZml4SU9TQnVnID8gMSA6IDAsIG1heFkpO1xuICAgIG5vcm1hbGl6ZVNjcm9sbFggJiYgKHNjcm9sbENsYW1wWCA9IF9jbGFtcCgwLCBfbWF4U2Nyb2xsKHRhcmdldCwgX2hvcml6b250YWwpKSk7XG4gICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gIH0sXG4gICAgICByZW1vdmVDb250ZW50T2Zmc2V0ID0gZnVuY3Rpb24gcmVtb3ZlQ29udGVudE9mZnNldCgpIHtcbiAgICBjb250ZW50Ll9nc2FwLnkgPSBfcm91bmQocGFyc2VGbG9hdChjb250ZW50Ll9nc2FwLnkpICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSArIFwicHhcIjtcbiAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyBwYXJzZUZsb2F0KGNvbnRlbnQuX2dzYXAueSkgKyBcIiwgMCwgMSlcIjtcbiAgICBzY3JvbGxGdW5jWS5vZmZzZXQgPSBzY3JvbGxGdW5jWS5jYWNoZUlEID0gMDtcbiAgfSxcbiAgICAgIGlnbm9yZURyYWcgPSBmdW5jdGlvbiBpZ25vcmVEcmFnKCkge1xuICAgIGlmIChza2lwVG91Y2hNb3ZlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lVG91Y2hNb3ZlKTtcblxuICAgICAgdmFyIG9mZnNldCA9IF9yb3VuZChzZWxmLmRlbHRhWSAvIDIpLFxuICAgICAgICAgIHNjcm9sbCA9IHNjcm9sbENsYW1wWShzY3JvbGxGdW5jWS52IC0gb2Zmc2V0KTtcblxuICAgICAgaWYgKGNvbnRlbnQgJiYgc2Nyb2xsICE9PSBzY3JvbGxGdW5jWS52ICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSB7XG4gICAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbCAtIHNjcm9sbEZ1bmNZLnY7XG5cbiAgICAgICAgdmFyIHkgPSBfcm91bmQoKHBhcnNlRmxvYXQoY29udGVudCAmJiBjb250ZW50Ll9nc2FwLnkpIHx8IDApIC0gc2Nyb2xsRnVuY1kub2Zmc2V0KTtcblxuICAgICAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyB5ICsgXCIsIDAsIDEpXCI7XG4gICAgICAgIGNvbnRlbnQuX2dzYXAueSA9IHkgKyBcInB4XCI7XG4gICAgICAgIHNjcm9sbEZ1bmNZLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuXG4gICAgICAgIF91cGRhdGVBbGwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcbiAgICBza2lwVG91Y2hNb3ZlID0gdHJ1ZTtcbiAgfSxcbiAgICAgIHR3ZWVuLFxuICAgICAgc3RhcnRTY3JvbGxYLFxuICAgICAgc3RhcnRTY3JvbGxZLFxuICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICBvblJlc2l6ZSA9IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgIC8vIGlmIHRoZSB3aW5kb3cgcmVzaXplcywgbGlrZSBvbiBhbiBpUGhvbmUgd2hpY2ggQXBwbGUgRk9SQ0VTIHRoZSBhZGRyZXNzIGJhciB0byBzaG93L2hpZGUgZXZlbiBpZiB3ZSBldmVudC5wcmV2ZW50RGVmYXVsdCgpLCBpdCBtYXkgYmUgc2Nyb2xsaW5nIHRvbyBmYXIgbm93IHRoYXQgdGhlIGFkZHJlc3MgYmFyIGlzIHNob3dpbmcsIHNvIHdlIG11c3QgZHluYW1pY2FsbHkgYWRqdXN0IHRoZSBtb21lbnR1bSB0d2Vlbi5cbiAgICB1cGRhdGVDbGFtcHMoKTtcblxuICAgIGlmICh0d2Vlbi5pc0FjdGl2ZSgpICYmIHR3ZWVuLnZhcnMuc2Nyb2xsWSA+IG1heFkpIHtcbiAgICAgIHNjcm9sbEZ1bmNZKCkgPiBtYXhZID8gdHdlZW4ucHJvZ3Jlc3MoMSkgJiYgc2Nyb2xsRnVuY1kobWF4WSkgOiB0d2Vlbi5yZXNldFRvKFwic2Nyb2xsWVwiLCBtYXhZKTtcbiAgICB9XG4gIH07XG5cbiAgY29udGVudCAmJiBnc2FwLnNldChjb250ZW50LCB7XG4gICAgeTogXCIrPTBcIlxuICB9KTsgLy8gdG8gZW5zdXJlIHRoZXJlJ3MgYSBjYWNoZSAoZWxlbWVudC5fZ3NhcClcblxuICB2YXJzLmlnbm9yZUNoZWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gX2ZpeElPU0J1ZyAmJiBlLnR5cGUgPT09IFwidG91Y2htb3ZlXCIgJiYgaWdub3JlRHJhZyhlKSB8fCBzY2FsZSA+IDEuMDUgJiYgZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIiB8fCBzZWxmLmlzR2VzdHVyaW5nIHx8IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMTtcbiAgfTtcblxuICB2YXJzLm9uUHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZTY2FsZSA9IHNjYWxlO1xuICAgIHNjYWxlID0gX3JvdW5kKChfd2luLnZpc3VhbFZpZXdwb3J0ICYmIF93aW4udmlzdWFsVmlld3BvcnQuc2NhbGUgfHwgMSkgLyBpbml0aWFsU2NhbGUpO1xuICAgIHR3ZWVuLnBhdXNlKCk7XG4gICAgcHJldlNjYWxlICE9PSBzY2FsZSAmJiBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgc2NhbGUgPiAxLjAxID8gdHJ1ZSA6IG5vcm1hbGl6ZVNjcm9sbFggPyBmYWxzZSA6IFwieFwiKTtcbiAgICBzdGFydFNjcm9sbFggPSBzY3JvbGxGdW5jWCgpO1xuICAgIHN0YXJ0U2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgdXBkYXRlQ2xhbXBzKCk7XG4gICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gIH07XG5cbiAgdmFycy5vblJlbGVhc2UgPSB2YXJzLm9uR2VzdHVyZVN0YXJ0ID0gZnVuY3Rpb24gKHNlbGYsIHdhc0RyYWdnaW5nKSB7XG4gICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcblxuICAgIGlmICghd2FzRHJhZ2dpbmcpIHtcbiAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKzsgLy8gbWFrZSBzdXJlIHdlJ3JlIHB1bGxpbmcgdGhlIG5vbi1jYWNoZWQgdmFsdWVcbiAgICAgIC8vIGFsdGVybmF0ZSBhbGdvcml0aG06IGR1clggPSBNYXRoLm1pbig2LCBNYXRoLmFicyhzZWxmLnZlbG9jaXR5WCAvIDgwMCkpLFx0ZHVyID0gTWF0aC5tYXgoZHVyWCwgTWF0aC5taW4oNiwgTWF0aC5hYnMoc2VsZi52ZWxvY2l0eVkgLyA4MDApKSk7IGR1ciA9IGR1ciAqICgwLjQgKyAoMSAtIF9wb3dlcjRJbihkdXIgLyA2KSkgKiAwLjYpKSAqIChtb21lbnR1bVNwZWVkIHx8IDEpXG5cbiAgICAgIHZhciBkdXIgPSByZXNvbHZlTW9tZW50dW1EdXJhdGlvbigpLFxuICAgICAgICAgIGN1cnJlbnRTY3JvbGwsXG4gICAgICAgICAgZW5kU2Nyb2xsO1xuXG4gICAgICBpZiAobm9ybWFsaXplU2Nyb2xsWCkge1xuICAgICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1goKTtcbiAgICAgICAgZW5kU2Nyb2xsID0gY3VycmVudFNjcm9sbCArIGR1ciAqIDAuMDUgKiAtc2VsZi52ZWxvY2l0eVggLyAwLjIyNzsgLy8gdGhlIGNvbnN0YW50IC4yMjcgaXMgZnJvbSBwb3dlcjQoMC4wNSkuIHZlbG9jaXR5IGlzIGludmVydGVkIGJlY2F1c2Ugc2Nyb2xsaW5nIGdvZXMgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cblxuICAgICAgICBkdXIgKj0gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmNYLCBjdXJyZW50U2Nyb2xsLCBlbmRTY3JvbGwsIF9tYXhTY3JvbGwodGFyZ2V0LCBfaG9yaXpvbnRhbCkpO1xuICAgICAgICB0d2Vlbi52YXJzLnNjcm9sbFggPSBzY3JvbGxDbGFtcFgoZW5kU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudFNjcm9sbCA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICBlbmRTY3JvbGwgPSBjdXJyZW50U2Nyb2xsICsgZHVyICogMC4wNSAqIC1zZWxmLnZlbG9jaXR5WSAvIDAuMjI3OyAvLyB0aGUgY29uc3RhbnQgLjIyNyBpcyBmcm9tIHBvd2VyNCgwLjA1KVxuXG4gICAgICBkdXIgKj0gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmNZLCBjdXJyZW50U2Nyb2xsLCBlbmRTY3JvbGwsIF9tYXhTY3JvbGwodGFyZ2V0LCBfdmVydGljYWwpKTtcbiAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWSA9IHNjcm9sbENsYW1wWShlbmRTY3JvbGwpO1xuICAgICAgdHdlZW4uaW52YWxpZGF0ZSgpLmR1cmF0aW9uKGR1cikucGxheSgwLjAxKTtcblxuICAgICAgaWYgKF9maXhJT1NCdWcgJiYgdHdlZW4udmFycy5zY3JvbGxZID49IG1heFkgfHwgY3VycmVudFNjcm9sbCA+PSBtYXhZIC0gMSkge1xuICAgICAgICAvLyBpT1MgYnVnOiBpdCdsbCBzaG93IHRoZSBhZGRyZXNzIGJhciBidXQgTk9UIGZpcmUgdGhlIHdpbmRvdyBcInJlc2l6ZVwiIGV2ZW50IHVudGlsIHRoZSBhbmltYXRpb24gaXMgZG9uZSBidXQgd2UgbXVzdCBwcm90ZWN0IGFnYWluc3Qgb3ZlcnNob290IHNvIHdlIGxldmVyYWdlIGFuIG9uVXBkYXRlIHRvIGRvIHNvLlxuICAgICAgICBnc2FwLnRvKHt9LCB7XG4gICAgICAgICAgb25VcGRhdGU6IG9uUmVzaXplLFxuICAgICAgICAgIGR1cmF0aW9uOiBkdXJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhcnMub25XaGVlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0d2Vlbi5fdHMgJiYgdHdlZW4ucGF1c2UoKTtcblxuICAgIGlmIChfZ2V0VGltZSgpIC0gd2hlZWxSZWZyZXNoID4gMTAwMCkge1xuICAgICAgLy8gYWZ0ZXIgMSBzZWNvbmQsIHJlZnJlc2ggdGhlIGNsYW1wcyBvdGhlcndpc2UgdGhhdCdsbCBvbmx5IGhhcHBlbiB3aGVuIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpIGlzIGNhbGxlZCBvciBmb3IgdG91Y2gtc2Nyb2xsaW5nLlxuICAgICAgbGFzdFJlZnJlc2hJRCA9IDA7XG4gICAgICB3aGVlbFJlZnJlc2ggPSBfZ2V0VGltZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXJzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHNlbGYsIGR4LCBkeSwgeEFycmF5LCB5QXJyYXkpIHtcbiAgICBfcmVmcmVzaElEICE9PSBsYXN0UmVmcmVzaElEICYmIHVwZGF0ZUNsYW1wcygpO1xuICAgIGR4ICYmIG5vcm1hbGl6ZVNjcm9sbFggJiYgc2Nyb2xsRnVuY1goc2Nyb2xsQ2xhbXBYKHhBcnJheVsyXSA9PT0gZHggPyBzdGFydFNjcm9sbFggKyAoc2VsZi5zdGFydFggLSBzZWxmLngpIDogc2Nyb2xsRnVuY1goKSArIGR4IC0geEFycmF5WzFdKSk7IC8vIGZvciBtb3JlIHByZWNpc2lvbiwgd2UgdHJhY2sgcG9pbnRlci90b3VjaCBtb3ZlbWVudCBmcm9tIHRoZSBzdGFydCwgb3RoZXJ3aXNlIGl0J2xsIGRyaWZ0LlxuXG4gICAgaWYgKGR5KSB7XG4gICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgICAgdmFyIGlzVG91Y2ggPSB5QXJyYXlbMl0gPT09IGR5LFxuICAgICAgICAgIHkgPSBpc1RvdWNoID8gc3RhcnRTY3JvbGxZICsgc2VsZi5zdGFydFkgLSBzZWxmLnkgOiBzY3JvbGxGdW5jWSgpICsgZHkgLSB5QXJyYXlbMV0sXG4gICAgICAgICAgeUNsYW1wZWQgPSBzY3JvbGxDbGFtcFkoeSk7XG4gICAgICBpc1RvdWNoICYmIHkgIT09IHlDbGFtcGVkICYmIChzdGFydFNjcm9sbFkgKz0geUNsYW1wZWQgLSB5KTtcbiAgICAgIHNjcm9sbEZ1bmNZKHlDbGFtcGVkKTtcbiAgICB9XG5cbiAgICAoZHkgfHwgZHgpICYmIF91cGRhdGVBbGwoKTtcbiAgfTtcblxuICB2YXJzLm9uRW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBub3JtYWxpemVTY3JvbGxYID8gZmFsc2UgOiBcInhcIik7XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsIG9uUmVzaXplKTtcblxuICAgIF9hZGRMaXN0ZW5lcihfd2luLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICBpZiAoc2Nyb2xsRnVuY1kuc21vb3RoKSB7XG4gICAgICBzY3JvbGxGdW5jWS50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIjtcbiAgICAgIHNjcm9sbEZ1bmNZLnNtb290aCA9IHNjcm9sbEZ1bmNYLnNtb290aCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlucHV0T2JzZXJ2ZXIuZW5hYmxlKCk7XG4gIH07XG5cbiAgdmFycy5vbkRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHRydWUpO1xuXG4gICAgX3JlbW92ZUxpc3RlbmVyKF93aW4sIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgIFNjcm9sbFRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgb25SZXNpemUpO1xuICAgIGlucHV0T2JzZXJ2ZXIua2lsbCgpO1xuICB9O1xuXG4gIHZhcnMubG9ja0F4aXMgPSB2YXJzLmxvY2tBeGlzICE9PSBmYWxzZTtcbiAgc2VsZiA9IG5ldyBPYnNlcnZlcih2YXJzKTtcbiAgc2VsZi5pT1MgPSBfZml4SU9TQnVnOyAvLyB1c2VkIGluIHRoZSBPYnNlcnZlciBnZXRDYWNoZWRTY3JvbGwoKSBmdW5jdGlvbiB0byB3b3JrIGFyb3VuZCBhbiBpT1MgYnVnIHRoYXQgd3JlYWtzIGhhdm9jIHdpdGggVG91Y2hFdmVudC5jbGllbnRZIGlmIHdlIGFsbG93IHNjcm9sbCB0byBnbyBhbGwgdGhlIHdheSBiYWNrIHRvIDAuXG5cbiAgX2ZpeElPU0J1ZyAmJiAhc2Nyb2xsRnVuY1koKSAmJiBzY3JvbGxGdW5jWSgxKTsgLy8gaU9TIGJ1ZyBjYXVzZXMgZXZlbnQuY2xpZW50WSB2YWx1ZXMgdG8gZnJlYWsgb3V0ICh3aWxkbHkgaW5hY2N1cmF0ZSkgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBleGFjdGx5IDAuXG5cbiAgX2ZpeElPU0J1ZyAmJiBnc2FwLnRpY2tlci5hZGQoX3Bhc3NUaHJvdWdoKTsgLy8gcHJldmVudCB0aGUgdGlja2VyIGZyb20gc2xlZXBpbmdcblxuICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjO1xuICB0d2VlbiA9IGdzYXAudG8oc2VsZiwge1xuICAgIGVhc2U6IFwicG93ZXI0XCIsXG4gICAgcGF1c2VkOiB0cnVlLFxuICAgIHNjcm9sbFg6IG5vcm1hbGl6ZVNjcm9sbFggPyBcIis9MC4xXCIgOiBcIis9MFwiLFxuICAgIHNjcm9sbFk6IFwiKz0wLjFcIixcbiAgICBvbkNvbXBsZXRlOiBvblN0b3BEZWxheWVkQ2FsbC52YXJzLm9uQ29tcGxldGVcbiAgfSk7XG4gIHJldHVybiBzZWxmO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5zb3J0ID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgcmV0dXJuIF90cmlnZ2Vycy5zb3J0KGZ1bmMgfHwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGEudmFycy5yZWZyZXNoUHJpb3JpdHkgfHwgMCkgKiAtMWU2ICsgYS5zdGFydCAtIChiLnN0YXJ0ICsgKGIudmFycy5yZWZyZXNoUHJpb3JpdHkgfHwgMCkgKiAtMWU2KTtcbiAgfSk7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLm9ic2VydmUgPSBmdW5jdGlvbiAodmFycykge1xuICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5ub3JtYWxpemVTY3JvbGwgPSBmdW5jdGlvbiAodmFycykge1xuICBpZiAodHlwZW9mIHZhcnMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gX25vcm1hbGl6ZXI7XG4gIH1cblxuICBpZiAodmFycyA9PT0gdHJ1ZSAmJiBfbm9ybWFsaXplcikge1xuICAgIHJldHVybiBfbm9ybWFsaXplci5lbmFibGUoKTtcbiAgfVxuXG4gIGlmICh2YXJzID09PSBmYWxzZSkge1xuICAgIHJldHVybiBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5raWxsKCk7XG4gIH1cblxuICB2YXIgbm9ybWFsaXplciA9IHZhcnMgaW5zdGFuY2VvZiBPYnNlcnZlciA/IHZhcnMgOiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKTtcbiAgX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIudGFyZ2V0ID09PSBub3JtYWxpemVyLnRhcmdldCAmJiBfbm9ybWFsaXplci5raWxsKCk7XG4gIF9pc1ZpZXdwb3J0KG5vcm1hbGl6ZXIudGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBub3JtYWxpemVyKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZXI7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLmNvcmUgPSB7XG4gIC8vIHNtYWxsZXIgZmlsZSBzaXplIHdheSB0byBsZXZlcmFnZSBpbiBTY3JvbGxTbW9vdGhlciBhbmQgT2JzZXJ2ZXJcbiAgX2dldFZlbG9jaXR5UHJvcDogX2dldFZlbG9jaXR5UHJvcCxcbiAgX2lucHV0T2JzZXJ2ZXI6IF9pbnB1dE9ic2VydmVyLFxuICBfc2Nyb2xsZXJzOiBfc2Nyb2xsZXJzLFxuICBfcHJveGllczogX3Byb3hpZXMsXG4gIGJyaWRnZToge1xuICAgIC8vIHdoZW4gbm9ybWFsaXplU2Nyb2xsIHNldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiAoc3MgPSBzZXRTY3JvbGwpXG4gICAgc3M6IGZ1bmN0aW9uIHNzKCkge1xuICAgICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUoKTtcbiAgICB9LFxuICAgIC8vIGEgd2F5IHRvIGdldCB0aGUgX3JlZnJlc2hpbmcgdmFsdWUgaW4gT2JzZXJ2ZXJcbiAgICByZWY6IGZ1bmN0aW9uIHJlZigpIHtcbiAgICAgIHJldHVybiBfcmVmcmVzaGluZztcbiAgICB9XG4gIH1cbn07XG5fZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5leHBvcnQgeyBTY3JvbGxUcmlnZ2VyIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjExLjNcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjIsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2NvbmZpZyA9IHtcbiAgYXV0b1NsZWVwOiAxMjAsXG4gIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICBudWxsVGFyZ2V0V2FybjogMSxcbiAgdW5pdHM6IHtcbiAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gIH1cbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICBkdXJhdGlvbjogLjUsXG4gIG92ZXJ3cml0ZTogZmFsc2UsXG4gIGRlbGF5OiAwXG59LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX3JldmVydGluZyxcbiAgICBfY29udGV4dCxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgX3dpbixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2RvYyxcbiAgICBfZ2xvYmFscyA9IHt9LFxuICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICBfY29yZVJlYWR5LFxuICAgIF9pbnN0YWxsID0gZnVuY3Rpb24gX2luc3RhbGwoc2NvcGUpIHtcbiAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG59LFxuICAgIF9taXNzaW5nUGx1Z2luID0gZnVuY3Rpb24gX21pc3NpbmdQbHVnaW4ocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xufSxcbiAgICBfd2FybiA9IGZ1bmN0aW9uIF93YXJuKG1lc3NhZ2UsIHN1cHByZXNzKSB7XG4gIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufSxcbiAgICBfYWRkR2xvYmFsID0gZnVuY3Rpb24gX2FkZEdsb2JhbChuYW1lLCBvYmopIHtcbiAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbn0sXG4gICAgX2VtcHR5RnVuYyA9IGZ1bmN0aW9uIF9lbXB0eUZ1bmMoKSB7XG4gIHJldHVybiAwO1xufSxcbiAgICBfc3RhcnRBdFJldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGlzU3RhcnQ6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cbn0sXG4gICAgX251bWVyaWNJZlBvc3NpYmxlID0gZnVuY3Rpb24gX251bWVyaWNJZlBvc3NpYmxlKHZhbHVlKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgfVxuICB9O1xufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzKF9pc0FycmF5KHZhcnMua2V5ZnJhbWVzKSkgOiBfc2V0RGVmYXVsdHM7XG5cbiAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBmdW5jKHZhcnMsIHBhcmVudC52YXJzLmRlZmF1bHRzKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2FycmF5c01hdGNoID0gZnVuY3Rpb24gX2FycmF5c01hdGNoKGExLCBhMikge1xuICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gIHdoaWxlIChtYXRjaCAmJiBpLS0gJiYgYTFbaV0gPT09IGEyW2ldKSB7fVxuXG4gIHJldHVybiBpIDwgMDtcbn0sXG4gICAgX2FkZExpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX2FkZExpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3AsIHNvcnRCeSkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHNvcnRCeSkge1xuICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgcHJldiA9IHByZXYuX3ByZXY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGlmIChjaGlsZC5fbmV4dCkge1xuICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgY2hpbGQuX3ByZXYgPSBwcmV2O1xuICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gIHJldHVybiBjaGlsZDtcbn0sXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gIH0gZWxzZSBpZiAocGFyZW50W2ZpcnN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBwcmV2O1xuICB9XG5cbiAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7IC8vIGRvbid0IGRlbGV0ZSB0aGUgX2RwIGp1c3Qgc28gd2UgY2FuIHJldmVydCBpZiBuZWNlc3NhcnkuIEJ1dCBwYXJlbnQgc2hvdWxkIGJlIG51bGwgdG8gaW5kaWNhdGUgdGhlIGl0ZW0gaXNuJ3QgaW4gYSBsaW5rZWQgbGlzdC5cbn0sXG4gICAgX3JlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCwgb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSkge1xuICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICBjaGlsZC5fYWN0ID0gMDtcbn0sXG4gICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gIGlmIChhbmltYXRpb24gJiYgKCFjaGlsZCB8fCBjaGlsZC5fZW5kID4gYW5pbWF0aW9uLl9kdXIgfHwgY2hpbGQuX3N0YXJ0IDwgMCkpIHtcbiAgICAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGlmIGEgY2hpbGQgYW5pbWF0aW9uIGlzIHBhc3NlZCBpbiB3ZSBzaG91bGQgb25seSB1bmNhY2hlIGlmIHRoYXQgY2hpbGQgRVhURU5EUyB0aGUgYW5pbWF0aW9uIChpdHMgZW5kIHRpbWUgaXMgYmV5b25kIHRoZSBlbmQpXG4gICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICB3aGlsZSAoYSkge1xuICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgYSA9IGEucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgIC8vc29tZXRpbWVzIHdlIG11c3QgZm9yY2UgYSByZS1zb3J0IG9mIGFsbCBjaGlsZHJlbiBhbmQgdXBkYXRlIHRoZSBkdXJhdGlvbi90b3RhbER1cmF0aW9uIG9mIGFsbCBhbmNlc3RvciB0aW1lbGluZXMgaW1tZWRpYXRlbHkgaW4gY2FzZSwgZm9yIGV4YW1wbGUsIGluIHRoZSBtaWRkbGUgb2YgYSByZW5kZXIgbG9vcCwgb25lIHR3ZWVuIGFsdGVycyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIHdoaWNoIHNob3ZlcyBpdHMgc3RhcnRUaW1lIGJlZm9yZSAwLCBmb3JjaW5nIHRoZSBwYXJlbnQgdGltZWxpbmUgdG8gc2hpZnQgYXJvdW5kIGFuZCBzaGlmdENoaWxkcmVuKCkgd2hpY2ggY291bGQgYWZmZWN0IHRoYXQgbmV4dCB0d2VlbidzIHJlbmRlciAoc3RhcnRUaW1lKS4gRG9lc24ndCBtYXR0ZXIgZm9yIHRoZSByb290IHRpbWVsaW5lIHRob3VnaC5cbiAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICBwYXJlbnQudG90YWxEdXJhdGlvbigpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICByZXR1cm4gdHdlZW4uX3N0YXJ0QXQgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi52YXJzLmltbWVkaWF0ZVJlbmRlciAmJiAhdHdlZW4udmFycy5hdXRvUmV2ZXJ0IHx8IHR3ZWVuLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKSk7XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xufSxcbiAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gIC8vIGFkanVzdHMgdGhlIGFuaW1hdGlvbidzIF9zdGFydCBhbmQgX2VuZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIHRvdGFsVGltZSAob25seSBpZiB0aGUgcGFyZW50J3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSBhbmQgdGhlIGFuaW1hdGlvbiBpc24ndCBwYXVzZWQpLiBJdCBkb2Vzbid0IGRvIGFueSByZW5kZXJpbmcgb3IgZm9yY2luZyB0aGluZ3MgYmFjayBpbnRvIHBhcmVudCB0aW1lbGluZXMsIGV0Yy4gLSB0aGF0J3Mgd2hhdCB0b3RhbFRpbWUoKSBpcyBmb3IuXG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIGFuaW1hdGlvbi5fdHMpIHtcbiAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgIHBhcmVudC5fZGlydHkgfHwgX3VuY2FjaGUocGFyZW50LCBhbmltYXRpb24pOyAvL2ZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4gSWYgdGhlIHBhcmVudCdzIGNhY2hlIGlzIGFscmVhZHkgZGlydHksIGl0IGFscmVhZHkgdG9vayBjYXJlIG9mIG1hcmtpbmcgdGhlIGFuY2VzdG9ycyBhcyBkaXJ0eSB0b28sIHNvIHNraXAgdGhlIGZ1bmN0aW9uIGNhbGwgaGVyZS5cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuXG4vKlxuX3RvdGFsVGltZVRvVGltZSA9IChjbGFtcGVkVG90YWxUaW1lLCBkdXJhdGlvbiwgcmVwZWF0LCByZXBlYXREZWxheSwgeW95bykgPT4ge1xuXHRsZXQgY3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgcmVwZWF0RGVsYXksXG5cdFx0dGltZSA9IF9yb3VuZChjbGFtcGVkVG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cdGlmICh0aW1lID4gZHVyYXRpb24pIHtcblx0XHR0aW1lID0gZHVyYXRpb247XG5cdH1cblx0cmV0dXJuICh5b3lvICYmICh+fihjbGFtcGVkVG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgJiAxKSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xufSxcbiovXG5fcG9zdEFkZENoZWNrcyA9IGZ1bmN0aW9uIF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCkge1xuICB2YXIgdDtcblxuICBpZiAoY2hpbGQuX3RpbWUgfHwgY2hpbGQuX2luaXR0ZWQgJiYgIWNoaWxkLl9kdXIpIHtcbiAgICAvL2luIGNhc2UsIGZvciBleGFtcGxlLCB0aGUgX3N0YXJ0IGlzIG1vdmVkIG9uIGEgdHdlZW4gdGhhdCBoYXMgYWxyZWFkeSByZW5kZXJlZC4gSW1hZ2luZSBpdCdzIGF0IGl0cyBlbmQgc3RhdGUsIHRoZW4gdGhlIHN0YXJ0VGltZSBpcyBtb3ZlZCBXQVkgbGF0ZXIgKGFmdGVyIHRoZSBlbmQgb2YgdGhpcyB0aW1lbGluZSksIGl0IHNob3VsZCByZW5kZXIgYXQgaXRzIGJlZ2lubmluZy5cbiAgICB0ID0gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZWxpbmUucmF3VGltZSgpLCBjaGlsZCk7XG5cbiAgICBpZiAoIWNoaWxkLl9kdXIgfHwgX2NsYW1wKDAsIGNoaWxkLnRvdGFsRHVyYXRpb24oKSwgdCkgLSBjaGlsZC5fdFRpbWUgPiBfdGlueU51bSkge1xuICAgICAgY2hpbGQucmVuZGVyKHQsIHRydWUpO1xuICAgIH1cbiAgfSAvL2lmIHRoZSB0aW1lbGluZSBoYXMgYWxyZWFkeSBlbmRlZCBidXQgdGhlIGluc2VydGVkIHR3ZWVuL3RpbWVsaW5lIGV4dGVuZHMgdGhlIGR1cmF0aW9uLCB3ZSBzaG91bGQgZW5hYmxlIHRoaXMgdGltZWxpbmUgYWdhaW4gc28gdGhhdCBpdCByZW5kZXJzIHByb3Blcmx5LiBXZSBzaG91bGQgYWxzbyBhbGlnbiB0aGUgcGxheWhlYWQgd2l0aCB0aGUgcGFyZW50IHRpbWVsaW5lJ3Mgd2hlbiBhcHByb3ByaWF0ZS5cblxuXG4gIGlmIChfdW5jYWNoZSh0aW1lbGluZSwgY2hpbGQpLl9kcCAmJiB0aW1lbGluZS5faW5pdHRlZCAmJiB0aW1lbGluZS5fdGltZSA+PSB0aW1lbGluZS5fZHVyICYmIHRpbWVsaW5lLl90cykge1xuICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9ycyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQuLi5cbiAgICBpZiAodGltZWxpbmUuX2R1ciA8IHRpbWVsaW5lLmR1cmF0aW9uKCkpIHtcbiAgICAgIHQgPSB0aW1lbGluZTtcblxuICAgICAgd2hpbGUgKHQuX2RwKSB7XG4gICAgICAgIHQucmF3VGltZSgpID49IDAgJiYgdC50b3RhbFRpbWUodC5fdFRpbWUpOyAvL21vdmVzIHRoZSB0aW1lbGluZSAoc2hpZnRzIGl0cyBzdGFydFRpbWUpIGlmIG5lY2Vzc2FyeSwgYW5kIGFsc28gZW5hYmxlcyBpdC4gSWYgaXQncyBjdXJyZW50bHkgemVybywgdGhvdWdoLCBpdCBtYXkgbm90IGJlIHNjaGVkdWxlZCB0byByZW5kZXIgdW50aWwgbGF0ZXIgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIGl0IHRvIGFsaWduIHdpdGggdGhlIGN1cnJlbnQgcGxheWhlYWQgcG9zaXRpb24uIE9ubHkgbW92ZSB0byBjYXRjaCB1cCB3aXRoIHRoZSBwbGF5aGVhZC5cblxuICAgICAgICB0ID0gdC5fZHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGltZWxpbmUuX3pUaW1lID0gLV90aW55TnVtOyAvLyBoZWxwcyBlbnN1cmUgdGhhdCB0aGUgbmV4dCByZW5kZXIoKSB3aWxsIGJlIGZvcmNlZCAoY3Jvc3NpbmdTdGFydCA9IHRydWUgaW4gcmVuZGVyKCkpLCBldmVuIGlmIHRoZSBkdXJhdGlvbiBoYXNuJ3QgY2hhbmdlZCAod2UncmUgYWRkaW5nIGEgY2hpbGQgd2hpY2ggd291bGQgbmVlZCB0byBnZXQgcmVuZGVyZWQpLiBEZWZpbml0ZWx5IGFuIGVkZ2UgY2FzZS4gTm90ZTogd2UgTVVTVCBkbyB0aGlzIEFGVEVSIHRoZSBsb29wIGFib3ZlIHdoZXJlIHRoZSB0b3RhbFRpbWUoKSBtaWdodCB0cmlnZ2VyIGEgcmVuZGVyKCkgYmVjYXVzZSB0aGlzIF9hZGRUb1RpbWVsaW5lKCkgbWV0aG9kIGdldHMgY2FsbGVkIGZyb20gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgQkVGT1JFIHR3ZWVucyBldmVuIHJlY29yZCB0aGVpciB0YXJnZXRzLCBldGMuIHNvIHdlIHdvdWxkbid0IHdhbnQgdGhpbmdzIHRvIGdldCB0cmlnZ2VyZWQgaW4gdGhlIHdyb25nIG9yZGVyLlxuICB9XG59LFxuICAgIF9hZGRUb1RpbWVsaW5lID0gZnVuY3Rpb24gX2FkZFRvVGltZWxpbmUodGltZWxpbmUsIGNoaWxkLCBwb3NpdGlvbiwgc2tpcENoZWNrcykge1xuICBjaGlsZC5wYXJlbnQgJiYgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICBjaGlsZC5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKChfaXNOdW1iZXIocG9zaXRpb24pID8gcG9zaXRpb24gOiBwb3NpdGlvbiB8fCB0aW1lbGluZSAhPT0gX2dsb2JhbFRpbWVsaW5lID8gX3BhcnNlUG9zaXRpb24odGltZWxpbmUsIHBvc2l0aW9uLCBjaGlsZCkgOiB0aW1lbGluZS5fdGltZSkgKyBjaGlsZC5fZGVsYXkpO1xuICBjaGlsZC5fZW5kID0gX3JvdW5kUHJlY2lzZShjaGlsZC5fc3RhcnQgKyAoY2hpbGQudG90YWxEdXJhdGlvbigpIC8gTWF0aC5hYnMoY2hpbGQudGltZVNjYWxlKCkpIHx8IDApKTtcblxuICBfYWRkTGlua2VkTGlzdEl0ZW0odGltZWxpbmUsIGNoaWxkLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRpbWVsaW5lLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuXG4gIF9pc0Zyb21PckZyb21TdGFydChjaGlsZCkgfHwgKHRpbWVsaW5lLl9yZWNlbnQgPSBjaGlsZCk7XG4gIHNraXBDaGVja3MgfHwgX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKTtcbiAgdGltZWxpbmUuX3RzIDwgMCAmJiBfYWxpZ25QbGF5aGVhZCh0aW1lbGluZSwgdGltZWxpbmUuX3RUaW1lKTsgLy8gaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgbmV3IGNoaWxkIG1ha2VzIGl0IGxvbmdlciwgd2UgbWF5IG5lZWQgdG8gYWRqdXN0IHRoZSBwYXJlbnQncyBfc3RhcnQgKHB1c2ggaXQgYmFjaylcblxuICByZXR1cm4gdGltZWxpbmU7XG59LFxuICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gIHJldHVybiAoX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlciB8fCBfbWlzc2luZ1BsdWdpbihcInNjcm9sbFRyaWdnZXJcIiwgdHJpZ2dlcikpICYmIF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIuY3JlYXRlKHRyaWdnZXIsIGFuaW1hdGlvbik7XG59LFxuICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpIHtcbiAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICFfcmV2ZXJ0aW5nICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RUaW1lLCBzdXBwcmVzc0V2ZW50c107XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0sXG4gICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Ll90cyAmJiBwYXJlbnQuX2luaXR0ZWQgJiYgIXBhcmVudC5fbG9jayAmJiAocGFyZW50LnJhd1RpbWUoKSA8IDAgfHwgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChwYXJlbnQpKTtcbn0sXG4gICAgLy8gY2hlY2sgcGFyZW50J3MgX2xvY2sgYmVjYXVzZSB3aGVuIGEgdGltZWxpbmUgcmVwZWF0cy95b3lvcyBhbmQgZG9lcyBpdHMgYXJ0aWZpY2lhbCB3cmFwcGluZywgd2Ugc2hvdWxkbid0IGZvcmNlIHRoZSByYXRpbyBiYWNrIHRvIDBcbl9pc0Zyb21PckZyb21TdGFydCA9IGZ1bmN0aW9uIF9pc0Zyb21PckZyb21TdGFydChfcmVmMikge1xuICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgKCF0d2Vlbi5fc3RhcnQgJiYgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCh0d2VlbikgJiYgISghdHdlZW4uX2luaXR0ZWQgJiYgX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgfHwgKHR3ZWVuLl90cyA8IDAgfHwgdHdlZW4uX2RwLl90cyA8IDApICYmICFfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSA/IDAgOiAxLFxuICAgICAgLy8gaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC4gRWRnZSBjYXNlOiBpZiBhIGZyb20oKSBvciBmcm9tVG8oKSBzdGFnZ2VyIHR3ZWVuIGlzIHBsYWNlZCBsYXRlciBpbiBhIHRpbWVsaW5lLCB0aGUgXCJzdGFydEF0XCIgemVyby1kdXJhdGlvbiB0d2VlbiBjb3VsZCBpbml0aWFsbHkgcmVuZGVyIGF0IGEgdGltZSB3aGVuIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBpcyB0ZWNobmljYWxseSBCRUZPUkUgd2hlcmUgdGhpcyB0d2VlbiBpcywgc28gbWFrZSBzdXJlIHRoYXQgYW55IFwiZnJvbVwiIGFuZCBcImZyb21Ub1wiIHN0YXJ0QXQgdHdlZW5zIGFyZSByZW5kZXJlZCB0aGUgZmlyc3QgdGltZSBhdCBhIHJhdGlvIG9mIDEuXG4gIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgIHRUaW1lID0gMCxcbiAgICAgIHB0LFxuICAgICAgaXRlcmF0aW9uLFxuICAgICAgcHJldkl0ZXJhdGlvbjtcblxuICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vIGluIGNhc2UgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gdGhhdCBoYXMgYSByZXBlYXQgd2l0aCBhIHJlcGVhdERlbGF5XG4gICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgdHdlZW4uX3lveW8gJiYgaXRlcmF0aW9uICYgMSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuXG4gICAgaWYgKGl0ZXJhdGlvbiAhPT0gX2FuaW1hdGlvbkN5Y2xlKHR3ZWVuLl90VGltZSwgcmVwZWF0RGVsYXkpKSB7XG4gICAgICAvLyBpZiBpdGVyYXRpb24gY2hhbmdlZFxuICAgICAgcHJldlJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgdHdlZW4udmFycy5yZXBlYXRSZWZyZXNoICYmIHR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBpZiAocmF0aW8gIT09IHByZXZSYXRpbyB8fCBfcmV2ZXJ0aW5nIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhX3JldmVydGluZykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgJiYgX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCBhbmltYXRpb24uX3RUaW1lID0gYW5pbWF0aW9uLl90RHVyICogdG90YWxQcm9ncmVzcyk7XG4gIGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvL1VNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICB9IDogY29uZmlnLFxuICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgcmF3VmFyczogMFxuICB9LFxuICAgICAgc3RhdGljcyA9IHtcbiAgICB0YXJnZXRUZXN0OiAwLFxuICAgIGdldDogMCxcbiAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgYWxpYXNlczoge30sXG4gICAgcmVnaXN0ZXI6IDBcbiAgfTtcblxuICBfd2FrZSgpO1xuXG4gIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgfVxuXG4gICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICB9XG5cbiAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgaWRlYSB0byByZXBsYWNlIHRoZSBoYXJkLWNvZGVkIGNvbG9yIG5hbWUgdmFsdWVzIC0gcHV0IHRoaXMgaW4gdGhlIHRpY2tlci53YWtlKCkgd2hlcmUgd2Ugc2V0IHRoZSBfZG9jOlxuLy8gbGV0IGN0eCA9IF9kb2MuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyBfZm9yRWFjaE5hbWUoXCJhcXVhLGxpbWUsc2lsdmVyLGJsYWNrLG1hcm9vbix0ZWFsLGJsdWUsbmF2eSx3aGl0ZSxvbGl2ZSx5ZWxsb3csb3JhbmdlLGdyYXkscHVycGxlLGdyZWVuLHJlZCxwaW5rLGN5YW5cIiwgY29sb3IgPT4ge2N0eC5maWxsU3R5bGUgPSBjb2xvcjsgX2NvbG9yTG9va3VwW2NvbG9yXSA9IHNwbGl0Q29sb3IoY3R4LmZpbGxTdHlsZSl9KTtcbl9odWUgPSBmdW5jdGlvbiBfaHVlKGgsIG0xLCBtMikge1xuICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbn0sXG4gICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgaCxcbiAgICAgIHMsXG4gICAgICBsLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZCxcbiAgICAgIHdhc0hTTDtcblxuICBpZiAoIWEpIHtcbiAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cbiAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChfY29sb3JMb29rdXBbdl0pIHtcbiAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICh2Lmxlbmd0aCA8IDYpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMCBvciAjOUYwRiAoY291bGQgaGF2ZSBhbHBoYSlcbiAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgIGIgPSB2LmNoYXJBdCgzKTtcbiAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgLy8gaGV4IHdpdGggYWxwaGEsIGxpa2UgI2ZkNWU1M2ZmXG4gICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICByZXR1cm4gW2EgPj4gMTYsIGEgPj4gOCAmIF8yNTUsIGEgJiBfMjU1LCBwYXJzZUludCh2LnN1YnN0cig3KSwgMTYpIC8gMjU1XTtcbiAgICAgIH1cblxuICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICBhID0gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XTtcbiAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgaWYgKCF0b0hTTCkge1xuICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgbCA9ICthWzJdIC8gMTAwO1xuICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgYS5sZW5ndGggPiAzICYmIChhWzNdICo9IDEpOyAvL2Nhc3QgYXMgbnVtYmVyXG5cbiAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgYVsxXSA9IF9odWUoaCwgciwgZyk7XG4gICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgIC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgciA9IGFbMF0gLyBfMjU1O1xuICAgIGcgPSBhWzFdIC8gXzI1NTtcbiAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgaCA9IHMgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9XG5cbiAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICBhWzJdID0gfn4obCAqIDEwMCArIC41KTtcbiAgfVxuXG4gIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gIHJldHVybiBhO1xufSxcbiAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAvLyBzdHJpcHMgb3V0IHRoZSBjb2xvcnMgZnJvbSB0aGUgc3RyaW5nLCBmaW5kcyBhbGwgdGhlIG51bWVyaWMgc2xvdHMgKHdpdGggdW5pdHMpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRob3NlLiBUaGUgQXJyYXkgYWxzbyBoYXMgYSBcImNcIiBwcm9wZXJ0eSB3aGljaCBpcyBhbiBBcnJheSBvZiB0aGUgaW5kZXggdmFsdWVzIHdoZXJlIHRoZSBjb2xvcnMgYmVsb25nLiBUaGlzIGlzIHRvIGhlbHAgd29yayBhcm91bmQgaXNzdWVzIHdoZXJlIHRoZXJlJ3MgYSBtaXMtbWF0Y2hlZCBvcmRlciBvZiBjb2xvci9udW1lcmljIGRhdGEgbGlrZSBkcm9wLXNoYWRvdygjZjAwIDBweCAxcHggMnB4KSBhbmQgZHJvcC1zaGFkb3coMHggMXB4IDJweCAjZjAwKS4gVGhpcyBpcyBiYXNpY2FsbHkgYSBoZWxwZXIgZnVuY3Rpb24gdXNlZCBpbiBfZm9ybWF0Q29sb3JzKClcbiAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgaSA9IC0xO1xuICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgYSk7XG4gICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgfSk7XG4gIHZhbHVlcy5jID0gYztcbiAgcmV0dXJuIHZhbHVlcztcbn0sXG4gICAgX2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uIF9mb3JtYXRDb2xvcnMocywgdG9IU0wsIG9yZGVyTWF0Y2hEYXRhKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICB0eXBlID0gdG9IU0wgPyBcImhzbGEoXCIgOiBcInJnYmEoXCIsXG4gICAgICBpID0gMCxcbiAgICAgIGMsXG4gICAgICBzaGVsbCxcbiAgICAgIGQsXG4gICAgICBsO1xuXG4gIGlmICghY29sb3JzKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gIH0pO1xuXG4gIGlmIChvcmRlck1hdGNoRGF0YSkge1xuICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICBpZiAoYy5qb2luKHJlc3VsdCkgIT09IGQuYy5qb2luKHJlc3VsdCkpIHtcbiAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaGVsbCkge1xuICAgIHNoZWxsID0gcy5zcGxpdChfY29sb3JFeHApO1xuICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc2hlbGxbbF07XG59LFxuICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHMgPSBcIig/OlxcXFxiKD86KD86cmdifHJnYmF8aHNsfGhzbGEpXFxcXCguKz9cXFxcKSl8XFxcXEIjKD86WzAtOWEtZl17Myw0fSl7MSwyfVxcXFxiXCIsXG4gICAgICAvL3dlJ2xsIGR5bmFtaWNhbGx5IGJ1aWxkIHRoaXMgUmVndWxhciBFeHByZXNzaW9uIHRvIGNvbnNlcnZlIGZpbGUgc2l6ZS4gQWZ0ZXIgYnVpbGRpbmcgaXQsIGl0IHdpbGwgYmUgYWJsZSB0byBmaW5kIHJnYigpLCByZ2JhKCksICMgKGhleGFkZWNpbWFsKSwgYW5kIG5hbWVkIGNvbG9yIHZhbHVlcyBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuLFxuICBwO1xuXG4gIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICBzICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbn0oKSxcbiAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gIHZhciBjb21iaW5lZCA9IGEuam9pbihcIiBcIiksXG4gICAgICB0b0hTTDtcbiAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgaWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgYVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wsIF9jb2xvck9yZGVyRGF0YShhWzFdKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3JkZXIgb2YgbnVtYmVycy9jb2xvcnMgbWF0Y2ggd2l0aCB0aGUgRU5EIHZhbHVlLlxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElDS0VSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fdGlja2VyQWN0aXZlLFxuICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgX2xhZ1RocmVzaG9sZCA9IDUwMCxcbiAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBfbGFzdFVwZGF0ZSA9IF9zdGFydFRpbWUsXG4gICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICBfbGlzdGVuZXJzID0gW10sXG4gICAgICBfaWQsXG4gICAgICBfcmVxLFxuICAgICAgX3JhZixcbiAgICAgIF9zZWxmLFxuICAgICAgX2RlbHRhLFxuICAgICAgX2ksXG4gICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgbWFudWFsID0gdiA9PT0gdHJ1ZSxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGZyYW1lO1xuXG4gICAgZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmFmID0gX3dpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICBfcmVxID0gX3JhZiB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAxO1xuXG4gICAgICAgIF90aWNrKDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgKF9yYWYgPyBfd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lIDogY2xlYXJUaW1lb3V0KShfaWQpO1xuICAgICAgX3RpY2tlckFjdGl2ZSA9IDA7XG4gICAgICBfcmVxID0gX2VtcHR5RnVuYztcbiAgICB9LFxuICAgIGxhZ1Ntb290aGluZzogZnVuY3Rpb24gbGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgMSAvIF90aW55TnVtOyAvL3plcm8gc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGJhc2ljYWxseSB1bmxpbWl0ZWRcblxuICAgICAgX2FkanVzdGVkTGFnID0gTWF0aC5taW4oYWRqdXN0ZWRMYWcsIF9sYWdUaHJlc2hvbGQsIDApO1xuICAgIH0sXG4gICAgZnBzOiBmdW5jdGlvbiBmcHMoX2Zwcykge1xuICAgICAgX2dhcCA9IDEwMDAgLyAoX2ZwcyB8fCAyNDApO1xuICAgICAgX25leHRUaW1lID0gX3NlbGYudGltZSAqIDEwMDAgKyBfZ2FwO1xuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQoY2FsbGJhY2ssIG9uY2UsIHByaW9yaXRpemUpIHtcbiAgICAgIHZhciBmdW5jID0gb25jZSA/IGZ1bmN0aW9uICh0LCBkLCBmLCB2KSB7XG4gICAgICAgIGNhbGxiYWNrKHQsIGQsIGYsIHYpO1xuXG4gICAgICAgIF9zZWxmLnJlbW92ZShmdW5jKTtcbiAgICAgIH0gOiBjYWxsYmFjaztcblxuICAgICAgX3NlbGYucmVtb3ZlKGNhbGxiYWNrKTtcblxuICAgICAgX2xpc3RlbmVyc1twcmlvcml0aXplID8gXCJ1bnNoaWZ0XCIgOiBcInB1c2hcIl0oZnVuYyk7XG5cbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2ssIGkpIHtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG59KTtcblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICB0aGlzLl9kZWxheSA9ICt2YXJzLmRlbGF5IHx8IDA7XG5cbiAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAvLyBUT0RPOiByZXBlYXQ6IEluZmluaXR5IG9uIGEgdGltZWxpbmUncyBjaGlsZHJlbiBtdXN0IGZsYWcgdGhhdCB0aW1lbGluZSBpbnRlcm5hbGx5IGFuZCBhZmZlY3QgaXRzIHRvdGFsRHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBzdG9wIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gd2hlbiByZWFjaGluZyB0aGUgc3RhcnQuXG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cbiAgICBpZiAoX2NvbnRleHQpIHtcbiAgICAgIHRoaXMuX2N0eCA9IF9jb250ZXh0O1xuXG4gICAgICBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gICAgfVxuXG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWxheSA9IGZ1bmN0aW9uIGRlbGF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbiAgfTtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbER1cmF0aW9uKHRoaXMuX3JlcGVhdCA+IDAgPyB2YWx1ZSArICh2YWx1ZSArIHRoaXMuX3JEZWxheSkgKiB0aGlzLl9yZXBlYXQgOiB2YWx1ZSkgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSAmJiB0aGlzLl9kdXI7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eSA9IDA7XG4gICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgfTtcblxuICBfcHJvdG8udG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgX3dha2UoKTtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuX3RzKSB7XG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpOyAvLyBlZGdlIGNhc2U6IGlmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIHRpbWVsaW5lIHRoYXQgYWxyZWFkeSBjb21wbGV0ZWQsIGZvciBleGFtcGxlLCB3ZSBtdXN0IHJlLWFjdGl2YXRlIHRoZSBwYXJlbnQuXG4gICAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQucGFyZW50Ll90aW1lICE9PSBwYXJlbnQuX3N0YXJ0ICsgKHBhcmVudC5fdHMgPj0gMCA/IHBhcmVudC5fdFRpbWUgLyBwYXJlbnQuX3RzIDogKHBhcmVudC50b3RhbER1cmF0aW9uKCkgLSBwYXJlbnQuX3RUaW1lKSAvIC1wYXJlbnQuX3RzKSkge1xuICAgICAgICAgIHBhcmVudC50b3RhbFRpbWUocGFyZW50Ll90VGltZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucGFyZW50ICYmIHRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiAodGhpcy5fdHMgPiAwICYmIF90b3RhbFRpbWUgPCB0aGlzLl90RHVyIHx8IHRoaXMuX3RzIDwgMCAmJiBfdG90YWxUaW1lID4gMCB8fCAhdGhpcy5fdER1ciAmJiAhX3RvdGFsVGltZSkpIHtcbiAgICAgICAgLy9pZiB0aGUgYW5pbWF0aW9uIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCwgcHV0IGl0IGJhY2sgaW50byBpdHMgbGFzdCBwYXJlbnQgKHJlY29yZGVkIGFzIF9kcCBmb3IgZXhhY3RseSBjYXNlcyBsaWtlIHRoaXMpLiBMaW1pdCB0byBwYXJlbnRzIHdpdGggYXV0b1JlbW92ZUNoaWxkcmVuIChsaWtlIGdsb2JhbFRpbWVsaW5lKSBzbyB0aGF0IGlmIHRoZSB1c2VyIG1hbnVhbGx5IHJlbW92ZXMgYW4gYW5pbWF0aW9uIGZyb20gYSB0aW1lbGluZSBhbmQgdGhlbiBhbHRlcnMgaXRzIHBsYXloZWFkLCBpdCBkb2Vzbid0IGdldCBhZGRlZCBiYWNrIGluLlxuICAgICAgICBfYWRkVG9UaW1lbGluZSh0aGlzLl9kcCwgdGhpcywgdGhpcy5fc3RhcnQgLSB0aGlzLl9kZWxheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RUaW1lICE9PSBfdG90YWxUaW1lIHx8ICF0aGlzLl9kdXIgJiYgIXN1cHByZXNzRXZlbnRzIHx8IHRoaXMuX2luaXR0ZWQgJiYgTWF0aC5hYnModGhpcy5felRpbWUpID09PSBfdGlueU51bSB8fCAhX3RvdGFsVGltZSAmJiAhdGhpcy5faW5pdHRlZCAmJiAodGhpcy5hZGQgfHwgdGhpcy5fcHRMb29rdXApKSB7XG4gICAgICAvLyBjaGVjayBmb3IgX3B0TG9va3VwIG9uIGEgVHdlZW4gaW5zdGFuY2UgdG8gZW5zdXJlIGl0IGhhcyBhY3R1YWxseSBmaW5pc2hlZCBiZWluZyBpbnN0YW50aWF0ZWQsIG90aGVyd2lzZSBpZiB0aGlzLnJldmVyc2UoKSBnZXRzIGNhbGxlZCBpbiB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBpdCBjb3VsZCB0cmlnZ2VyIGEgcmVuZGVyKCkgaGVyZSBldmVuIHRob3VnaCB0aGUgX3RhcmdldHMgd2VyZW4ndCBwb3B1bGF0ZWQsIHRodXMgd2hlbiBfaW5pdCgpIGlzIGNhbGxlZCB0aGVyZSB3b24ndCBiZSBhbnkgUHJvcFR3ZWVucyAoaXQnbGwgYWN0IGxpa2UgdGhlIHR3ZWVuIGlzIG5vbi1mdW5jdGlvbmFsKVxuICAgICAgdGhpcy5fdHMgfHwgKHRoaXMuX3BUaW1lID0gX3RvdGFsVGltZSk7IC8vIG90aGVyd2lzZSwgaWYgYW4gYW5pbWF0aW9uIGlzIHBhdXNlZCwgdGhlbiB0aGUgcGxheWhlYWQgaXMgbW92ZWQgYmFjayB0byB6ZXJvLCB0aGVuIHJlc3VtZWQsIGl0J2QgcmV2ZXJ0IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHRpbWUgYXQgdGhlIHBhdXNlXG4gICAgICAvL2lmICghdGhpcy5fbG9jaykgeyAvLyBhdm9pZCBlbmRsZXNzIHJlY3Vyc2lvbiAobm90IHN1cmUgd2UgbmVlZCB0aGlzIHlldCBvciBpZiBpdCdzIHdvcnRoIHRoZSBwZXJmb3JtYW5jZSBoaXQpXG4gICAgICAvLyAgIHRoaXMuX2xvY2sgPSAxO1xuXG4gICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpOyAvLyAgIHRoaXMuX2xvY2sgPSAwO1xuICAgICAgLy99XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8udGltZSA9IGZ1bmN0aW9uIHRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZShNYXRoLm1pbih0aGlzLnRvdGFsRHVyYXRpb24oKSwgdmFsdWUgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcykpICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7IC8vIG5vdGU6IGlmIHRoZSBtb2R1bHVzIHJlc3VsdHMgaW4gMCwgdGhlIHBsYXloZWFkIGNvdWxkIGJlIGV4YWN0bHkgYXQgdGhlIGVuZCBvciB0aGUgYmVnaW5uaW5nLCBhbmQgd2UgYWx3YXlzIGRlZmVyIHRvIHRoZSBFTkQgd2l0aCBhIG5vbi16ZXJvIHZhbHVlLCBvdGhlcndpc2UgaWYgeW91IHNldCB0aGUgdGltZSgpIHRvIHRoZSB2ZXJ5IGVuZCAoZHVyYXRpb24oKSksIGl0IHdvdWxkIHJlbmRlciBhdCB0aGUgU1RBUlQhXG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF0aW87XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J0cyA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gcmVjb3JkZWQgdGltZVNjYWxlLiBTcGVjaWFsIGNhc2U6IGlmIHNvbWVvbmUgY2FsbHMgcmV2ZXJzZSgpIG9uIGFuIGFuaW1hdGlvbiB3aXRoIHRpbWVTY2FsZSBvZiAwLCB3ZSBhc3NpZ24gaXQgLV90aW55TnVtIHRvIHJlbWVtYmVyIGl0J3MgcmV2ZXJzZWQuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3J0cyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciB0VGltZSA9IHRoaXMucGFyZW50ICYmIHRoaXMuX3RzID8gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGhpcy5wYXJlbnQuX3RpbWUsIHRoaXMpIDogdGhpcy5fdFRpbWU7IC8vIG1ha2Ugc3VyZSB0byBkbyB0aGUgcGFyZW50VG9DaGlsZFRvdGFsVGltZSgpIEJFRk9SRSBzZXR0aW5nIHRoZSBuZXcgX3RzIGJlY2F1c2UgdGhlIG9sZCBvbmUgbXVzdCBiZSB1c2VkIGluIHRoYXQgY2FsY3VsYXRpb24uXG4gICAgLy8gZnV0dXJlIGFkZGl0aW9uPyBVcCBzaWRlOiBmYXN0IGFuZCBtaW5pbWFsIGZpbGUgc2l6ZS4gRG93biBzaWRlOiBvbmx5IHdvcmtzIG9uIHRoaXMgYW5pbWF0aW9uOyBpZiBhIHRpbWVsaW5lIGlzIHJldmVyc2VkLCBmb3IgZXhhbXBsZSwgaXRzIGNoaWxkcmVucycgb25SZXZlcnNlIHdvdWxkbid0IGdldCBjYWxsZWQuXG4gICAgLy8oK3ZhbHVlIDwgMCAmJiB0aGlzLl9ydHMgPj0gMCkgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXZlcnNlXCIsIHRydWUpO1xuICAgIC8vIHByaW9yaXRpemUgcmVuZGVyaW5nIHdoZXJlIHRoZSBwYXJlbnQncyBwbGF5aGVhZCBsaW5lcyB1cCBpbnN0ZWFkIG9mIHRoaXMuX3RUaW1lIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgYSB0d2VlbiB0aGF0J3MgYW5pbWF0aW5nIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgaW4gdGhlIHNhbWUgcmVuZGVyaW5nIGxvb3AgKHNhbWUgcGFyZW50KSwgdGh1cyBpZiB0aGUgdGltZVNjYWxlIHR3ZWVuIHJlbmRlcnMgZmlyc3QsIGl0IHdvdWxkIGFsdGVyIF9zdGFydCBCRUZPUkUgX3RUaW1lIHdhcyBzZXQgb24gdGhhdCB0aWNrIChpbiB0aGUgcmVuZGVyaW5nIGxvb3ApLCBlZmZlY3RpdmVseSBmcmVlemluZyBpdCB1bnRpbCB0aGUgdGltZVNjYWxlIHR3ZWVuIGZpbmlzaGVzLlxuXG4gICAgdGhpcy5fcnRzID0gK3ZhbHVlIHx8IDA7XG4gICAgdGhpcy5fdHMgPSB0aGlzLl9wcyB8fCB2YWx1ZSA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSB3aGljaCB3b3VsZCBiZSAwIGlmIHRoZSBhbmltYXRpb24gaXMgcGF1c2VkLlxuXG4gICAgdGhpcy50b3RhbFRpbWUoX2NsYW1wKC10aGlzLl9kZWxheSwgdGhpcy5fdER1ciwgdFRpbWUpLCB0cnVlKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMgfHwgMSk7XG4gIH07XG5cbiAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwOyAvLyBfZHAgPSBkZXRhY2hlZCBwYXJlbnRcblxuICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG5cbiAgICBpZiAodGhpcy5faW5pdHRlZCB8fCB0aGlzLl9zdGFydEF0KSB7XG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgICB0aGlzLnRvdGFsVGltZSgtMC4wMSwgY29uZmlnLnN1cHByZXNzRXZlbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgIT09IFwibmVzdGVkXCIgJiYgY29uZmlnLmtpbGwgIT09IGZhbHNlICYmIHRoaXMua2lsbCgpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgPyAtMSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIFJlY29yZGluZy5yZXZlcnQoKSlcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1XG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiBkdXI7XG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgb25VcGRhdGVQYXJhbXMgPSB2YXJzLm9uVXBkYXRlUGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZSA9IHZhcnMuY2FsbGJhY2tTY29wZSxcbiAgICAgIHJ1bkJhY2t3YXJkcyA9IHZhcnMucnVuQmFja3dhcmRzLFxuICAgICAgeW95b0Vhc2UgPSB2YXJzLnlveW9FYXNlLFxuICAgICAga2V5ZnJhbWVzID0gdmFycy5rZXlmcmFtZXMsXG4gICAgICBhdXRvUmV2ZXJ0ID0gdmFycy5hdXRvUmV2ZXJ0LFxuICAgICAgZHVyID0gdHdlZW4uX2R1cixcbiAgICAgIHByZXZTdGFydEF0ID0gdHdlZW4uX3N0YXJ0QXQsXG4gICAgICB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwYXJlbnQgPSB0d2Vlbi5wYXJlbnQsXG4gICAgICBmdWxsVGFyZ2V0cyA9IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiB0YXJnZXRzLFxuICAgICAgYXV0b092ZXJ3cml0ZSA9IHR3ZWVuLl9vdmVyd3JpdGUgPT09IFwiYXV0b1wiICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgdGwgPSB0d2Vlbi50aW1lbGluZSxcbiAgICAgIGNsZWFuVmFycyxcbiAgICAgIGksXG4gICAgICBwLFxuICAgICAgcHQsXG4gICAgICB0YXJnZXQsXG4gICAgICBoYXNQcmlvcml0eSxcbiAgICAgIGdzRGF0YSxcbiAgICAgIGhhcm5lc3MsXG4gICAgICBwbHVnaW4sXG4gICAgICBwdExvb2t1cCxcbiAgICAgIGluZGV4LFxuICAgICAgaGFybmVzc1ZhcnMsXG4gICAgICBvdmVyd3JpdHRlbjtcbiAgdGwgJiYgKCFrZXlmcmFtZXMgfHwgIWVhc2UpICYmIChlYXNlID0gXCJub25lXCIpO1xuICB0d2Vlbi5fZWFzZSA9IF9wYXJzZUVhc2UoZWFzZSwgX2RlZmF1bHRzLmVhc2UpO1xuICB0d2Vlbi5feUVhc2UgPSB5b3lvRWFzZSA/IF9pbnZlcnRFYXNlKF9wYXJzZUVhc2UoeW95b0Vhc2UgPT09IHRydWUgPyBlYXNlIDogeW95b0Vhc2UsIF9kZWZhdWx0cy5lYXNlKSkgOiAwO1xuXG4gIGlmICh5b3lvRWFzZSAmJiB0d2Vlbi5feW95byAmJiAhdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vdGhlcmUgbXVzdCBoYXZlIGJlZW4gYSBwYXJlbnQgdGltZWxpbmUgd2l0aCB5b3lvOnRydWUgdGhhdCBpcyBjdXJyZW50bHkgaW4gaXRzIHlveW8gcGhhc2UsIHNvIGZsaXAgdGhlIGVhc2VzLlxuICAgIHlveW9FYXNlID0gdHdlZW4uX3lFYXNlO1xuICAgIHR3ZWVuLl95RWFzZSA9IHR3ZWVuLl9lYXNlO1xuICAgIHR3ZWVuLl9lYXNlID0geW95b0Vhc2U7XG4gIH1cblxuICB0d2Vlbi5fZnJvbSA9ICF0bCAmJiAhIXZhcnMucnVuQmFja3dhcmRzOyAvL25lc3RlZCB0aW1lbGluZXMgc2hvdWxkIG5ldmVyIHJ1biBiYWNrd2FyZHMgLSB0aGUgYmFja3dhcmRzLW5lc3MgaXMgaW4gdGhlIGNoaWxkIHR3ZWVucy5cblxuICBpZiAoIXRsIHx8IGtleWZyYW1lcyAmJiAhdmFycy5zdGFnZ2VyKSB7XG4gICAgLy9pZiB0aGVyZSdzIGFuIGludGVybmFsIHRpbWVsaW5lLCBza2lwIGFsbCB0aGUgcGFyc2luZyBiZWNhdXNlIHdlIHBhc3NlZCB0aGF0IHRhc2sgZG93biB0aGUgY2hhaW4uXG4gICAgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDA7XG4gICAgaGFybmVzc1ZhcnMgPSBoYXJuZXNzICYmIHZhcnNbaGFybmVzcy5wcm9wXTsgLy9zb21lb25lIG1heSBuZWVkIHRvIHNwZWNpZnkgQ1NTLXNwZWNpZmljIHZhbHVlcyBBTkQgbm9uLUNTUyB2YWx1ZXMsIGxpa2UgaWYgdGhlIGVsZW1lbnQgaGFzIGFuIFwieFwiIHByb3BlcnR5IHBsdXMgaXQncyBhIHN0YW5kYXJkIERPTSBlbGVtZW50LiBXZSBhbGxvdyBwZW9wbGUgdG8gZGlzdGluZ3Vpc2ggYnkgd3JhcHBpbmcgcGx1Z2luLXNwZWNpZmljIHN0dWZmIGluIGEgY3NzOnt9IG9iamVjdCBmb3IgZXhhbXBsZS5cblxuICAgIGNsZWFuVmFycyA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9yZXNlcnZlZFByb3BzKTtcblxuICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgcHJldlN0YXJ0QXQuX3pUaW1lIDwgMCAmJiBwcmV2U3RhcnRBdC5wcm9ncmVzcygxKTsgLy8gaW4gY2FzZSBpdCdzIGEgbGF6eSBzdGFydEF0IHRoYXQgaGFzbid0IHJlbmRlcmVkIHlldC5cblxuICAgICAgdGltZSA8IDAgJiYgcnVuQmFja3dhcmRzICYmIGltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCA/IHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkgOiBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWdOb0tpbGwgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7IC8vIGlmIGl0J3MgYSBcInN0YXJ0QXRcIiAobm90IFwiZnJvbSgpXCIgb3IgcnVuQmFja3dhcmRzOiB0cnVlKSwgd2Ugb25seSBuZWVkIHRvIGRvIGEgc2hhbGxvdyByZXZlcnQgKGtlZXAgdHJhbnNmb3JtcyBjYWNoZWQgaW4gQ1NTUGx1Z2luKVxuICAgICAgLy8gZG9uJ3QganVzdCBfcmVtb3ZlRnJvbVBhcmVudChwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKSBiZWNhdXNlIHRoYXQnbGwgbGVhdmUgaW5saW5lIHN0eWxlcy4gV2UncmUgY3JlYXRpbmcgYSBuZXcgX3N0YXJ0QXQgZm9yIFwic3RhcnRBdFwiIHR3ZWVucyB0aGF0IHJlLWNhcHR1cmUgdGhpbmdzIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBwcmUtdHdlZW4gdmFsdWVzIGNoYW5nZWQgc2luY2UgdGhlIHR3ZWVuIHdhcyBjcmVhdGVkLCB0aGV5J3JlIHJlY29yZGVkLlxuXG4gICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICAgICAgb25VcGRhdGVQYXJhbXM6IG9uVXBkYXRlUGFyYW1zLFxuICAgICAgICBjYWxsYmFja1Njb3BlOiBjYWxsYmFja1Njb3BlLFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSEgTGlrZSB3aGVuIHJldmVydCgpIGlzIGNhbGxlZCBhbmQgdG90YWxUaW1lKCkgZ2V0cyBzZXQuXG5cbiAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCB0d2Vlbi5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCAmJiB0VGltZSA8PSAwKSB7XG4gICAgICAgICAgLy8gY2hlY2sgdFRpbWUgaGVyZSBiZWNhdXNlIGluIHRoZSBjYXNlIG9mIGEgeW95byB0d2VlbiB3aG9zZSBwbGF5aGVhZCBnZXRzIHB1c2hlZCB0byB0aGUgZW5kIGxpa2UgdHdlZW4ucHJvZ3Jlc3MoMSksIHdlIHNob3VsZCBhbGxvdyBpdCB0aHJvdWdoIHNvIHRoYXQgdGhlIG9uQ29tcGxldGUgZ2V0cyBmaXJlZCBwcm9wZXJseS5cbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmICghcHJldlN0YXJ0QXQpIHtcbiAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpOyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXG4gICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgZGF0YTogXCJpc0Zyb21TdGFydFwiLFxuICAgICAgICAgIC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICAvL3plcm8tZHVyYXRpb24gdHdlZW5zIHJlbmRlciBpbW1lZGlhdGVseSBieSBkZWZhdWx0LCBidXQgaWYgd2UncmUgbm90IHNwZWNpZmljYWxseSBpbnN0cnVjdGVkIHRvIHJlbmRlciB0aGlzIHR3ZWVuIGltbWVkaWF0ZWx5LCB3ZSBzaG91bGQgc2tpcCB0aGlzIGFuZCBtZXJlbHkgX2luaXQoKSB0byByZWNvcmQgdGhlIHN0YXJ0aW5nIHZhbHVlcyAocmVuZGVyaW5nIHRoZW0gaW1tZWRpYXRlbHkgd291bGQgcHVzaCB0aGVtIHRvIGNvbXBsZXRpb24gd2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhhdCBjYXNlIC0gd2UnZCBoYXZlIHRvIHJlbmRlcigtMSkgaW1tZWRpYXRlbHkgYWZ0ZXIpXG4gICAgICAgICAgc3RhZ2dlcjogMCxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCAvL2Vuc3VyZXMgdGhhdCBuZXN0ZWQgdHdlZW5zIHRoYXQgaGFkIGEgc3RhZ2dlciBhcmUgaGFuZGxlZCBwcm9wZXJseSwgbGlrZSBnc2FwLmZyb20oXCIuY2xhc3NcIiwge3k6Z3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pfSlcblxuICAgICAgICB9LCBjbGVhblZhcnMpO1xuICAgICAgICBoYXJuZXNzVmFycyAmJiAocFtoYXJuZXNzLnByb3BdID0gaGFybmVzc1ZhcnMpOyAvLyBpbiBjYXNlIHNvbWVvbmUgZG9lcyBzb21ldGhpbmcgbGlrZSAuZnJvbSguLi4sIHtjc3M6e319KVxuXG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIHApKTtcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lIVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVwiLCAhX2NvbmZpZy5udWxsVGFyZ2V0V2FybikgfHwgW107XG4gICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdOyAvL1Byb3BUd2VlbiBsb29rdXAuIEFuIGFycmF5IGNvbnRhaW5pbmcgYW4gb2JqZWN0IGZvciBlYWNoIHRhcmdldCwgaGF2aW5nIGtleXMgZm9yIGVhY2ggdHdlZW5pbmcgcHJvcGVydHlcblxuICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgaWYgKGtleWZyYW1lcyB8fCBzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICBkYXRhOiBcIm5lc3RlZFwiLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICB9KTsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgdGFyZ2V0cyBiZWNhdXNlIGZvciBzdGFnZ2VycyBhbmQga2V5ZnJhbWVzLCB3ZSBlbmQgdXAgY3JlYXRpbmcgYW4gaW5kaXZpZHVhbCB0d2VlbiBmb3IgZWFjaCBidXQgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG5lZWQgdG8ga25vdyB0aGUgaW5kZXggYW5kIHRoZSB3aG9sZSBBcnJheSBvZiB0YXJnZXRzLlxuXG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSB8fCAwKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8IGlzWW95bykpIHtcbiAgICAgICAgICAvLyBpZiBwcmV2VGltZSBhbmQgdFRpbWUgYXJlIHplcm8sIHdlIHNob3VsZG4ndCBmaXJlIHRoZSBvblJldmVyc2VDb21wbGV0ZS4gVGhpcyBjb3VsZCBoYXBwZW4gaWYgeW91IGdzYXAudG8oLi4uIHtwYXVzZWQ6dHJ1ZX0pLnBsYXkoKTtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8zLnRhcmdldHMgPSBmdW5jdGlvbiB0YXJnZXRzKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICB9O1xuXG4gIF9wcm90bzMuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIC8vIFwic29mdFwiIGdpdmVzIHVzIGEgd2F5IHRvIGNsZWFyIG91dCBldmVyeXRoaW5nIEVYQ0VQVCB0aGUgcmVjb3JkZWQgcHJlLVwiZnJvbVwiIHBvcnRpb24gb2YgZnJvbSgpIHR3ZWVucy4gT3RoZXJ3aXNlLCBmb3IgZXhhbXBsZSwgaWYgeW91IHR3ZWVuLnByb2dyZXNzKDEpLnJlbmRlcigwLCB0cnVlIHRydWUpLmludmFsaWRhdGUoKSwgdGhlIFwiZnJvbVwiIHZhbHVlcyB3b3VsZCBwZXJzaXN0IGFuZCB0aGVuIG9uIHRoZSBuZXh0IHJlbmRlciwgdGhlIGZyb20oKSB0d2VlbnMgd291bGQgaW5pdGlhbGl6ZSBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgd291bGQgbWF0Y2ggdGhlIFwiZnJvbVwiIHZhbHVlcywgdGh1cyBhbmltYXRlIGZyb20gdGhlIHNhbWUgdmFsdWUgdG8gdGhlIHNhbWUgdmFsdWUgKG5vIGFuaW1hdGlvbikuIFdlIHRhcCBpbnRvIHRoaXMgaW4gU2Nyb2xsVHJpZ2dlcidzIHJlZnJlc2goKSB3aGVyZSB3ZSBtdXN0IHB1c2ggYSB0d2VlbiB0byBjb21wbGV0aW9uIGFuZCB0aGVuIGJhY2sgYWdhaW4gYnV0IGhvbm9yIGl0cyBpbml0IHN0YXRlIGluIGNhc2UgdGhlIHR3ZWVuIGlzIGRlcGVuZGVudCBvbiBhbm90aGVyIHR3ZWVuIGZ1cnRoZXIgdXAgb24gdGhlIHBhZ2UuXG4gICAgKCFzb2Z0IHx8ICF0aGlzLnZhcnMucnVuQmFja3dhcmRzKSAmJiAodGhpcy5fc3RhcnRBdCA9IDApO1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9vblVwZGF0ZSA9IHRoaXMuX2xhenkgPSB0aGlzLnJhdGlvID0gMDtcbiAgICB0aGlzLl9wdExvb2t1cCA9IFtdO1xuICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5pbnZhbGlkYXRlKHNvZnQpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7IC8vIHdlIG11c3QgdXNlIG9uUmV2ZXJzZUNvbXBsZXRlIHRvbyBmb3IgdGhpbmdzIGxpa2UgdGltZWxpbmUuYWRkKCgpID0+IHsuLi59KSB3aGljaCBzaG91bGQgYmUgdHJpZ2dlcmVkIGluIEJPVEggZGlyZWN0aW9ucyAoZm9yd2FyZCBhbmQgcmV2ZXJzZSlcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gIH07XG5cbiAgVHdlZW4ua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICB9O1xuXG4gIHJldHVybiBUd2Vlbjtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICBfdGFyZ2V0czogW10sXG4gIF9sYXp5OiAwLFxuICBfc3RhcnRBdDogMCxcbiAgX29wOiAwLFxuICBfb25Jbml0OiAwXG59KTsgLy9hZGQgdGhlIHBlcnRpbmVudCB0aW1lbGluZSBtZXRob2RzIHRvIFR3ZWVuIGluc3RhbmNlcyBzbyB0aGF0IHVzZXJzIGNhbiBjaGFpbiBjb252ZW5pZW50bHkgYW5kIGNyZWF0ZSBhIHRpbWVsaW5lIGF1dG9tYXRpY2FsbHkuIChyZW1vdmVkIGR1ZSB0byBjb25jZXJucyB0aGF0IGl0J2QgdWx0aW1hdGVseSBhZGQgdG8gbW9yZSBjb25mdXNpb24gZXNwZWNpYWxseSBmb3IgYmVnaW5uZXJzKVxuLy8gX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sc2V0LGNhbGwsYWRkLGFkZExhYmVsLGFkZFBhdXNlXCIsIG5hbWUgPT4ge1xuLy8gXHRUd2Vlbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbi8vIFx0XHRsZXQgdGwgPSBuZXcgVGltZWxpbmUoKTtcbi8vIFx0XHRyZXR1cm4gX2FkZFRvVGltZWxpbmUodGwsIHRoaXMpW25hbWVdLmFwcGx5KHRsLCB0b0FycmF5KGFyZ3VtZW50cykpO1xuLy8gXHR9XG4vLyB9KTtcbi8vZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIExldmVyYWdlIHRoZSB0aW1lbGluZSBjYWxscy5cblxuXG5fZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICBUd2VlbltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHBhcmFtcy5zcGxpY2UobmFtZSA9PT0gXCJzdGFnZ2VyRnJvbVRvXCIgPyA1IDogNCwgMCwgMCk7XG4gICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICB9O1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBST1BUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xufSxcbiAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgIHMgPSBcIlwiO1xuXG4gIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgLy9iID0gYmVnaW5uaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmI7XG4gIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgLy9lID0gZW5kaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmU7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBzID0gcHQucCArIChwdC5tID8gcHQubShwdC5zICsgcHQuYyAqIHJhdGlvKSA6IE1hdGgucm91bmQoKHB0LnMgKyBwdC5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDApICsgczsgLy93ZSB1c2UgdGhlIFwicFwiIHByb3BlcnR5IGZvciB0aGUgdGV4dCBpbmJldHdlZW4gKGxpa2UgYSBzdWZmaXgpLiBBbmQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb21wbGV4IHN0cmluZywgdGhlIG1vZGlmaWVyIChtKSBpcyB0eXBpY2FsbHkganVzdCBNYXRoLnJvdW5kKCksIGxpa2UgZm9yIFJHQiBjb2xvcnMuXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcyArPSBkYXRhLmM7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBjaHVuayBvZiBub24tbnVtZXJpYyB0ZXh0LlxuICB9XG5cbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHMsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cbn0sXG4gICAgX2FkZFBsdWdpbk1vZGlmaWVyID0gZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICBwdCA9IG5leHQ7XG4gIH1cbn0sXG4gICAgX2tpbGxQcm9wVHdlZW5zT2YgPSBmdW5jdGlvbiBfa2lsbFByb3BUd2VlbnNPZihwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgaWYgKHB0LnAgPT09IHByb3BlcnR5ICYmICFwdC5vcCB8fCBwdC5vcCA9PT0gcHJvcGVydHkpIHtcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcgPSAxO1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xufSxcbiAgICBfc2V0dGVyV2l0aE1vZGlmaWVyID0gZnVuY3Rpb24gX3NldHRlcldpdGhNb2RpZmllcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbn0sXG4gICAgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSA9IGZ1bmN0aW9uIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkocGFyZW50KSB7XG4gIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICBuZXh0LFxuICAgICAgcHQyLFxuICAgICAgZmlyc3QsXG4gICAgICBsYXN0OyAvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byBkbyB0aGVpciB3b3JrIGFmdGVyIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyB3ZXJlIGNyZWF0ZWQgKGxpa2UgUm91bmRQcm9wc1BsdWdpbiBhbmQgTW9kaWZpZXJzUGx1Z2luKVxuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdDIgPSBmaXJzdDtcblxuICAgIHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcbiAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSB7XG4gICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IHB0O1xuICAgIH1cblxuICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgcHQyLl9wcmV2ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBwdDtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICBwYXJlbnQuX3B0ID0gZmlyc3Q7XG59OyAvL1Byb3BUd2VlbiBrZXk6IHQgPSB0YXJnZXQsIHAgPSBwcm9wLCByID0gcmVuZGVyZXIsIGQgPSBkYXRhLCBzID0gc3RhcnQsIGMgPSBjaGFuZ2UsIG9wID0gb3ZlcndyaXRlUHJvcGVydHkgKE9OTFkgcG9wdWxhdGVkIHdoZW4gaXQncyBkaWZmZXJlbnQgdGhhbiBwKSwgcHIgPSBwcmlvcml0eSwgX25leHQvX3ByZXYgZm9yIHRoZSBsaW5rZWQgbGlzdCBzaWJsaW5ncywgc2V0ID0gc2V0dGVyLCBtID0gbW9kaWZpZXIsIG1TZXQgPSBtb2RpZmllclNldHRlciAodGhlIG9yaWdpbmFsIHNldHRlciwgYmVmb3JlIGEgbW9kaWZpZXIgd2FzIGFkZGVkKVxuXG5cbmV4cG9ydCB2YXIgUHJvcFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zID0gc3RhcnQ7XG4gICAgdGhpcy5jID0gY2hhbmdlO1xuICAgIHRoaXMucCA9IHByb3A7XG4gICAgdGhpcy5yID0gcmVuZGVyZXIgfHwgX3JlbmRlclBsYWluO1xuICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgdGhpcy5wciA9IHByaW9yaXR5IHx8IDA7XG4gICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBQcm9wVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0OyAvL2luIGNhc2UgaXQgd2FzIGFscmVhZHkgc2V0IChhIFByb3BUd2VlbiBjYW4gb25seSBoYXZlIG9uZSBtb2RpZmllcilcblxuICAgIHRoaXMuc2V0ID0gX3NldHRlcldpdGhNb2RpZmllcjtcbiAgICB0aGlzLm0gPSBmdW5jO1xuICAgIHRoaXMubXQgPSB0YXJnZXQ7IC8vbW9kaWZpZXIgdGFyZ2V0XG5cbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gIH07XG5cbiAgcmV0dXJuIFByb3BUd2Vlbjtcbn0oKTsgLy9Jbml0aWFsaXphdGlvbiB0YXNrc1xuXG5fZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG59KTtcblxuX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2Vlbjtcbl9nbG9iYWxzLlRpbWVsaW5lTGl0ZSA9IF9nbG9iYWxzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG5fZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICBkZWZhdWx0czogX2RlZmF1bHRzLFxuICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gIGlkOiBcInJvb3RcIixcbiAgc21vb3RoQ2hpbGRUaW1pbmc6IHRydWVcbn0pO1xuX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbnZhciBfbWVkaWEgPSBbXSxcbiAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfbGFzdE1lZGlhVGltZSA9IDAsXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIChfbGlzdGVuZXJzW3R5cGVdIHx8IF9lbXB0eUFycmF5KS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KTtcbn0sXG4gICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgIHRvZ2dsZWQ7XG5cbiAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cblxuICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICBjb25kaXRpb25zW3BdID0gbWF0Y2g7XG4gICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgYW55TWF0Y2ggJiYgbWF0Y2hlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVJldmVydFwiKTtcblxuICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMub25NYXRjaChjKTtcbiAgICB9KTtcbiAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICB9XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuX3IgPSBbXTsgLy8gcmV0dXJuZWQvY2xlYW51cCBmdW5jdGlvbnNcblxuICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgIGZ1bmMgJiYgdGhpcy5hZGQoZnVuYyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IENvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGZ1bmMsIHNjb3BlKSB7XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICBzY29wZSA9IGZ1bmM7XG4gICAgICBmdW5jID0gbmFtZTtcbiAgICAgIG5hbWUgPSBfaXNGdW5jdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgdmFyIHByZXYgPSBfY29udGV4dCxcbiAgICAgICAgICBwcmV2U2VsZWN0b3IgPSBzZWxmLnNlbGVjdG9yLFxuICAgICAgICAgIHJlc3VsdDtcbiAgICAgIHByZXYgJiYgcHJldiAhPT0gc2VsZiAmJiBwcmV2LmRhdGEucHVzaChzZWxmKTtcbiAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICBzZWxmLnNlbGVjdG9yID0gcHJldlNlbGVjdG9yO1xuICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBzZWxmLmxhc3QgPSBmO1xuICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZikgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVucygpO1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgLy8gRmxpcCBwbHVnaW4gdHdlZW5zIGFyZSB2ZXJ5IGRpZmZlcmVudCBpbiB0aGF0IHRoZXkgc2hvdWxkIGFjdHVhbGx5IGJlIHB1c2hlZCB0byB0aGVpciBlbmQuIFRoZSBwbHVnaW4gcmVwbGFjZXMgdGhlIHRpbWVsaW5lJ3MgLnJldmVydCgpIG1ldGhvZCB0byBkbyBleGFjdGx5IHRoYXQuIEJ1dCB3ZSBhbHNvIG5lZWQgdG8gcmVtb3ZlIGFueSBvZiB0aG9zZSBuZXN0ZWQgdHdlZW5zIGluc2lkZSB0aGUgZmxpcCB0aW1lbGluZSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGluZGl2aWR1YWxseSByZXZlcnRlZC5cbiAgICAgICAgaWYgKHQuZGF0YSA9PT0gXCJpc0ZsaXBcIikge1xuICAgICAgICAgIHQucmV2ZXJ0KCk7XG4gICAgICAgICAgdC5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0d2VlbnMuc3BsaWNlKHR3ZWVucy5pbmRleE9mKHR3ZWVuKSwgMSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBzYXZlIGFzIGFuIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBjYWNoZSB0aGUgZ2xvYmFsVGltZSBmb3IgZWFjaCB0d2VlbiB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBkdXJpbmcgdGhlIHNvcnRcblxuICAgICAgdHdlZW5zLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGc6IHQuZ2xvYmFsVGltZSgwKSxcbiAgICAgICAgICB0OiB0XG4gICAgICAgIH07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLTE7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aHkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gIShlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSAmJiBlLnJldmVydCAmJiBlLnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5pbmRleE9mKHRoaXMpO1xuXG4gICAgICAhIX5pICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMS4zXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuYW1lZF9yZWZlcmVuY2VzXzEgPSByZXF1aXJlKFwiLi9uYW1lZC1yZWZlcmVuY2VzXCIpO1xudmFyIG51bWVyaWNfdW5pY29kZV9tYXBfMSA9IHJlcXVpcmUoXCIuL251bWVyaWMtdW5pY29kZS1tYXBcIik7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgYWxsTmFtZWRSZWZlcmVuY2VzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMpLCB7IGFsbDogbmFtZWRfcmVmZXJlbmNlc18xLm5hbWVkUmVmZXJlbmNlcy5odG1sNSB9KTtcbnZhciBlbmNvZGVSZWdFeHBzID0ge1xuICAgIHNwZWNpYWxDaGFyczogL1s8PidcIiZdL2csXG4gICAgbm9uQXNjaWk6IC8oPzpbPD4nXCImXFx1MDA4MC1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKS9nLFxuICAgIG5vbkFzY2lpUHJpbnRhYmxlOiAvKD86Wzw+J1wiJlxceDAxLVxceDA4XFx4MTEtXFx4MTVcXHgxNy1cXHgxRlxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2csXG4gICAgZXh0ZW5zaXZlOiAvKD86W1xceDAxLVxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHgyY1xceDJlLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdkXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkvZ1xufTtcbnZhciBkZWZhdWx0RW5jb2RlT3B0aW9ucyA9IHtcbiAgICBtb2RlOiAnc3BlY2lhbENoYXJzJyxcbiAgICBsZXZlbDogJ2FsbCcsXG4gICAgbnVtZXJpYzogJ2RlY2ltYWwnXG59O1xuLyoqIEVuY29kZXMgYWxsIHRoZSBuZWNlc3NhcnkgKHNwZWNpZmllZCBieSBgbGV2ZWxgKSBjaGFyYWN0ZXJzIGluIHRoZSB0ZXh0ICovXG5mdW5jdGlvbiBlbmNvZGUodGV4dCwgX2EpIHtcbiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdEVuY29kZU9wdGlvbnMgOiBfYSwgX2MgPSBfYi5tb2RlLCBtb2RlID0gX2MgPT09IHZvaWQgMCA/ICdzcGVjaWFsQ2hhcnMnIDogX2MsIF9kID0gX2IubnVtZXJpYywgbnVtZXJpYyA9IF9kID09PSB2b2lkIDAgPyAnZGVjaW1hbCcgOiBfZCwgX2UgPSBfYi5sZXZlbCwgbGV2ZWwgPSBfZSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBfZTtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgZW5jb2RlUmVnRXhwID0gZW5jb2RlUmVnRXhwc1ttb2RlXTtcbiAgICB2YXIgcmVmZXJlbmNlcyA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uY2hhcmFjdGVycztcbiAgICB2YXIgaXNIZXggPSBudW1lcmljID09PSAnaGV4YWRlY2ltYWwnO1xuICAgIGVuY29kZVJlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBfYiA9IGVuY29kZVJlZ0V4cC5leGVjKHRleHQpO1xuICAgIHZhciBfYztcbiAgICBpZiAoX2IpIHtcbiAgICAgICAgX2MgPSAnJztcbiAgICAgICAgdmFyIF9kID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKF9kICE9PSBfYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIF9jICs9IHRleHQuc3Vic3RyaW5nKF9kLCBfYi5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2UgPSBfYlswXTtcbiAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHJlZmVyZW5jZXNbX2VdO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRfMSkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlXzEgPSBfZS5sZW5ndGggPiAxID8gc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KF9lLCAwKSA6IF9lLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0XzEgPSAoaXNIZXggPyAnJiN4JyArIGNvZGVfMS50b1N0cmluZygxNikgOiAnJiMnICsgY29kZV8xKSArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9jICs9IHJlc3VsdF8xO1xuICAgICAgICAgICAgX2QgPSBfYi5pbmRleCArIF9lLmxlbmd0aDtcbiAgICAgICAgfSB3aGlsZSAoKF9iID0gZW5jb2RlUmVnRXhwLmV4ZWModGV4dCkpKTtcbiAgICAgICAgaWYgKF9kICE9PSB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfYyA9XG4gICAgICAgICAgICB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gX2M7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBkZWZhdWx0RGVjb2RlT3B0aW9ucyA9IHtcbiAgICBzY29wZTogJ2JvZHknLFxuICAgIGxldmVsOiAnYWxsJ1xufTtcbnZhciBzdHJpY3QgPSAvJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7L2c7XG52YXIgYXR0cmlidXRlID0gLyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspWzs9XT8vZztcbnZhciBiYXNlRGVjb2RlUmVnRXhwcyA9IHtcbiAgICB4bWw6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMueG1sXG4gICAgfSxcbiAgICBodG1sNDoge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNFxuICAgIH0sXG4gICAgaHRtbDU6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMuaHRtbDVcbiAgICB9XG59O1xudmFyIGRlY29kZVJlZ0V4cHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZURlY29kZVJlZ0V4cHMpLCB7IGFsbDogYmFzZURlY29kZVJlZ0V4cHMuaHRtbDUgfSk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBvdXRPZkJvdW5kc0NoYXIgPSBmcm9tQ2hhckNvZGUoNjU1MzMpO1xudmFyIGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zID0ge1xuICAgIGxldmVsOiAnYWxsJ1xufTtcbi8qKiBEZWNvZGVzIGEgc2luZ2xlIGVudGl0eSAqL1xuZnVuY3Rpb24gZGVjb2RlRW50aXR5KGVudGl0eSwgX2EpIHtcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIDogX2EpLmxldmVsLCBsZXZlbCA9IF9iID09PSB2b2lkIDAgPyAnYWxsJyA6IF9iO1xuICAgIGlmICghZW50aXR5KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIF9iID0gZW50aXR5O1xuICAgIHZhciBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xID0gZW50aXR5W2VudGl0eS5sZW5ndGggLSAxXTtcbiAgICBpZiAoZmFsc2VcbiAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMSA9PT0gJz0nKSB7XG4gICAgICAgIF9iID1cbiAgICAgICAgICAgIGVudGl0eTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmFsc2VcbiAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMSAhPT0gJzsnKSB7XG4gICAgICAgIF9iID1cbiAgICAgICAgICAgIGVudGl0eTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllc1tlbnRpdHldO1xuICAgICAgICBpZiAoZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSkge1xuICAgICAgICAgICAgX2IgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudGl0eVswXSA9PT0gJyYnICYmIGVudGl0eVsxXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhcl8xID0gZW50aXR5WzJdO1xuICAgICAgICAgICAgdmFyIGRlY29kZUNvZGVfMSA9IGRlY29kZVNlY29uZENoYXJfMSA9PSAneCcgfHwgZGVjb2RlU2Vjb25kQ2hhcl8xID09ICdYJ1xuICAgICAgICAgICAgICAgID8gcGFyc2VJbnQoZW50aXR5LnN1YnN0cigzKSwgMTYpXG4gICAgICAgICAgICAgICAgOiBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpKTtcbiAgICAgICAgICAgIF9iID1cbiAgICAgICAgICAgICAgICBkZWNvZGVDb2RlXzEgPj0gMHgxMGZmZmZcbiAgICAgICAgICAgICAgICAgICAgPyBvdXRPZkJvdW5kc0NoYXJcbiAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzEgPiA2NTUzNVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdXJyb2dhdGVfcGFpcnNfMS5mcm9tQ29kZVBvaW50KGRlY29kZUNvZGVfMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZnJvbUNoYXJDb2RlKG51bWVyaWNfdW5pY29kZV9tYXBfMS5udW1lcmljVW5pY29kZU1hcFtkZWNvZGVDb2RlXzFdIHx8IGRlY29kZUNvZGVfMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9iO1xufVxuZXhwb3J0cy5kZWNvZGVFbnRpdHkgPSBkZWNvZGVFbnRpdHk7XG4vKiogRGVjb2RlcyBhbGwgZW50aXRpZXMgaW4gdGhlIHRleHQgKi9cbmZ1bmN0aW9uIGRlY29kZSh0ZXh0LCBfYSkge1xuICAgIHZhciBkZWNvZGVTZWNvbmRDaGFyXzEgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdERlY29kZU9wdGlvbnMgOiBfYSwgZGVjb2RlQ29kZV8xID0gZGVjb2RlU2Vjb25kQ2hhcl8xLmxldmVsLCBsZXZlbCA9IGRlY29kZUNvZGVfMSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBkZWNvZGVDb2RlXzEsIF9iID0gZGVjb2RlU2Vjb25kQ2hhcl8xLnNjb3BlLCBzY29wZSA9IF9iID09PSB2b2lkIDAgPyBsZXZlbCA9PT0gJ3htbCcgPyAnc3RyaWN0JyA6ICdib2R5JyA6IF9iO1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBkZWNvZGVSZWdFeHAgPSBkZWNvZGVSZWdFeHBzW2xldmVsXVtzY29wZV07XG4gICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzO1xuICAgIHZhciBpc0F0dHJpYnV0ZSA9IHNjb3BlID09PSAnYXR0cmlidXRlJztcbiAgICB2YXIgaXNTdHJpY3QgPSBzY29wZSA9PT0gJ3N0cmljdCc7XG4gICAgZGVjb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHJlcGxhY2VNYXRjaF8xID0gZGVjb2RlUmVnRXhwLmV4ZWModGV4dCk7XG4gICAgdmFyIHJlcGxhY2VSZXN1bHRfMTtcbiAgICBpZiAocmVwbGFjZU1hdGNoXzEpIHtcbiAgICAgICAgcmVwbGFjZVJlc3VsdF8xID0gJyc7XG4gICAgICAgIHZhciByZXBsYWNlTGFzdEluZGV4XzEgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSByZXBsYWNlTWF0Y2hfMS5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSB0ZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4XzEsIHJlcGxhY2VNYXRjaF8xLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXBsYWNlSW5wdXRfMSA9IHJlcGxhY2VNYXRjaF8xWzBdO1xuICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdF8xID0gcmVwbGFjZUlucHV0XzE7XG4gICAgICAgICAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xW3JlcGxhY2VJbnB1dF8xLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGlzQXR0cmlidXRlXG4gICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9PT0gJz0nKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiAhPT0gJzsnKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yID0gcmVmZXJlbmNlc1tyZXBsYWNlSW5wdXRfMV07XG4gICAgICAgICAgICAgICAgaWYgKGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXBsYWNlSW5wdXRfMVswXSA9PT0gJyYnICYmIHJlcGxhY2VJbnB1dF8xWzFdID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjb2RlQ29kZV8yID0gZGVjb2RlU2Vjb25kQ2hhcl8yID09ICd4JyB8fCBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ1gnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigzKSwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlY29kZVJlc3VsdF8xID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMiA+PSAweDEwZmZmZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzIgPiA2NTUzNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8yXSB8fCBkZWNvZGVDb2RlXzIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSBkZWNvZGVSZXN1bHRfMTtcbiAgICAgICAgICAgIHJlcGxhY2VMYXN0SW5kZXhfMSA9IHJlcGxhY2VNYXRjaF8xLmluZGV4ICsgcmVwbGFjZUlucHV0XzEubGVuZ3RoO1xuICAgICAgICB9IHdoaWxlICgocmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpO1xuICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IHRleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXhfMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcGxhY2VSZXN1bHRfMSA9XG4gICAgICAgICAgICB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmVwbGFjZVJlc3VsdF8xO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuYm9keVJlZ0V4cHM9e3htbDovJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7Py9nLGh0bWw0Oi8mKD86bmJzcHxpZXhjbHxjZW50fHBvdW5kfGN1cnJlbnx5ZW58YnJ2YmFyfHNlY3R8dW1sfGNvcHl8b3JkZnxsYXF1b3xub3R8c2h5fHJlZ3xtYWNyfGRlZ3xwbHVzbW58c3VwMnxzdXAzfGFjdXRlfG1pY3JvfHBhcmF8bWlkZG90fGNlZGlsfHN1cDF8b3JkbXxyYXF1b3xmcmFjMTR8ZnJhYzEyfGZyYWMzNHxpcXVlc3R8QWdyYXZlfEFhY3V0ZXxBY2lyY3xBdGlsZGV8QXVtbHxBcmluZ3xBRWxpZ3xDY2VkaWx8RWdyYXZlfEVhY3V0ZXxFY2lyY3xFdW1sfElncmF2ZXxJYWN1dGV8SWNpcmN8SXVtbHxFVEh8TnRpbGRlfE9ncmF2ZXxPYWN1dGV8T2NpcmN8T3RpbGRlfE91bWx8dGltZXN8T3NsYXNofFVncmF2ZXxVYWN1dGV8VWNpcmN8VXVtbHxZYWN1dGV8VEhPUk58c3psaWd8YWdyYXZlfGFhY3V0ZXxhY2lyY3xhdGlsZGV8YXVtbHxhcmluZ3xhZWxpZ3xjY2VkaWx8ZWdyYXZlfGVhY3V0ZXxlY2lyY3xldW1sfGlncmF2ZXxpYWN1dGV8aWNpcmN8aXVtbHxldGh8bnRpbGRlfG9ncmF2ZXxvYWN1dGV8b2NpcmN8b3RpbGRlfG91bWx8ZGl2aWRlfG9zbGFzaHx1Z3JhdmV8dWFjdXRlfHVjaXJjfHV1bWx8eWFjdXRlfHRob3JufHl1bWx8cXVvdHxhbXB8bHR8Z3R8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDU6LyYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZ307ZXhwb3J0cy5uYW1lZFJlZmVyZW5jZXM9e3htbDp7ZW50aXRpZXM6e1wiJmx0O1wiOlwiPFwiLFwiJmd0O1wiOlwiPlwiLFwiJnF1b3Q7XCI6J1wiJyxcIiZhcG9zO1wiOlwiJ1wiLFwiJmFtcDtcIjpcIiZcIn0sY2hhcmFjdGVyczp7XCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCImXCI6XCImYW1wO1wifX0saHRtbDQ6e2VudGl0aWVzOntcIiZhcG9zO1wiOlwiJ1wiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImaWV4Y2xcIjpcIsKhXCIsXCImaWV4Y2w7XCI6XCLCoVwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJmN1cnJlblwiOlwiwqRcIixcIiZjdXJyZW47XCI6XCLCpFwiLFwiJnllblwiOlwiwqVcIixcIiZ5ZW47XCI6XCLCpVwiLFwiJmJydmJhclwiOlwiwqZcIixcIiZicnZiYXI7XCI6XCLCplwiLFwiJnNlY3RcIjpcIsKnXCIsXCImc2VjdDtcIjpcIsKnXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZub3RcIjpcIsKsXCIsXCImbm90O1wiOlwiwqxcIixcIiZzaHlcIjpcIsKtXCIsXCImc2h5O1wiOlwiwq1cIixcIiZyZWdcIjpcIsKuXCIsXCImcmVnO1wiOlwiwq5cIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJnBsdXNtblwiOlwiwrFcIixcIiZwbHVzbW47XCI6XCLCsVwiLFwiJnN1cDJcIjpcIsKyXCIsXCImc3VwMjtcIjpcIsKyXCIsXCImc3VwM1wiOlwiwrNcIixcIiZzdXAzO1wiOlwiwrNcIixcIiZhY3V0ZVwiOlwiwrRcIixcIiZhY3V0ZTtcIjpcIsK0XCIsXCImbWljcm9cIjpcIsK1XCIsXCImbWljcm87XCI6XCLCtVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImbWlkZG90XCI6XCLCt1wiLFwiJm1pZGRvdDtcIjpcIsK3XCIsXCImY2VkaWxcIjpcIsK4XCIsXCImY2VkaWw7XCI6XCLCuFwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImb3JkbVwiOlwiwrpcIixcIiZvcmRtO1wiOlwiwrpcIixcIiZyYXF1b1wiOlwiwrtcIixcIiZyYXF1bztcIjpcIsK7XCIsXCImZnJhYzE0XCI6XCLCvFwiLFwiJmZyYWMxNDtcIjpcIsK8XCIsXCImZnJhYzEyXCI6XCLCvVwiLFwiJmZyYWMxMjtcIjpcIsK9XCIsXCImZnJhYzM0XCI6XCLCvlwiLFwiJmZyYWMzNDtcIjpcIsK+XCIsXCImaXF1ZXN0XCI6XCLCv1wiLFwiJmlxdWVzdDtcIjpcIsK/XCIsXCImQWdyYXZlXCI6XCLDgFwiLFwiJkFncmF2ZTtcIjpcIsOAXCIsXCImQWFjdXRlXCI6XCLDgVwiLFwiJkFhY3V0ZTtcIjpcIsOBXCIsXCImQWNpcmNcIjpcIsOCXCIsXCImQWNpcmM7XCI6XCLDglwiLFwiJkF0aWxkZVwiOlwiw4NcIixcIiZBdGlsZGU7XCI6XCLDg1wiLFwiJkF1bWxcIjpcIsOEXCIsXCImQXVtbDtcIjpcIsOEXCIsXCImQXJpbmdcIjpcIsOFXCIsXCImQXJpbmc7XCI6XCLDhVwiLFwiJkFFbGlnXCI6XCLDhlwiLFwiJkFFbGlnO1wiOlwiw4ZcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZFZ3JhdmVcIjpcIsOIXCIsXCImRWdyYXZlO1wiOlwiw4hcIixcIiZFYWN1dGVcIjpcIsOJXCIsXCImRWFjdXRlO1wiOlwiw4lcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRXVtbFwiOlwiw4tcIixcIiZFdW1sO1wiOlwiw4tcIixcIiZJZ3JhdmVcIjpcIsOMXCIsXCImSWdyYXZlO1wiOlwiw4xcIixcIiZJYWN1dGVcIjpcIsONXCIsXCImSWFjdXRlO1wiOlwiw41cIixcIiZJY2lyY1wiOlwiw45cIixcIiZJY2lyYztcIjpcIsOOXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZFVEhcIjpcIsOQXCIsXCImRVRIO1wiOlwiw5BcIixcIiZOdGlsZGVcIjpcIsORXCIsXCImTnRpbGRlO1wiOlwiw5FcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT3RpbGRlXCI6XCLDlVwiLFwiJk90aWxkZTtcIjpcIsOVXCIsXCImT3VtbFwiOlwiw5ZcIixcIiZPdW1sO1wiOlwiw5ZcIixcIiZ0aW1lc1wiOlwiw5dcIixcIiZ0aW1lcztcIjpcIsOXXCIsXCImT3NsYXNoXCI6XCLDmFwiLFwiJk9zbGFzaDtcIjpcIsOYXCIsXCImVWdyYXZlXCI6XCLDmVwiLFwiJlVncmF2ZTtcIjpcIsOZXCIsXCImVWFjdXRlXCI6XCLDmlwiLFwiJlVhY3V0ZTtcIjpcIsOaXCIsXCImVWNpcmNcIjpcIsObXCIsXCImVWNpcmM7XCI6XCLDm1wiLFwiJlV1bWxcIjpcIsOcXCIsXCImVXVtbDtcIjpcIsOcXCIsXCImWWFjdXRlXCI6XCLDnVwiLFwiJllhY3V0ZTtcIjpcIsOdXCIsXCImVEhPUk5cIjpcIsOeXCIsXCImVEhPUk47XCI6XCLDnlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhYWN1dGVcIjpcIsOhXCIsXCImYWFjdXRlO1wiOlwiw6FcIixcIiZhY2lyY1wiOlwiw6JcIixcIiZhY2lyYztcIjpcIsOiXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYWVsaWdcIjpcIsOmXCIsXCImYWVsaWc7XCI6XCLDplwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVhY3V0ZVwiOlwiw6lcIixcIiZlYWN1dGU7XCI6XCLDqVwiLFwiJmVjaXJjXCI6XCLDqlwiLFwiJmVjaXJjO1wiOlwiw6pcIixcIiZldW1sXCI6XCLDq1wiLFwiJmV1bWw7XCI6XCLDq1wiLFwiJmlncmF2ZVwiOlwiw6xcIixcIiZpZ3JhdmU7XCI6XCLDrFwiLFwiJmlhY3V0ZVwiOlwiw61cIixcIiZpYWN1dGU7XCI6XCLDrVwiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpdW1sXCI6XCLDr1wiLFwiJml1bWw7XCI6XCLDr1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJm50aWxkZVwiOlwiw7FcIixcIiZudGlsZGU7XCI6XCLDsVwiLFwiJm9ncmF2ZVwiOlwiw7JcIixcIiZvZ3JhdmU7XCI6XCLDslwiLFwiJm9hY3V0ZVwiOlwiw7NcIixcIiZvYWN1dGU7XCI6XCLDs1wiLFwiJm9jaXJjXCI6XCLDtFwiLFwiJm9jaXJjO1wiOlwiw7RcIixcIiZvdGlsZGVcIjpcIsO1XCIsXCImb3RpbGRlO1wiOlwiw7VcIixcIiZvdW1sXCI6XCLDtlwiLFwiJm91bWw7XCI6XCLDtlwiLFwiJmRpdmlkZVwiOlwiw7dcIixcIiZkaXZpZGU7XCI6XCLDt1wiLFwiJm9zbGFzaFwiOlwiw7hcIixcIiZvc2xhc2g7XCI6XCLDuFwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVhY3V0ZVwiOlwiw7pcIixcIiZ1YWN1dGU7XCI6XCLDulwiLFwiJnVjaXJjXCI6XCLDu1wiLFwiJnVjaXJjO1wiOlwiw7tcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnlhY3V0ZVwiOlwiw71cIixcIiZ5YWN1dGU7XCI6XCLDvVwiLFwiJnRob3JuXCI6XCLDvlwiLFwiJnRob3JuO1wiOlwiw75cIixcIiZ5dW1sXCI6XCLDv1wiLFwiJnl1bWw7XCI6XCLDv1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZhbXBcIjpcIiZcIixcIiZhbXA7XCI6XCImXCIsXCImbHRcIjpcIjxcIixcIiZsdDtcIjpcIjxcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImU2Nhcm9uO1wiOlwixaBcIixcIiZzY2Fyb247XCI6XCLFoVwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJmNpcmM7XCI6XCLLhlwiLFwiJnRpbGRlO1wiOlwiy5xcIixcIiZlbnNwO1wiOlwi4oCCXCIsXCImZW1zcDtcIjpcIuKAg1wiLFwiJnRoaW5zcDtcIjpcIuKAiVwiLFwiJnp3bmo7XCI6XCLigIxcIixcIiZ6d2o7XCI6XCLigI1cIixcIiZscm07XCI6XCLigI5cIixcIiZybG07XCI6XCLigI9cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImbGRxdW87XCI6XCLigJxcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJmJkcXVvO1wiOlwi4oCeXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImRGFnZ2VyO1wiOlwi4oChXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImcnNhcXVvO1wiOlwi4oC6XCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmZub2Y7XCI6XCLGklwiLFwiJkFscGhhO1wiOlwizpFcIixcIiZCZXRhO1wiOlwizpJcIixcIiZHYW1tYTtcIjpcIs6TXCIsXCImRGVsdGE7XCI6XCLOlFwiLFwiJkVwc2lsb247XCI6XCLOlVwiLFwiJlpldGE7XCI6XCLOllwiLFwiJkV0YTtcIjpcIs6XXCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJklvdGE7XCI6XCLOmVwiLFwiJkthcHBhO1wiOlwizppcIixcIiZMYW1iZGE7XCI6XCLOm1wiLFwiJk11O1wiOlwizpxcIixcIiZOdTtcIjpcIs6dXCIsXCImWGk7XCI6XCLOnlwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJlBpO1wiOlwizqBcIixcIiZSaG87XCI6XCLOoVwiLFwiJlNpZ21hO1wiOlwizqNcIixcIiZUYXU7XCI6XCLOpFwiLFwiJlVwc2lsb247XCI6XCLOpVwiLFwiJlBoaTtcIjpcIs6mXCIsXCImQ2hpO1wiOlwizqdcIixcIiZQc2k7XCI6XCLOqFwiLFwiJk9tZWdhO1wiOlwizqlcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYmV0YTtcIjpcIs6yXCIsXCImZ2FtbWE7XCI6XCLOs1wiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZ6ZXRhO1wiOlwizrZcIixcIiZldGE7XCI6XCLOt1wiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZpb3RhO1wiOlwizrlcIixcIiZrYXBwYTtcIjpcIs66XCIsXCImbGFtYmRhO1wiOlwizrtcIixcIiZtdTtcIjpcIs68XCIsXCImbnU7XCI6XCLOvVwiLFwiJnhpO1wiOlwizr5cIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZwaTtcIjpcIs+AXCIsXCImcmhvO1wiOlwiz4FcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnVwc2lsb247XCI6XCLPhVwiLFwiJnBoaTtcIjpcIs+GXCIsXCImY2hpO1wiOlwiz4dcIixcIiZwc2k7XCI6XCLPiFwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdXBzaWg7XCI6XCLPklwiLFwiJnBpdjtcIjpcIs+WXCIsXCImYnVsbDtcIjpcIuKAolwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJnByaW1lO1wiOlwi4oCyXCIsXCImUHJpbWU7XCI6XCLigLNcIixcIiZvbGluZTtcIjpcIuKAvlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImd2VpZXJwO1wiOlwi4oSYXCIsXCImaW1hZ2U7XCI6XCLihJFcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImdHJhZGU7XCI6XCLihKJcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImbGFycjtcIjpcIuKGkFwiLFwiJnVhcnI7XCI6XCLihpFcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZ1QXJyO1wiOlwi4oeRXCIsXCImckFycjtcIjpcIuKHklwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZoQXJyO1wiOlwi4oeUXCIsXCImZm9yYWxsO1wiOlwi4oiAXCIsXCImcGFydDtcIjpcIuKIglwiLFwiJmV4aXN0O1wiOlwi4oiDXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZuYWJsYTtcIjpcIuKIh1wiLFwiJmlzaW47XCI6XCLiiIhcIixcIiZub3RpbjtcIjpcIuKIiVwiLFwiJm5pO1wiOlwi4oiLXCIsXCImcHJvZDtcIjpcIuKIj1wiLFwiJnN1bTtcIjpcIuKIkVwiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbG93YXN0O1wiOlwi4oiXXCIsXCImcmFkaWM7XCI6XCLiiJpcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImaW5maW47XCI6XCLiiJ5cIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmQ7XCI6XCLiiKdcIixcIiZvcjtcIjpcIuKIqFwiLFwiJmNhcDtcIjpcIuKIqVwiLFwiJmN1cDtcIjpcIuKIqlwiLFwiJmludDtcIjpcIuKIq1wiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnNpbTtcIjpcIuKIvFwiLFwiJmNvbmc7XCI6XCLiiYVcIixcIiZhc3ltcDtcIjpcIuKJiFwiLFwiJm5lO1wiOlwi4omgXCIsXCImZXF1aXY7XCI6XCLiiaFcIixcIiZsZTtcIjpcIuKJpFwiLFwiJmdlO1wiOlwi4omlXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3VwO1wiOlwi4oqDXCIsXCImbnN1YjtcIjpcIuKKhFwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdXBlO1wiOlwi4oqHXCIsXCImb3BsdXM7XCI6XCLiipVcIixcIiZvdGltZXM7XCI6XCLiipdcIixcIiZwZXJwO1wiOlwi4oqlXCIsXCImc2RvdDtcIjpcIuKLhVwiLFwiJmxjZWlsO1wiOlwi4oyIXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZsZmxvb3I7XCI6XCLijIpcIixcIiZyZmxvb3I7XCI6XCLijItcIixcIiZsYW5nO1wiOlwi4oypXCIsXCImcmFuZztcIjpcIuKMqlwiLFwiJmxvejtcIjpcIuKXilwiLFwiJnNwYWRlcztcIjpcIuKZoFwiLFwiJmNsdWJzO1wiOlwi4pmjXCIsXCImaGVhcnRzO1wiOlwi4pmlXCIsXCImZGlhbXM7XCI6XCLimaZcIn0sY2hhcmFjdGVyczp7XCInXCI6XCImYXBvcztcIixcIsKgXCI6XCImbmJzcDtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLCo1wiOlwiJnBvdW5kO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLCpVwiOlwiJnllbjtcIixcIsKmXCI6XCImYnJ2YmFyO1wiLFwiwqdcIjpcIiZzZWN0O1wiLFwiwqhcIjpcIiZ1bWw7XCIsXCLCqVwiOlwiJmNvcHk7XCIsXCLCqlwiOlwiJm9yZGY7XCIsXCLCq1wiOlwiJmxhcXVvO1wiLFwiwqxcIjpcIiZub3Q7XCIsXCLCrVwiOlwiJnNoeTtcIixcIsKuXCI6XCImcmVnO1wiLFwiwq9cIjpcIiZtYWNyO1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLCsVwiOlwiJnBsdXNtbjtcIixcIsKyXCI6XCImc3VwMjtcIixcIsKzXCI6XCImc3VwMztcIixcIsK0XCI6XCImYWN1dGU7XCIsXCLCtVwiOlwiJm1pY3JvO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrlcIjpcIiZzdXAxO1wiLFwiwrpcIjpcIiZvcmRtO1wiLFwiwrtcIjpcIiZyYXF1bztcIixcIsK8XCI6XCImZnJhYzE0O1wiLFwiwr1cIjpcIiZmcmFjMTI7XCIsXCLCvlwiOlwiJmZyYWMzNDtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwiw4BcIjpcIiZBZ3JhdmU7XCIsXCLDgVwiOlwiJkFhY3V0ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLDg1wiOlwiJkF0aWxkZTtcIixcIsOEXCI6XCImQXVtbDtcIixcIsOFXCI6XCImQXJpbmc7XCIsXCLDhlwiOlwiJkFFbGlnO1wiLFwiw4dcIjpcIiZDY2VkaWw7XCIsXCLDiFwiOlwiJkVncmF2ZTtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwiw4pcIjpcIiZFY2lyYztcIixcIsOLXCI6XCImRXVtbDtcIixcIsOMXCI6XCImSWdyYXZlO1wiLFwiw41cIjpcIiZJYWN1dGU7XCIsXCLDjlwiOlwiJkljaXJjO1wiLFwiw49cIjpcIiZJdW1sO1wiLFwiw5BcIjpcIiZFVEg7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIsOSXCI6XCImT2dyYXZlO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwiw5VcIjpcIiZPdGlsZGU7XCIsXCLDllwiOlwiJk91bWw7XCIsXCLDl1wiOlwiJnRpbWVzO1wiLFwiw5hcIjpcIiZPc2xhc2g7XCIsXCLDmVwiOlwiJlVncmF2ZTtcIixcIsOaXCI6XCImVWFjdXRlO1wiLFwiw5tcIjpcIiZVY2lyYztcIixcIsOcXCI6XCImVXVtbDtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwiw55cIjpcIiZUSE9STjtcIixcIsOfXCI6XCImc3psaWc7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIsOhXCI6XCImYWFjdXRlO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcIsOjXCI6XCImYXRpbGRlO1wiLFwiw6RcIjpcIiZhdW1sO1wiLFwiw6VcIjpcIiZhcmluZztcIixcIsOmXCI6XCImYWVsaWc7XCIsXCLDp1wiOlwiJmNjZWRpbDtcIixcIsOoXCI6XCImZWdyYXZlO1wiLFwiw6lcIjpcIiZlYWN1dGU7XCIsXCLDqlwiOlwiJmVjaXJjO1wiLFwiw6tcIjpcIiZldW1sO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLDr1wiOlwiJml1bWw7XCIsXCLDsFwiOlwiJmV0aDtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLDs1wiOlwiJm9hY3V0ZTtcIixcIsO0XCI6XCImb2NpcmM7XCIsXCLDtVwiOlwiJm90aWxkZTtcIixcIsO2XCI6XCImb3VtbDtcIixcIsO3XCI6XCImZGl2aWRlO1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLDuVwiOlwiJnVncmF2ZTtcIixcIsO6XCI6XCImdWFjdXRlO1wiLFwiw7tcIjpcIiZ1Y2lyYztcIixcIsO8XCI6XCImdXVtbDtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsO/XCI6XCImeXVtbDtcIiwnXCInOlwiJnF1b3Q7XCIsXCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLFwixZJcIjpcIiZPRWxpZztcIixcIsWTXCI6XCImb2VsaWc7XCIsXCLFoFwiOlwiJlNjYXJvbjtcIixcIsWhXCI6XCImc2Nhcm9uO1wiLFwixbhcIjpcIiZZdW1sO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwiy5xcIjpcIiZ0aWxkZTtcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLigINcIjpcIiZlbXNwO1wiLFwi4oCJXCI6XCImdGhpbnNwO1wiLFwi4oCMXCI6XCImenduajtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjlwiOlwiJmxybTtcIixcIuKAj1wiOlwiJnJsbTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKAmVwiOlwiJnJzcXVvO1wiLFwi4oCaXCI6XCImc2JxdW87XCIsXCLigJxcIjpcIiZsZHF1bztcIixcIuKAnVwiOlwiJnJkcXVvO1wiLFwi4oCeXCI6XCImYmRxdW87XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLigKFcIjpcIiZEYWdnZXI7XCIsXCLigLBcIjpcIiZwZXJtaWw7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLigLpcIjpcIiZyc2FxdW87XCIsXCLigqxcIjpcIiZldXJvO1wiLFwixpJcIjpcIiZmbm9mO1wiLFwizpFcIjpcIiZBbHBoYTtcIixcIs6SXCI6XCImQmV0YTtcIixcIs6TXCI6XCImR2FtbWE7XCIsXCLOlFwiOlwiJkRlbHRhO1wiLFwizpVcIjpcIiZFcHNpbG9uO1wiLFwizpZcIjpcIiZaZXRhO1wiLFwizpdcIjpcIiZFdGE7XCIsXCLOmFwiOlwiJlRoZXRhO1wiLFwizplcIjpcIiZJb3RhO1wiLFwizppcIjpcIiZLYXBwYTtcIixcIs6bXCI6XCImTGFtYmRhO1wiLFwizpxcIjpcIiZNdTtcIixcIs6dXCI6XCImTnU7XCIsXCLOnlwiOlwiJlhpO1wiLFwizp9cIjpcIiZPbWljcm9uO1wiLFwizqBcIjpcIiZQaTtcIixcIs6hXCI6XCImUmhvO1wiLFwizqNcIjpcIiZTaWdtYTtcIixcIs6kXCI6XCImVGF1O1wiLFwizqVcIjpcIiZVcHNpbG9uO1wiLFwizqZcIjpcIiZQaGk7XCIsXCLOp1wiOlwiJkNoaTtcIixcIs6oXCI6XCImUHNpO1wiLFwizqlcIjpcIiZPbWVnYTtcIixcIs6xXCI6XCImYWxwaGE7XCIsXCLOslwiOlwiJmJldGE7XCIsXCLOs1wiOlwiJmdhbW1hO1wiLFwizrRcIjpcIiZkZWx0YTtcIixcIs61XCI6XCImZXBzaWxvbjtcIixcIs62XCI6XCImemV0YTtcIixcIs63XCI6XCImZXRhO1wiLFwizrhcIjpcIiZ0aGV0YTtcIixcIs65XCI6XCImaW90YTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLOu1wiOlwiJmxhbWJkYTtcIixcIs68XCI6XCImbXU7XCIsXCLOvVwiOlwiJm51O1wiLFwizr5cIjpcIiZ4aTtcIixcIs6/XCI6XCImb21pY3JvbjtcIixcIs+AXCI6XCImcGk7XCIsXCLPgVwiOlwiJnJobztcIixcIs+CXCI6XCImc2lnbWFmO1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+EXCI6XCImdGF1O1wiLFwiz4VcIjpcIiZ1cHNpbG9uO1wiLFwiz4ZcIjpcIiZwaGk7XCIsXCLPh1wiOlwiJmNoaTtcIixcIs+IXCI6XCImcHNpO1wiLFwiz4lcIjpcIiZvbWVnYTtcIixcIs+RXCI6XCImdGhldGFzeW07XCIsXCLPklwiOlwiJnVwc2loO1wiLFwiz5ZcIjpcIiZwaXY7XCIsXCLigKJcIjpcIiZidWxsO1wiLFwi4oCmXCI6XCImaGVsbGlwO1wiLFwi4oCyXCI6XCImcHJpbWU7XCIsXCLigLNcIjpcIiZQcmltZTtcIixcIuKAvlwiOlwiJm9saW5lO1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLihJhcIjpcIiZ3ZWllcnA7XCIsXCLihJFcIjpcIiZpbWFnZTtcIixcIuKEnFwiOlwiJnJlYWw7XCIsXCLihKJcIjpcIiZ0cmFkZTtcIixcIuKEtVwiOlwiJmFsZWZzeW07XCIsXCLihpBcIjpcIiZsYXJyO1wiLFwi4oaRXCI6XCImdWFycjtcIixcIuKGklwiOlwiJnJhcnI7XCIsXCLihpNcIjpcIiZkYXJyO1wiLFwi4oaUXCI6XCImaGFycjtcIixcIuKGtVwiOlwiJmNyYXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5JcIjpcIiZyQXJyO1wiLFwi4oeTXCI6XCImZEFycjtcIixcIuKHlFwiOlwiJmhBcnI7XCIsXCLiiIBcIjpcIiZmb3JhbGw7XCIsXCLiiIJcIjpcIiZwYXJ0O1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLiiIVcIjpcIiZlbXB0eTtcIixcIuKIh1wiOlwiJm5hYmxhO1wiLFwi4oiIXCI6XCImaXNpbjtcIixcIuKIiVwiOlwiJm5vdGluO1wiLFwi4oiLXCI6XCImbmk7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4oiSXCI6XCImbWludXM7XCIsXCLiiJdcIjpcIiZsb3dhc3Q7XCIsXCLiiJpcIjpcIiZyYWRpYztcIixcIuKInVwiOlwiJnByb3A7XCIsXCLiiJ5cIjpcIiZpbmZpbjtcIixcIuKIoFwiOlwiJmFuZztcIixcIuKIp1wiOlwiJmFuZDtcIixcIuKIqFwiOlwiJm9yO1wiLFwi4oipXCI6XCImY2FwO1wiLFwi4oiqXCI6XCImY3VwO1wiLFwi4oirXCI6XCImaW50O1wiLFwi4oi0XCI6XCImdGhlcmU0O1wiLFwi4oi8XCI6XCImc2ltO1wiLFwi4omFXCI6XCImY29uZztcIixcIuKJiFwiOlwiJmFzeW1wO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiaFcIjpcIiZlcXVpdjtcIixcIuKJpFwiOlwiJmxlO1wiLFwi4omlXCI6XCImZ2U7XCIsXCLiioJcIjpcIiZzdWI7XCIsXCLiioNcIjpcIiZzdXA7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4oqGXCI6XCImc3ViZTtcIixcIuKKh1wiOlwiJnN1cGU7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLijIlcIjpcIiZyY2VpbDtcIixcIuKMilwiOlwiJmxmbG9vcjtcIixcIuKMi1wiOlwiJnJmbG9vcjtcIixcIuKMqVwiOlwiJmxhbmc7XCIsXCLijKpcIjpcIiZyYW5nO1wiLFwi4peKXCI6XCImbG96O1wiLFwi4pmgXCI6XCImc3BhZGVzO1wiLFwi4pmjXCI6XCImY2x1YnM7XCIsXCLimaVcIjpcIiZoZWFydHM7XCIsXCLimaZcIjpcIiZkaWFtcztcIn19LGh0bWw1OntlbnRpdGllczp7XCImQUVsaWdcIjpcIsOGXCIsXCImQUVsaWc7XCI6XCLDhlwiLFwiJkFNUFwiOlwiJlwiLFwiJkFNUDtcIjpcIiZcIixcIiZBYWN1dGVcIjpcIsOBXCIsXCImQWFjdXRlO1wiOlwiw4FcIixcIiZBYnJldmU7XCI6XCLEglwiLFwiJkFjaXJjXCI6XCLDglwiLFwiJkFjaXJjO1wiOlwiw4JcIixcIiZBY3k7XCI6XCLQkFwiLFwiJkFmcjtcIjpcIvCdlIRcIixcIiZBZ3JhdmVcIjpcIsOAXCIsXCImQWdyYXZlO1wiOlwiw4BcIixcIiZBbHBoYTtcIjpcIs6RXCIsXCImQW1hY3I7XCI6XCLEgFwiLFwiJkFuZDtcIjpcIuKpk1wiLFwiJkFvZ29uO1wiOlwixIRcIixcIiZBb3BmO1wiOlwi8J2UuFwiLFwiJkFwcGx5RnVuY3Rpb247XCI6XCLigaFcIixcIiZBcmluZ1wiOlwiw4VcIixcIiZBcmluZztcIjpcIsOFXCIsXCImQXNjcjtcIjpcIvCdkpxcIixcIiZBc3NpZ247XCI6XCLiiZRcIixcIiZBdGlsZGVcIjpcIsODXCIsXCImQXRpbGRlO1wiOlwiw4NcIixcIiZBdW1sXCI6XCLDhFwiLFwiJkF1bWw7XCI6XCLDhFwiLFwiJkJhY2tzbGFzaDtcIjpcIuKIllwiLFwiJkJhcnY7XCI6XCLiq6dcIixcIiZCYXJ3ZWQ7XCI6XCLijIZcIixcIiZCY3k7XCI6XCLQkVwiLFwiJkJlY2F1c2U7XCI6XCLiiLVcIixcIiZCZXJub3VsbGlzO1wiOlwi4oSsXCIsXCImQmV0YTtcIjpcIs6SXCIsXCImQmZyO1wiOlwi8J2UhVwiLFwiJkJvcGY7XCI6XCLwnZS5XCIsXCImQnJldmU7XCI6XCLLmFwiLFwiJkJzY3I7XCI6XCLihKxcIixcIiZCdW1wZXE7XCI6XCLiiY5cIixcIiZDSGN5O1wiOlwi0KdcIixcIiZDT1BZXCI6XCLCqVwiLFwiJkNPUFk7XCI6XCLCqVwiLFwiJkNhY3V0ZTtcIjpcIsSGXCIsXCImQ2FwO1wiOlwi4ouSXCIsXCImQ2FwaXRhbERpZmZlcmVudGlhbEQ7XCI6XCLihYVcIixcIiZDYXlsZXlzO1wiOlwi4oStXCIsXCImQ2Nhcm9uO1wiOlwixIxcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZDY2lyYztcIjpcIsSIXCIsXCImQ2NvbmludDtcIjpcIuKIsFwiLFwiJkNkb3Q7XCI6XCLEilwiLFwiJkNlZGlsbGE7XCI6XCLCuFwiLFwiJkNlbnRlckRvdDtcIjpcIsK3XCIsXCImQ2ZyO1wiOlwi4oStXCIsXCImQ2hpO1wiOlwizqdcIixcIiZDaXJjbGVEb3Q7XCI6XCLiiplcIixcIiZDaXJjbGVNaW51cztcIjpcIuKKllwiLFwiJkNpcmNsZVBsdXM7XCI6XCLiipVcIixcIiZDaXJjbGVUaW1lcztcIjpcIuKKl1wiLFwiJkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIslwiLFwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTtcIjpcIuKAnVwiLFwiJkNsb3NlQ3VybHlRdW90ZTtcIjpcIuKAmVwiLFwiJkNvbG9uO1wiOlwi4oi3XCIsXCImQ29sb25lO1wiOlwi4qm0XCIsXCImQ29uZ3J1ZW50O1wiOlwi4omhXCIsXCImQ29uaW50O1wiOlwi4oivXCIsXCImQ29udG91ckludGVncmFsO1wiOlwi4oiuXCIsXCImQ29wZjtcIjpcIuKEglwiLFwiJkNvcHJvZHVjdDtcIjpcIuKIkFwiLFwiJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6XCLiiLNcIixcIiZDcm9zcztcIjpcIuKor1wiLFwiJkNzY3I7XCI6XCLwnZKeXCIsXCImQ3VwO1wiOlwi4ouTXCIsXCImQ3VwQ2FwO1wiOlwi4omNXCIsXCImREQ7XCI6XCLihYVcIixcIiZERG90cmFoZDtcIjpcIuKkkVwiLFwiJkRKY3k7XCI6XCLQglwiLFwiJkRTY3k7XCI6XCLQhVwiLFwiJkRaY3k7XCI6XCLQj1wiLFwiJkRhZ2dlcjtcIjpcIuKAoVwiLFwiJkRhcnI7XCI6XCLihqFcIixcIiZEYXNodjtcIjpcIuKrpFwiLFwiJkRjYXJvbjtcIjpcIsSOXCIsXCImRGN5O1wiOlwi0JRcIixcIiZEZWw7XCI6XCLiiIdcIixcIiZEZWx0YTtcIjpcIs6UXCIsXCImRGZyO1wiOlwi8J2Uh1wiLFwiJkRpYWNyaXRpY2FsQWN1dGU7XCI6XCLCtFwiLFwiJkRpYWNyaXRpY2FsRG90O1wiOlwiy5lcIixcIiZEaWFjcml0aWNhbERvdWJsZUFjdXRlO1wiOlwiy51cIixcIiZEaWFjcml0aWNhbEdyYXZlO1wiOlwiYFwiLFwiJkRpYWNyaXRpY2FsVGlsZGU7XCI6XCLLnFwiLFwiJkRpYW1vbmQ7XCI6XCLii4RcIixcIiZEaWZmZXJlbnRpYWxEO1wiOlwi4oWGXCIsXCImRG9wZjtcIjpcIvCdlLtcIixcIiZEb3Q7XCI6XCLCqFwiLFwiJkRvdERvdDtcIjpcIuKDnFwiLFwiJkRvdEVxdWFsO1wiOlwi4omQXCIsXCImRG91YmxlQ29udG91ckludGVncmFsO1wiOlwi4oivXCIsXCImRG91YmxlRG90O1wiOlwiwqhcIixcIiZEb3VibGVEb3duQXJyb3c7XCI6XCLih5NcIixcIiZEb3VibGVMZWZ0QXJyb3c7XCI6XCLih5BcIixcIiZEb3VibGVMZWZ0UmlnaHRBcnJvdztcIjpcIuKHlFwiLFwiJkRvdWJsZUxlZnRUZWU7XCI6XCLiq6RcIixcIiZEb3VibGVMb25nTGVmdEFycm93O1wiOlwi4p+4XCIsXCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiOlwi4p+6XCIsXCImRG91YmxlTG9uZ1JpZ2h0QXJyb3c7XCI6XCLin7lcIixcIiZEb3VibGVSaWdodEFycm93O1wiOlwi4oeSXCIsXCImRG91YmxlUmlnaHRUZWU7XCI6XCLiiqhcIixcIiZEb3VibGVVcEFycm93O1wiOlwi4oeRXCIsXCImRG91YmxlVXBEb3duQXJyb3c7XCI6XCLih5VcIixcIiZEb3VibGVWZXJ0aWNhbEJhcjtcIjpcIuKIpVwiLFwiJkRvd25BcnJvdztcIjpcIuKGk1wiLFwiJkRvd25BcnJvd0JhcjtcIjpcIuKkk1wiLFwiJkRvd25BcnJvd1VwQXJyb3c7XCI6XCLih7VcIixcIiZEb3duQnJldmU7XCI6XCLMkVwiLFwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCI6XCLipZBcIixcIiZEb3duTGVmdFRlZVZlY3RvcjtcIjpcIuKlnlwiLFwiJkRvd25MZWZ0VmVjdG9yO1wiOlwi4oa9XCIsXCImRG93bkxlZnRWZWN0b3JCYXI7XCI6XCLipZZcIixcIiZEb3duUmlnaHRUZWVWZWN0b3I7XCI6XCLipZ9cIixcIiZEb3duUmlnaHRWZWN0b3I7XCI6XCLih4FcIixcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCI6XCLipZdcIixcIiZEb3duVGVlO1wiOlwi4oqkXCIsXCImRG93blRlZUFycm93O1wiOlwi4oanXCIsXCImRG93bmFycm93O1wiOlwi4oeTXCIsXCImRHNjcjtcIjpcIvCdkp9cIixcIiZEc3Ryb2s7XCI6XCLEkFwiLFwiJkVORztcIjpcIsWKXCIsXCImRVRIXCI6XCLDkFwiLFwiJkVUSDtcIjpcIsOQXCIsXCImRWFjdXRlXCI6XCLDiVwiLFwiJkVhY3V0ZTtcIjpcIsOJXCIsXCImRWNhcm9uO1wiOlwixJpcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRWN5O1wiOlwi0K1cIixcIiZFZG90O1wiOlwixJZcIixcIiZFZnI7XCI6XCLwnZSIXCIsXCImRWdyYXZlXCI6XCLDiFwiLFwiJkVncmF2ZTtcIjpcIsOIXCIsXCImRWxlbWVudDtcIjpcIuKIiFwiLFwiJkVtYWNyO1wiOlwixJJcIixcIiZFbXB0eVNtYWxsU3F1YXJlO1wiOlwi4pe7XCIsXCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCI6XCLilqtcIixcIiZFb2dvbjtcIjpcIsSYXCIsXCImRW9wZjtcIjpcIvCdlLxcIixcIiZFcHNpbG9uO1wiOlwizpVcIixcIiZFcXVhbDtcIjpcIuKptVwiLFwiJkVxdWFsVGlsZGU7XCI6XCLiiYJcIixcIiZFcXVpbGlicml1bTtcIjpcIuKHjFwiLFwiJkVzY3I7XCI6XCLihLBcIixcIiZFc2ltO1wiOlwi4qmzXCIsXCImRXRhO1wiOlwizpdcIixcIiZFdW1sXCI6XCLDi1wiLFwiJkV1bWw7XCI6XCLDi1wiLFwiJkV4aXN0cztcIjpcIuKIg1wiLFwiJkV4cG9uZW50aWFsRTtcIjpcIuKFh1wiLFwiJkZjeTtcIjpcItCkXCIsXCImRmZyO1wiOlwi8J2UiVwiLFwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiOlwi4pe8XCIsXCImRmlsbGVkVmVyeVNtYWxsU3F1YXJlO1wiOlwi4paqXCIsXCImRm9wZjtcIjpcIvCdlL1cIixcIiZGb3JBbGw7XCI6XCLiiIBcIixcIiZGb3VyaWVydHJmO1wiOlwi4oSxXCIsXCImRnNjcjtcIjpcIuKEsVwiLFwiJkdKY3k7XCI6XCLQg1wiLFwiJkdUXCI6XCI+XCIsXCImR1Q7XCI6XCI+XCIsXCImR2FtbWE7XCI6XCLOk1wiLFwiJkdhbW1hZDtcIjpcIs+cXCIsXCImR2JyZXZlO1wiOlwixJ5cIixcIiZHY2VkaWw7XCI6XCLEolwiLFwiJkdjaXJjO1wiOlwixJxcIixcIiZHY3k7XCI6XCLQk1wiLFwiJkdkb3Q7XCI6XCLEoFwiLFwiJkdmcjtcIjpcIvCdlIpcIixcIiZHZztcIjpcIuKLmVwiLFwiJkdvcGY7XCI6XCLwnZS+XCIsXCImR3JlYXRlckVxdWFsO1wiOlwi4omlXCIsXCImR3JlYXRlckVxdWFsTGVzcztcIjpcIuKLm1wiLFwiJkdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiadcIixcIiZHcmVhdGVyR3JlYXRlcjtcIjpcIuKqolwiLFwiJkdyZWF0ZXJMZXNzO1wiOlwi4om3XCIsXCImR3JlYXRlclNsYW50RXF1YWw7XCI6XCLiqb5cIixcIiZHcmVhdGVyVGlsZGU7XCI6XCLiibNcIixcIiZHc2NyO1wiOlwi8J2SolwiLFwiJkd0O1wiOlwi4omrXCIsXCImSEFSRGN5O1wiOlwi0KpcIixcIiZIYWNlaztcIjpcIsuHXCIsXCImSGF0O1wiOlwiXlwiLFwiJkhjaXJjO1wiOlwixKRcIixcIiZIZnI7XCI6XCLihIxcIixcIiZIaWxiZXJ0U3BhY2U7XCI6XCLihItcIixcIiZIb3BmO1wiOlwi4oSNXCIsXCImSG9yaXpvbnRhbExpbmU7XCI6XCLilIBcIixcIiZIc2NyO1wiOlwi4oSLXCIsXCImSHN0cm9rO1wiOlwixKZcIixcIiZIdW1wRG93bkh1bXA7XCI6XCLiiY5cIixcIiZIdW1wRXF1YWw7XCI6XCLiiY9cIixcIiZJRWN5O1wiOlwi0JVcIixcIiZJSmxpZztcIjpcIsSyXCIsXCImSU9jeTtcIjpcItCBXCIsXCImSWFjdXRlXCI6XCLDjVwiLFwiJklhY3V0ZTtcIjpcIsONXCIsXCImSWNpcmNcIjpcIsOOXCIsXCImSWNpcmM7XCI6XCLDjlwiLFwiJkljeTtcIjpcItCYXCIsXCImSWRvdDtcIjpcIsSwXCIsXCImSWZyO1wiOlwi4oSRXCIsXCImSWdyYXZlXCI6XCLDjFwiLFwiJklncmF2ZTtcIjpcIsOMXCIsXCImSW07XCI6XCLihJFcIixcIiZJbWFjcjtcIjpcIsSqXCIsXCImSW1hZ2luYXJ5STtcIjpcIuKFiFwiLFwiJkltcGxpZXM7XCI6XCLih5JcIixcIiZJbnQ7XCI6XCLiiKxcIixcIiZJbnRlZ3JhbDtcIjpcIuKIq1wiLFwiJkludGVyc2VjdGlvbjtcIjpcIuKLglwiLFwiJkludmlzaWJsZUNvbW1hO1wiOlwi4oGjXCIsXCImSW52aXNpYmxlVGltZXM7XCI6XCLigaJcIixcIiZJb2dvbjtcIjpcIsSuXCIsXCImSW9wZjtcIjpcIvCdlYBcIixcIiZJb3RhO1wiOlwizplcIixcIiZJc2NyO1wiOlwi4oSQXCIsXCImSXRpbGRlO1wiOlwixKhcIixcIiZJdWtjeTtcIjpcItCGXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZKY2lyYztcIjpcIsS0XCIsXCImSmN5O1wiOlwi0JlcIixcIiZKZnI7XCI6XCLwnZSNXCIsXCImSm9wZjtcIjpcIvCdlYFcIixcIiZKc2NyO1wiOlwi8J2SpVwiLFwiJkpzZXJjeTtcIjpcItCIXCIsXCImSnVrY3k7XCI6XCLQhFwiLFwiJktIY3k7XCI6XCLQpVwiLFwiJktKY3k7XCI6XCLQjFwiLFwiJkthcHBhO1wiOlwizppcIixcIiZLY2VkaWw7XCI6XCLEtlwiLFwiJktjeTtcIjpcItCaXCIsXCImS2ZyO1wiOlwi8J2UjlwiLFwiJktvcGY7XCI6XCLwnZWCXCIsXCImS3NjcjtcIjpcIvCdkqZcIixcIiZMSmN5O1wiOlwi0IlcIixcIiZMVFwiOlwiPFwiLFwiJkxUO1wiOlwiPFwiLFwiJkxhY3V0ZTtcIjpcIsS5XCIsXCImTGFtYmRhO1wiOlwizptcIixcIiZMYW5nO1wiOlwi4p+qXCIsXCImTGFwbGFjZXRyZjtcIjpcIuKEklwiLFwiJkxhcnI7XCI6XCLihp5cIixcIiZMY2Fyb247XCI6XCLEvVwiLFwiJkxjZWRpbDtcIjpcIsS7XCIsXCImTGN5O1wiOlwi0JtcIixcIiZMZWZ0QW5nbGVCcmFja2V0O1wiOlwi4p+oXCIsXCImTGVmdEFycm93O1wiOlwi4oaQXCIsXCImTGVmdEFycm93QmFyO1wiOlwi4oekXCIsXCImTGVmdEFycm93UmlnaHRBcnJvdztcIjpcIuKHhlwiLFwiJkxlZnRDZWlsaW5nO1wiOlwi4oyIXCIsXCImTGVmdERvdWJsZUJyYWNrZXQ7XCI6XCLin6ZcIixcIiZMZWZ0RG93blRlZVZlY3RvcjtcIjpcIuKloVwiLFwiJkxlZnREb3duVmVjdG9yO1wiOlwi4oeDXCIsXCImTGVmdERvd25WZWN0b3JCYXI7XCI6XCLipZlcIixcIiZMZWZ0Rmxvb3I7XCI6XCLijIpcIixcIiZMZWZ0UmlnaHRBcnJvdztcIjpcIuKGlFwiLFwiJkxlZnRSaWdodFZlY3RvcjtcIjpcIuKljlwiLFwiJkxlZnRUZWU7XCI6XCLiiqNcIixcIiZMZWZ0VGVlQXJyb3c7XCI6XCLihqRcIixcIiZMZWZ0VGVlVmVjdG9yO1wiOlwi4qWaXCIsXCImTGVmdFRyaWFuZ2xlO1wiOlwi4oqyXCIsXCImTGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePXCIsXCImTGVmdFRyaWFuZ2xlRXF1YWw7XCI6XCLiirRcIixcIiZMZWZ0VXBEb3duVmVjdG9yO1wiOlwi4qWRXCIsXCImTGVmdFVwVGVlVmVjdG9yO1wiOlwi4qWgXCIsXCImTGVmdFVwVmVjdG9yO1wiOlwi4oa/XCIsXCImTGVmdFVwVmVjdG9yQmFyO1wiOlwi4qWYXCIsXCImTGVmdFZlY3RvcjtcIjpcIuKGvFwiLFwiJkxlZnRWZWN0b3JCYXI7XCI6XCLipZJcIixcIiZMZWZ0YXJyb3c7XCI6XCLih5BcIixcIiZMZWZ0cmlnaHRhcnJvdztcIjpcIuKHlFwiLFwiJkxlc3NFcXVhbEdyZWF0ZXI7XCI6XCLii5pcIixcIiZMZXNzRnVsbEVxdWFsO1wiOlwi4ommXCIsXCImTGVzc0dyZWF0ZXI7XCI6XCLiibZcIixcIiZMZXNzTGVzcztcIjpcIuKqoVwiLFwiJkxlc3NTbGFudEVxdWFsO1wiOlwi4qm9XCIsXCImTGVzc1RpbGRlO1wiOlwi4omyXCIsXCImTGZyO1wiOlwi8J2Uj1wiLFwiJkxsO1wiOlwi4ouYXCIsXCImTGxlZnRhcnJvdztcIjpcIuKHmlwiLFwiJkxtaWRvdDtcIjpcIsS/XCIsXCImTG9uZ0xlZnRBcnJvdztcIjpcIuKftVwiLFwiJkxvbmdMZWZ0UmlnaHRBcnJvdztcIjpcIuKft1wiLFwiJkxvbmdSaWdodEFycm93O1wiOlwi4p+2XCIsXCImTG9uZ2xlZnRhcnJvdztcIjpcIuKfuFwiLFwiJkxvbmdsZWZ0cmlnaHRhcnJvdztcIjpcIuKfulwiLFwiJkxvbmdyaWdodGFycm93O1wiOlwi4p+5XCIsXCImTG9wZjtcIjpcIvCdlYNcIixcIiZMb3dlckxlZnRBcnJvdztcIjpcIuKGmVwiLFwiJkxvd2VyUmlnaHRBcnJvdztcIjpcIuKGmFwiLFwiJkxzY3I7XCI6XCLihJJcIixcIiZMc2g7XCI6XCLihrBcIixcIiZMc3Ryb2s7XCI6XCLFgVwiLFwiJkx0O1wiOlwi4omqXCIsXCImTWFwO1wiOlwi4qSFXCIsXCImTWN5O1wiOlwi0JxcIixcIiZNZWRpdW1TcGFjZTtcIjpcIuKBn1wiLFwiJk1lbGxpbnRyZjtcIjpcIuKEs1wiLFwiJk1mcjtcIjpcIvCdlJBcIixcIiZNaW51c1BsdXM7XCI6XCLiiJNcIixcIiZNb3BmO1wiOlwi8J2VhFwiLFwiJk1zY3I7XCI6XCLihLNcIixcIiZNdTtcIjpcIs6cXCIsXCImTkpjeTtcIjpcItCKXCIsXCImTmFjdXRlO1wiOlwixYNcIixcIiZOY2Fyb247XCI6XCLFh1wiLFwiJk5jZWRpbDtcIjpcIsWFXCIsXCImTmN5O1wiOlwi0J1cIixcIiZOZWdhdGl2ZU1lZGl1bVNwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGlja1NwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZWdhdGl2ZVZlcnlUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIjpcIuKJq1wiLFwiJk5lc3RlZExlc3NMZXNzO1wiOlwi4omqXCIsXCImTmV3TGluZTtcIjpcIlxcblwiLFwiJk5mcjtcIjpcIvCdlJFcIixcIiZOb0JyZWFrO1wiOlwi4oGgXCIsXCImTm9uQnJlYWtpbmdTcGFjZTtcIjpcIsKgXCIsXCImTm9wZjtcIjpcIuKElVwiLFwiJk5vdDtcIjpcIuKrrFwiLFwiJk5vdENvbmdydWVudDtcIjpcIuKJolwiLFwiJk5vdEN1cENhcDtcIjpcIuKJrVwiLFwiJk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiOlwi4oimXCIsXCImTm90RWxlbWVudDtcIjpcIuKIiVwiLFwiJk5vdEVxdWFsO1wiOlwi4omgXCIsXCImTm90RXF1YWxUaWxkZTtcIjpcIuKJgsy4XCIsXCImTm90RXhpc3RzO1wiOlwi4oiEXCIsXCImTm90R3JlYXRlcjtcIjpcIuKJr1wiLFwiJk5vdEdyZWF0ZXJFcXVhbDtcIjpcIuKJsVwiLFwiJk5vdEdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiafMuFwiLFwiJk5vdEdyZWF0ZXJHcmVhdGVyO1wiOlwi4omrzLhcIixcIiZOb3RHcmVhdGVyTGVzcztcIjpcIuKJuVwiLFwiJk5vdEdyZWF0ZXJTbGFudEVxdWFsO1wiOlwi4qm+zLhcIixcIiZOb3RHcmVhdGVyVGlsZGU7XCI6XCLiibVcIixcIiZOb3RIdW1wRG93bkh1bXA7XCI6XCLiiY7MuFwiLFwiJk5vdEh1bXBFcXVhbDtcIjpcIuKJj8y4XCIsXCImTm90TGVmdFRyaWFuZ2xlO1wiOlwi4ouqXCIsXCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePzLhcIixcIiZOb3RMZWZ0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrFwiLFwiJk5vdExlc3M7XCI6XCLiia5cIixcIiZOb3RMZXNzRXF1YWw7XCI6XCLiibBcIixcIiZOb3RMZXNzR3JlYXRlcjtcIjpcIuKJuFwiLFwiJk5vdExlc3NMZXNzO1wiOlwi4omqzLhcIixcIiZOb3RMZXNzU2xhbnRFcXVhbDtcIjpcIuKpvcy4XCIsXCImTm90TGVzc1RpbGRlO1wiOlwi4om0XCIsXCImTm90TmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6XCLiqqLMuFwiLFwiJk5vdE5lc3RlZExlc3NMZXNzO1wiOlwi4qqhzLhcIixcIiZOb3RQcmVjZWRlcztcIjpcIuKKgFwiLFwiJk5vdFByZWNlZGVzRXF1YWw7XCI6XCLiqq/MuFwiLFwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDtcIjpcIuKLoFwiLFwiJk5vdFJldmVyc2VFbGVtZW50O1wiOlwi4oiMXCIsXCImTm90UmlnaHRUcmlhbmdsZTtcIjpcIuKLq1wiLFwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5DMuFwiLFwiJk5vdFJpZ2h0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrVwiLFwiJk5vdFNxdWFyZVN1YnNldDtcIjpcIuKKj8y4XCIsXCImTm90U3F1YXJlU3Vic2V0RXF1YWw7XCI6XCLii6JcIixcIiZOb3RTcXVhcmVTdXBlcnNldDtcIjpcIuKKkMy4XCIsXCImTm90U3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKLo1wiLFwiJk5vdFN1YnNldDtcIjpcIuKKguKDklwiLFwiJk5vdFN1YnNldEVxdWFsO1wiOlwi4oqIXCIsXCImTm90U3VjY2VlZHM7XCI6XCLiioFcIixcIiZOb3RTdWNjZWVkc0VxdWFsO1wiOlwi4qqwzLhcIixcIiZOb3RTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLii6FcIixcIiZOb3RTdWNjZWVkc1RpbGRlO1wiOlwi4om/zLhcIixcIiZOb3RTdXBlcnNldDtcIjpcIuKKg+KDklwiLFwiJk5vdFN1cGVyc2V0RXF1YWw7XCI6XCLiiolcIixcIiZOb3RUaWxkZTtcIjpcIuKJgVwiLFwiJk5vdFRpbGRlRXF1YWw7XCI6XCLiiYRcIixcIiZOb3RUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJh1wiLFwiJk5vdFRpbGRlVGlsZGU7XCI6XCLiiYlcIixcIiZOb3RWZXJ0aWNhbEJhcjtcIjpcIuKIpFwiLFwiJk5zY3I7XCI6XCLwnZKpXCIsXCImTnRpbGRlXCI6XCLDkVwiLFwiJk50aWxkZTtcIjpcIsORXCIsXCImTnU7XCI6XCLOnVwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT2N5O1wiOlwi0J5cIixcIiZPZGJsYWM7XCI6XCLFkFwiLFwiJk9mcjtcIjpcIvCdlJJcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPbWFjcjtcIjpcIsWMXCIsXCImT21lZ2E7XCI6XCLOqVwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJk9vcGY7XCI6XCLwnZWGXCIsXCImT3BlbkN1cmx5RG91YmxlUXVvdGU7XCI6XCLigJxcIixcIiZPcGVuQ3VybHlRdW90ZTtcIjpcIuKAmFwiLFwiJk9yO1wiOlwi4qmUXCIsXCImT3NjcjtcIjpcIvCdkqpcIixcIiZPc2xhc2hcIjpcIsOYXCIsXCImT3NsYXNoO1wiOlwiw5hcIixcIiZPdGlsZGVcIjpcIsOVXCIsXCImT3RpbGRlO1wiOlwiw5VcIixcIiZPdGltZXM7XCI6XCLiqLdcIixcIiZPdW1sXCI6XCLDllwiLFwiJk91bWw7XCI6XCLDllwiLFwiJk92ZXJCYXI7XCI6XCLigL5cIixcIiZPdmVyQnJhY2U7XCI6XCLij55cIixcIiZPdmVyQnJhY2tldDtcIjpcIuKOtFwiLFwiJk92ZXJQYXJlbnRoZXNpcztcIjpcIuKPnFwiLFwiJlBhcnRpYWxEO1wiOlwi4oiCXCIsXCImUGN5O1wiOlwi0J9cIixcIiZQZnI7XCI6XCLwnZSTXCIsXCImUGhpO1wiOlwizqZcIixcIiZQaTtcIjpcIs6gXCIsXCImUGx1c01pbnVzO1wiOlwiwrFcIixcIiZQb2luY2FyZXBsYW5lO1wiOlwi4oSMXCIsXCImUG9wZjtcIjpcIuKEmVwiLFwiJlByO1wiOlwi4qq7XCIsXCImUHJlY2VkZXM7XCI6XCLiibpcIixcIiZQcmVjZWRlc0VxdWFsO1wiOlwi4qqvXCIsXCImUHJlY2VkZXNTbGFudEVxdWFsO1wiOlwi4om8XCIsXCImUHJlY2VkZXNUaWxkZTtcIjpcIuKJvlwiLFwiJlByaW1lO1wiOlwi4oCzXCIsXCImUHJvZHVjdDtcIjpcIuKIj1wiLFwiJlByb3BvcnRpb247XCI6XCLiiLdcIixcIiZQcm9wb3J0aW9uYWw7XCI6XCLiiJ1cIixcIiZQc2NyO1wiOlwi8J2Sq1wiLFwiJlBzaTtcIjpcIs6oXCIsXCImUVVPVFwiOidcIicsXCImUVVPVDtcIjonXCInLFwiJlFmcjtcIjpcIvCdlJRcIixcIiZRb3BmO1wiOlwi4oSaXCIsXCImUXNjcjtcIjpcIvCdkqxcIixcIiZSQmFycjtcIjpcIuKkkFwiLFwiJlJFR1wiOlwiwq5cIixcIiZSRUc7XCI6XCLCrlwiLFwiJlJhY3V0ZTtcIjpcIsWUXCIsXCImUmFuZztcIjpcIuKfq1wiLFwiJlJhcnI7XCI6XCLihqBcIixcIiZSYXJydGw7XCI6XCLipJZcIixcIiZSY2Fyb247XCI6XCLFmFwiLFwiJlJjZWRpbDtcIjpcIsWWXCIsXCImUmN5O1wiOlwi0KBcIixcIiZSZTtcIjpcIuKEnFwiLFwiJlJldmVyc2VFbGVtZW50O1wiOlwi4oiLXCIsXCImUmV2ZXJzZUVxdWlsaWJyaXVtO1wiOlwi4oeLXCIsXCImUmV2ZXJzZVVwRXF1aWxpYnJpdW07XCI6XCLipa9cIixcIiZSZnI7XCI6XCLihJxcIixcIiZSaG87XCI6XCLOoVwiLFwiJlJpZ2h0QW5nbGVCcmFja2V0O1wiOlwi4p+pXCIsXCImUmlnaHRBcnJvdztcIjpcIuKGklwiLFwiJlJpZ2h0QXJyb3dCYXI7XCI6XCLih6VcIixcIiZSaWdodEFycm93TGVmdEFycm93O1wiOlwi4oeEXCIsXCImUmlnaHRDZWlsaW5nO1wiOlwi4oyJXCIsXCImUmlnaHREb3VibGVCcmFja2V0O1wiOlwi4p+nXCIsXCImUmlnaHREb3duVGVlVmVjdG9yO1wiOlwi4qWdXCIsXCImUmlnaHREb3duVmVjdG9yO1wiOlwi4oeCXCIsXCImUmlnaHREb3duVmVjdG9yQmFyO1wiOlwi4qWVXCIsXCImUmlnaHRGbG9vcjtcIjpcIuKMi1wiLFwiJlJpZ2h0VGVlO1wiOlwi4oqiXCIsXCImUmlnaHRUZWVBcnJvdztcIjpcIuKGplwiLFwiJlJpZ2h0VGVlVmVjdG9yO1wiOlwi4qWbXCIsXCImUmlnaHRUcmlhbmdsZTtcIjpcIuKKs1wiLFwiJlJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5BcIixcIiZSaWdodFRyaWFuZ2xlRXF1YWw7XCI6XCLiirVcIixcIiZSaWdodFVwRG93blZlY3RvcjtcIjpcIuKlj1wiLFwiJlJpZ2h0VXBUZWVWZWN0b3I7XCI6XCLipZxcIixcIiZSaWdodFVwVmVjdG9yO1wiOlwi4oa+XCIsXCImUmlnaHRVcFZlY3RvckJhcjtcIjpcIuKllFwiLFwiJlJpZ2h0VmVjdG9yO1wiOlwi4oeAXCIsXCImUmlnaHRWZWN0b3JCYXI7XCI6XCLipZNcIixcIiZSaWdodGFycm93O1wiOlwi4oeSXCIsXCImUm9wZjtcIjpcIuKEnVwiLFwiJlJvdW5kSW1wbGllcztcIjpcIuKlsFwiLFwiJlJyaWdodGFycm93O1wiOlwi4oebXCIsXCImUnNjcjtcIjpcIuKEm1wiLFwiJlJzaDtcIjpcIuKGsVwiLFwiJlJ1bGVEZWxheWVkO1wiOlwi4qe0XCIsXCImU0hDSGN5O1wiOlwi0KlcIixcIiZTSGN5O1wiOlwi0KhcIixcIiZTT0ZUY3k7XCI6XCLQrFwiLFwiJlNhY3V0ZTtcIjpcIsWaXCIsXCImU2M7XCI6XCLiqrxcIixcIiZTY2Fyb247XCI6XCLFoFwiLFwiJlNjZWRpbDtcIjpcIsWeXCIsXCImU2NpcmM7XCI6XCLFnFwiLFwiJlNjeTtcIjpcItChXCIsXCImU2ZyO1wiOlwi8J2UllwiLFwiJlNob3J0RG93bkFycm93O1wiOlwi4oaTXCIsXCImU2hvcnRMZWZ0QXJyb3c7XCI6XCLihpBcIixcIiZTaG9ydFJpZ2h0QXJyb3c7XCI6XCLihpJcIixcIiZTaG9ydFVwQXJyb3c7XCI6XCLihpFcIixcIiZTaWdtYTtcIjpcIs6jXCIsXCImU21hbGxDaXJjbGU7XCI6XCLiiJhcIixcIiZTb3BmO1wiOlwi8J2VilwiLFwiJlNxcnQ7XCI6XCLiiJpcIixcIiZTcXVhcmU7XCI6XCLilqFcIixcIiZTcXVhcmVJbnRlcnNlY3Rpb247XCI6XCLiipNcIixcIiZTcXVhcmVTdWJzZXQ7XCI6XCLiio9cIixcIiZTcXVhcmVTdWJzZXRFcXVhbDtcIjpcIuKKkVwiLFwiJlNxdWFyZVN1cGVyc2V0O1wiOlwi4oqQXCIsXCImU3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKKklwiLFwiJlNxdWFyZVVuaW9uO1wiOlwi4oqUXCIsXCImU3NjcjtcIjpcIvCdkq5cIixcIiZTdGFyO1wiOlwi4ouGXCIsXCImU3ViO1wiOlwi4ouQXCIsXCImU3Vic2V0O1wiOlwi4ouQXCIsXCImU3Vic2V0RXF1YWw7XCI6XCLiioZcIixcIiZTdWNjZWVkcztcIjpcIuKJu1wiLFwiJlN1Y2NlZWRzRXF1YWw7XCI6XCLiqrBcIixcIiZTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLiib1cIixcIiZTdWNjZWVkc1RpbGRlO1wiOlwi4om/XCIsXCImU3VjaFRoYXQ7XCI6XCLiiItcIixcIiZTdW07XCI6XCLiiJFcIixcIiZTdXA7XCI6XCLii5FcIixcIiZTdXBlcnNldDtcIjpcIuKKg1wiLFwiJlN1cGVyc2V0RXF1YWw7XCI6XCLiiodcIixcIiZTdXBzZXQ7XCI6XCLii5FcIixcIiZUSE9STlwiOlwiw55cIixcIiZUSE9STjtcIjpcIsOeXCIsXCImVFJBREU7XCI6XCLihKJcIixcIiZUU0hjeTtcIjpcItCLXCIsXCImVFNjeTtcIjpcItCmXCIsXCImVGFiO1wiOlwiXFx0XCIsXCImVGF1O1wiOlwizqRcIixcIiZUY2Fyb247XCI6XCLFpFwiLFwiJlRjZWRpbDtcIjpcIsWiXCIsXCImVGN5O1wiOlwi0KJcIixcIiZUZnI7XCI6XCLwnZSXXCIsXCImVGhlcmVmb3JlO1wiOlwi4oi0XCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJlRoaWNrU3BhY2U7XCI6XCLigZ/igIpcIixcIiZUaGluU3BhY2U7XCI6XCLigIlcIixcIiZUaWxkZTtcIjpcIuKIvFwiLFwiJlRpbGRlRXF1YWw7XCI6XCLiiYNcIixcIiZUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJhVwiLFwiJlRpbGRlVGlsZGU7XCI6XCLiiYhcIixcIiZUb3BmO1wiOlwi8J2Vi1wiLFwiJlRyaXBsZURvdDtcIjpcIuKDm1wiLFwiJlRzY3I7XCI6XCLwnZKvXCIsXCImVHN0cm9rO1wiOlwixaZcIixcIiZVYWN1dGVcIjpcIsOaXCIsXCImVWFjdXRlO1wiOlwiw5pcIixcIiZVYXJyO1wiOlwi4oafXCIsXCImVWFycm9jaXI7XCI6XCLipYlcIixcIiZVYnJjeTtcIjpcItCOXCIsXCImVWJyZXZlO1wiOlwixaxcIixcIiZVY2lyY1wiOlwiw5tcIixcIiZVY2lyYztcIjpcIsObXCIsXCImVWN5O1wiOlwi0KNcIixcIiZVZGJsYWM7XCI6XCLFsFwiLFwiJlVmcjtcIjpcIvCdlJhcIixcIiZVZ3JhdmVcIjpcIsOZXCIsXCImVWdyYXZlO1wiOlwiw5lcIixcIiZVbWFjcjtcIjpcIsWqXCIsXCImVW5kZXJCYXI7XCI6XCJfXCIsXCImVW5kZXJCcmFjZTtcIjpcIuKPn1wiLFwiJlVuZGVyQnJhY2tldDtcIjpcIuKOtVwiLFwiJlVuZGVyUGFyZW50aGVzaXM7XCI6XCLij51cIixcIiZVbmlvbjtcIjpcIuKLg1wiLFwiJlVuaW9uUGx1cztcIjpcIuKKjlwiLFwiJlVvZ29uO1wiOlwixbJcIixcIiZVb3BmO1wiOlwi8J2VjFwiLFwiJlVwQXJyb3c7XCI6XCLihpFcIixcIiZVcEFycm93QmFyO1wiOlwi4qSSXCIsXCImVXBBcnJvd0Rvd25BcnJvdztcIjpcIuKHhVwiLFwiJlVwRG93bkFycm93O1wiOlwi4oaVXCIsXCImVXBFcXVpbGlicml1bTtcIjpcIuKlrlwiLFwiJlVwVGVlO1wiOlwi4oqlXCIsXCImVXBUZWVBcnJvdztcIjpcIuKGpVwiLFwiJlVwYXJyb3c7XCI6XCLih5FcIixcIiZVcGRvd25hcnJvdztcIjpcIuKHlVwiLFwiJlVwcGVyTGVmdEFycm93O1wiOlwi4oaWXCIsXCImVXBwZXJSaWdodEFycm93O1wiOlwi4oaXXCIsXCImVXBzaTtcIjpcIs+SXCIsXCImVXBzaWxvbjtcIjpcIs6lXCIsXCImVXJpbmc7XCI6XCLFrlwiLFwiJlVzY3I7XCI6XCLwnZKwXCIsXCImVXRpbGRlO1wiOlwixahcIixcIiZVdW1sXCI6XCLDnFwiLFwiJlV1bWw7XCI6XCLDnFwiLFwiJlZEYXNoO1wiOlwi4oqrXCIsXCImVmJhcjtcIjpcIuKrq1wiLFwiJlZjeTtcIjpcItCSXCIsXCImVmRhc2g7XCI6XCLiiqlcIixcIiZWZGFzaGw7XCI6XCLiq6ZcIixcIiZWZWU7XCI6XCLii4FcIixcIiZWZXJiYXI7XCI6XCLigJZcIixcIiZWZXJ0O1wiOlwi4oCWXCIsXCImVmVydGljYWxCYXI7XCI6XCLiiKNcIixcIiZWZXJ0aWNhbExpbmU7XCI6XCJ8XCIsXCImVmVydGljYWxTZXBhcmF0b3I7XCI6XCLinZhcIixcIiZWZXJ0aWNhbFRpbGRlO1wiOlwi4omAXCIsXCImVmVyeVRoaW5TcGFjZTtcIjpcIuKAilwiLFwiJlZmcjtcIjpcIvCdlJlcIixcIiZWb3BmO1wiOlwi8J2VjVwiLFwiJlZzY3I7XCI6XCLwnZKxXCIsXCImVnZkYXNoO1wiOlwi4oqqXCIsXCImV2NpcmM7XCI6XCLFtFwiLFwiJldlZGdlO1wiOlwi4ouAXCIsXCImV2ZyO1wiOlwi8J2UmlwiLFwiJldvcGY7XCI6XCLwnZWOXCIsXCImV3NjcjtcIjpcIvCdkrJcIixcIiZYZnI7XCI6XCLwnZSbXCIsXCImWGk7XCI6XCLOnlwiLFwiJlhvcGY7XCI6XCLwnZWPXCIsXCImWHNjcjtcIjpcIvCdkrNcIixcIiZZQWN5O1wiOlwi0K9cIixcIiZZSWN5O1wiOlwi0IdcIixcIiZZVWN5O1wiOlwi0K5cIixcIiZZYWN1dGVcIjpcIsOdXCIsXCImWWFjdXRlO1wiOlwiw51cIixcIiZZY2lyYztcIjpcIsW2XCIsXCImWWN5O1wiOlwi0KtcIixcIiZZZnI7XCI6XCLwnZScXCIsXCImWW9wZjtcIjpcIvCdlZBcIixcIiZZc2NyO1wiOlwi8J2StFwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJlpIY3k7XCI6XCLQllwiLFwiJlphY3V0ZTtcIjpcIsW5XCIsXCImWmNhcm9uO1wiOlwixb1cIixcIiZaY3k7XCI6XCLQl1wiLFwiJlpkb3Q7XCI6XCLFu1wiLFwiJlplcm9XaWR0aFNwYWNlO1wiOlwi4oCLXCIsXCImWmV0YTtcIjpcIs6WXCIsXCImWmZyO1wiOlwi4oSoXCIsXCImWm9wZjtcIjpcIuKEpFwiLFwiJlpzY3I7XCI6XCLwnZK1XCIsXCImYWFjdXRlXCI6XCLDoVwiLFwiJmFhY3V0ZTtcIjpcIsOhXCIsXCImYWJyZXZlO1wiOlwixINcIixcIiZhYztcIjpcIuKIvlwiLFwiJmFjRTtcIjpcIuKIvsyzXCIsXCImYWNkO1wiOlwi4oi/XCIsXCImYWNpcmNcIjpcIsOiXCIsXCImYWNpcmM7XCI6XCLDolwiLFwiJmFjdXRlXCI6XCLCtFwiLFwiJmFjdXRlO1wiOlwiwrRcIixcIiZhY3k7XCI6XCLQsFwiLFwiJmFlbGlnXCI6XCLDplwiLFwiJmFlbGlnO1wiOlwiw6ZcIixcIiZhZjtcIjpcIuKBoVwiLFwiJmFmcjtcIjpcIvCdlJ5cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImYWxlcGg7XCI6XCLihLVcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYW1hY3I7XCI6XCLEgVwiLFwiJmFtYWxnO1wiOlwi4qi/XCIsXCImYW1wXCI6XCImXCIsXCImYW1wO1wiOlwiJlwiLFwiJmFuZDtcIjpcIuKIp1wiLFwiJmFuZGFuZDtcIjpcIuKplVwiLFwiJmFuZGQ7XCI6XCLiqZxcIixcIiZhbmRzbG9wZTtcIjpcIuKpmFwiLFwiJmFuZHY7XCI6XCLiqZpcIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmdlO1wiOlwi4qakXCIsXCImYW5nbGU7XCI6XCLiiKBcIixcIiZhbmdtc2Q7XCI6XCLiiKFcIixcIiZhbmdtc2RhYTtcIjpcIuKmqFwiLFwiJmFuZ21zZGFiO1wiOlwi4qapXCIsXCImYW5nbXNkYWM7XCI6XCLipqpcIixcIiZhbmdtc2RhZDtcIjpcIuKmq1wiLFwiJmFuZ21zZGFlO1wiOlwi4qasXCIsXCImYW5nbXNkYWY7XCI6XCLipq1cIixcIiZhbmdtc2RhZztcIjpcIuKmrlwiLFwiJmFuZ21zZGFoO1wiOlwi4qavXCIsXCImYW5ncnQ7XCI6XCLiiJ9cIixcIiZhbmdydHZiO1wiOlwi4oq+XCIsXCImYW5ncnR2YmQ7XCI6XCLipp1cIixcIiZhbmdzcGg7XCI6XCLiiKJcIixcIiZhbmdzdDtcIjpcIsOFXCIsXCImYW5nemFycjtcIjpcIuKNvFwiLFwiJmFvZ29uO1wiOlwixIVcIixcIiZhb3BmO1wiOlwi8J2VklwiLFwiJmFwO1wiOlwi4omIXCIsXCImYXBFO1wiOlwi4qmwXCIsXCImYXBhY2lyO1wiOlwi4qmvXCIsXCImYXBlO1wiOlwi4omKXCIsXCImYXBpZDtcIjpcIuKJi1wiLFwiJmFwb3M7XCI6XCInXCIsXCImYXBwcm94O1wiOlwi4omIXCIsXCImYXBwcm94ZXE7XCI6XCLiiYpcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYXNjcjtcIjpcIvCdkrZcIixcIiZhc3Q7XCI6XCIqXCIsXCImYXN5bXA7XCI6XCLiiYhcIixcIiZhc3ltcGVxO1wiOlwi4omNXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhd2NvbmludDtcIjpcIuKIs1wiLFwiJmF3aW50O1wiOlwi4qiRXCIsXCImYk5vdDtcIjpcIuKrrVwiLFwiJmJhY2tjb25nO1wiOlwi4omMXCIsXCImYmFja2Vwc2lsb247XCI6XCLPtlwiLFwiJmJhY2twcmltZTtcIjpcIuKAtVwiLFwiJmJhY2tzaW07XCI6XCLiiL1cIixcIiZiYWNrc2ltZXE7XCI6XCLii41cIixcIiZiYXJ2ZWU7XCI6XCLiir1cIixcIiZiYXJ3ZWQ7XCI6XCLijIVcIixcIiZiYXJ3ZWRnZTtcIjpcIuKMhVwiLFwiJmJicms7XCI6XCLijrVcIixcIiZiYnJrdGJyaztcIjpcIuKOtlwiLFwiJmJjb25nO1wiOlwi4omMXCIsXCImYmN5O1wiOlwi0LFcIixcIiZiZHF1bztcIjpcIuKAnlwiLFwiJmJlY2F1cztcIjpcIuKItVwiLFwiJmJlY2F1c2U7XCI6XCLiiLVcIixcIiZiZW1wdHl2O1wiOlwi4qawXCIsXCImYmVwc2k7XCI6XCLPtlwiLFwiJmJlcm5vdTtcIjpcIuKErFwiLFwiJmJldGE7XCI6XCLOslwiLFwiJmJldGg7XCI6XCLihLZcIixcIiZiZXR3ZWVuO1wiOlwi4omsXCIsXCImYmZyO1wiOlwi8J2Un1wiLFwiJmJpZ2NhcDtcIjpcIuKLglwiLFwiJmJpZ2NpcmM7XCI6XCLil69cIixcIiZiaWdjdXA7XCI6XCLii4NcIixcIiZiaWdvZG90O1wiOlwi4qiAXCIsXCImYmlnb3BsdXM7XCI6XCLiqIFcIixcIiZiaWdvdGltZXM7XCI6XCLiqIJcIixcIiZiaWdzcWN1cDtcIjpcIuKohlwiLFwiJmJpZ3N0YXI7XCI6XCLimIVcIixcIiZiaWd0cmlhbmdsZWRvd247XCI6XCLilr1cIixcIiZiaWd0cmlhbmdsZXVwO1wiOlwi4pazXCIsXCImYmlndXBsdXM7XCI6XCLiqIRcIixcIiZiaWd2ZWU7XCI6XCLii4FcIixcIiZiaWd3ZWRnZTtcIjpcIuKLgFwiLFwiJmJrYXJvdztcIjpcIuKkjVwiLFwiJmJsYWNrbG96ZW5nZTtcIjpcIuKnq1wiLFwiJmJsYWNrc3F1YXJlO1wiOlwi4paqXCIsXCImYmxhY2t0cmlhbmdsZTtcIjpcIuKWtFwiLFwiJmJsYWNrdHJpYW5nbGVkb3duO1wiOlwi4pa+XCIsXCImYmxhY2t0cmlhbmdsZWxlZnQ7XCI6XCLil4JcIixcIiZibGFja3RyaWFuZ2xlcmlnaHQ7XCI6XCLilrhcIixcIiZibGFuaztcIjpcIuKQo1wiLFwiJmJsazEyO1wiOlwi4paSXCIsXCImYmxrMTQ7XCI6XCLilpFcIixcIiZibGszNDtcIjpcIuKWk1wiLFwiJmJsb2NrO1wiOlwi4paIXCIsXCImYm5lO1wiOlwiPeKDpVwiLFwiJmJuZXF1aXY7XCI6XCLiiaHig6VcIixcIiZibm90O1wiOlwi4oyQXCIsXCImYm9wZjtcIjpcIvCdlZNcIixcIiZib3Q7XCI6XCLiiqVcIixcIiZib3R0b207XCI6XCLiiqVcIixcIiZib3d0aWU7XCI6XCLii4hcIixcIiZib3hETDtcIjpcIuKVl1wiLFwiJmJveERSO1wiOlwi4pWUXCIsXCImYm94RGw7XCI6XCLilZZcIixcIiZib3hEcjtcIjpcIuKVk1wiLFwiJmJveEg7XCI6XCLilZBcIixcIiZib3hIRDtcIjpcIuKVplwiLFwiJmJveEhVO1wiOlwi4pWpXCIsXCImYm94SGQ7XCI6XCLilaRcIixcIiZib3hIdTtcIjpcIuKVp1wiLFwiJmJveFVMO1wiOlwi4pWdXCIsXCImYm94VVI7XCI6XCLilZpcIixcIiZib3hVbDtcIjpcIuKVnFwiLFwiJmJveFVyO1wiOlwi4pWZXCIsXCImYm94VjtcIjpcIuKVkVwiLFwiJmJveFZIO1wiOlwi4pWsXCIsXCImYm94Vkw7XCI6XCLilaNcIixcIiZib3hWUjtcIjpcIuKVoFwiLFwiJmJveFZoO1wiOlwi4pWrXCIsXCImYm94Vmw7XCI6XCLilaJcIixcIiZib3hWcjtcIjpcIuKVn1wiLFwiJmJveGJveDtcIjpcIuKniVwiLFwiJmJveGRMO1wiOlwi4pWVXCIsXCImYm94ZFI7XCI6XCLilZJcIixcIiZib3hkbDtcIjpcIuKUkFwiLFwiJmJveGRyO1wiOlwi4pSMXCIsXCImYm94aDtcIjpcIuKUgFwiLFwiJmJveGhEO1wiOlwi4pWlXCIsXCImYm94aFU7XCI6XCLilahcIixcIiZib3hoZDtcIjpcIuKUrFwiLFwiJmJveGh1O1wiOlwi4pS0XCIsXCImYm94bWludXM7XCI6XCLiip9cIixcIiZib3hwbHVzO1wiOlwi4oqeXCIsXCImYm94dGltZXM7XCI6XCLiiqBcIixcIiZib3h1TDtcIjpcIuKVm1wiLFwiJmJveHVSO1wiOlwi4pWYXCIsXCImYm94dWw7XCI6XCLilJhcIixcIiZib3h1cjtcIjpcIuKUlFwiLFwiJmJveHY7XCI6XCLilIJcIixcIiZib3h2SDtcIjpcIuKVqlwiLFwiJmJveHZMO1wiOlwi4pWhXCIsXCImYm94dlI7XCI6XCLilZ5cIixcIiZib3h2aDtcIjpcIuKUvFwiLFwiJmJveHZsO1wiOlwi4pSkXCIsXCImYm94dnI7XCI6XCLilJxcIixcIiZicHJpbWU7XCI6XCLigLVcIixcIiZicmV2ZTtcIjpcIsuYXCIsXCImYnJ2YmFyXCI6XCLCplwiLFwiJmJydmJhcjtcIjpcIsKmXCIsXCImYnNjcjtcIjpcIvCdkrdcIixcIiZic2VtaTtcIjpcIuKBj1wiLFwiJmJzaW07XCI6XCLiiL1cIixcIiZic2ltZTtcIjpcIuKLjVwiLFwiJmJzb2w7XCI6XCJcXFxcXCIsXCImYnNvbGI7XCI6XCLip4VcIixcIiZic29saHN1YjtcIjpcIuKfiFwiLFwiJmJ1bGw7XCI6XCLigKJcIixcIiZidWxsZXQ7XCI6XCLigKJcIixcIiZidW1wO1wiOlwi4omOXCIsXCImYnVtcEU7XCI6XCLiqq5cIixcIiZidW1wZTtcIjpcIuKJj1wiLFwiJmJ1bXBlcTtcIjpcIuKJj1wiLFwiJmNhY3V0ZTtcIjpcIsSHXCIsXCImY2FwO1wiOlwi4oipXCIsXCImY2FwYW5kO1wiOlwi4qmEXCIsXCImY2FwYnJjdXA7XCI6XCLiqYlcIixcIiZjYXBjYXA7XCI6XCLiqYtcIixcIiZjYXBjdXA7XCI6XCLiqYdcIixcIiZjYXBkb3Q7XCI6XCLiqYBcIixcIiZjYXBzO1wiOlwi4oip77iAXCIsXCImY2FyZXQ7XCI6XCLigYFcIixcIiZjYXJvbjtcIjpcIsuHXCIsXCImY2NhcHM7XCI6XCLiqY1cIixcIiZjY2Fyb247XCI6XCLEjVwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmNjaXJjO1wiOlwixIlcIixcIiZjY3VwcztcIjpcIuKpjFwiLFwiJmNjdXBzc207XCI6XCLiqZBcIixcIiZjZG90O1wiOlwixItcIixcIiZjZWRpbFwiOlwiwrhcIixcIiZjZWRpbDtcIjpcIsK4XCIsXCImY2VtcHR5djtcIjpcIuKmslwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImY2VudGVyZG90O1wiOlwiwrdcIixcIiZjZnI7XCI6XCLwnZSgXCIsXCImY2hjeTtcIjpcItGHXCIsXCImY2hlY2s7XCI6XCLinJNcIixcIiZjaGVja21hcms7XCI6XCLinJNcIixcIiZjaGk7XCI6XCLPh1wiLFwiJmNpcjtcIjpcIuKXi1wiLFwiJmNpckU7XCI6XCLip4NcIixcIiZjaXJjO1wiOlwiy4ZcIixcIiZjaXJjZXE7XCI6XCLiiZdcIixcIiZjaXJjbGVhcnJvd2xlZnQ7XCI6XCLihrpcIixcIiZjaXJjbGVhcnJvd3JpZ2h0O1wiOlwi4oa7XCIsXCImY2lyY2xlZFI7XCI6XCLCrlwiLFwiJmNpcmNsZWRTO1wiOlwi4pOIXCIsXCImY2lyY2xlZGFzdDtcIjpcIuKKm1wiLFwiJmNpcmNsZWRjaXJjO1wiOlwi4oqaXCIsXCImY2lyY2xlZGRhc2g7XCI6XCLiip1cIixcIiZjaXJlO1wiOlwi4omXXCIsXCImY2lyZm5pbnQ7XCI6XCLiqJBcIixcIiZjaXJtaWQ7XCI6XCLiq69cIixcIiZjaXJzY2lyO1wiOlwi4qeCXCIsXCImY2x1YnM7XCI6XCLimaNcIixcIiZjbHVic3VpdDtcIjpcIuKZo1wiLFwiJmNvbG9uO1wiOlwiOlwiLFwiJmNvbG9uZTtcIjpcIuKJlFwiLFwiJmNvbG9uZXE7XCI6XCLiiZRcIixcIiZjb21tYTtcIjpcIixcIixcIiZjb21tYXQ7XCI6XCJAXCIsXCImY29tcDtcIjpcIuKIgVwiLFwiJmNvbXBmbjtcIjpcIuKImFwiLFwiJmNvbXBsZW1lbnQ7XCI6XCLiiIFcIixcIiZjb21wbGV4ZXM7XCI6XCLihIJcIixcIiZjb25nO1wiOlwi4omFXCIsXCImY29uZ2RvdDtcIjpcIuKprVwiLFwiJmNvbmludDtcIjpcIuKIrlwiLFwiJmNvcGY7XCI6XCLwnZWUXCIsXCImY29wcm9kO1wiOlwi4oiQXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZjb3B5c3I7XCI6XCLihJdcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmNyb3NzO1wiOlwi4pyXXCIsXCImY3NjcjtcIjpcIvCdkrhcIixcIiZjc3ViO1wiOlwi4quPXCIsXCImY3N1YmU7XCI6XCLiq5FcIixcIiZjc3VwO1wiOlwi4quQXCIsXCImY3N1cGU7XCI6XCLiq5JcIixcIiZjdGRvdDtcIjpcIuKLr1wiLFwiJmN1ZGFycmw7XCI6XCLipLhcIixcIiZjdWRhcnJyO1wiOlwi4qS1XCIsXCImY3VlcHI7XCI6XCLii55cIixcIiZjdWVzYztcIjpcIuKLn1wiLFwiJmN1bGFycjtcIjpcIuKGtlwiLFwiJmN1bGFycnA7XCI6XCLipL1cIixcIiZjdXA7XCI6XCLiiKpcIixcIiZjdXBicmNhcDtcIjpcIuKpiFwiLFwiJmN1cGNhcDtcIjpcIuKphlwiLFwiJmN1cGN1cDtcIjpcIuKpilwiLFwiJmN1cGRvdDtcIjpcIuKKjVwiLFwiJmN1cG9yO1wiOlwi4qmFXCIsXCImY3VwcztcIjpcIuKIqu+4gFwiLFwiJmN1cmFycjtcIjpcIuKGt1wiLFwiJmN1cmFycm07XCI6XCLipLxcIixcIiZjdXJseWVxcHJlYztcIjpcIuKLnlwiLFwiJmN1cmx5ZXFzdWNjO1wiOlwi4oufXCIsXCImY3VybHl2ZWU7XCI6XCLii45cIixcIiZjdXJseXdlZGdlO1wiOlwi4ouPXCIsXCImY3VycmVuXCI6XCLCpFwiLFwiJmN1cnJlbjtcIjpcIsKkXCIsXCImY3VydmVhcnJvd2xlZnQ7XCI6XCLihrZcIixcIiZjdXJ2ZWFycm93cmlnaHQ7XCI6XCLihrdcIixcIiZjdXZlZTtcIjpcIuKLjlwiLFwiJmN1d2VkO1wiOlwi4ouPXCIsXCImY3djb25pbnQ7XCI6XCLiiLJcIixcIiZjd2ludDtcIjpcIuKIsVwiLFwiJmN5bGN0eTtcIjpcIuKMrVwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZkSGFyO1wiOlwi4qWlXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImZGFsZXRoO1wiOlwi4oS4XCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmRhc2g7XCI6XCLigJBcIixcIiZkYXNodjtcIjpcIuKKo1wiLFwiJmRia2Fyb3c7XCI6XCLipI9cIixcIiZkYmxhYztcIjpcIsudXCIsXCImZGNhcm9uO1wiOlwixI9cIixcIiZkY3k7XCI6XCLQtFwiLFwiJmRkO1wiOlwi4oWGXCIsXCImZGRhZ2dlcjtcIjpcIuKAoVwiLFwiJmRkYXJyO1wiOlwi4oeKXCIsXCImZGRvdHNlcTtcIjpcIuKpt1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZkZW1wdHl2O1wiOlwi4qaxXCIsXCImZGZpc2h0O1wiOlwi4qW/XCIsXCImZGZyO1wiOlwi8J2UoVwiLFwiJmRoYXJsO1wiOlwi4oeDXCIsXCImZGhhcnI7XCI6XCLih4JcIixcIiZkaWFtO1wiOlwi4ouEXCIsXCImZGlhbW9uZDtcIjpcIuKLhFwiLFwiJmRpYW1vbmRzdWl0O1wiOlwi4pmmXCIsXCImZGlhbXM7XCI6XCLimaZcIixcIiZkaWU7XCI6XCLCqFwiLFwiJmRpZ2FtbWE7XCI6XCLPnVwiLFwiJmRpc2luO1wiOlwi4ouyXCIsXCImZGl2O1wiOlwiw7dcIixcIiZkaXZpZGVcIjpcIsO3XCIsXCImZGl2aWRlO1wiOlwiw7dcIixcIiZkaXZpZGVvbnRpbWVzO1wiOlwi4ouHXCIsXCImZGl2b254O1wiOlwi4ouHXCIsXCImZGpjeTtcIjpcItGSXCIsXCImZGxjb3JuO1wiOlwi4oyeXCIsXCImZGxjcm9wO1wiOlwi4oyNXCIsXCImZG9sbGFyO1wiOlwiJFwiLFwiJmRvcGY7XCI6XCLwnZWVXCIsXCImZG90O1wiOlwiy5lcIixcIiZkb3RlcTtcIjpcIuKJkFwiLFwiJmRvdGVxZG90O1wiOlwi4omRXCIsXCImZG90bWludXM7XCI6XCLiiLhcIixcIiZkb3RwbHVzO1wiOlwi4oiUXCIsXCImZG90c3F1YXJlO1wiOlwi4oqhXCIsXCImZG91YmxlYmFyd2VkZ2U7XCI6XCLijIZcIixcIiZkb3duYXJyb3c7XCI6XCLihpNcIixcIiZkb3duZG93bmFycm93cztcIjpcIuKHilwiLFwiJmRvd25oYXJwb29ubGVmdDtcIjpcIuKHg1wiLFwiJmRvd25oYXJwb29ucmlnaHQ7XCI6XCLih4JcIixcIiZkcmJrYXJvdztcIjpcIuKkkFwiLFwiJmRyY29ybjtcIjpcIuKMn1wiLFwiJmRyY3JvcDtcIjpcIuKMjFwiLFwiJmRzY3I7XCI6XCLwnZK5XCIsXCImZHNjeTtcIjpcItGVXCIsXCImZHNvbDtcIjpcIuKntlwiLFwiJmRzdHJvaztcIjpcIsSRXCIsXCImZHRkb3Q7XCI6XCLii7FcIixcIiZkdHJpO1wiOlwi4pa/XCIsXCImZHRyaWY7XCI6XCLilr5cIixcIiZkdWFycjtcIjpcIuKHtVwiLFwiJmR1aGFyO1wiOlwi4qWvXCIsXCImZHdhbmdsZTtcIjpcIuKmplwiLFwiJmR6Y3k7XCI6XCLRn1wiLFwiJmR6aWdyYXJyO1wiOlwi4p+/XCIsXCImZUREb3Q7XCI6XCLiqbdcIixcIiZlRG90O1wiOlwi4omRXCIsXCImZWFjdXRlXCI6XCLDqVwiLFwiJmVhY3V0ZTtcIjpcIsOpXCIsXCImZWFzdGVyO1wiOlwi4qmuXCIsXCImZWNhcm9uO1wiOlwixJtcIixcIiZlY2lyO1wiOlwi4omWXCIsXCImZWNpcmNcIjpcIsOqXCIsXCImZWNpcmM7XCI6XCLDqlwiLFwiJmVjb2xvbjtcIjpcIuKJlVwiLFwiJmVjeTtcIjpcItGNXCIsXCImZWRvdDtcIjpcIsSXXCIsXCImZWU7XCI6XCLihYdcIixcIiZlZkRvdDtcIjpcIuKJklwiLFwiJmVmcjtcIjpcIvCdlKJcIixcIiZlZztcIjpcIuKqmlwiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVncztcIjpcIuKqllwiLFwiJmVnc2RvdDtcIjpcIuKqmFwiLFwiJmVsO1wiOlwi4qqZXCIsXCImZWxpbnRlcnM7XCI6XCLij6dcIixcIiZlbGw7XCI6XCLihJNcIixcIiZlbHM7XCI6XCLiqpVcIixcIiZlbHNkb3Q7XCI6XCLiqpdcIixcIiZlbWFjcjtcIjpcIsSTXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZlbXB0eXNldDtcIjpcIuKIhVwiLFwiJmVtcHR5djtcIjpcIuKIhVwiLFwiJmVtc3AxMztcIjpcIuKAhFwiLFwiJmVtc3AxNDtcIjpcIuKAhVwiLFwiJmVtc3A7XCI6XCLigINcIixcIiZlbmc7XCI6XCLFi1wiLFwiJmVuc3A7XCI6XCLigIJcIixcIiZlb2dvbjtcIjpcIsSZXCIsXCImZW9wZjtcIjpcIvCdlZZcIixcIiZlcGFyO1wiOlwi4ouVXCIsXCImZXBhcnNsO1wiOlwi4qejXCIsXCImZXBsdXM7XCI6XCLiqbFcIixcIiZlcHNpO1wiOlwizrVcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZlcHNpdjtcIjpcIs+1XCIsXCImZXFjaXJjO1wiOlwi4omWXCIsXCImZXFjb2xvbjtcIjpcIuKJlVwiLFwiJmVxc2ltO1wiOlwi4omCXCIsXCImZXFzbGFudGd0cjtcIjpcIuKqllwiLFwiJmVxc2xhbnRsZXNzO1wiOlwi4qqVXCIsXCImZXF1YWxzO1wiOlwiPVwiLFwiJmVxdWVzdDtcIjpcIuKJn1wiLFwiJmVxdWl2O1wiOlwi4omhXCIsXCImZXF1aXZERDtcIjpcIuKpuFwiLFwiJmVxdnBhcnNsO1wiOlwi4qelXCIsXCImZXJEb3Q7XCI6XCLiiZNcIixcIiZlcmFycjtcIjpcIuKlsVwiLFwiJmVzY3I7XCI6XCLihK9cIixcIiZlc2RvdDtcIjpcIuKJkFwiLFwiJmVzaW07XCI6XCLiiYJcIixcIiZldGE7XCI6XCLOt1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJmV1bWxcIjpcIsOrXCIsXCImZXVtbDtcIjpcIsOrXCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmV4Y2w7XCI6XCIhXCIsXCImZXhpc3Q7XCI6XCLiiINcIixcIiZleHBlY3RhdGlvbjtcIjpcIuKEsFwiLFwiJmV4cG9uZW50aWFsZTtcIjpcIuKFh1wiLFwiJmZhbGxpbmdkb3RzZXE7XCI6XCLiiZJcIixcIiZmY3k7XCI6XCLRhFwiLFwiJmZlbWFsZTtcIjpcIuKZgFwiLFwiJmZmaWxpZztcIjpcIu+sg1wiLFwiJmZmbGlnO1wiOlwi76yAXCIsXCImZmZsbGlnO1wiOlwi76yEXCIsXCImZmZyO1wiOlwi8J2Uo1wiLFwiJmZpbGlnO1wiOlwi76yBXCIsXCImZmpsaWc7XCI6XCJmalwiLFwiJmZsYXQ7XCI6XCLima1cIixcIiZmbGxpZztcIjpcIu+sglwiLFwiJmZsdG5zO1wiOlwi4paxXCIsXCImZm5vZjtcIjpcIsaSXCIsXCImZm9wZjtcIjpcIvCdlZdcIixcIiZmb3JhbGw7XCI6XCLiiIBcIixcIiZmb3JrO1wiOlwi4ouUXCIsXCImZm9ya3Y7XCI6XCLiq5lcIixcIiZmcGFydGludDtcIjpcIuKojVwiLFwiJmZyYWMxMlwiOlwiwr1cIixcIiZmcmFjMTI7XCI6XCLCvVwiLFwiJmZyYWMxMztcIjpcIuKFk1wiLFwiJmZyYWMxNFwiOlwiwrxcIixcIiZmcmFjMTQ7XCI6XCLCvFwiLFwiJmZyYWMxNTtcIjpcIuKFlVwiLFwiJmZyYWMxNjtcIjpcIuKFmVwiLFwiJmZyYWMxODtcIjpcIuKFm1wiLFwiJmZyYWMyMztcIjpcIuKFlFwiLFwiJmZyYWMyNTtcIjpcIuKFllwiLFwiJmZyYWMzNFwiOlwiwr5cIixcIiZmcmFjMzQ7XCI6XCLCvlwiLFwiJmZyYWMzNTtcIjpcIuKFl1wiLFwiJmZyYWMzODtcIjpcIuKFnFwiLFwiJmZyYWM0NTtcIjpcIuKFmFwiLFwiJmZyYWM1NjtcIjpcIuKFmlwiLFwiJmZyYWM1ODtcIjpcIuKFnVwiLFwiJmZyYWM3ODtcIjpcIuKFnlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImZnJvd247XCI6XCLijKJcIixcIiZmc2NyO1wiOlwi8J2Su1wiLFwiJmdFO1wiOlwi4omnXCIsXCImZ0VsO1wiOlwi4qqMXCIsXCImZ2FjdXRlO1wiOlwix7VcIixcIiZnYW1tYTtcIjpcIs6zXCIsXCImZ2FtbWFkO1wiOlwiz51cIixcIiZnYXA7XCI6XCLiqoZcIixcIiZnYnJldmU7XCI6XCLEn1wiLFwiJmdjaXJjO1wiOlwixJ1cIixcIiZnY3k7XCI6XCLQs1wiLFwiJmdkb3Q7XCI6XCLEoVwiLFwiJmdlO1wiOlwi4omlXCIsXCImZ2VsO1wiOlwi4oubXCIsXCImZ2VxO1wiOlwi4omlXCIsXCImZ2VxcTtcIjpcIuKJp1wiLFwiJmdlcXNsYW50O1wiOlwi4qm+XCIsXCImZ2VzO1wiOlwi4qm+XCIsXCImZ2VzY2M7XCI6XCLiqqlcIixcIiZnZXNkb3Q7XCI6XCLiqoBcIixcIiZnZXNkb3RvO1wiOlwi4qqCXCIsXCImZ2VzZG90b2w7XCI6XCLiqoRcIixcIiZnZXNsO1wiOlwi4oub77iAXCIsXCImZ2VzbGVzO1wiOlwi4qqUXCIsXCImZ2ZyO1wiOlwi8J2UpFwiLFwiJmdnO1wiOlwi4omrXCIsXCImZ2dnO1wiOlwi4ouZXCIsXCImZ2ltZWw7XCI6XCLihLdcIixcIiZnamN5O1wiOlwi0ZNcIixcIiZnbDtcIjpcIuKJt1wiLFwiJmdsRTtcIjpcIuKqklwiLFwiJmdsYTtcIjpcIuKqpVwiLFwiJmdsajtcIjpcIuKqpFwiLFwiJmduRTtcIjpcIuKJqVwiLFwiJmduYXA7XCI6XCLiqopcIixcIiZnbmFwcHJveDtcIjpcIuKqilwiLFwiJmduZTtcIjpcIuKqiFwiLFwiJmduZXE7XCI6XCLiqohcIixcIiZnbmVxcTtcIjpcIuKJqVwiLFwiJmduc2ltO1wiOlwi4ounXCIsXCImZ29wZjtcIjpcIvCdlZhcIixcIiZncmF2ZTtcIjpcImBcIixcIiZnc2NyO1wiOlwi4oSKXCIsXCImZ3NpbTtcIjpcIuKJs1wiLFwiJmdzaW1lO1wiOlwi4qqOXCIsXCImZ3NpbWw7XCI6XCLiqpBcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJmd0Y2M7XCI6XCLiqqdcIixcIiZndGNpcjtcIjpcIuKpulwiLFwiJmd0ZG90O1wiOlwi4ouXXCIsXCImZ3RsUGFyO1wiOlwi4qaVXCIsXCImZ3RxdWVzdDtcIjpcIuKpvFwiLFwiJmd0cmFwcHJveDtcIjpcIuKqhlwiLFwiJmd0cmFycjtcIjpcIuKluFwiLFwiJmd0cmRvdDtcIjpcIuKLl1wiLFwiJmd0cmVxbGVzcztcIjpcIuKLm1wiLFwiJmd0cmVxcWxlc3M7XCI6XCLiqoxcIixcIiZndHJsZXNzO1wiOlwi4om3XCIsXCImZ3Ryc2ltO1wiOlwi4omzXCIsXCImZ3ZlcnRuZXFxO1wiOlwi4omp77iAXCIsXCImZ3ZuRTtcIjpcIuKJqe+4gFwiLFwiJmhBcnI7XCI6XCLih5RcIixcIiZoYWlyc3A7XCI6XCLigIpcIixcIiZoYWxmO1wiOlwiwr1cIixcIiZoYW1pbHQ7XCI6XCLihItcIixcIiZoYXJkY3k7XCI6XCLRilwiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZoYXJyY2lyO1wiOlwi4qWIXCIsXCImaGFycnc7XCI6XCLihq1cIixcIiZoYmFyO1wiOlwi4oSPXCIsXCImaGNpcmM7XCI6XCLEpVwiLFwiJmhlYXJ0cztcIjpcIuKZpVwiLFwiJmhlYXJ0c3VpdDtcIjpcIuKZpVwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJmhlcmNvbjtcIjpcIuKKuVwiLFwiJmhmcjtcIjpcIvCdlKVcIixcIiZoa3NlYXJvdztcIjpcIuKkpVwiLFwiJmhrc3dhcm93O1wiOlwi4qSmXCIsXCImaG9hcnI7XCI6XCLih79cIixcIiZob210aHQ7XCI6XCLiiLtcIixcIiZob29rbGVmdGFycm93O1wiOlwi4oapXCIsXCImaG9va3JpZ2h0YXJyb3c7XCI6XCLihqpcIixcIiZob3BmO1wiOlwi8J2VmVwiLFwiJmhvcmJhcjtcIjpcIuKAlVwiLFwiJmhzY3I7XCI6XCLwnZK9XCIsXCImaHNsYXNoO1wiOlwi4oSPXCIsXCImaHN0cm9rO1wiOlwixKdcIixcIiZoeWJ1bGw7XCI6XCLigYNcIixcIiZoeXBoZW47XCI6XCLigJBcIixcIiZpYWN1dGVcIjpcIsOtXCIsXCImaWFjdXRlO1wiOlwiw61cIixcIiZpYztcIjpcIuKBo1wiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpY3k7XCI6XCLQuFwiLFwiJmllY3k7XCI6XCLQtVwiLFwiJmlleGNsXCI6XCLCoVwiLFwiJmlleGNsO1wiOlwiwqFcIixcIiZpZmY7XCI6XCLih5RcIixcIiZpZnI7XCI6XCLwnZSmXCIsXCImaWdyYXZlXCI6XCLDrFwiLFwiJmlncmF2ZTtcIjpcIsOsXCIsXCImaWk7XCI6XCLihYhcIixcIiZpaWlpbnQ7XCI6XCLiqIxcIixcIiZpaWludDtcIjpcIuKIrVwiLFwiJmlpbmZpbjtcIjpcIuKnnFwiLFwiJmlpb3RhO1wiOlwi4oSpXCIsXCImaWpsaWc7XCI6XCLEs1wiLFwiJmltYWNyO1wiOlwixKtcIixcIiZpbWFnZTtcIjpcIuKEkVwiLFwiJmltYWdsaW5lO1wiOlwi4oSQXCIsXCImaW1hZ3BhcnQ7XCI6XCLihJFcIixcIiZpbWF0aDtcIjpcIsSxXCIsXCImaW1vZjtcIjpcIuKKt1wiLFwiJmltcGVkO1wiOlwixrVcIixcIiZpbjtcIjpcIuKIiFwiLFwiJmluY2FyZTtcIjpcIuKEhVwiLFwiJmluZmluO1wiOlwi4oieXCIsXCImaW5maW50aWU7XCI6XCLip51cIixcIiZpbm9kb3Q7XCI6XCLEsVwiLFwiJmludDtcIjpcIuKIq1wiLFwiJmludGNhbDtcIjpcIuKKulwiLFwiJmludGVnZXJzO1wiOlwi4oSkXCIsXCImaW50ZXJjYWw7XCI6XCLiirpcIixcIiZpbnRsYXJoaztcIjpcIuKol1wiLFwiJmludHByb2Q7XCI6XCLiqLxcIixcIiZpb2N5O1wiOlwi0ZFcIixcIiZpb2dvbjtcIjpcIsSvXCIsXCImaW9wZjtcIjpcIvCdlZpcIixcIiZpb3RhO1wiOlwizrlcIixcIiZpcHJvZDtcIjpcIuKovFwiLFwiJmlxdWVzdFwiOlwiwr9cIixcIiZpcXVlc3Q7XCI6XCLCv1wiLFwiJmlzY3I7XCI6XCLwnZK+XCIsXCImaXNpbjtcIjpcIuKIiFwiLFwiJmlzaW5FO1wiOlwi4ou5XCIsXCImaXNpbmRvdDtcIjpcIuKLtVwiLFwiJmlzaW5zO1wiOlwi4ou0XCIsXCImaXNpbnN2O1wiOlwi4ouzXCIsXCImaXNpbnY7XCI6XCLiiIhcIixcIiZpdDtcIjpcIuKBolwiLFwiJml0aWxkZTtcIjpcIsSpXCIsXCImaXVrY3k7XCI6XCLRllwiLFwiJml1bWxcIjpcIsOvXCIsXCImaXVtbDtcIjpcIsOvXCIsXCImamNpcmM7XCI6XCLEtVwiLFwiJmpjeTtcIjpcItC5XCIsXCImamZyO1wiOlwi8J2Up1wiLFwiJmptYXRoO1wiOlwiyLdcIixcIiZqb3BmO1wiOlwi8J2Vm1wiLFwiJmpzY3I7XCI6XCLwnZK/XCIsXCImanNlcmN5O1wiOlwi0ZhcIixcIiZqdWtjeTtcIjpcItGUXCIsXCIma2FwcGE7XCI6XCLOulwiLFwiJmthcHBhdjtcIjpcIs+wXCIsXCIma2NlZGlsO1wiOlwixLdcIixcIiZrY3k7XCI6XCLQulwiLFwiJmtmcjtcIjpcIvCdlKhcIixcIiZrZ3JlZW47XCI6XCLEuFwiLFwiJmtoY3k7XCI6XCLRhVwiLFwiJmtqY3k7XCI6XCLRnFwiLFwiJmtvcGY7XCI6XCLwnZWcXCIsXCIma3NjcjtcIjpcIvCdk4BcIixcIiZsQWFycjtcIjpcIuKHmlwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZsQXRhaWw7XCI6XCLipJtcIixcIiZsQmFycjtcIjpcIuKkjlwiLFwiJmxFO1wiOlwi4ommXCIsXCImbEVnO1wiOlwi4qqLXCIsXCImbEhhcjtcIjpcIuKlolwiLFwiJmxhY3V0ZTtcIjpcIsS6XCIsXCImbGFlbXB0eXY7XCI6XCLiprRcIixcIiZsYWdyYW47XCI6XCLihJJcIixcIiZsYW1iZGE7XCI6XCLOu1wiLFwiJmxhbmc7XCI6XCLin6hcIixcIiZsYW5nZDtcIjpcIuKmkVwiLFwiJmxhbmdsZTtcIjpcIuKfqFwiLFwiJmxhcDtcIjpcIuKqhVwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZsYXJyO1wiOlwi4oaQXCIsXCImbGFycmI7XCI6XCLih6RcIixcIiZsYXJyYmZzO1wiOlwi4qSfXCIsXCImbGFycmZzO1wiOlwi4qSdXCIsXCImbGFycmhrO1wiOlwi4oapXCIsXCImbGFycmxwO1wiOlwi4oarXCIsXCImbGFycnBsO1wiOlwi4qS5XCIsXCImbGFycnNpbTtcIjpcIuKls1wiLFwiJmxhcnJ0bDtcIjpcIuKGolwiLFwiJmxhdDtcIjpcIuKqq1wiLFwiJmxhdGFpbDtcIjpcIuKkmVwiLFwiJmxhdGU7XCI6XCLiqq1cIixcIiZsYXRlcztcIjpcIuKqre+4gFwiLFwiJmxiYXJyO1wiOlwi4qSMXCIsXCImbGJicms7XCI6XCLinbJcIixcIiZsYnJhY2U7XCI6XCJ7XCIsXCImbGJyYWNrO1wiOlwiW1wiLFwiJmxicmtlO1wiOlwi4qaLXCIsXCImbGJya3NsZDtcIjpcIuKmj1wiLFwiJmxicmtzbHU7XCI6XCLipo1cIixcIiZsY2Fyb247XCI6XCLEvlwiLFwiJmxjZWRpbDtcIjpcIsS8XCIsXCImbGNlaWw7XCI6XCLijIhcIixcIiZsY3ViO1wiOlwie1wiLFwiJmxjeTtcIjpcItC7XCIsXCImbGRjYTtcIjpcIuKktlwiLFwiJmxkcXVvO1wiOlwi4oCcXCIsXCImbGRxdW9yO1wiOlwi4oCeXCIsXCImbGRyZGhhcjtcIjpcIuKlp1wiLFwiJmxkcnVzaGFyO1wiOlwi4qWLXCIsXCImbGRzaDtcIjpcIuKGslwiLFwiJmxlO1wiOlwi4omkXCIsXCImbGVmdGFycm93O1wiOlwi4oaQXCIsXCImbGVmdGFycm93dGFpbDtcIjpcIuKGolwiLFwiJmxlZnRoYXJwb29uZG93bjtcIjpcIuKGvVwiLFwiJmxlZnRoYXJwb29udXA7XCI6XCLihrxcIixcIiZsZWZ0bGVmdGFycm93cztcIjpcIuKHh1wiLFwiJmxlZnRyaWdodGFycm93O1wiOlwi4oaUXCIsXCImbGVmdHJpZ2h0YXJyb3dzO1wiOlwi4oeGXCIsXCImbGVmdHJpZ2h0aGFycG9vbnM7XCI6XCLih4tcIixcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiOlwi4oatXCIsXCImbGVmdHRocmVldGltZXM7XCI6XCLii4tcIixcIiZsZWc7XCI6XCLii5pcIixcIiZsZXE7XCI6XCLiiaRcIixcIiZsZXFxO1wiOlwi4ommXCIsXCImbGVxc2xhbnQ7XCI6XCLiqb1cIixcIiZsZXM7XCI6XCLiqb1cIixcIiZsZXNjYztcIjpcIuKqqFwiLFwiJmxlc2RvdDtcIjpcIuKpv1wiLFwiJmxlc2RvdG87XCI6XCLiqoFcIixcIiZsZXNkb3RvcjtcIjpcIuKqg1wiLFwiJmxlc2c7XCI6XCLii5rvuIBcIixcIiZsZXNnZXM7XCI6XCLiqpNcIixcIiZsZXNzYXBwcm94O1wiOlwi4qqFXCIsXCImbGVzc2RvdDtcIjpcIuKLllwiLFwiJmxlc3NlcWd0cjtcIjpcIuKLmlwiLFwiJmxlc3NlcXFndHI7XCI6XCLiqotcIixcIiZsZXNzZ3RyO1wiOlwi4om2XCIsXCImbGVzc3NpbTtcIjpcIuKJslwiLFwiJmxmaXNodDtcIjpcIuKlvFwiLFwiJmxmbG9vcjtcIjpcIuKMilwiLFwiJmxmcjtcIjpcIvCdlKlcIixcIiZsZztcIjpcIuKJtlwiLFwiJmxnRTtcIjpcIuKqkVwiLFwiJmxoYXJkO1wiOlwi4oa9XCIsXCImbGhhcnU7XCI6XCLihrxcIixcIiZsaGFydWw7XCI6XCLipapcIixcIiZsaGJsaztcIjpcIuKWhFwiLFwiJmxqY3k7XCI6XCLRmVwiLFwiJmxsO1wiOlwi4omqXCIsXCImbGxhcnI7XCI6XCLih4dcIixcIiZsbGNvcm5lcjtcIjpcIuKMnlwiLFwiJmxsaGFyZDtcIjpcIuKlq1wiLFwiJmxsdHJpO1wiOlwi4pe6XCIsXCImbG1pZG90O1wiOlwixYBcIixcIiZsbW91c3Q7XCI6XCLijrBcIixcIiZsbW91c3RhY2hlO1wiOlwi4o6wXCIsXCImbG5FO1wiOlwi4omoXCIsXCImbG5hcDtcIjpcIuKqiVwiLFwiJmxuYXBwcm94O1wiOlwi4qqJXCIsXCImbG5lO1wiOlwi4qqHXCIsXCImbG5lcTtcIjpcIuKqh1wiLFwiJmxuZXFxO1wiOlwi4omoXCIsXCImbG5zaW07XCI6XCLii6ZcIixcIiZsb2FuZztcIjpcIuKfrFwiLFwiJmxvYXJyO1wiOlwi4oe9XCIsXCImbG9icms7XCI6XCLin6ZcIixcIiZsb25nbGVmdGFycm93O1wiOlwi4p+1XCIsXCImbG9uZ2xlZnRyaWdodGFycm93O1wiOlwi4p+3XCIsXCImbG9uZ21hcHN0bztcIjpcIuKfvFwiLFwiJmxvbmdyaWdodGFycm93O1wiOlwi4p+2XCIsXCImbG9vcGFycm93bGVmdDtcIjpcIuKGq1wiLFwiJmxvb3BhcnJvd3JpZ2h0O1wiOlwi4oasXCIsXCImbG9wYXI7XCI6XCLipoVcIixcIiZsb3BmO1wiOlwi8J2VnVwiLFwiJmxvcGx1cztcIjpcIuKorVwiLFwiJmxvdGltZXM7XCI6XCLiqLRcIixcIiZsb3dhc3Q7XCI6XCLiiJdcIixcIiZsb3diYXI7XCI6XCJfXCIsXCImbG96O1wiOlwi4peKXCIsXCImbG96ZW5nZTtcIjpcIuKXilwiLFwiJmxvemY7XCI6XCLip6tcIixcIiZscGFyO1wiOlwiKFwiLFwiJmxwYXJsdDtcIjpcIuKmk1wiLFwiJmxyYXJyO1wiOlwi4oeGXCIsXCImbHJjb3JuZXI7XCI6XCLijJ9cIixcIiZscmhhcjtcIjpcIuKHi1wiLFwiJmxyaGFyZDtcIjpcIuKlrVwiLFwiJmxybTtcIjpcIuKAjlwiLFwiJmxydHJpO1wiOlwi4oq/XCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImbHNjcjtcIjpcIvCdk4FcIixcIiZsc2g7XCI6XCLihrBcIixcIiZsc2ltO1wiOlwi4omyXCIsXCImbHNpbWU7XCI6XCLiqo1cIixcIiZsc2ltZztcIjpcIuKqj1wiLFwiJmxzcWI7XCI6XCJbXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZsc3F1b3I7XCI6XCLigJpcIixcIiZsc3Ryb2s7XCI6XCLFglwiLFwiJmx0XCI6XCI8XCIsXCImbHQ7XCI6XCI8XCIsXCImbHRjYztcIjpcIuKqplwiLFwiJmx0Y2lyO1wiOlwi4qm5XCIsXCImbHRkb3Q7XCI6XCLii5ZcIixcIiZsdGhyZWU7XCI6XCLii4tcIixcIiZsdGltZXM7XCI6XCLii4lcIixcIiZsdGxhcnI7XCI6XCLipbZcIixcIiZsdHF1ZXN0O1wiOlwi4qm7XCIsXCImbHRyUGFyO1wiOlwi4qaWXCIsXCImbHRyaTtcIjpcIuKXg1wiLFwiJmx0cmllO1wiOlwi4oq0XCIsXCImbHRyaWY7XCI6XCLil4JcIixcIiZsdXJkc2hhcjtcIjpcIuKlilwiLFwiJmx1cnVoYXI7XCI6XCLipaZcIixcIiZsdmVydG5lcXE7XCI6XCLiiajvuIBcIixcIiZsdm5FO1wiOlwi4omo77iAXCIsXCImbUREb3Q7XCI6XCLiiLpcIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJm1hbGU7XCI6XCLimYJcIixcIiZtYWx0O1wiOlwi4pygXCIsXCImbWFsdGVzZTtcIjpcIuKcoFwiLFwiJm1hcDtcIjpcIuKGplwiLFwiJm1hcHN0bztcIjpcIuKGplwiLFwiJm1hcHN0b2Rvd247XCI6XCLihqdcIixcIiZtYXBzdG9sZWZ0O1wiOlwi4oakXCIsXCImbWFwc3RvdXA7XCI6XCLihqVcIixcIiZtYXJrZXI7XCI6XCLilq5cIixcIiZtY29tbWE7XCI6XCLiqKlcIixcIiZtY3k7XCI6XCLQvFwiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbWVhc3VyZWRhbmdsZTtcIjpcIuKIoVwiLFwiJm1mcjtcIjpcIvCdlKpcIixcIiZtaG87XCI6XCLihKdcIixcIiZtaWNyb1wiOlwiwrVcIixcIiZtaWNybztcIjpcIsK1XCIsXCImbWlkO1wiOlwi4oijXCIsXCImbWlkYXN0O1wiOlwiKlwiLFwiJm1pZGNpcjtcIjpcIuKrsFwiLFwiJm1pZGRvdFwiOlwiwrdcIixcIiZtaWRkb3Q7XCI6XCLCt1wiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbWludXNiO1wiOlwi4oqfXCIsXCImbWludXNkO1wiOlwi4oi4XCIsXCImbWludXNkdTtcIjpcIuKoqlwiLFwiJm1sY3A7XCI6XCLiq5tcIixcIiZtbGRyO1wiOlwi4oCmXCIsXCImbW5wbHVzO1wiOlwi4oiTXCIsXCImbW9kZWxzO1wiOlwi4oqnXCIsXCImbW9wZjtcIjpcIvCdlZ5cIixcIiZtcDtcIjpcIuKIk1wiLFwiJm1zY3I7XCI6XCLwnZOCXCIsXCImbXN0cG9zO1wiOlwi4oi+XCIsXCImbXU7XCI6XCLOvFwiLFwiJm11bHRpbWFwO1wiOlwi4oq4XCIsXCImbXVtYXA7XCI6XCLiirhcIixcIiZuR2c7XCI6XCLii5nMuFwiLFwiJm5HdDtcIjpcIuKJq+KDklwiLFwiJm5HdHY7XCI6XCLiiavMuFwiLFwiJm5MZWZ0YXJyb3c7XCI6XCLih41cIixcIiZuTGVmdHJpZ2h0YXJyb3c7XCI6XCLih45cIixcIiZuTGw7XCI6XCLii5jMuFwiLFwiJm5MdDtcIjpcIuKJquKDklwiLFwiJm5MdHY7XCI6XCLiiarMuFwiLFwiJm5SaWdodGFycm93O1wiOlwi4oePXCIsXCImblZEYXNoO1wiOlwi4oqvXCIsXCImblZkYXNoO1wiOlwi4oquXCIsXCImbmFibGE7XCI6XCLiiIdcIixcIiZuYWN1dGU7XCI6XCLFhFwiLFwiJm5hbmc7XCI6XCLiiKDig5JcIixcIiZuYXA7XCI6XCLiiYlcIixcIiZuYXBFO1wiOlwi4qmwzLhcIixcIiZuYXBpZDtcIjpcIuKJi8y4XCIsXCImbmFwb3M7XCI6XCLFiVwiLFwiJm5hcHByb3g7XCI6XCLiiYlcIixcIiZuYXR1cjtcIjpcIuKZrlwiLFwiJm5hdHVyYWw7XCI6XCLima5cIixcIiZuYXR1cmFscztcIjpcIuKElVwiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImbmJ1bXA7XCI6XCLiiY7MuFwiLFwiJm5idW1wZTtcIjpcIuKJj8y4XCIsXCImbmNhcDtcIjpcIuKpg1wiLFwiJm5jYXJvbjtcIjpcIsWIXCIsXCImbmNlZGlsO1wiOlwixYZcIixcIiZuY29uZztcIjpcIuKJh1wiLFwiJm5jb25nZG90O1wiOlwi4qmtzLhcIixcIiZuY3VwO1wiOlwi4qmCXCIsXCImbmN5O1wiOlwi0L1cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm5lO1wiOlwi4omgXCIsXCImbmVBcnI7XCI6XCLih5dcIixcIiZuZWFyaGs7XCI6XCLipKRcIixcIiZuZWFycjtcIjpcIuKGl1wiLFwiJm5lYXJyb3c7XCI6XCLihpdcIixcIiZuZWRvdDtcIjpcIuKJkMy4XCIsXCImbmVxdWl2O1wiOlwi4omiXCIsXCImbmVzZWFyO1wiOlwi4qSoXCIsXCImbmVzaW07XCI6XCLiiYLMuFwiLFwiJm5leGlzdDtcIjpcIuKIhFwiLFwiJm5leGlzdHM7XCI6XCLiiIRcIixcIiZuZnI7XCI6XCLwnZSrXCIsXCImbmdFO1wiOlwi4omnzLhcIixcIiZuZ2U7XCI6XCLiibFcIixcIiZuZ2VxO1wiOlwi4omxXCIsXCImbmdlcXE7XCI6XCLiiafMuFwiLFwiJm5nZXFzbGFudDtcIjpcIuKpvsy4XCIsXCImbmdlcztcIjpcIuKpvsy4XCIsXCImbmdzaW07XCI6XCLiibVcIixcIiZuZ3Q7XCI6XCLiia9cIixcIiZuZ3RyO1wiOlwi4omvXCIsXCImbmhBcnI7XCI6XCLih45cIixcIiZuaGFycjtcIjpcIuKGrlwiLFwiJm5ocGFyO1wiOlwi4quyXCIsXCImbmk7XCI6XCLiiItcIixcIiZuaXM7XCI6XCLii7xcIixcIiZuaXNkO1wiOlwi4ou6XCIsXCImbml2O1wiOlwi4oiLXCIsXCImbmpjeTtcIjpcItGaXCIsXCImbmxBcnI7XCI6XCLih41cIixcIiZubEU7XCI6XCLiiabMuFwiLFwiJm5sYXJyO1wiOlwi4oaaXCIsXCImbmxkcjtcIjpcIuKApVwiLFwiJm5sZTtcIjpcIuKJsFwiLFwiJm5sZWZ0YXJyb3c7XCI6XCLihppcIixcIiZubGVmdHJpZ2h0YXJyb3c7XCI6XCLihq5cIixcIiZubGVxO1wiOlwi4omwXCIsXCImbmxlcXE7XCI6XCLiiabMuFwiLFwiJm5sZXFzbGFudDtcIjpcIuKpvcy4XCIsXCImbmxlcztcIjpcIuKpvcy4XCIsXCImbmxlc3M7XCI6XCLiia5cIixcIiZubHNpbTtcIjpcIuKJtFwiLFwiJm5sdDtcIjpcIuKJrlwiLFwiJm5sdHJpO1wiOlwi4ouqXCIsXCImbmx0cmllO1wiOlwi4ousXCIsXCImbm1pZDtcIjpcIuKIpFwiLFwiJm5vcGY7XCI6XCLwnZWfXCIsXCImbm90XCI6XCLCrFwiLFwiJm5vdDtcIjpcIsKsXCIsXCImbm90aW47XCI6XCLiiIlcIixcIiZub3RpbkU7XCI6XCLii7nMuFwiLFwiJm5vdGluZG90O1wiOlwi4ou1zLhcIixcIiZub3RpbnZhO1wiOlwi4oiJXCIsXCImbm90aW52YjtcIjpcIuKLt1wiLFwiJm5vdGludmM7XCI6XCLii7ZcIixcIiZub3RuaTtcIjpcIuKIjFwiLFwiJm5vdG5pdmE7XCI6XCLiiIxcIixcIiZub3RuaXZiO1wiOlwi4ou+XCIsXCImbm90bml2YztcIjpcIuKLvVwiLFwiJm5wYXI7XCI6XCLiiKZcIixcIiZucGFyYWxsZWw7XCI6XCLiiKZcIixcIiZucGFyc2w7XCI6XCLiq73ig6VcIixcIiZucGFydDtcIjpcIuKIgsy4XCIsXCImbnBvbGludDtcIjpcIuKolFwiLFwiJm5wcjtcIjpcIuKKgFwiLFwiJm5wcmN1ZTtcIjpcIuKLoFwiLFwiJm5wcmU7XCI6XCLiqq/MuFwiLFwiJm5wcmVjO1wiOlwi4oqAXCIsXCImbnByZWNlcTtcIjpcIuKqr8y4XCIsXCImbnJBcnI7XCI6XCLih49cIixcIiZucmFycjtcIjpcIuKGm1wiLFwiJm5yYXJyYztcIjpcIuKks8y4XCIsXCImbnJhcnJ3O1wiOlwi4oadzLhcIixcIiZucmlnaHRhcnJvdztcIjpcIuKGm1wiLFwiJm5ydHJpO1wiOlwi4ourXCIsXCImbnJ0cmllO1wiOlwi4outXCIsXCImbnNjO1wiOlwi4oqBXCIsXCImbnNjY3VlO1wiOlwi4ouhXCIsXCImbnNjZTtcIjpcIuKqsMy4XCIsXCImbnNjcjtcIjpcIvCdk4NcIixcIiZuc2hvcnRtaWQ7XCI6XCLiiKRcIixcIiZuc2hvcnRwYXJhbGxlbDtcIjpcIuKIplwiLFwiJm5zaW07XCI6XCLiiYFcIixcIiZuc2ltZTtcIjpcIuKJhFwiLFwiJm5zaW1lcTtcIjpcIuKJhFwiLFwiJm5zbWlkO1wiOlwi4oikXCIsXCImbnNwYXI7XCI6XCLiiKZcIixcIiZuc3FzdWJlO1wiOlwi4ouiXCIsXCImbnNxc3VwZTtcIjpcIuKLo1wiLFwiJm5zdWI7XCI6XCLiioRcIixcIiZuc3ViRTtcIjpcIuKrhcy4XCIsXCImbnN1YmU7XCI6XCLiiohcIixcIiZuc3Vic2V0O1wiOlwi4oqC4oOSXCIsXCImbnN1YnNldGVxO1wiOlwi4oqIXCIsXCImbnN1YnNldGVxcTtcIjpcIuKrhcy4XCIsXCImbnN1Y2M7XCI6XCLiioFcIixcIiZuc3VjY2VxO1wiOlwi4qqwzLhcIixcIiZuc3VwO1wiOlwi4oqFXCIsXCImbnN1cEU7XCI6XCLiq4bMuFwiLFwiJm5zdXBlO1wiOlwi4oqJXCIsXCImbnN1cHNldDtcIjpcIuKKg+KDklwiLFwiJm5zdXBzZXRlcTtcIjpcIuKKiVwiLFwiJm5zdXBzZXRlcXE7XCI6XCLiq4bMuFwiLFwiJm50Z2w7XCI6XCLiiblcIixcIiZudGlsZGVcIjpcIsOxXCIsXCImbnRpbGRlO1wiOlwiw7FcIixcIiZudGxnO1wiOlwi4om4XCIsXCImbnRyaWFuZ2xlbGVmdDtcIjpcIuKLqlwiLFwiJm50cmlhbmdsZWxlZnRlcTtcIjpcIuKLrFwiLFwiJm50cmlhbmdsZXJpZ2h0O1wiOlwi4ourXCIsXCImbnRyaWFuZ2xlcmlnaHRlcTtcIjpcIuKLrVwiLFwiJm51O1wiOlwizr1cIixcIiZudW07XCI6XCIjXCIsXCImbnVtZXJvO1wiOlwi4oSWXCIsXCImbnVtc3A7XCI6XCLigIdcIixcIiZudkRhc2g7XCI6XCLiiq1cIixcIiZudkhhcnI7XCI6XCLipIRcIixcIiZudmFwO1wiOlwi4omN4oOSXCIsXCImbnZkYXNoO1wiOlwi4oqsXCIsXCImbnZnZTtcIjpcIuKJpeKDklwiLFwiJm52Z3Q7XCI6XCI+4oOSXCIsXCImbnZpbmZpbjtcIjpcIuKnnlwiLFwiJm52bEFycjtcIjpcIuKkglwiLFwiJm52bGU7XCI6XCLiiaTig5JcIixcIiZudmx0O1wiOlwiPOKDklwiLFwiJm52bHRyaWU7XCI6XCLiirTig5JcIixcIiZudnJBcnI7XCI6XCLipINcIixcIiZudnJ0cmllO1wiOlwi4oq14oOSXCIsXCImbnZzaW07XCI6XCLiiLzig5JcIixcIiZud0FycjtcIjpcIuKHllwiLFwiJm53YXJoaztcIjpcIuKko1wiLFwiJm53YXJyO1wiOlwi4oaWXCIsXCImbndhcnJvdztcIjpcIuKGllwiLFwiJm53bmVhcjtcIjpcIuKkp1wiLFwiJm9TO1wiOlwi4pOIXCIsXCImb2FjdXRlXCI6XCLDs1wiLFwiJm9hY3V0ZTtcIjpcIsOzXCIsXCImb2FzdDtcIjpcIuKKm1wiLFwiJm9jaXI7XCI6XCLiippcIixcIiZvY2lyY1wiOlwiw7RcIixcIiZvY2lyYztcIjpcIsO0XCIsXCImb2N5O1wiOlwi0L5cIixcIiZvZGFzaDtcIjpcIuKKnVwiLFwiJm9kYmxhYztcIjpcIsWRXCIsXCImb2RpdjtcIjpcIuKouFwiLFwiJm9kb3Q7XCI6XCLiiplcIixcIiZvZHNvbGQ7XCI6XCLiprxcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImb2ZjaXI7XCI6XCLipr9cIixcIiZvZnI7XCI6XCLwnZSsXCIsXCImb2dvbjtcIjpcIsubXCIsXCImb2dyYXZlXCI6XCLDslwiLFwiJm9ncmF2ZTtcIjpcIsOyXCIsXCImb2d0O1wiOlwi4qeBXCIsXCImb2hiYXI7XCI6XCLiprVcIixcIiZvaG07XCI6XCLOqVwiLFwiJm9pbnQ7XCI6XCLiiK5cIixcIiZvbGFycjtcIjpcIuKGulwiLFwiJm9sY2lyO1wiOlwi4qa+XCIsXCImb2xjcm9zcztcIjpcIuKmu1wiLFwiJm9saW5lO1wiOlwi4oC+XCIsXCImb2x0O1wiOlwi4qeAXCIsXCImb21hY3I7XCI6XCLFjVwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZvbWlkO1wiOlwi4qa2XCIsXCImb21pbnVzO1wiOlwi4oqWXCIsXCImb29wZjtcIjpcIvCdlaBcIixcIiZvcGFyO1wiOlwi4qa3XCIsXCImb3BlcnA7XCI6XCLiprlcIixcIiZvcGx1cztcIjpcIuKKlVwiLFwiJm9yO1wiOlwi4oioXCIsXCImb3JhcnI7XCI6XCLihrtcIixcIiZvcmQ7XCI6XCLiqZ1cIixcIiZvcmRlcjtcIjpcIuKEtFwiLFwiJm9yZGVyb2Y7XCI6XCLihLRcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJm9yZG1cIjpcIsK6XCIsXCImb3JkbTtcIjpcIsK6XCIsXCImb3JpZ29mO1wiOlwi4oq2XCIsXCImb3JvcjtcIjpcIuKpllwiLFwiJm9yc2xvcGU7XCI6XCLiqZdcIixcIiZvcnY7XCI6XCLiqZtcIixcIiZvc2NyO1wiOlwi4oS0XCIsXCImb3NsYXNoXCI6XCLDuFwiLFwiJm9zbGFzaDtcIjpcIsO4XCIsXCImb3NvbDtcIjpcIuKKmFwiLFwiJm90aWxkZVwiOlwiw7VcIixcIiZvdGlsZGU7XCI6XCLDtVwiLFwiJm90aW1lcztcIjpcIuKKl1wiLFwiJm90aW1lc2FzO1wiOlwi4qi2XCIsXCImb3VtbFwiOlwiw7ZcIixcIiZvdW1sO1wiOlwiw7ZcIixcIiZvdmJhcjtcIjpcIuKMvVwiLFwiJnBhcjtcIjpcIuKIpVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImcGFyYWxsZWw7XCI6XCLiiKVcIixcIiZwYXJzaW07XCI6XCLiq7NcIixcIiZwYXJzbDtcIjpcIuKrvVwiLFwiJnBhcnQ7XCI6XCLiiIJcIixcIiZwY3k7XCI6XCLQv1wiLFwiJnBlcmNudDtcIjpcIiVcIixcIiZwZXJpb2Q7XCI6XCIuXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImcGVycDtcIjpcIuKKpVwiLFwiJnBlcnRlbms7XCI6XCLigLFcIixcIiZwZnI7XCI6XCLwnZStXCIsXCImcGhpO1wiOlwiz4ZcIixcIiZwaGl2O1wiOlwiz5VcIixcIiZwaG1tYXQ7XCI6XCLihLNcIixcIiZwaG9uZTtcIjpcIuKYjlwiLFwiJnBpO1wiOlwiz4BcIixcIiZwaXRjaGZvcms7XCI6XCLii5RcIixcIiZwaXY7XCI6XCLPllwiLFwiJnBsYW5jaztcIjpcIuKEj1wiLFwiJnBsYW5ja2g7XCI6XCLihI5cIixcIiZwbGFua3Y7XCI6XCLihI9cIixcIiZwbHVzO1wiOlwiK1wiLFwiJnBsdXNhY2lyO1wiOlwi4qijXCIsXCImcGx1c2I7XCI6XCLiip5cIixcIiZwbHVzY2lyO1wiOlwi4qiiXCIsXCImcGx1c2RvO1wiOlwi4oiUXCIsXCImcGx1c2R1O1wiOlwi4qilXCIsXCImcGx1c2U7XCI6XCLiqbJcIixcIiZwbHVzbW5cIjpcIsKxXCIsXCImcGx1c21uO1wiOlwiwrFcIixcIiZwbHVzc2ltO1wiOlwi4qimXCIsXCImcGx1c3R3bztcIjpcIuKop1wiLFwiJnBtO1wiOlwiwrFcIixcIiZwb2ludGludDtcIjpcIuKolVwiLFwiJnBvcGY7XCI6XCLwnZWhXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJnByO1wiOlwi4om6XCIsXCImcHJFO1wiOlwi4qqzXCIsXCImcHJhcDtcIjpcIuKqt1wiLFwiJnByY3VlO1wiOlwi4om8XCIsXCImcHJlO1wiOlwi4qqvXCIsXCImcHJlYztcIjpcIuKJulwiLFwiJnByZWNhcHByb3g7XCI6XCLiqrdcIixcIiZwcmVjY3VybHllcTtcIjpcIuKJvFwiLFwiJnByZWNlcTtcIjpcIuKqr1wiLFwiJnByZWNuYXBwcm94O1wiOlwi4qq5XCIsXCImcHJlY25lcXE7XCI6XCLiqrVcIixcIiZwcmVjbnNpbTtcIjpcIuKLqFwiLFwiJnByZWNzaW07XCI6XCLiib5cIixcIiZwcmltZTtcIjpcIuKAslwiLFwiJnByaW1lcztcIjpcIuKEmVwiLFwiJnBybkU7XCI6XCLiqrVcIixcIiZwcm5hcDtcIjpcIuKquVwiLFwiJnBybnNpbTtcIjpcIuKLqFwiLFwiJnByb2Q7XCI6XCLiiI9cIixcIiZwcm9mYWxhcjtcIjpcIuKMrlwiLFwiJnByb2ZsaW5lO1wiOlwi4oySXCIsXCImcHJvZnN1cmY7XCI6XCLijJNcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImcHJvcHRvO1wiOlwi4oidXCIsXCImcHJzaW07XCI6XCLiib5cIixcIiZwcnVyZWw7XCI6XCLiirBcIixcIiZwc2NyO1wiOlwi8J2ThVwiLFwiJnBzaTtcIjpcIs+IXCIsXCImcHVuY3NwO1wiOlwi4oCIXCIsXCImcWZyO1wiOlwi8J2UrlwiLFwiJnFpbnQ7XCI6XCLiqIxcIixcIiZxb3BmO1wiOlwi8J2VolwiLFwiJnFwcmltZTtcIjpcIuKBl1wiLFwiJnFzY3I7XCI6XCLwnZOGXCIsXCImcXVhdGVybmlvbnM7XCI6XCLihI1cIixcIiZxdWF0aW50O1wiOlwi4qiWXCIsXCImcXVlc3Q7XCI6XCI/XCIsXCImcXVlc3RlcTtcIjpcIuKJn1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZyQWFycjtcIjpcIuKHm1wiLFwiJnJBcnI7XCI6XCLih5JcIixcIiZyQXRhaWw7XCI6XCLipJxcIixcIiZyQmFycjtcIjpcIuKkj1wiLFwiJnJIYXI7XCI6XCLipaRcIixcIiZyYWNlO1wiOlwi4oi9zLFcIixcIiZyYWN1dGU7XCI6XCLFlVwiLFwiJnJhZGljO1wiOlwi4oiaXCIsXCImcmFlbXB0eXY7XCI6XCLiprNcIixcIiZyYW5nO1wiOlwi4p+pXCIsXCImcmFuZ2Q7XCI6XCLippJcIixcIiZyYW5nZTtcIjpcIuKmpVwiLFwiJnJhbmdsZTtcIjpcIuKfqVwiLFwiJnJhcXVvXCI6XCLCu1wiLFwiJnJhcXVvO1wiOlwiwrtcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImcmFycmFwO1wiOlwi4qW1XCIsXCImcmFycmI7XCI6XCLih6VcIixcIiZyYXJyYmZzO1wiOlwi4qSgXCIsXCImcmFycmM7XCI6XCLipLNcIixcIiZyYXJyZnM7XCI6XCLipJ5cIixcIiZyYXJyaGs7XCI6XCLihqpcIixcIiZyYXJybHA7XCI6XCLihqxcIixcIiZyYXJycGw7XCI6XCLipYVcIixcIiZyYXJyc2ltO1wiOlwi4qW0XCIsXCImcmFycnRsO1wiOlwi4oajXCIsXCImcmFycnc7XCI6XCLihp1cIixcIiZyYXRhaWw7XCI6XCLipJpcIixcIiZyYXRpbztcIjpcIuKItlwiLFwiJnJhdGlvbmFscztcIjpcIuKEmlwiLFwiJnJiYXJyO1wiOlwi4qSNXCIsXCImcmJicms7XCI6XCLinbNcIixcIiZyYnJhY2U7XCI6XCJ9XCIsXCImcmJyYWNrO1wiOlwiXVwiLFwiJnJicmtlO1wiOlwi4qaMXCIsXCImcmJya3NsZDtcIjpcIuKmjlwiLFwiJnJicmtzbHU7XCI6XCLippBcIixcIiZyY2Fyb247XCI6XCLFmVwiLFwiJnJjZWRpbDtcIjpcIsWXXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZyY3ViO1wiOlwifVwiLFwiJnJjeTtcIjpcItGAXCIsXCImcmRjYTtcIjpcIuKkt1wiLFwiJnJkbGRoYXI7XCI6XCLipalcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJnJkcXVvcjtcIjpcIuKAnVwiLFwiJnJkc2g7XCI6XCLihrNcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImcmVhbGluZTtcIjpcIuKEm1wiLFwiJnJlYWxwYXJ0O1wiOlwi4oScXCIsXCImcmVhbHM7XCI6XCLihJ1cIixcIiZyZWN0O1wiOlwi4patXCIsXCImcmVnXCI6XCLCrlwiLFwiJnJlZztcIjpcIsKuXCIsXCImcmZpc2h0O1wiOlwi4qW9XCIsXCImcmZsb29yO1wiOlwi4oyLXCIsXCImcmZyO1wiOlwi8J2Ur1wiLFwiJnJoYXJkO1wiOlwi4oeBXCIsXCImcmhhcnU7XCI6XCLih4BcIixcIiZyaGFydWw7XCI6XCLipaxcIixcIiZyaG87XCI6XCLPgVwiLFwiJnJob3Y7XCI6XCLPsVwiLFwiJnJpZ2h0YXJyb3c7XCI6XCLihpJcIixcIiZyaWdodGFycm93dGFpbDtcIjpcIuKGo1wiLFwiJnJpZ2h0aGFycG9vbmRvd247XCI6XCLih4FcIixcIiZyaWdodGhhcnBvb251cDtcIjpcIuKHgFwiLFwiJnJpZ2h0bGVmdGFycm93cztcIjpcIuKHhFwiLFwiJnJpZ2h0bGVmdGhhcnBvb25zO1wiOlwi4oeMXCIsXCImcmlnaHRyaWdodGFycm93cztcIjpcIuKHiVwiLFwiJnJpZ2h0c3F1aWdhcnJvdztcIjpcIuKGnVwiLFwiJnJpZ2h0dGhyZWV0aW1lcztcIjpcIuKLjFwiLFwiJnJpbmc7XCI6XCLLmlwiLFwiJnJpc2luZ2RvdHNlcTtcIjpcIuKJk1wiLFwiJnJsYXJyO1wiOlwi4oeEXCIsXCImcmxoYXI7XCI6XCLih4xcIixcIiZybG07XCI6XCLigI9cIixcIiZybW91c3Q7XCI6XCLijrFcIixcIiZybW91c3RhY2hlO1wiOlwi4o6xXCIsXCImcm5taWQ7XCI6XCLiq65cIixcIiZyb2FuZztcIjpcIuKfrVwiLFwiJnJvYXJyO1wiOlwi4oe+XCIsXCImcm9icms7XCI6XCLin6dcIixcIiZyb3BhcjtcIjpcIuKmhlwiLFwiJnJvcGY7XCI6XCLwnZWjXCIsXCImcm9wbHVzO1wiOlwi4qiuXCIsXCImcm90aW1lcztcIjpcIuKotVwiLFwiJnJwYXI7XCI6XCIpXCIsXCImcnBhcmd0O1wiOlwi4qaUXCIsXCImcnBwb2xpbnQ7XCI6XCLiqJJcIixcIiZycmFycjtcIjpcIuKHiVwiLFwiJnJzYXF1bztcIjpcIuKAulwiLFwiJnJzY3I7XCI6XCLwnZOHXCIsXCImcnNoO1wiOlwi4oaxXCIsXCImcnNxYjtcIjpcIl1cIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnJzcXVvcjtcIjpcIuKAmVwiLFwiJnJ0aHJlZTtcIjpcIuKLjFwiLFwiJnJ0aW1lcztcIjpcIuKLilwiLFwiJnJ0cmk7XCI6XCLilrlcIixcIiZydHJpZTtcIjpcIuKKtVwiLFwiJnJ0cmlmO1wiOlwi4pa4XCIsXCImcnRyaWx0cmk7XCI6XCLip45cIixcIiZydWx1aGFyO1wiOlwi4qWoXCIsXCImcng7XCI6XCLihJ5cIixcIiZzYWN1dGU7XCI6XCLFm1wiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImc2M7XCI6XCLiibtcIixcIiZzY0U7XCI6XCLiqrRcIixcIiZzY2FwO1wiOlwi4qq4XCIsXCImc2Nhcm9uO1wiOlwixaFcIixcIiZzY2N1ZTtcIjpcIuKJvVwiLFwiJnNjZTtcIjpcIuKqsFwiLFwiJnNjZWRpbDtcIjpcIsWfXCIsXCImc2NpcmM7XCI6XCLFnVwiLFwiJnNjbkU7XCI6XCLiqrZcIixcIiZzY25hcDtcIjpcIuKqulwiLFwiJnNjbnNpbTtcIjpcIuKLqVwiLFwiJnNjcG9saW50O1wiOlwi4qiTXCIsXCImc2NzaW07XCI6XCLiib9cIixcIiZzY3k7XCI6XCLRgVwiLFwiJnNkb3Q7XCI6XCLii4VcIixcIiZzZG90YjtcIjpcIuKKoVwiLFwiJnNkb3RlO1wiOlwi4qmmXCIsXCImc2VBcnI7XCI6XCLih5hcIixcIiZzZWFyaGs7XCI6XCLipKVcIixcIiZzZWFycjtcIjpcIuKGmFwiLFwiJnNlYXJyb3c7XCI6XCLihphcIixcIiZzZWN0XCI6XCLCp1wiLFwiJnNlY3Q7XCI6XCLCp1wiLFwiJnNlbWk7XCI6XCI7XCIsXCImc2Vzd2FyO1wiOlwi4qSpXCIsXCImc2V0bWludXM7XCI6XCLiiJZcIixcIiZzZXRtbjtcIjpcIuKIllwiLFwiJnNleHQ7XCI6XCLinLZcIixcIiZzZnI7XCI6XCLwnZSwXCIsXCImc2Zyb3duO1wiOlwi4oyiXCIsXCImc2hhcnA7XCI6XCLima9cIixcIiZzaGNoY3k7XCI6XCLRiVwiLFwiJnNoY3k7XCI6XCLRiFwiLFwiJnNob3J0bWlkO1wiOlwi4oijXCIsXCImc2hvcnRwYXJhbGxlbDtcIjpcIuKIpVwiLFwiJnNoeVwiOlwiwq1cIixcIiZzaHk7XCI6XCLCrVwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hdjtcIjpcIs+CXCIsXCImc2ltO1wiOlwi4oi8XCIsXCImc2ltZG90O1wiOlwi4qmqXCIsXCImc2ltZTtcIjpcIuKJg1wiLFwiJnNpbWVxO1wiOlwi4omDXCIsXCImc2ltZztcIjpcIuKqnlwiLFwiJnNpbWdFO1wiOlwi4qqgXCIsXCImc2ltbDtcIjpcIuKqnVwiLFwiJnNpbWxFO1wiOlwi4qqfXCIsXCImc2ltbmU7XCI6XCLiiYZcIixcIiZzaW1wbHVzO1wiOlwi4qikXCIsXCImc2ltcmFycjtcIjpcIuKlslwiLFwiJnNsYXJyO1wiOlwi4oaQXCIsXCImc21hbGxzZXRtaW51cztcIjpcIuKIllwiLFwiJnNtYXNocDtcIjpcIuKos1wiLFwiJnNtZXBhcnNsO1wiOlwi4qekXCIsXCImc21pZDtcIjpcIuKIo1wiLFwiJnNtaWxlO1wiOlwi4oyjXCIsXCImc210O1wiOlwi4qqqXCIsXCImc210ZTtcIjpcIuKqrFwiLFwiJnNtdGVzO1wiOlwi4qqs77iAXCIsXCImc29mdGN5O1wiOlwi0YxcIixcIiZzb2w7XCI6XCIvXCIsXCImc29sYjtcIjpcIuKnhFwiLFwiJnNvbGJhcjtcIjpcIuKMv1wiLFwiJnNvcGY7XCI6XCLwnZWkXCIsXCImc3BhZGVzO1wiOlwi4pmgXCIsXCImc3BhZGVzdWl0O1wiOlwi4pmgXCIsXCImc3BhcjtcIjpcIuKIpVwiLFwiJnNxY2FwO1wiOlwi4oqTXCIsXCImc3FjYXBzO1wiOlwi4oqT77iAXCIsXCImc3FjdXA7XCI6XCLiipRcIixcIiZzcWN1cHM7XCI6XCLiipTvuIBcIixcIiZzcXN1YjtcIjpcIuKKj1wiLFwiJnNxc3ViZTtcIjpcIuKKkVwiLFwiJnNxc3Vic2V0O1wiOlwi4oqPXCIsXCImc3FzdWJzZXRlcTtcIjpcIuKKkVwiLFwiJnNxc3VwO1wiOlwi4oqQXCIsXCImc3FzdXBlO1wiOlwi4oqSXCIsXCImc3FzdXBzZXQ7XCI6XCLiipBcIixcIiZzcXN1cHNldGVxO1wiOlwi4oqSXCIsXCImc3F1O1wiOlwi4pahXCIsXCImc3F1YXJlO1wiOlwi4pahXCIsXCImc3F1YXJmO1wiOlwi4paqXCIsXCImc3F1ZjtcIjpcIuKWqlwiLFwiJnNyYXJyO1wiOlwi4oaSXCIsXCImc3NjcjtcIjpcIvCdk4hcIixcIiZzc2V0bW47XCI6XCLiiJZcIixcIiZzc21pbGU7XCI6XCLijKNcIixcIiZzc3RhcmY7XCI6XCLii4ZcIixcIiZzdGFyO1wiOlwi4piGXCIsXCImc3RhcmY7XCI6XCLimIVcIixcIiZzdHJhaWdodGVwc2lsb247XCI6XCLPtVwiLFwiJnN0cmFpZ2h0cGhpO1wiOlwiz5VcIixcIiZzdHJucztcIjpcIsKvXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3ViRTtcIjpcIuKrhVwiLFwiJnN1YmRvdDtcIjpcIuKqvVwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdWJlZG90O1wiOlwi4quDXCIsXCImc3VibXVsdDtcIjpcIuKrgVwiLFwiJnN1Ym5FO1wiOlwi4quLXCIsXCImc3VibmU7XCI6XCLiiopcIixcIiZzdWJwbHVzO1wiOlwi4qq/XCIsXCImc3VicmFycjtcIjpcIuKluVwiLFwiJnN1YnNldDtcIjpcIuKKglwiLFwiJnN1YnNldGVxO1wiOlwi4oqGXCIsXCImc3Vic2V0ZXFxO1wiOlwi4quFXCIsXCImc3Vic2V0bmVxO1wiOlwi4oqKXCIsXCImc3Vic2V0bmVxcTtcIjpcIuKri1wiLFwiJnN1YnNpbTtcIjpcIuKrh1wiLFwiJnN1YnN1YjtcIjpcIuKrlVwiLFwiJnN1YnN1cDtcIjpcIuKrk1wiLFwiJnN1Y2M7XCI6XCLiibtcIixcIiZzdWNjYXBwcm94O1wiOlwi4qq4XCIsXCImc3VjY2N1cmx5ZXE7XCI6XCLiib1cIixcIiZzdWNjZXE7XCI6XCLiqrBcIixcIiZzdWNjbmFwcHJveDtcIjpcIuKqulwiLFwiJnN1Y2NuZXFxO1wiOlwi4qq2XCIsXCImc3VjY25zaW07XCI6XCLii6lcIixcIiZzdWNjc2ltO1wiOlwi4om/XCIsXCImc3VtO1wiOlwi4oiRXCIsXCImc3VuZztcIjpcIuKZqlwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImc3VwMlwiOlwiwrJcIixcIiZzdXAyO1wiOlwiwrJcIixcIiZzdXAzXCI6XCLCs1wiLFwiJnN1cDM7XCI6XCLCs1wiLFwiJnN1cDtcIjpcIuKKg1wiLFwiJnN1cEU7XCI6XCLiq4ZcIixcIiZzdXBkb3Q7XCI6XCLiqr5cIixcIiZzdXBkc3ViO1wiOlwi4quYXCIsXCImc3VwZTtcIjpcIuKKh1wiLFwiJnN1cGVkb3Q7XCI6XCLiq4RcIixcIiZzdXBoc29sO1wiOlwi4p+JXCIsXCImc3VwaHN1YjtcIjpcIuKrl1wiLFwiJnN1cGxhcnI7XCI6XCLipbtcIixcIiZzdXBtdWx0O1wiOlwi4quCXCIsXCImc3VwbkU7XCI6XCLiq4xcIixcIiZzdXBuZTtcIjpcIuKKi1wiLFwiJnN1cHBsdXM7XCI6XCLiq4BcIixcIiZzdXBzZXQ7XCI6XCLiioNcIixcIiZzdXBzZXRlcTtcIjpcIuKKh1wiLFwiJnN1cHNldGVxcTtcIjpcIuKrhlwiLFwiJnN1cHNldG5lcTtcIjpcIuKKi1wiLFwiJnN1cHNldG5lcXE7XCI6XCLiq4xcIixcIiZzdXBzaW07XCI6XCLiq4hcIixcIiZzdXBzdWI7XCI6XCLiq5RcIixcIiZzdXBzdXA7XCI6XCLiq5ZcIixcIiZzd0FycjtcIjpcIuKHmVwiLFwiJnN3YXJoaztcIjpcIuKkplwiLFwiJnN3YXJyO1wiOlwi4oaZXCIsXCImc3dhcnJvdztcIjpcIuKGmVwiLFwiJnN3bndhcjtcIjpcIuKkqlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZ0YXJnZXQ7XCI6XCLijJZcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnRicms7XCI6XCLijrRcIixcIiZ0Y2Fyb247XCI6XCLFpVwiLFwiJnRjZWRpbDtcIjpcIsWjXCIsXCImdGN5O1wiOlwi0YJcIixcIiZ0ZG90O1wiOlwi4oObXCIsXCImdGVscmVjO1wiOlwi4oyVXCIsXCImdGZyO1wiOlwi8J2UsVwiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnRoZXJlZm9yZTtcIjpcIuKItFwiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdGhldGF2O1wiOlwiz5FcIixcIiZ0aGlja2FwcHJveDtcIjpcIuKJiFwiLFwiJnRoaWNrc2ltO1wiOlwi4oi8XCIsXCImdGhpbnNwO1wiOlwi4oCJXCIsXCImdGhrYXA7XCI6XCLiiYhcIixcIiZ0aGtzaW07XCI6XCLiiLxcIixcIiZ0aG9yblwiOlwiw75cIixcIiZ0aG9ybjtcIjpcIsO+XCIsXCImdGlsZGU7XCI6XCLLnFwiLFwiJnRpbWVzXCI6XCLDl1wiLFwiJnRpbWVzO1wiOlwiw5dcIixcIiZ0aW1lc2I7XCI6XCLiiqBcIixcIiZ0aW1lc2JhcjtcIjpcIuKosVwiLFwiJnRpbWVzZDtcIjpcIuKosFwiLFwiJnRpbnQ7XCI6XCLiiK1cIixcIiZ0b2VhO1wiOlwi4qSoXCIsXCImdG9wO1wiOlwi4oqkXCIsXCImdG9wYm90O1wiOlwi4oy2XCIsXCImdG9wY2lyO1wiOlwi4quxXCIsXCImdG9wZjtcIjpcIvCdlaVcIixcIiZ0b3Bmb3JrO1wiOlwi4quaXCIsXCImdG9zYTtcIjpcIuKkqVwiLFwiJnRwcmltZTtcIjpcIuKAtFwiLFwiJnRyYWRlO1wiOlwi4oSiXCIsXCImdHJpYW5nbGU7XCI6XCLilrVcIixcIiZ0cmlhbmdsZWRvd247XCI6XCLilr9cIixcIiZ0cmlhbmdsZWxlZnQ7XCI6XCLil4NcIixcIiZ0cmlhbmdsZWxlZnRlcTtcIjpcIuKKtFwiLFwiJnRyaWFuZ2xlcTtcIjpcIuKJnFwiLFwiJnRyaWFuZ2xlcmlnaHQ7XCI6XCLilrlcIixcIiZ0cmlhbmdsZXJpZ2h0ZXE7XCI6XCLiirVcIixcIiZ0cmlkb3Q7XCI6XCLil6xcIixcIiZ0cmllO1wiOlwi4omcXCIsXCImdHJpbWludXM7XCI6XCLiqLpcIixcIiZ0cmlwbHVzO1wiOlwi4qi5XCIsXCImdHJpc2I7XCI6XCLip41cIixcIiZ0cml0aW1lO1wiOlwi4qi7XCIsXCImdHJwZXppdW07XCI6XCLij6JcIixcIiZ0c2NyO1wiOlwi8J2TiVwiLFwiJnRzY3k7XCI6XCLRhlwiLFwiJnRzaGN5O1wiOlwi0ZtcIixcIiZ0c3Ryb2s7XCI6XCLFp1wiLFwiJnR3aXh0O1wiOlwi4omsXCIsXCImdHdvaGVhZGxlZnRhcnJvdztcIjpcIuKGnlwiLFwiJnR3b2hlYWRyaWdodGFycm93O1wiOlwi4oagXCIsXCImdUFycjtcIjpcIuKHkVwiLFwiJnVIYXI7XCI6XCLipaNcIixcIiZ1YWN1dGVcIjpcIsO6XCIsXCImdWFjdXRlO1wiOlwiw7pcIixcIiZ1YXJyO1wiOlwi4oaRXCIsXCImdWJyY3k7XCI6XCLRnlwiLFwiJnVicmV2ZTtcIjpcIsWtXCIsXCImdWNpcmNcIjpcIsO7XCIsXCImdWNpcmM7XCI6XCLDu1wiLFwiJnVjeTtcIjpcItGDXCIsXCImdWRhcnI7XCI6XCLih4VcIixcIiZ1ZGJsYWM7XCI6XCLFsVwiLFwiJnVkaGFyO1wiOlwi4qWuXCIsXCImdWZpc2h0O1wiOlwi4qW+XCIsXCImdWZyO1wiOlwi8J2UslwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVoYXJsO1wiOlwi4oa/XCIsXCImdWhhcnI7XCI6XCLihr5cIixcIiZ1aGJsaztcIjpcIuKWgFwiLFwiJnVsY29ybjtcIjpcIuKMnFwiLFwiJnVsY29ybmVyO1wiOlwi4oycXCIsXCImdWxjcm9wO1wiOlwi4oyPXCIsXCImdWx0cmk7XCI6XCLil7hcIixcIiZ1bWFjcjtcIjpcIsWrXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImdW9nb247XCI6XCLFs1wiLFwiJnVvcGY7XCI6XCLwnZWmXCIsXCImdXBhcnJvdztcIjpcIuKGkVwiLFwiJnVwZG93bmFycm93O1wiOlwi4oaVXCIsXCImdXBoYXJwb29ubGVmdDtcIjpcIuKGv1wiLFwiJnVwaGFycG9vbnJpZ2h0O1wiOlwi4oa+XCIsXCImdXBsdXM7XCI6XCLiio5cIixcIiZ1cHNpO1wiOlwiz4VcIixcIiZ1cHNpaDtcIjpcIs+SXCIsXCImdXBzaWxvbjtcIjpcIs+FXCIsXCImdXB1cGFycm93cztcIjpcIuKHiFwiLFwiJnVyY29ybjtcIjpcIuKMnVwiLFwiJnVyY29ybmVyO1wiOlwi4oydXCIsXCImdXJjcm9wO1wiOlwi4oyOXCIsXCImdXJpbmc7XCI6XCLFr1wiLFwiJnVydHJpO1wiOlwi4pe5XCIsXCImdXNjcjtcIjpcIvCdk4pcIixcIiZ1dGRvdDtcIjpcIuKLsFwiLFwiJnV0aWxkZTtcIjpcIsWpXCIsXCImdXRyaTtcIjpcIuKWtVwiLFwiJnV0cmlmO1wiOlwi4pa0XCIsXCImdXVhcnI7XCI6XCLih4hcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnV3YW5nbGU7XCI6XCLipqdcIixcIiZ2QXJyO1wiOlwi4oeVXCIsXCImdkJhcjtcIjpcIuKrqFwiLFwiJnZCYXJ2O1wiOlwi4qupXCIsXCImdkRhc2g7XCI6XCLiiqhcIixcIiZ2YW5ncnQ7XCI6XCLippxcIixcIiZ2YXJlcHNpbG9uO1wiOlwiz7VcIixcIiZ2YXJrYXBwYTtcIjpcIs+wXCIsXCImdmFybm90aGluZztcIjpcIuKIhVwiLFwiJnZhcnBoaTtcIjpcIs+VXCIsXCImdmFycGk7XCI6XCLPllwiLFwiJnZhcnByb3B0bztcIjpcIuKInVwiLFwiJnZhcnI7XCI6XCLihpVcIixcIiZ2YXJyaG87XCI6XCLPsVwiLFwiJnZhcnNpZ21hO1wiOlwiz4JcIixcIiZ2YXJzdWJzZXRuZXE7XCI6XCLiiorvuIBcIixcIiZ2YXJzdWJzZXRuZXFxO1wiOlwi4quL77iAXCIsXCImdmFyc3Vwc2V0bmVxO1wiOlwi4oqL77iAXCIsXCImdmFyc3Vwc2V0bmVxcTtcIjpcIuKrjO+4gFwiLFwiJnZhcnRoZXRhO1wiOlwiz5FcIixcIiZ2YXJ0cmlhbmdsZWxlZnQ7XCI6XCLiirJcIixcIiZ2YXJ0cmlhbmdsZXJpZ2h0O1wiOlwi4oqzXCIsXCImdmN5O1wiOlwi0LJcIixcIiZ2ZGFzaDtcIjpcIuKKolwiLFwiJnZlZTtcIjpcIuKIqFwiLFwiJnZlZWJhcjtcIjpcIuKKu1wiLFwiJnZlZWVxO1wiOlwi4omaXCIsXCImdmVsbGlwO1wiOlwi4ouuXCIsXCImdmVyYmFyO1wiOlwifFwiLFwiJnZlcnQ7XCI6XCJ8XCIsXCImdmZyO1wiOlwi8J2Us1wiLFwiJnZsdHJpO1wiOlwi4oqyXCIsXCImdm5zdWI7XCI6XCLiioLig5JcIixcIiZ2bnN1cDtcIjpcIuKKg+KDklwiLFwiJnZvcGY7XCI6XCLwnZWnXCIsXCImdnByb3A7XCI6XCLiiJ1cIixcIiZ2cnRyaTtcIjpcIuKKs1wiLFwiJnZzY3I7XCI6XCLwnZOLXCIsXCImdnN1Ym5FO1wiOlwi4quL77iAXCIsXCImdnN1Ym5lO1wiOlwi4oqK77iAXCIsXCImdnN1cG5FO1wiOlwi4quM77iAXCIsXCImdnN1cG5lO1wiOlwi4oqL77iAXCIsXCImdnppZ3phZztcIjpcIuKmmlwiLFwiJndjaXJjO1wiOlwixbVcIixcIiZ3ZWRiYXI7XCI6XCLiqZ9cIixcIiZ3ZWRnZTtcIjpcIuKIp1wiLFwiJndlZGdlcTtcIjpcIuKJmVwiLFwiJndlaWVycDtcIjpcIuKEmFwiLFwiJndmcjtcIjpcIvCdlLRcIixcIiZ3b3BmO1wiOlwi8J2VqFwiLFwiJndwO1wiOlwi4oSYXCIsXCImd3I7XCI6XCLiiYBcIixcIiZ3cmVhdGg7XCI6XCLiiYBcIixcIiZ3c2NyO1wiOlwi8J2TjFwiLFwiJnhjYXA7XCI6XCLii4JcIixcIiZ4Y2lyYztcIjpcIuKXr1wiLFwiJnhjdXA7XCI6XCLii4NcIixcIiZ4ZHRyaTtcIjpcIuKWvVwiLFwiJnhmcjtcIjpcIvCdlLVcIixcIiZ4aEFycjtcIjpcIuKfulwiLFwiJnhoYXJyO1wiOlwi4p+3XCIsXCImeGk7XCI6XCLOvlwiLFwiJnhsQXJyO1wiOlwi4p+4XCIsXCImeGxhcnI7XCI6XCLin7VcIixcIiZ4bWFwO1wiOlwi4p+8XCIsXCImeG5pcztcIjpcIuKLu1wiLFwiJnhvZG90O1wiOlwi4qiAXCIsXCImeG9wZjtcIjpcIvCdlalcIixcIiZ4b3BsdXM7XCI6XCLiqIFcIixcIiZ4b3RpbWU7XCI6XCLiqIJcIixcIiZ4ckFycjtcIjpcIuKfuVwiLFwiJnhyYXJyO1wiOlwi4p+2XCIsXCImeHNjcjtcIjpcIvCdk41cIixcIiZ4c3FjdXA7XCI6XCLiqIZcIixcIiZ4dXBsdXM7XCI6XCLiqIRcIixcIiZ4dXRyaTtcIjpcIuKWs1wiLFwiJnh2ZWU7XCI6XCLii4FcIixcIiZ4d2VkZ2U7XCI6XCLii4BcIixcIiZ5YWN1dGVcIjpcIsO9XCIsXCImeWFjdXRlO1wiOlwiw71cIixcIiZ5YWN5O1wiOlwi0Y9cIixcIiZ5Y2lyYztcIjpcIsW3XCIsXCImeWN5O1wiOlwi0YtcIixcIiZ5ZW5cIjpcIsKlXCIsXCImeWVuO1wiOlwiwqVcIixcIiZ5ZnI7XCI6XCLwnZS2XCIsXCImeWljeTtcIjpcItGXXCIsXCImeW9wZjtcIjpcIvCdlapcIixcIiZ5c2NyO1wiOlwi8J2TjlwiLFwiJnl1Y3k7XCI6XCLRjlwiLFwiJnl1bWxcIjpcIsO/XCIsXCImeXVtbDtcIjpcIsO/XCIsXCImemFjdXRlO1wiOlwixbpcIixcIiZ6Y2Fyb247XCI6XCLFvlwiLFwiJnpjeTtcIjpcItC3XCIsXCImemRvdDtcIjpcIsW8XCIsXCImemVldHJmO1wiOlwi4oSoXCIsXCImemV0YTtcIjpcIs62XCIsXCImemZyO1wiOlwi8J2Ut1wiLFwiJnpoY3k7XCI6XCLQtlwiLFwiJnppZ3JhcnI7XCI6XCLih51cIixcIiZ6b3BmO1wiOlwi8J2Vq1wiLFwiJnpzY3I7XCI6XCLwnZOPXCIsXCImendqO1wiOlwi4oCNXCIsXCImenduajtcIjpcIuKAjFwifSxjaGFyYWN0ZXJzOntcIsOGXCI6XCImQUVsaWc7XCIsXCImXCI6XCImYW1wO1wiLFwiw4FcIjpcIiZBYWN1dGU7XCIsXCLEglwiOlwiJkFicmV2ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLQkFwiOlwiJkFjeTtcIixcIvCdlIRcIjpcIiZBZnI7XCIsXCLDgFwiOlwiJkFncmF2ZTtcIixcIs6RXCI6XCImQWxwaGE7XCIsXCLEgFwiOlwiJkFtYWNyO1wiLFwi4qmTXCI6XCImQW5kO1wiLFwixIRcIjpcIiZBb2dvbjtcIixcIvCdlLhcIjpcIiZBb3BmO1wiLFwi4oGhXCI6XCImYWY7XCIsXCLDhVwiOlwiJmFuZ3N0O1wiLFwi8J2SnFwiOlwiJkFzY3I7XCIsXCLiiZRcIjpcIiZjb2xvbmVxO1wiLFwiw4NcIjpcIiZBdGlsZGU7XCIsXCLDhFwiOlwiJkF1bWw7XCIsXCLiiJZcIjpcIiZzc2V0bW47XCIsXCLiq6dcIjpcIiZCYXJ2O1wiLFwi4oyGXCI6XCImZG91YmxlYmFyd2VkZ2U7XCIsXCLQkVwiOlwiJkJjeTtcIixcIuKItVwiOlwiJmJlY2F1c2U7XCIsXCLihKxcIjpcIiZiZXJub3U7XCIsXCLOklwiOlwiJkJldGE7XCIsXCLwnZSFXCI6XCImQmZyO1wiLFwi8J2UuVwiOlwiJkJvcGY7XCIsXCLLmFwiOlwiJmJyZXZlO1wiLFwi4omOXCI6XCImYnVtcDtcIixcItCnXCI6XCImQ0hjeTtcIixcIsKpXCI6XCImY29weTtcIixcIsSGXCI6XCImQ2FjdXRlO1wiLFwi4ouSXCI6XCImQ2FwO1wiLFwi4oWFXCI6XCImREQ7XCIsXCLihK1cIjpcIiZDZnI7XCIsXCLEjFwiOlwiJkNjYXJvbjtcIixcIsOHXCI6XCImQ2NlZGlsO1wiLFwixIhcIjpcIiZDY2lyYztcIixcIuKIsFwiOlwiJkNjb25pbnQ7XCIsXCLEilwiOlwiJkNkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLOp1wiOlwiJkNoaTtcIixcIuKKmVwiOlwiJm9kb3Q7XCIsXCLiipZcIjpcIiZvbWludXM7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKIslwiOlwiJmN3Y29uaW50O1wiLFwi4oCdXCI6XCImcmRxdW9yO1wiLFwi4oCZXCI6XCImcnNxdW9yO1wiLFwi4oi3XCI6XCImUHJvcG9ydGlvbjtcIixcIuKptFwiOlwiJkNvbG9uZTtcIixcIuKJoVwiOlwiJmVxdWl2O1wiLFwi4oivXCI6XCImRG91YmxlQ29udG91ckludGVncmFsO1wiLFwi4oiuXCI6XCImb2ludDtcIixcIuKEglwiOlwiJmNvbXBsZXhlcztcIixcIuKIkFwiOlwiJmNvcHJvZDtcIixcIuKIs1wiOlwiJmF3Y29uaW50O1wiLFwi4qivXCI6XCImQ3Jvc3M7XCIsXCLwnZKeXCI6XCImQ3NjcjtcIixcIuKLk1wiOlwiJkN1cDtcIixcIuKJjVwiOlwiJmFzeW1wZXE7XCIsXCLipJFcIjpcIiZERG90cmFoZDtcIixcItCCXCI6XCImREpjeTtcIixcItCFXCI6XCImRFNjeTtcIixcItCPXCI6XCImRFpjeTtcIixcIuKAoVwiOlwiJmRkYWdnZXI7XCIsXCLihqFcIjpcIiZEYXJyO1wiLFwi4qukXCI6XCImRG91YmxlTGVmdFRlZTtcIixcIsSOXCI6XCImRGNhcm9uO1wiLFwi0JRcIjpcIiZEY3k7XCIsXCLiiIdcIjpcIiZuYWJsYTtcIixcIs6UXCI6XCImRGVsdGE7XCIsXCLwnZSHXCI6XCImRGZyO1wiLFwiwrRcIjpcIiZhY3V0ZTtcIixcIsuZXCI6XCImZG90O1wiLFwiy51cIjpcIiZkYmxhYztcIixcImBcIjpcIiZncmF2ZTtcIixcIsucXCI6XCImdGlsZGU7XCIsXCLii4RcIjpcIiZkaWFtb25kO1wiLFwi4oWGXCI6XCImZGQ7XCIsXCLwnZS7XCI6XCImRG9wZjtcIixcIsKoXCI6XCImdW1sO1wiLFwi4oOcXCI6XCImRG90RG90O1wiLFwi4omQXCI6XCImZXNkb3Q7XCIsXCLih5NcIjpcIiZkQXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHlFwiOlwiJmlmZjtcIixcIuKfuFwiOlwiJnhsQXJyO1wiLFwi4p+6XCI6XCImeGhBcnI7XCIsXCLin7lcIjpcIiZ4ckFycjtcIixcIuKHklwiOlwiJnJBcnI7XCIsXCLiiqhcIjpcIiZ2RGFzaDtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5VcIjpcIiZ2QXJyO1wiLFwi4oilXCI6XCImc3BhcjtcIixcIuKGk1wiOlwiJmRvd25hcnJvdztcIixcIuKkk1wiOlwiJkRvd25BcnJvd0JhcjtcIixcIuKHtVwiOlwiJmR1YXJyO1wiLFwizJFcIjpcIiZEb3duQnJldmU7XCIsXCLipZBcIjpcIiZEb3duTGVmdFJpZ2h0VmVjdG9yO1wiLFwi4qWeXCI6XCImRG93bkxlZnRUZWVWZWN0b3I7XCIsXCLihr1cIjpcIiZsaGFyZDtcIixcIuKlllwiOlwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiLFwi4qWfXCI6XCImRG93blJpZ2h0VGVlVmVjdG9yO1wiLFwi4oeBXCI6XCImcmlnaHRoYXJwb29uZG93bjtcIixcIuKll1wiOlwiJkRvd25SaWdodFZlY3RvckJhcjtcIixcIuKKpFwiOlwiJnRvcDtcIixcIuKGp1wiOlwiJm1hcHN0b2Rvd247XCIsXCLwnZKfXCI6XCImRHNjcjtcIixcIsSQXCI6XCImRHN0cm9rO1wiLFwixYpcIjpcIiZFTkc7XCIsXCLDkFwiOlwiJkVUSDtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwixJpcIjpcIiZFY2Fyb247XCIsXCLDilwiOlwiJkVjaXJjO1wiLFwi0K1cIjpcIiZFY3k7XCIsXCLEllwiOlwiJkVkb3Q7XCIsXCLwnZSIXCI6XCImRWZyO1wiLFwiw4hcIjpcIiZFZ3JhdmU7XCIsXCLiiIhcIjpcIiZpc2ludjtcIixcIsSSXCI6XCImRW1hY3I7XCIsXCLil7tcIjpcIiZFbXB0eVNtYWxsU3F1YXJlO1wiLFwi4parXCI6XCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCIsXCLEmFwiOlwiJkVvZ29uO1wiLFwi8J2UvFwiOlwiJkVvcGY7XCIsXCLOlVwiOlwiJkVwc2lsb247XCIsXCLiqbVcIjpcIiZFcXVhbDtcIixcIuKJglwiOlwiJmVzaW07XCIsXCLih4xcIjpcIiZybGhhcjtcIixcIuKEsFwiOlwiJmV4cGVjdGF0aW9uO1wiLFwi4qmzXCI6XCImRXNpbTtcIixcIs6XXCI6XCImRXRhO1wiLFwiw4tcIjpcIiZFdW1sO1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLihYdcIjpcIiZleHBvbmVudGlhbGU7XCIsXCLQpFwiOlwiJkZjeTtcIixcIvCdlIlcIjpcIiZGZnI7XCIsXCLil7xcIjpcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIixcIuKWqlwiOlwiJnNxdWY7XCIsXCLwnZS9XCI6XCImRm9wZjtcIixcIuKIgFwiOlwiJmZvcmFsbDtcIixcIuKEsVwiOlwiJkZzY3I7XCIsXCLQg1wiOlwiJkdKY3k7XCIsXCI+XCI6XCImZ3Q7XCIsXCLOk1wiOlwiJkdhbW1hO1wiLFwiz5xcIjpcIiZHYW1tYWQ7XCIsXCLEnlwiOlwiJkdicmV2ZTtcIixcIsSiXCI6XCImR2NlZGlsO1wiLFwixJxcIjpcIiZHY2lyYztcIixcItCTXCI6XCImR2N5O1wiLFwixKBcIjpcIiZHZG90O1wiLFwi8J2UilwiOlwiJkdmcjtcIixcIuKLmVwiOlwiJmdnZztcIixcIvCdlL5cIjpcIiZHb3BmO1wiLFwi4omlXCI6XCImZ2VxO1wiLFwi4oubXCI6XCImZ3RyZXFsZXNzO1wiLFwi4omnXCI6XCImZ2VxcTtcIixcIuKqolwiOlwiJkdyZWF0ZXJHcmVhdGVyO1wiLFwi4om3XCI6XCImZ3RybGVzcztcIixcIuKpvlwiOlwiJmdlcztcIixcIuKJs1wiOlwiJmd0cnNpbTtcIixcIvCdkqJcIjpcIiZHc2NyO1wiLFwi4omrXCI6XCImZ2c7XCIsXCLQqlwiOlwiJkhBUkRjeTtcIixcIsuHXCI6XCImY2Fyb247XCIsXCJeXCI6XCImSGF0O1wiLFwixKRcIjpcIiZIY2lyYztcIixcIuKEjFwiOlwiJlBvaW5jYXJlcGxhbmU7XCIsXCLihItcIjpcIiZoYW1pbHQ7XCIsXCLihI1cIjpcIiZxdWF0ZXJuaW9ucztcIixcIuKUgFwiOlwiJmJveGg7XCIsXCLEplwiOlwiJkhzdHJvaztcIixcIuKJj1wiOlwiJmJ1bXBlcTtcIixcItCVXCI6XCImSUVjeTtcIixcIsSyXCI6XCImSUpsaWc7XCIsXCLQgVwiOlwiJklPY3k7XCIsXCLDjVwiOlwiJklhY3V0ZTtcIixcIsOOXCI6XCImSWNpcmM7XCIsXCLQmFwiOlwiJkljeTtcIixcIsSwXCI6XCImSWRvdDtcIixcIuKEkVwiOlwiJmltYWdwYXJ0O1wiLFwiw4xcIjpcIiZJZ3JhdmU7XCIsXCLEqlwiOlwiJkltYWNyO1wiLFwi4oWIXCI6XCImaWk7XCIsXCLiiKxcIjpcIiZJbnQ7XCIsXCLiiKtcIjpcIiZpbnQ7XCIsXCLii4JcIjpcIiZ4Y2FwO1wiLFwi4oGjXCI6XCImaWM7XCIsXCLigaJcIjpcIiZpdDtcIixcIsSuXCI6XCImSW9nb247XCIsXCLwnZWAXCI6XCImSW9wZjtcIixcIs6ZXCI6XCImSW90YTtcIixcIuKEkFwiOlwiJmltYWdsaW5lO1wiLFwixKhcIjpcIiZJdGlsZGU7XCIsXCLQhlwiOlwiJkl1a2N5O1wiLFwiw49cIjpcIiZJdW1sO1wiLFwixLRcIjpcIiZKY2lyYztcIixcItCZXCI6XCImSmN5O1wiLFwi8J2UjVwiOlwiJkpmcjtcIixcIvCdlYFcIjpcIiZKb3BmO1wiLFwi8J2SpVwiOlwiJkpzY3I7XCIsXCLQiFwiOlwiJkpzZXJjeTtcIixcItCEXCI6XCImSnVrY3k7XCIsXCLQpVwiOlwiJktIY3k7XCIsXCLQjFwiOlwiJktKY3k7XCIsXCLOmlwiOlwiJkthcHBhO1wiLFwixLZcIjpcIiZLY2VkaWw7XCIsXCLQmlwiOlwiJktjeTtcIixcIvCdlI5cIjpcIiZLZnI7XCIsXCLwnZWCXCI6XCImS29wZjtcIixcIvCdkqZcIjpcIiZLc2NyO1wiLFwi0IlcIjpcIiZMSmN5O1wiLFwiPFwiOlwiJmx0O1wiLFwixLlcIjpcIiZMYWN1dGU7XCIsXCLOm1wiOlwiJkxhbWJkYTtcIixcIuKfqlwiOlwiJkxhbmc7XCIsXCLihJJcIjpcIiZsYWdyYW47XCIsXCLihp5cIjpcIiZ0d29oZWFkbGVmdGFycm93O1wiLFwixL1cIjpcIiZMY2Fyb247XCIsXCLEu1wiOlwiJkxjZWRpbDtcIixcItCbXCI6XCImTGN5O1wiLFwi4p+oXCI6XCImbGFuZ2xlO1wiLFwi4oaQXCI6XCImc2xhcnI7XCIsXCLih6RcIjpcIiZsYXJyYjtcIixcIuKHhlwiOlwiJmxyYXJyO1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLin6ZcIjpcIiZsb2JyaztcIixcIuKloVwiOlwiJkxlZnREb3duVGVlVmVjdG9yO1wiLFwi4oeDXCI6XCImZG93bmhhcnBvb25sZWZ0O1wiLFwi4qWZXCI6XCImTGVmdERvd25WZWN0b3JCYXI7XCIsXCLijIpcIjpcIiZsZmxvb3I7XCIsXCLihpRcIjpcIiZsZWZ0cmlnaHRhcnJvdztcIixcIuKljlwiOlwiJkxlZnRSaWdodFZlY3RvcjtcIixcIuKKo1wiOlwiJmRhc2h2O1wiLFwi4oakXCI6XCImbWFwc3RvbGVmdDtcIixcIuKlmlwiOlwiJkxlZnRUZWVWZWN0b3I7XCIsXCLiirJcIjpcIiZ2bHRyaTtcIixcIuKnj1wiOlwiJkxlZnRUcmlhbmdsZUJhcjtcIixcIuKKtFwiOlwiJnRyaWFuZ2xlbGVmdGVxO1wiLFwi4qWRXCI6XCImTGVmdFVwRG93blZlY3RvcjtcIixcIuKloFwiOlwiJkxlZnRVcFRlZVZlY3RvcjtcIixcIuKGv1wiOlwiJnVwaGFycG9vbmxlZnQ7XCIsXCLipZhcIjpcIiZMZWZ0VXBWZWN0b3JCYXI7XCIsXCLihrxcIjpcIiZsaGFydTtcIixcIuKlklwiOlwiJkxlZnRWZWN0b3JCYXI7XCIsXCLii5pcIjpcIiZsZXNzZXFndHI7XCIsXCLiiaZcIjpcIiZsZXFxO1wiLFwi4om2XCI6XCImbGc7XCIsXCLiqqFcIjpcIiZMZXNzTGVzcztcIixcIuKpvVwiOlwiJmxlcztcIixcIuKJslwiOlwiJmxzaW07XCIsXCLwnZSPXCI6XCImTGZyO1wiLFwi4ouYXCI6XCImTGw7XCIsXCLih5pcIjpcIiZsQWFycjtcIixcIsS/XCI6XCImTG1pZG90O1wiLFwi4p+1XCI6XCImeGxhcnI7XCIsXCLin7dcIjpcIiZ4aGFycjtcIixcIuKftlwiOlwiJnhyYXJyO1wiLFwi8J2Vg1wiOlwiJkxvcGY7XCIsXCLihplcIjpcIiZzd2Fycm93O1wiLFwi4oaYXCI6XCImc2VhcnJvdztcIixcIuKGsFwiOlwiJmxzaDtcIixcIsWBXCI6XCImTHN0cm9rO1wiLFwi4omqXCI6XCImbGw7XCIsXCLipIVcIjpcIiZNYXA7XCIsXCLQnFwiOlwiJk1jeTtcIixcIuKBn1wiOlwiJk1lZGl1bVNwYWNlO1wiLFwi4oSzXCI6XCImcGhtbWF0O1wiLFwi8J2UkFwiOlwiJk1mcjtcIixcIuKIk1wiOlwiJm1wO1wiLFwi8J2VhFwiOlwiJk1vcGY7XCIsXCLOnFwiOlwiJk11O1wiLFwi0IpcIjpcIiZOSmN5O1wiLFwixYNcIjpcIiZOYWN1dGU7XCIsXCLFh1wiOlwiJk5jYXJvbjtcIixcIsWFXCI6XCImTmNlZGlsO1wiLFwi0J1cIjpcIiZOY3k7XCIsXCLigItcIjpcIiZaZXJvV2lkdGhTcGFjZTtcIixcIlxcblwiOlwiJk5ld0xpbmU7XCIsXCLwnZSRXCI6XCImTmZyO1wiLFwi4oGgXCI6XCImTm9CcmVhaztcIixcIsKgXCI6XCImbmJzcDtcIixcIuKElVwiOlwiJm5hdHVyYWxzO1wiLFwi4qusXCI6XCImTm90O1wiLFwi4omiXCI6XCImbmVxdWl2O1wiLFwi4omtXCI6XCImTm90Q3VwQ2FwO1wiLFwi4oimXCI6XCImbnNwYXI7XCIsXCLiiIlcIjpcIiZub3RpbnZhO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiYLMuFwiOlwiJm5lc2ltO1wiLFwi4oiEXCI6XCImbmV4aXN0cztcIixcIuKJr1wiOlwiJm5ndHI7XCIsXCLiibFcIjpcIiZuZ2VxO1wiLFwi4omnzLhcIjpcIiZuZ2VxcTtcIixcIuKJq8y4XCI6XCImbkd0djtcIixcIuKJuVwiOlwiJm50Z2w7XCIsXCLiqb7MuFwiOlwiJm5nZXM7XCIsXCLiibVcIjpcIiZuZ3NpbTtcIixcIuKJjsy4XCI6XCImbmJ1bXA7XCIsXCLiiY/MuFwiOlwiJm5idW1wZTtcIixcIuKLqlwiOlwiJm50cmlhbmdsZWxlZnQ7XCIsXCLip4/MuFwiOlwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIixcIuKLrFwiOlwiJm50cmlhbmdsZWxlZnRlcTtcIixcIuKJrlwiOlwiJm5sdDtcIixcIuKJsFwiOlwiJm5sZXE7XCIsXCLiibhcIjpcIiZudGxnO1wiLFwi4omqzLhcIjpcIiZuTHR2O1wiLFwi4qm9zLhcIjpcIiZubGVzO1wiLFwi4om0XCI6XCImbmxzaW07XCIsXCLiqqLMuFwiOlwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiLFwi4qqhzLhcIjpcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIixcIuKKgFwiOlwiJm5wcmVjO1wiLFwi4qqvzLhcIjpcIiZucHJlY2VxO1wiLFwi4ougXCI6XCImbnByY3VlO1wiLFwi4oiMXCI6XCImbm90bml2YTtcIixcIuKLq1wiOlwiJm50cmlhbmdsZXJpZ2h0O1wiLFwi4qeQzLhcIjpcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4outXCI6XCImbnRyaWFuZ2xlcmlnaHRlcTtcIixcIuKKj8y4XCI6XCImTm90U3F1YXJlU3Vic2V0O1wiLFwi4ouiXCI6XCImbnNxc3ViZTtcIixcIuKKkMy4XCI6XCImTm90U3F1YXJlU3VwZXJzZXQ7XCIsXCLii6NcIjpcIiZuc3FzdXBlO1wiLFwi4oqC4oOSXCI6XCImdm5zdWI7XCIsXCLiiohcIjpcIiZuc3Vic2V0ZXE7XCIsXCLiioFcIjpcIiZuc3VjYztcIixcIuKqsMy4XCI6XCImbnN1Y2NlcTtcIixcIuKLoVwiOlwiJm5zY2N1ZTtcIixcIuKJv8y4XCI6XCImTm90U3VjY2VlZHNUaWxkZTtcIixcIuKKg+KDklwiOlwiJnZuc3VwO1wiLFwi4oqJXCI6XCImbnN1cHNldGVxO1wiLFwi4omBXCI6XCImbnNpbTtcIixcIuKJhFwiOlwiJm5zaW1lcTtcIixcIuKJh1wiOlwiJm5jb25nO1wiLFwi4omJXCI6XCImbmFwcHJveDtcIixcIuKIpFwiOlwiJm5zbWlkO1wiLFwi8J2SqVwiOlwiJk5zY3I7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIs6dXCI6XCImTnU7XCIsXCLFklwiOlwiJk9FbGlnO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwi0J5cIjpcIiZPY3k7XCIsXCLFkFwiOlwiJk9kYmxhYztcIixcIvCdlJJcIjpcIiZPZnI7XCIsXCLDklwiOlwiJk9ncmF2ZTtcIixcIsWMXCI6XCImT21hY3I7XCIsXCLOqVwiOlwiJm9obTtcIixcIs6fXCI6XCImT21pY3JvbjtcIixcIvCdlYZcIjpcIiZPb3BmO1wiLFwi4oCcXCI6XCImbGRxdW87XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKplFwiOlwiJk9yO1wiLFwi8J2SqlwiOlwiJk9zY3I7XCIsXCLDmFwiOlwiJk9zbGFzaDtcIixcIsOVXCI6XCImT3RpbGRlO1wiLFwi4qi3XCI6XCImT3RpbWVzO1wiLFwiw5ZcIjpcIiZPdW1sO1wiLFwi4oC+XCI6XCImb2xpbmU7XCIsXCLij55cIjpcIiZPdmVyQnJhY2U7XCIsXCLijrRcIjpcIiZ0YnJrO1wiLFwi4o+cXCI6XCImT3ZlclBhcmVudGhlc2lzO1wiLFwi4oiCXCI6XCImcGFydDtcIixcItCfXCI6XCImUGN5O1wiLFwi8J2Uk1wiOlwiJlBmcjtcIixcIs6mXCI6XCImUGhpO1wiLFwizqBcIjpcIiZQaTtcIixcIsKxXCI6XCImcG07XCIsXCLihJlcIjpcIiZwcmltZXM7XCIsXCLiqrtcIjpcIiZQcjtcIixcIuKJulwiOlwiJnByZWM7XCIsXCLiqq9cIjpcIiZwcmVjZXE7XCIsXCLiibxcIjpcIiZwcmVjY3VybHllcTtcIixcIuKJvlwiOlwiJnByc2ltO1wiLFwi4oCzXCI6XCImUHJpbWU7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oidXCI6XCImdnByb3A7XCIsXCLwnZKrXCI6XCImUHNjcjtcIixcIs6oXCI6XCImUHNpO1wiLCdcIic6XCImcXVvdDtcIixcIvCdlJRcIjpcIiZRZnI7XCIsXCLihJpcIjpcIiZyYXRpb25hbHM7XCIsXCLwnZKsXCI6XCImUXNjcjtcIixcIuKkkFwiOlwiJmRyYmthcm93O1wiLFwiwq5cIjpcIiZyZWc7XCIsXCLFlFwiOlwiJlJhY3V0ZTtcIixcIuKfq1wiOlwiJlJhbmc7XCIsXCLihqBcIjpcIiZ0d29oZWFkcmlnaHRhcnJvdztcIixcIuKkllwiOlwiJlJhcnJ0bDtcIixcIsWYXCI6XCImUmNhcm9uO1wiLFwixZZcIjpcIiZSY2VkaWw7XCIsXCLQoFwiOlwiJlJjeTtcIixcIuKEnFwiOlwiJnJlYWxwYXJ0O1wiLFwi4oiLXCI6XCImbml2O1wiLFwi4oeLXCI6XCImbHJoYXI7XCIsXCLipa9cIjpcIiZkdWhhcjtcIixcIs6hXCI6XCImUmhvO1wiLFwi4p+pXCI6XCImcmFuZ2xlO1wiLFwi4oaSXCI6XCImc3JhcnI7XCIsXCLih6VcIjpcIiZyYXJyYjtcIixcIuKHhFwiOlwiJnJsYXJyO1wiLFwi4oyJXCI6XCImcmNlaWw7XCIsXCLin6dcIjpcIiZyb2JyaztcIixcIuKlnVwiOlwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIixcIuKHglwiOlwiJmRvd25oYXJwb29ucmlnaHQ7XCIsXCLipZVcIjpcIiZSaWdodERvd25WZWN0b3JCYXI7XCIsXCLijItcIjpcIiZyZmxvb3I7XCIsXCLiiqJcIjpcIiZ2ZGFzaDtcIixcIuKGplwiOlwiJm1hcHN0bztcIixcIuKlm1wiOlwiJlJpZ2h0VGVlVmVjdG9yO1wiLFwi4oqzXCI6XCImdnJ0cmk7XCIsXCLip5BcIjpcIiZSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4oq1XCI6XCImdHJpYW5nbGVyaWdodGVxO1wiLFwi4qWPXCI6XCImUmlnaHRVcERvd25WZWN0b3I7XCIsXCLipZxcIjpcIiZSaWdodFVwVGVlVmVjdG9yO1wiLFwi4oa+XCI6XCImdXBoYXJwb29ucmlnaHQ7XCIsXCLipZRcIjpcIiZSaWdodFVwVmVjdG9yQmFyO1wiLFwi4oeAXCI6XCImcmlnaHRoYXJwb29udXA7XCIsXCLipZNcIjpcIiZSaWdodFZlY3RvckJhcjtcIixcIuKEnVwiOlwiJnJlYWxzO1wiLFwi4qWwXCI6XCImUm91bmRJbXBsaWVzO1wiLFwi4oebXCI6XCImckFhcnI7XCIsXCLihJtcIjpcIiZyZWFsaW5lO1wiLFwi4oaxXCI6XCImcnNoO1wiLFwi4qe0XCI6XCImUnVsZURlbGF5ZWQ7XCIsXCLQqVwiOlwiJlNIQ0hjeTtcIixcItCoXCI6XCImU0hjeTtcIixcItCsXCI6XCImU09GVGN5O1wiLFwixZpcIjpcIiZTYWN1dGU7XCIsXCLiqrxcIjpcIiZTYztcIixcIsWgXCI6XCImU2Nhcm9uO1wiLFwixZ5cIjpcIiZTY2VkaWw7XCIsXCLFnFwiOlwiJlNjaXJjO1wiLFwi0KFcIjpcIiZTY3k7XCIsXCLwnZSWXCI6XCImU2ZyO1wiLFwi4oaRXCI6XCImdXBhcnJvdztcIixcIs6jXCI6XCImU2lnbWE7XCIsXCLiiJhcIjpcIiZjb21wZm47XCIsXCLwnZWKXCI6XCImU29wZjtcIixcIuKImlwiOlwiJnJhZGljO1wiLFwi4pahXCI6XCImc3F1YXJlO1wiLFwi4oqTXCI6XCImc3FjYXA7XCIsXCLiio9cIjpcIiZzcXN1YnNldDtcIixcIuKKkVwiOlwiJnNxc3Vic2V0ZXE7XCIsXCLiipBcIjpcIiZzcXN1cHNldDtcIixcIuKKklwiOlwiJnNxc3Vwc2V0ZXE7XCIsXCLiipRcIjpcIiZzcWN1cDtcIixcIvCdkq5cIjpcIiZTc2NyO1wiLFwi4ouGXCI6XCImc3N0YXJmO1wiLFwi4ouQXCI6XCImU3Vic2V0O1wiLFwi4oqGXCI6XCImc3Vic2V0ZXE7XCIsXCLiibtcIjpcIiZzdWNjO1wiLFwi4qqwXCI6XCImc3VjY2VxO1wiLFwi4om9XCI6XCImc3VjY2N1cmx5ZXE7XCIsXCLiib9cIjpcIiZzdWNjc2ltO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4ouRXCI6XCImU3Vwc2V0O1wiLFwi4oqDXCI6XCImc3Vwc2V0O1wiLFwi4oqHXCI6XCImc3Vwc2V0ZXE7XCIsXCLDnlwiOlwiJlRIT1JOO1wiLFwi4oSiXCI6XCImdHJhZGU7XCIsXCLQi1wiOlwiJlRTSGN5O1wiLFwi0KZcIjpcIiZUU2N5O1wiLFwiXFx0XCI6XCImVGFiO1wiLFwizqRcIjpcIiZUYXU7XCIsXCLFpFwiOlwiJlRjYXJvbjtcIixcIsWiXCI6XCImVGNlZGlsO1wiLFwi0KJcIjpcIiZUY3k7XCIsXCLwnZSXXCI6XCImVGZyO1wiLFwi4oi0XCI6XCImdGhlcmVmb3JlO1wiLFwizphcIjpcIiZUaGV0YTtcIixcIuKBn+KAilwiOlwiJlRoaWNrU3BhY2U7XCIsXCLigIlcIjpcIiZ0aGluc3A7XCIsXCLiiLxcIjpcIiZ0aGtzaW07XCIsXCLiiYNcIjpcIiZzaW1lcTtcIixcIuKJhVwiOlwiJmNvbmc7XCIsXCLiiYhcIjpcIiZ0aGthcDtcIixcIvCdlYtcIjpcIiZUb3BmO1wiLFwi4oObXCI6XCImdGRvdDtcIixcIvCdkq9cIjpcIiZUc2NyO1wiLFwixaZcIjpcIiZUc3Ryb2s7XCIsXCLDmlwiOlwiJlVhY3V0ZTtcIixcIuKGn1wiOlwiJlVhcnI7XCIsXCLipYlcIjpcIiZVYXJyb2NpcjtcIixcItCOXCI6XCImVWJyY3k7XCIsXCLFrFwiOlwiJlVicmV2ZTtcIixcIsObXCI6XCImVWNpcmM7XCIsXCLQo1wiOlwiJlVjeTtcIixcIsWwXCI6XCImVWRibGFjO1wiLFwi8J2UmFwiOlwiJlVmcjtcIixcIsOZXCI6XCImVWdyYXZlO1wiLFwixapcIjpcIiZVbWFjcjtcIixfOlwiJmxvd2JhcjtcIixcIuKPn1wiOlwiJlVuZGVyQnJhY2U7XCIsXCLijrVcIjpcIiZiYnJrO1wiLFwi4o+dXCI6XCImVW5kZXJQYXJlbnRoZXNpcztcIixcIuKLg1wiOlwiJnhjdXA7XCIsXCLiio5cIjpcIiZ1cGx1cztcIixcIsWyXCI6XCImVW9nb247XCIsXCLwnZWMXCI6XCImVW9wZjtcIixcIuKkklwiOlwiJlVwQXJyb3dCYXI7XCIsXCLih4VcIjpcIiZ1ZGFycjtcIixcIuKGlVwiOlwiJnZhcnI7XCIsXCLipa5cIjpcIiZ1ZGhhcjtcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLihqVcIjpcIiZtYXBzdG91cDtcIixcIuKGllwiOlwiJm53YXJyb3c7XCIsXCLihpdcIjpcIiZuZWFycm93O1wiLFwiz5JcIjpcIiZ1cHNpaDtcIixcIs6lXCI6XCImVXBzaWxvbjtcIixcIsWuXCI6XCImVXJpbmc7XCIsXCLwnZKwXCI6XCImVXNjcjtcIixcIsWoXCI6XCImVXRpbGRlO1wiLFwiw5xcIjpcIiZVdW1sO1wiLFwi4oqrXCI6XCImVkRhc2g7XCIsXCLiq6tcIjpcIiZWYmFyO1wiLFwi0JJcIjpcIiZWY3k7XCIsXCLiiqlcIjpcIiZWZGFzaDtcIixcIuKrplwiOlwiJlZkYXNobDtcIixcIuKLgVwiOlwiJnh2ZWU7XCIsXCLigJZcIjpcIiZWZXJ0O1wiLFwi4oijXCI6XCImc21pZDtcIixcInxcIjpcIiZ2ZXJ0O1wiLFwi4p2YXCI6XCImVmVydGljYWxTZXBhcmF0b3I7XCIsXCLiiYBcIjpcIiZ3cmVhdGg7XCIsXCLigIpcIjpcIiZoYWlyc3A7XCIsXCLwnZSZXCI6XCImVmZyO1wiLFwi8J2VjVwiOlwiJlZvcGY7XCIsXCLwnZKxXCI6XCImVnNjcjtcIixcIuKKqlwiOlwiJlZ2ZGFzaDtcIixcIsW0XCI6XCImV2NpcmM7XCIsXCLii4BcIjpcIiZ4d2VkZ2U7XCIsXCLwnZSaXCI6XCImV2ZyO1wiLFwi8J2VjlwiOlwiJldvcGY7XCIsXCLwnZKyXCI6XCImV3NjcjtcIixcIvCdlJtcIjpcIiZYZnI7XCIsXCLOnlwiOlwiJlhpO1wiLFwi8J2Vj1wiOlwiJlhvcGY7XCIsXCLwnZKzXCI6XCImWHNjcjtcIixcItCvXCI6XCImWUFjeTtcIixcItCHXCI6XCImWUljeTtcIixcItCuXCI6XCImWVVjeTtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwixbZcIjpcIiZZY2lyYztcIixcItCrXCI6XCImWWN5O1wiLFwi8J2UnFwiOlwiJllmcjtcIixcIvCdlZBcIjpcIiZZb3BmO1wiLFwi8J2StFwiOlwiJllzY3I7XCIsXCLFuFwiOlwiJll1bWw7XCIsXCLQllwiOlwiJlpIY3k7XCIsXCLFuVwiOlwiJlphY3V0ZTtcIixcIsW9XCI6XCImWmNhcm9uO1wiLFwi0JdcIjpcIiZaY3k7XCIsXCLFu1wiOlwiJlpkb3Q7XCIsXCLOllwiOlwiJlpldGE7XCIsXCLihKhcIjpcIiZ6ZWV0cmY7XCIsXCLihKRcIjpcIiZpbnRlZ2VycztcIixcIvCdkrVcIjpcIiZac2NyO1wiLFwiw6FcIjpcIiZhYWN1dGU7XCIsXCLEg1wiOlwiJmFicmV2ZTtcIixcIuKIvlwiOlwiJm1zdHBvcztcIixcIuKIvsyzXCI6XCImYWNFO1wiLFwi4oi/XCI6XCImYWNkO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcItCwXCI6XCImYWN5O1wiLFwiw6ZcIjpcIiZhZWxpZztcIixcIvCdlJ5cIjpcIiZhZnI7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIuKEtVwiOlwiJmFsZXBoO1wiLFwizrFcIjpcIiZhbHBoYTtcIixcIsSBXCI6XCImYW1hY3I7XCIsXCLiqL9cIjpcIiZhbWFsZztcIixcIuKIp1wiOlwiJndlZGdlO1wiLFwi4qmVXCI6XCImYW5kYW5kO1wiLFwi4qmcXCI6XCImYW5kZDtcIixcIuKpmFwiOlwiJmFuZHNsb3BlO1wiLFwi4qmaXCI6XCImYW5kdjtcIixcIuKIoFwiOlwiJmFuZ2xlO1wiLFwi4qakXCI6XCImYW5nZTtcIixcIuKIoVwiOlwiJm1lYXN1cmVkYW5nbGU7XCIsXCLipqhcIjpcIiZhbmdtc2RhYTtcIixcIuKmqVwiOlwiJmFuZ21zZGFiO1wiLFwi4qaqXCI6XCImYW5nbXNkYWM7XCIsXCLipqtcIjpcIiZhbmdtc2RhZDtcIixcIuKmrFwiOlwiJmFuZ21zZGFlO1wiLFwi4qatXCI6XCImYW5nbXNkYWY7XCIsXCLipq5cIjpcIiZhbmdtc2RhZztcIixcIuKmr1wiOlwiJmFuZ21zZGFoO1wiLFwi4oifXCI6XCImYW5ncnQ7XCIsXCLiir5cIjpcIiZhbmdydHZiO1wiLFwi4qadXCI6XCImYW5ncnR2YmQ7XCIsXCLiiKJcIjpcIiZhbmdzcGg7XCIsXCLijbxcIjpcIiZhbmd6YXJyO1wiLFwixIVcIjpcIiZhb2dvbjtcIixcIvCdlZJcIjpcIiZhb3BmO1wiLFwi4qmwXCI6XCImYXBFO1wiLFwi4qmvXCI6XCImYXBhY2lyO1wiLFwi4omKXCI6XCImYXBwcm94ZXE7XCIsXCLiiYtcIjpcIiZhcGlkO1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCLDpVwiOlwiJmFyaW5nO1wiLFwi8J2StlwiOlwiJmFzY3I7XCIsXCIqXCI6XCImbWlkYXN0O1wiLFwiw6NcIjpcIiZhdGlsZGU7XCIsXCLDpFwiOlwiJmF1bWw7XCIsXCLiqJFcIjpcIiZhd2ludDtcIixcIuKrrVwiOlwiJmJOb3Q7XCIsXCLiiYxcIjpcIiZiY29uZztcIixcIs+2XCI6XCImYmVwc2k7XCIsXCLigLVcIjpcIiZicHJpbWU7XCIsXCLiiL1cIjpcIiZic2ltO1wiLFwi4ouNXCI6XCImYnNpbWU7XCIsXCLiir1cIjpcIiZiYXJ2ZWU7XCIsXCLijIVcIjpcIiZiYXJ3ZWRnZTtcIixcIuKOtlwiOlwiJmJicmt0YnJrO1wiLFwi0LFcIjpcIiZiY3k7XCIsXCLigJ5cIjpcIiZsZHF1b3I7XCIsXCLiprBcIjpcIiZiZW1wdHl2O1wiLFwizrJcIjpcIiZiZXRhO1wiLFwi4oS2XCI6XCImYmV0aDtcIixcIuKJrFwiOlwiJnR3aXh0O1wiLFwi8J2Un1wiOlwiJmJmcjtcIixcIuKXr1wiOlwiJnhjaXJjO1wiLFwi4qiAXCI6XCImeG9kb3Q7XCIsXCLiqIFcIjpcIiZ4b3BsdXM7XCIsXCLiqIJcIjpcIiZ4b3RpbWU7XCIsXCLiqIZcIjpcIiZ4c3FjdXA7XCIsXCLimIVcIjpcIiZzdGFyZjtcIixcIuKWvVwiOlwiJnhkdHJpO1wiLFwi4pazXCI6XCImeHV0cmk7XCIsXCLiqIRcIjpcIiZ4dXBsdXM7XCIsXCLipI1cIjpcIiZyYmFycjtcIixcIuKnq1wiOlwiJmxvemY7XCIsXCLilrRcIjpcIiZ1dHJpZjtcIixcIuKWvlwiOlwiJmR0cmlmO1wiLFwi4peCXCI6XCImbHRyaWY7XCIsXCLilrhcIjpcIiZydHJpZjtcIixcIuKQo1wiOlwiJmJsYW5rO1wiLFwi4paSXCI6XCImYmxrMTI7XCIsXCLilpFcIjpcIiZibGsxNDtcIixcIuKWk1wiOlwiJmJsazM0O1wiLFwi4paIXCI6XCImYmxvY2s7XCIsXCI94oOlXCI6XCImYm5lO1wiLFwi4omh4oOlXCI6XCImYm5lcXVpdjtcIixcIuKMkFwiOlwiJmJub3Q7XCIsXCLwnZWTXCI6XCImYm9wZjtcIixcIuKLiFwiOlwiJmJvd3RpZTtcIixcIuKVl1wiOlwiJmJveERMO1wiLFwi4pWUXCI6XCImYm94RFI7XCIsXCLilZZcIjpcIiZib3hEbDtcIixcIuKVk1wiOlwiJmJveERyO1wiLFwi4pWQXCI6XCImYm94SDtcIixcIuKVplwiOlwiJmJveEhEO1wiLFwi4pWpXCI6XCImYm94SFU7XCIsXCLilaRcIjpcIiZib3hIZDtcIixcIuKVp1wiOlwiJmJveEh1O1wiLFwi4pWdXCI6XCImYm94VUw7XCIsXCLilZpcIjpcIiZib3hVUjtcIixcIuKVnFwiOlwiJmJveFVsO1wiLFwi4pWZXCI6XCImYm94VXI7XCIsXCLilZFcIjpcIiZib3hWO1wiLFwi4pWsXCI6XCImYm94Vkg7XCIsXCLilaNcIjpcIiZib3hWTDtcIixcIuKVoFwiOlwiJmJveFZSO1wiLFwi4pWrXCI6XCImYm94Vmg7XCIsXCLilaJcIjpcIiZib3hWbDtcIixcIuKVn1wiOlwiJmJveFZyO1wiLFwi4qeJXCI6XCImYm94Ym94O1wiLFwi4pWVXCI6XCImYm94ZEw7XCIsXCLilZJcIjpcIiZib3hkUjtcIixcIuKUkFwiOlwiJmJveGRsO1wiLFwi4pSMXCI6XCImYm94ZHI7XCIsXCLilaVcIjpcIiZib3hoRDtcIixcIuKVqFwiOlwiJmJveGhVO1wiLFwi4pSsXCI6XCImYm94aGQ7XCIsXCLilLRcIjpcIiZib3hodTtcIixcIuKKn1wiOlwiJm1pbnVzYjtcIixcIuKKnlwiOlwiJnBsdXNiO1wiLFwi4oqgXCI6XCImdGltZXNiO1wiLFwi4pWbXCI6XCImYm94dUw7XCIsXCLilZhcIjpcIiZib3h1UjtcIixcIuKUmFwiOlwiJmJveHVsO1wiLFwi4pSUXCI6XCImYm94dXI7XCIsXCLilIJcIjpcIiZib3h2O1wiLFwi4pWqXCI6XCImYm94dkg7XCIsXCLilaFcIjpcIiZib3h2TDtcIixcIuKVnlwiOlwiJmJveHZSO1wiLFwi4pS8XCI6XCImYm94dmg7XCIsXCLilKRcIjpcIiZib3h2bDtcIixcIuKUnFwiOlwiJmJveHZyO1wiLFwiwqZcIjpcIiZicnZiYXI7XCIsXCLwnZK3XCI6XCImYnNjcjtcIixcIuKBj1wiOlwiJmJzZW1pO1wiLFwiXFxcXFwiOlwiJmJzb2w7XCIsXCLip4VcIjpcIiZic29sYjtcIixcIuKfiFwiOlwiJmJzb2xoc3ViO1wiLFwi4oCiXCI6XCImYnVsbGV0O1wiLFwi4qquXCI6XCImYnVtcEU7XCIsXCLEh1wiOlwiJmNhY3V0ZTtcIixcIuKIqVwiOlwiJmNhcDtcIixcIuKphFwiOlwiJmNhcGFuZDtcIixcIuKpiVwiOlwiJmNhcGJyY3VwO1wiLFwi4qmLXCI6XCImY2FwY2FwO1wiLFwi4qmHXCI6XCImY2FwY3VwO1wiLFwi4qmAXCI6XCImY2FwZG90O1wiLFwi4oip77iAXCI6XCImY2FwcztcIixcIuKBgVwiOlwiJmNhcmV0O1wiLFwi4qmNXCI6XCImY2NhcHM7XCIsXCLEjVwiOlwiJmNjYXJvbjtcIixcIsOnXCI6XCImY2NlZGlsO1wiLFwixIlcIjpcIiZjY2lyYztcIixcIuKpjFwiOlwiJmNjdXBzO1wiLFwi4qmQXCI6XCImY2N1cHNzbTtcIixcIsSLXCI6XCImY2RvdDtcIixcIuKmslwiOlwiJmNlbXB0eXY7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLwnZSgXCI6XCImY2ZyO1wiLFwi0YdcIjpcIiZjaGN5O1wiLFwi4pyTXCI6XCImY2hlY2ttYXJrO1wiLFwiz4dcIjpcIiZjaGk7XCIsXCLil4tcIjpcIiZjaXI7XCIsXCLip4NcIjpcIiZjaXJFO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwi4omXXCI6XCImY2lyZTtcIixcIuKGulwiOlwiJm9sYXJyO1wiLFwi4oa7XCI6XCImb3JhcnI7XCIsXCLik4hcIjpcIiZvUztcIixcIuKKm1wiOlwiJm9hc3Q7XCIsXCLiippcIjpcIiZvY2lyO1wiLFwi4oqdXCI6XCImb2Rhc2g7XCIsXCLiqJBcIjpcIiZjaXJmbmludDtcIixcIuKrr1wiOlwiJmNpcm1pZDtcIixcIuKnglwiOlwiJmNpcnNjaXI7XCIsXCLimaNcIjpcIiZjbHVic3VpdDtcIixcIjpcIjpcIiZjb2xvbjtcIixcIixcIjpcIiZjb21tYTtcIixcIkBcIjpcIiZjb21tYXQ7XCIsXCLiiIFcIjpcIiZjb21wbGVtZW50O1wiLFwi4qmtXCI6XCImY29uZ2RvdDtcIixcIvCdlZRcIjpcIiZjb3BmO1wiLFwi4oSXXCI6XCImY29weXNyO1wiLFwi4oa1XCI6XCImY3JhcnI7XCIsXCLinJdcIjpcIiZjcm9zcztcIixcIvCdkrhcIjpcIiZjc2NyO1wiLFwi4quPXCI6XCImY3N1YjtcIixcIuKrkVwiOlwiJmNzdWJlO1wiLFwi4quQXCI6XCImY3N1cDtcIixcIuKrklwiOlwiJmNzdXBlO1wiLFwi4ouvXCI6XCImY3Rkb3Q7XCIsXCLipLhcIjpcIiZjdWRhcnJsO1wiLFwi4qS1XCI6XCImY3VkYXJycjtcIixcIuKLnlwiOlwiJmN1cmx5ZXFwcmVjO1wiLFwi4oufXCI6XCImY3VybHllcXN1Y2M7XCIsXCLihrZcIjpcIiZjdXJ2ZWFycm93bGVmdDtcIixcIuKkvVwiOlwiJmN1bGFycnA7XCIsXCLiiKpcIjpcIiZjdXA7XCIsXCLiqYhcIjpcIiZjdXBicmNhcDtcIixcIuKphlwiOlwiJmN1cGNhcDtcIixcIuKpilwiOlwiJmN1cGN1cDtcIixcIuKKjVwiOlwiJmN1cGRvdDtcIixcIuKphVwiOlwiJmN1cG9yO1wiLFwi4oiq77iAXCI6XCImY3VwcztcIixcIuKGt1wiOlwiJmN1cnZlYXJyb3dyaWdodDtcIixcIuKkvFwiOlwiJmN1cmFycm07XCIsXCLii45cIjpcIiZjdXZlZTtcIixcIuKLj1wiOlwiJmN1d2VkO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLiiLFcIjpcIiZjd2ludDtcIixcIuKMrVwiOlwiJmN5bGN0eTtcIixcIuKlpVwiOlwiJmRIYXI7XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLihLhcIjpcIiZkYWxldGg7XCIsXCLigJBcIjpcIiZoeXBoZW47XCIsXCLipI9cIjpcIiZyQmFycjtcIixcIsSPXCI6XCImZGNhcm9uO1wiLFwi0LRcIjpcIiZkY3k7XCIsXCLih4pcIjpcIiZkb3duZG93bmFycm93cztcIixcIuKpt1wiOlwiJmVERG90O1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLOtFwiOlwiJmRlbHRhO1wiLFwi4qaxXCI6XCImZGVtcHR5djtcIixcIuKlv1wiOlwiJmRmaXNodDtcIixcIvCdlKFcIjpcIiZkZnI7XCIsXCLimaZcIjpcIiZkaWFtcztcIixcIs+dXCI6XCImZ2FtbWFkO1wiLFwi4ouyXCI6XCImZGlzaW47XCIsXCLDt1wiOlwiJmRpdmlkZTtcIixcIuKLh1wiOlwiJmRpdm9ueDtcIixcItGSXCI6XCImZGpjeTtcIixcIuKMnlwiOlwiJmxsY29ybmVyO1wiLFwi4oyNXCI6XCImZGxjcm9wO1wiLCQ6XCImZG9sbGFyO1wiLFwi8J2VlVwiOlwiJmRvcGY7XCIsXCLiiZFcIjpcIiZlRG90O1wiLFwi4oi4XCI6XCImbWludXNkO1wiLFwi4oiUXCI6XCImcGx1c2RvO1wiLFwi4oqhXCI6XCImc2RvdGI7XCIsXCLijJ9cIjpcIiZscmNvcm5lcjtcIixcIuKMjFwiOlwiJmRyY3JvcDtcIixcIvCdkrlcIjpcIiZkc2NyO1wiLFwi0ZVcIjpcIiZkc2N5O1wiLFwi4qe2XCI6XCImZHNvbDtcIixcIsSRXCI6XCImZHN0cm9rO1wiLFwi4ouxXCI6XCImZHRkb3Q7XCIsXCLilr9cIjpcIiZ0cmlhbmdsZWRvd247XCIsXCLipqZcIjpcIiZkd2FuZ2xlO1wiLFwi0Z9cIjpcIiZkemN5O1wiLFwi4p+/XCI6XCImZHppZ3JhcnI7XCIsXCLDqVwiOlwiJmVhY3V0ZTtcIixcIuKprlwiOlwiJmVhc3RlcjtcIixcIsSbXCI6XCImZWNhcm9uO1wiLFwi4omWXCI6XCImZXFjaXJjO1wiLFwiw6pcIjpcIiZlY2lyYztcIixcIuKJlVwiOlwiJmVxY29sb247XCIsXCLRjVwiOlwiJmVjeTtcIixcIsSXXCI6XCImZWRvdDtcIixcIuKJklwiOlwiJmZhbGxpbmdkb3RzZXE7XCIsXCLwnZSiXCI6XCImZWZyO1wiLFwi4qqaXCI6XCImZWc7XCIsXCLDqFwiOlwiJmVncmF2ZTtcIixcIuKqllwiOlwiJmVxc2xhbnRndHI7XCIsXCLiqphcIjpcIiZlZ3Nkb3Q7XCIsXCLiqplcIjpcIiZlbDtcIixcIuKPp1wiOlwiJmVsaW50ZXJzO1wiLFwi4oSTXCI6XCImZWxsO1wiLFwi4qqVXCI6XCImZXFzbGFudGxlc3M7XCIsXCLiqpdcIjpcIiZlbHNkb3Q7XCIsXCLEk1wiOlwiJmVtYWNyO1wiLFwi4oiFXCI6XCImdmFybm90aGluZztcIixcIuKAhFwiOlwiJmVtc3AxMztcIixcIuKAhVwiOlwiJmVtc3AxNDtcIixcIuKAg1wiOlwiJmVtc3A7XCIsXCLFi1wiOlwiJmVuZztcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLEmVwiOlwiJmVvZ29uO1wiLFwi8J2VllwiOlwiJmVvcGY7XCIsXCLii5VcIjpcIiZlcGFyO1wiLFwi4qejXCI6XCImZXBhcnNsO1wiLFwi4qmxXCI6XCImZXBsdXM7XCIsXCLOtVwiOlwiJmVwc2lsb247XCIsXCLPtVwiOlwiJnZhcmVwc2lsb247XCIsXCI9XCI6XCImZXF1YWxzO1wiLFwi4omfXCI6XCImcXVlc3RlcTtcIixcIuKpuFwiOlwiJmVxdWl2REQ7XCIsXCLip6VcIjpcIiZlcXZwYXJzbDtcIixcIuKJk1wiOlwiJnJpc2luZ2RvdHNlcTtcIixcIuKlsVwiOlwiJmVyYXJyO1wiLFwi4oSvXCI6XCImZXNjcjtcIixcIs63XCI6XCImZXRhO1wiLFwiw7BcIjpcIiZldGg7XCIsXCLDq1wiOlwiJmV1bWw7XCIsXCLigqxcIjpcIiZldXJvO1wiLFwiIVwiOlwiJmV4Y2w7XCIsXCLRhFwiOlwiJmZjeTtcIixcIuKZgFwiOlwiJmZlbWFsZTtcIixcIu+sg1wiOlwiJmZmaWxpZztcIixcIu+sgFwiOlwiJmZmbGlnO1wiLFwi76yEXCI6XCImZmZsbGlnO1wiLFwi8J2Uo1wiOlwiJmZmcjtcIixcIu+sgVwiOlwiJmZpbGlnO1wiLGZqOlwiJmZqbGlnO1wiLFwi4pmtXCI6XCImZmxhdDtcIixcIu+sglwiOlwiJmZsbGlnO1wiLFwi4paxXCI6XCImZmx0bnM7XCIsXCLGklwiOlwiJmZub2Y7XCIsXCLwnZWXXCI6XCImZm9wZjtcIixcIuKLlFwiOlwiJnBpdGNoZm9yaztcIixcIuKrmVwiOlwiJmZvcmt2O1wiLFwi4qiNXCI6XCImZnBhcnRpbnQ7XCIsXCLCvVwiOlwiJmhhbGY7XCIsXCLihZNcIjpcIiZmcmFjMTM7XCIsXCLCvFwiOlwiJmZyYWMxNDtcIixcIuKFlVwiOlwiJmZyYWMxNTtcIixcIuKFmVwiOlwiJmZyYWMxNjtcIixcIuKFm1wiOlwiJmZyYWMxODtcIixcIuKFlFwiOlwiJmZyYWMyMztcIixcIuKFllwiOlwiJmZyYWMyNTtcIixcIsK+XCI6XCImZnJhYzM0O1wiLFwi4oWXXCI6XCImZnJhYzM1O1wiLFwi4oWcXCI6XCImZnJhYzM4O1wiLFwi4oWYXCI6XCImZnJhYzQ1O1wiLFwi4oWaXCI6XCImZnJhYzU2O1wiLFwi4oWdXCI6XCImZnJhYzU4O1wiLFwi4oWeXCI6XCImZnJhYzc4O1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLijKJcIjpcIiZzZnJvd247XCIsXCLwnZK7XCI6XCImZnNjcjtcIixcIuKqjFwiOlwiJmd0cmVxcWxlc3M7XCIsXCLHtVwiOlwiJmdhY3V0ZTtcIixcIs6zXCI6XCImZ2FtbWE7XCIsXCLiqoZcIjpcIiZndHJhcHByb3g7XCIsXCLEn1wiOlwiJmdicmV2ZTtcIixcIsSdXCI6XCImZ2NpcmM7XCIsXCLQs1wiOlwiJmdjeTtcIixcIsShXCI6XCImZ2RvdDtcIixcIuKqqVwiOlwiJmdlc2NjO1wiLFwi4qqAXCI6XCImZ2VzZG90O1wiLFwi4qqCXCI6XCImZ2VzZG90bztcIixcIuKqhFwiOlwiJmdlc2RvdG9sO1wiLFwi4oub77iAXCI6XCImZ2VzbDtcIixcIuKqlFwiOlwiJmdlc2xlcztcIixcIvCdlKRcIjpcIiZnZnI7XCIsXCLihLdcIjpcIiZnaW1lbDtcIixcItGTXCI6XCImZ2pjeTtcIixcIuKqklwiOlwiJmdsRTtcIixcIuKqpVwiOlwiJmdsYTtcIixcIuKqpFwiOlwiJmdsajtcIixcIuKJqVwiOlwiJmduZXFxO1wiLFwi4qqKXCI6XCImZ25hcHByb3g7XCIsXCLiqohcIjpcIiZnbmVxO1wiLFwi4ounXCI6XCImZ25zaW07XCIsXCLwnZWYXCI6XCImZ29wZjtcIixcIuKEilwiOlwiJmdzY3I7XCIsXCLiqo5cIjpcIiZnc2ltZTtcIixcIuKqkFwiOlwiJmdzaW1sO1wiLFwi4qqnXCI6XCImZ3RjYztcIixcIuKpulwiOlwiJmd0Y2lyO1wiLFwi4ouXXCI6XCImZ3RyZG90O1wiLFwi4qaVXCI6XCImZ3RsUGFyO1wiLFwi4qm8XCI6XCImZ3RxdWVzdDtcIixcIuKluFwiOlwiJmd0cmFycjtcIixcIuKJqe+4gFwiOlwiJmd2bkU7XCIsXCLRilwiOlwiJmhhcmRjeTtcIixcIuKliFwiOlwiJmhhcnJjaXI7XCIsXCLihq1cIjpcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiLFwi4oSPXCI6XCImcGxhbmt2O1wiLFwixKVcIjpcIiZoY2lyYztcIixcIuKZpVwiOlwiJmhlYXJ0c3VpdDtcIixcIuKAplwiOlwiJm1sZHI7XCIsXCLiirlcIjpcIiZoZXJjb247XCIsXCLwnZSlXCI6XCImaGZyO1wiLFwi4qSlXCI6XCImc2VhcmhrO1wiLFwi4qSmXCI6XCImc3dhcmhrO1wiLFwi4oe/XCI6XCImaG9hcnI7XCIsXCLiiLtcIjpcIiZob210aHQ7XCIsXCLihqlcIjpcIiZsYXJyaGs7XCIsXCLihqpcIjpcIiZyYXJyaGs7XCIsXCLwnZWZXCI6XCImaG9wZjtcIixcIuKAlVwiOlwiJmhvcmJhcjtcIixcIvCdkr1cIjpcIiZoc2NyO1wiLFwixKdcIjpcIiZoc3Ryb2s7XCIsXCLigYNcIjpcIiZoeWJ1bGw7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLQuFwiOlwiJmljeTtcIixcItC1XCI6XCImaWVjeTtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLwnZSmXCI6XCImaWZyO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLiqIxcIjpcIiZxaW50O1wiLFwi4oitXCI6XCImdGludDtcIixcIuKnnFwiOlwiJmlpbmZpbjtcIixcIuKEqVwiOlwiJmlpb3RhO1wiLFwixLNcIjpcIiZpamxpZztcIixcIsSrXCI6XCImaW1hY3I7XCIsXCLEsVwiOlwiJmlub2RvdDtcIixcIuKKt1wiOlwiJmltb2Y7XCIsXCLGtVwiOlwiJmltcGVkO1wiLFwi4oSFXCI6XCImaW5jYXJlO1wiLFwi4oieXCI6XCImaW5maW47XCIsXCLip51cIjpcIiZpbmZpbnRpZTtcIixcIuKKulwiOlwiJmludGVyY2FsO1wiLFwi4qiXXCI6XCImaW50bGFyaGs7XCIsXCLiqLxcIjpcIiZpcHJvZDtcIixcItGRXCI6XCImaW9jeTtcIixcIsSvXCI6XCImaW9nb247XCIsXCLwnZWaXCI6XCImaW9wZjtcIixcIs65XCI6XCImaW90YTtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwi8J2SvlwiOlwiJmlzY3I7XCIsXCLii7lcIjpcIiZpc2luRTtcIixcIuKLtVwiOlwiJmlzaW5kb3Q7XCIsXCLii7RcIjpcIiZpc2lucztcIixcIuKLs1wiOlwiJmlzaW5zdjtcIixcIsSpXCI6XCImaXRpbGRlO1wiLFwi0ZZcIjpcIiZpdWtjeTtcIixcIsOvXCI6XCImaXVtbDtcIixcIsS1XCI6XCImamNpcmM7XCIsXCLQuVwiOlwiJmpjeTtcIixcIvCdlKdcIjpcIiZqZnI7XCIsXCLIt1wiOlwiJmptYXRoO1wiLFwi8J2Vm1wiOlwiJmpvcGY7XCIsXCLwnZK/XCI6XCImanNjcjtcIixcItGYXCI6XCImanNlcmN5O1wiLFwi0ZRcIjpcIiZqdWtjeTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLPsFwiOlwiJnZhcmthcHBhO1wiLFwixLdcIjpcIiZrY2VkaWw7XCIsXCLQulwiOlwiJmtjeTtcIixcIvCdlKhcIjpcIiZrZnI7XCIsXCLEuFwiOlwiJmtncmVlbjtcIixcItGFXCI6XCIma2hjeTtcIixcItGcXCI6XCIma2pjeTtcIixcIvCdlZxcIjpcIiZrb3BmO1wiLFwi8J2TgFwiOlwiJmtzY3I7XCIsXCLipJtcIjpcIiZsQXRhaWw7XCIsXCLipI5cIjpcIiZsQmFycjtcIixcIuKqi1wiOlwiJmxlc3NlcXFndHI7XCIsXCLipaJcIjpcIiZsSGFyO1wiLFwixLpcIjpcIiZsYWN1dGU7XCIsXCLiprRcIjpcIiZsYWVtcHR5djtcIixcIs67XCI6XCImbGFtYmRhO1wiLFwi4qaRXCI6XCImbGFuZ2Q7XCIsXCLiqoVcIjpcIiZsZXNzYXBwcm94O1wiLFwiwqtcIjpcIiZsYXF1bztcIixcIuKkn1wiOlwiJmxhcnJiZnM7XCIsXCLipJ1cIjpcIiZsYXJyZnM7XCIsXCLihqtcIjpcIiZsb29wYXJyb3dsZWZ0O1wiLFwi4qS5XCI6XCImbGFycnBsO1wiLFwi4qWzXCI6XCImbGFycnNpbTtcIixcIuKGolwiOlwiJmxlZnRhcnJvd3RhaWw7XCIsXCLiqqtcIjpcIiZsYXQ7XCIsXCLipJlcIjpcIiZsYXRhaWw7XCIsXCLiqq1cIjpcIiZsYXRlO1wiLFwi4qqt77iAXCI6XCImbGF0ZXM7XCIsXCLipIxcIjpcIiZsYmFycjtcIixcIuKdslwiOlwiJmxiYnJrO1wiLFwie1wiOlwiJmxjdWI7XCIsXCJbXCI6XCImbHNxYjtcIixcIuKmi1wiOlwiJmxicmtlO1wiLFwi4qaPXCI6XCImbGJya3NsZDtcIixcIuKmjVwiOlwiJmxicmtzbHU7XCIsXCLEvlwiOlwiJmxjYXJvbjtcIixcIsS8XCI6XCImbGNlZGlsO1wiLFwi0LtcIjpcIiZsY3k7XCIsXCLipLZcIjpcIiZsZGNhO1wiLFwi4qWnXCI6XCImbGRyZGhhcjtcIixcIuKli1wiOlwiJmxkcnVzaGFyO1wiLFwi4oayXCI6XCImbGRzaDtcIixcIuKJpFwiOlwiJmxlcTtcIixcIuKHh1wiOlwiJmxsYXJyO1wiLFwi4ouLXCI6XCImbHRocmVlO1wiLFwi4qqoXCI6XCImbGVzY2M7XCIsXCLiqb9cIjpcIiZsZXNkb3Q7XCIsXCLiqoFcIjpcIiZsZXNkb3RvO1wiLFwi4qqDXCI6XCImbGVzZG90b3I7XCIsXCLii5rvuIBcIjpcIiZsZXNnO1wiLFwi4qqTXCI6XCImbGVzZ2VzO1wiLFwi4ouWXCI6XCImbHRkb3Q7XCIsXCLipbxcIjpcIiZsZmlzaHQ7XCIsXCLwnZSpXCI6XCImbGZyO1wiLFwi4qqRXCI6XCImbGdFO1wiLFwi4qWqXCI6XCImbGhhcnVsO1wiLFwi4paEXCI6XCImbGhibGs7XCIsXCLRmVwiOlwiJmxqY3k7XCIsXCLipatcIjpcIiZsbGhhcmQ7XCIsXCLil7pcIjpcIiZsbHRyaTtcIixcIsWAXCI6XCImbG1pZG90O1wiLFwi4o6wXCI6XCImbG1vdXN0YWNoZTtcIixcIuKJqFwiOlwiJmxuZXFxO1wiLFwi4qqJXCI6XCImbG5hcHByb3g7XCIsXCLiqodcIjpcIiZsbmVxO1wiLFwi4oumXCI6XCImbG5zaW07XCIsXCLin6xcIjpcIiZsb2FuZztcIixcIuKHvVwiOlwiJmxvYXJyO1wiLFwi4p+8XCI6XCImeG1hcDtcIixcIuKGrFwiOlwiJnJhcnJscDtcIixcIuKmhVwiOlwiJmxvcGFyO1wiLFwi8J2VnVwiOlwiJmxvcGY7XCIsXCLiqK1cIjpcIiZsb3BsdXM7XCIsXCLiqLRcIjpcIiZsb3RpbWVzO1wiLFwi4oiXXCI6XCImbG93YXN0O1wiLFwi4peKXCI6XCImbG96ZW5nZTtcIixcIihcIjpcIiZscGFyO1wiLFwi4qaTXCI6XCImbHBhcmx0O1wiLFwi4qWtXCI6XCImbHJoYXJkO1wiLFwi4oCOXCI6XCImbHJtO1wiLFwi4oq/XCI6XCImbHJ0cmk7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLwnZOBXCI6XCImbHNjcjtcIixcIuKqjVwiOlwiJmxzaW1lO1wiLFwi4qqPXCI6XCImbHNpbWc7XCIsXCLigJpcIjpcIiZzYnF1bztcIixcIsWCXCI6XCImbHN0cm9rO1wiLFwi4qqmXCI6XCImbHRjYztcIixcIuKpuVwiOlwiJmx0Y2lyO1wiLFwi4ouJXCI6XCImbHRpbWVzO1wiLFwi4qW2XCI6XCImbHRsYXJyO1wiLFwi4qm7XCI6XCImbHRxdWVzdDtcIixcIuKmllwiOlwiJmx0clBhcjtcIixcIuKXg1wiOlwiJnRyaWFuZ2xlbGVmdDtcIixcIuKlilwiOlwiJmx1cmRzaGFyO1wiLFwi4qWmXCI6XCImbHVydWhhcjtcIixcIuKJqO+4gFwiOlwiJmx2bkU7XCIsXCLiiLpcIjpcIiZtRERvdDtcIixcIsKvXCI6XCImc3RybnM7XCIsXCLimYJcIjpcIiZtYWxlO1wiLFwi4pygXCI6XCImbWFsdGVzZTtcIixcIuKWrlwiOlwiJm1hcmtlcjtcIixcIuKoqVwiOlwiJm1jb21tYTtcIixcItC8XCI6XCImbWN5O1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLwnZSqXCI6XCImbWZyO1wiLFwi4oSnXCI6XCImbWhvO1wiLFwiwrVcIjpcIiZtaWNybztcIixcIuKrsFwiOlwiJm1pZGNpcjtcIixcIuKIklwiOlwiJm1pbnVzO1wiLFwi4qiqXCI6XCImbWludXNkdTtcIixcIuKrm1wiOlwiJm1sY3A7XCIsXCLiiqdcIjpcIiZtb2RlbHM7XCIsXCLwnZWeXCI6XCImbW9wZjtcIixcIvCdk4JcIjpcIiZtc2NyO1wiLFwizrxcIjpcIiZtdTtcIixcIuKKuFwiOlwiJm11bWFwO1wiLFwi4ouZzLhcIjpcIiZuR2c7XCIsXCLiiavig5JcIjpcIiZuR3Q7XCIsXCLih41cIjpcIiZubEFycjtcIixcIuKHjlwiOlwiJm5oQXJyO1wiLFwi4ouYzLhcIjpcIiZuTGw7XCIsXCLiiarig5JcIjpcIiZuTHQ7XCIsXCLih49cIjpcIiZuckFycjtcIixcIuKKr1wiOlwiJm5WRGFzaDtcIixcIuKKrlwiOlwiJm5WZGFzaDtcIixcIsWEXCI6XCImbmFjdXRlO1wiLFwi4oig4oOSXCI6XCImbmFuZztcIixcIuKpsMy4XCI6XCImbmFwRTtcIixcIuKJi8y4XCI6XCImbmFwaWQ7XCIsXCLFiVwiOlwiJm5hcG9zO1wiLFwi4pmuXCI6XCImbmF0dXJhbDtcIixcIuKpg1wiOlwiJm5jYXA7XCIsXCLFiFwiOlwiJm5jYXJvbjtcIixcIsWGXCI6XCImbmNlZGlsO1wiLFwi4qmtzLhcIjpcIiZuY29uZ2RvdDtcIixcIuKpglwiOlwiJm5jdXA7XCIsXCLQvVwiOlwiJm5jeTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oeXXCI6XCImbmVBcnI7XCIsXCLipKRcIjpcIiZuZWFyaGs7XCIsXCLiiZDMuFwiOlwiJm5lZG90O1wiLFwi4qSoXCI6XCImdG9lYTtcIixcIvCdlKtcIjpcIiZuZnI7XCIsXCLihq5cIjpcIiZubGVmdHJpZ2h0YXJyb3c7XCIsXCLiq7JcIjpcIiZuaHBhcjtcIixcIuKLvFwiOlwiJm5pcztcIixcIuKLulwiOlwiJm5pc2Q7XCIsXCLRmlwiOlwiJm5qY3k7XCIsXCLiiabMuFwiOlwiJm5sZXFxO1wiLFwi4oaaXCI6XCImbmxlZnRhcnJvdztcIixcIuKApVwiOlwiJm5sZHI7XCIsXCLwnZWfXCI6XCImbm9wZjtcIixcIsKsXCI6XCImbm90O1wiLFwi4ou5zLhcIjpcIiZub3RpbkU7XCIsXCLii7XMuFwiOlwiJm5vdGluZG90O1wiLFwi4ou3XCI6XCImbm90aW52YjtcIixcIuKLtlwiOlwiJm5vdGludmM7XCIsXCLii75cIjpcIiZub3RuaXZiO1wiLFwi4ou9XCI6XCImbm90bml2YztcIixcIuKrveKDpVwiOlwiJm5wYXJzbDtcIixcIuKIgsy4XCI6XCImbnBhcnQ7XCIsXCLiqJRcIjpcIiZucG9saW50O1wiLFwi4oabXCI6XCImbnJpZ2h0YXJyb3c7XCIsXCLipLPMuFwiOlwiJm5yYXJyYztcIixcIuKGncy4XCI6XCImbnJhcnJ3O1wiLFwi8J2Tg1wiOlwiJm5zY3I7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4quFzLhcIjpcIiZuc3Vic2V0ZXFxO1wiLFwi4oqFXCI6XCImbnN1cDtcIixcIuKrhsy4XCI6XCImbnN1cHNldGVxcTtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwizr1cIjpcIiZudTtcIixcIiNcIjpcIiZudW07XCIsXCLihJZcIjpcIiZudW1lcm87XCIsXCLigIdcIjpcIiZudW1zcDtcIixcIuKKrVwiOlwiJm52RGFzaDtcIixcIuKkhFwiOlwiJm52SGFycjtcIixcIuKJjeKDklwiOlwiJm52YXA7XCIsXCLiiqxcIjpcIiZudmRhc2g7XCIsXCLiiaXig5JcIjpcIiZudmdlO1wiLFwiPuKDklwiOlwiJm52Z3Q7XCIsXCLip55cIjpcIiZudmluZmluO1wiLFwi4qSCXCI6XCImbnZsQXJyO1wiLFwi4omk4oOSXCI6XCImbnZsZTtcIixcIjzig5JcIjpcIiZudmx0O1wiLFwi4oq04oOSXCI6XCImbnZsdHJpZTtcIixcIuKkg1wiOlwiJm52ckFycjtcIixcIuKKteKDklwiOlwiJm52cnRyaWU7XCIsXCLiiLzig5JcIjpcIiZudnNpbTtcIixcIuKHllwiOlwiJm53QXJyO1wiLFwi4qSjXCI6XCImbndhcmhrO1wiLFwi4qSnXCI6XCImbnduZWFyO1wiLFwiw7NcIjpcIiZvYWN1dGU7XCIsXCLDtFwiOlwiJm9jaXJjO1wiLFwi0L5cIjpcIiZvY3k7XCIsXCLFkVwiOlwiJm9kYmxhYztcIixcIuKouFwiOlwiJm9kaXY7XCIsXCLiprxcIjpcIiZvZHNvbGQ7XCIsXCLFk1wiOlwiJm9lbGlnO1wiLFwi4qa/XCI6XCImb2ZjaXI7XCIsXCLwnZSsXCI6XCImb2ZyO1wiLFwiy5tcIjpcIiZvZ29uO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLip4FcIjpcIiZvZ3Q7XCIsXCLiprVcIjpcIiZvaGJhcjtcIixcIuKmvlwiOlwiJm9sY2lyO1wiLFwi4qa7XCI6XCImb2xjcm9zcztcIixcIuKngFwiOlwiJm9sdDtcIixcIsWNXCI6XCImb21hY3I7XCIsXCLPiVwiOlwiJm9tZWdhO1wiLFwizr9cIjpcIiZvbWljcm9uO1wiLFwi4qa2XCI6XCImb21pZDtcIixcIvCdlaBcIjpcIiZvb3BmO1wiLFwi4qa3XCI6XCImb3BhcjtcIixcIuKmuVwiOlwiJm9wZXJwO1wiLFwi4oioXCI6XCImdmVlO1wiLFwi4qmdXCI6XCImb3JkO1wiLFwi4oS0XCI6XCImb3NjcjtcIixcIsKqXCI6XCImb3JkZjtcIixcIsK6XCI6XCImb3JkbTtcIixcIuKKtlwiOlwiJm9yaWdvZjtcIixcIuKpllwiOlwiJm9yb3I7XCIsXCLiqZdcIjpcIiZvcnNsb3BlO1wiLFwi4qmbXCI6XCImb3J2O1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLiiphcIjpcIiZvc29sO1wiLFwiw7VcIjpcIiZvdGlsZGU7XCIsXCLiqLZcIjpcIiZvdGltZXNhcztcIixcIsO2XCI6XCImb3VtbDtcIixcIuKMvVwiOlwiJm92YmFyO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwi4quzXCI6XCImcGFyc2ltO1wiLFwi4qu9XCI6XCImcGFyc2w7XCIsXCLQv1wiOlwiJnBjeTtcIixcIiVcIjpcIiZwZXJjbnQ7XCIsXCIuXCI6XCImcGVyaW9kO1wiLFwi4oCwXCI6XCImcGVybWlsO1wiLFwi4oCxXCI6XCImcGVydGVuaztcIixcIvCdlK1cIjpcIiZwZnI7XCIsXCLPhlwiOlwiJnBoaTtcIixcIs+VXCI6XCImdmFycGhpO1wiLFwi4piOXCI6XCImcGhvbmU7XCIsXCLPgFwiOlwiJnBpO1wiLFwiz5ZcIjpcIiZ2YXJwaTtcIixcIuKEjlwiOlwiJnBsYW5ja2g7XCIsXCIrXCI6XCImcGx1cztcIixcIuKoo1wiOlwiJnBsdXNhY2lyO1wiLFwi4qiiXCI6XCImcGx1c2NpcjtcIixcIuKopVwiOlwiJnBsdXNkdTtcIixcIuKpslwiOlwiJnBsdXNlO1wiLFwi4qimXCI6XCImcGx1c3NpbTtcIixcIuKop1wiOlwiJnBsdXN0d287XCIsXCLiqJVcIjpcIiZwb2ludGludDtcIixcIvCdlaFcIjpcIiZwb3BmO1wiLFwiwqNcIjpcIiZwb3VuZDtcIixcIuKqs1wiOlwiJnByRTtcIixcIuKqt1wiOlwiJnByZWNhcHByb3g7XCIsXCLiqrlcIjpcIiZwcm5hcDtcIixcIuKqtVwiOlwiJnBybkU7XCIsXCLii6hcIjpcIiZwcm5zaW07XCIsXCLigLJcIjpcIiZwcmltZTtcIixcIuKMrlwiOlwiJnByb2ZhbGFyO1wiLFwi4oySXCI6XCImcHJvZmxpbmU7XCIsXCLijJNcIjpcIiZwcm9mc3VyZjtcIixcIuKKsFwiOlwiJnBydXJlbDtcIixcIvCdk4VcIjpcIiZwc2NyO1wiLFwiz4hcIjpcIiZwc2k7XCIsXCLigIhcIjpcIiZwdW5jc3A7XCIsXCLwnZSuXCI6XCImcWZyO1wiLFwi8J2VolwiOlwiJnFvcGY7XCIsXCLigZdcIjpcIiZxcHJpbWU7XCIsXCLwnZOGXCI6XCImcXNjcjtcIixcIuKollwiOlwiJnF1YXRpbnQ7XCIsXCI/XCI6XCImcXVlc3Q7XCIsXCLipJxcIjpcIiZyQXRhaWw7XCIsXCLipaRcIjpcIiZySGFyO1wiLFwi4oi9zLFcIjpcIiZyYWNlO1wiLFwixZVcIjpcIiZyYWN1dGU7XCIsXCLiprNcIjpcIiZyYWVtcHR5djtcIixcIuKmklwiOlwiJnJhbmdkO1wiLFwi4qalXCI6XCImcmFuZ2U7XCIsXCLCu1wiOlwiJnJhcXVvO1wiLFwi4qW1XCI6XCImcmFycmFwO1wiLFwi4qSgXCI6XCImcmFycmJmcztcIixcIuKks1wiOlwiJnJhcnJjO1wiLFwi4qSeXCI6XCImcmFycmZzO1wiLFwi4qWFXCI6XCImcmFycnBsO1wiLFwi4qW0XCI6XCImcmFycnNpbTtcIixcIuKGo1wiOlwiJnJpZ2h0YXJyb3d0YWlsO1wiLFwi4oadXCI6XCImcmlnaHRzcXVpZ2Fycm93O1wiLFwi4qSaXCI6XCImcmF0YWlsO1wiLFwi4oi2XCI6XCImcmF0aW87XCIsXCLinbNcIjpcIiZyYmJyaztcIixcIn1cIjpcIiZyY3ViO1wiLFwiXVwiOlwiJnJzcWI7XCIsXCLipoxcIjpcIiZyYnJrZTtcIixcIuKmjlwiOlwiJnJicmtzbGQ7XCIsXCLippBcIjpcIiZyYnJrc2x1O1wiLFwixZlcIjpcIiZyY2Fyb247XCIsXCLFl1wiOlwiJnJjZWRpbDtcIixcItGAXCI6XCImcmN5O1wiLFwi4qS3XCI6XCImcmRjYTtcIixcIuKlqVwiOlwiJnJkbGRoYXI7XCIsXCLihrNcIjpcIiZyZHNoO1wiLFwi4patXCI6XCImcmVjdDtcIixcIuKlvVwiOlwiJnJmaXNodDtcIixcIvCdlK9cIjpcIiZyZnI7XCIsXCLipaxcIjpcIiZyaGFydWw7XCIsXCLPgVwiOlwiJnJobztcIixcIs+xXCI6XCImdmFycmhvO1wiLFwi4oeJXCI6XCImcnJhcnI7XCIsXCLii4xcIjpcIiZydGhyZWU7XCIsXCLLmlwiOlwiJnJpbmc7XCIsXCLigI9cIjpcIiZybG07XCIsXCLijrFcIjpcIiZybW91c3RhY2hlO1wiLFwi4quuXCI6XCImcm5taWQ7XCIsXCLin61cIjpcIiZyb2FuZztcIixcIuKHvlwiOlwiJnJvYXJyO1wiLFwi4qaGXCI6XCImcm9wYXI7XCIsXCLwnZWjXCI6XCImcm9wZjtcIixcIuKorlwiOlwiJnJvcGx1cztcIixcIuKotVwiOlwiJnJvdGltZXM7XCIsXCIpXCI6XCImcnBhcjtcIixcIuKmlFwiOlwiJnJwYXJndDtcIixcIuKoklwiOlwiJnJwcG9saW50O1wiLFwi4oC6XCI6XCImcnNhcXVvO1wiLFwi8J2Th1wiOlwiJnJzY3I7XCIsXCLii4pcIjpcIiZydGltZXM7XCIsXCLilrlcIjpcIiZ0cmlhbmdsZXJpZ2h0O1wiLFwi4qeOXCI6XCImcnRyaWx0cmk7XCIsXCLipahcIjpcIiZydWx1aGFyO1wiLFwi4oSeXCI6XCImcng7XCIsXCLFm1wiOlwiJnNhY3V0ZTtcIixcIuKqtFwiOlwiJnNjRTtcIixcIuKquFwiOlwiJnN1Y2NhcHByb3g7XCIsXCLFoVwiOlwiJnNjYXJvbjtcIixcIsWfXCI6XCImc2NlZGlsO1wiLFwixZ1cIjpcIiZzY2lyYztcIixcIuKqtlwiOlwiJnN1Y2NuZXFxO1wiLFwi4qq6XCI6XCImc3VjY25hcHByb3g7XCIsXCLii6lcIjpcIiZzdWNjbnNpbTtcIixcIuKok1wiOlwiJnNjcG9saW50O1wiLFwi0YFcIjpcIiZzY3k7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4qmmXCI6XCImc2RvdGU7XCIsXCLih5hcIjpcIiZzZUFycjtcIixcIsKnXCI6XCImc2VjdDtcIixcIjtcIjpcIiZzZW1pO1wiLFwi4qSpXCI6XCImdG9zYTtcIixcIuKctlwiOlwiJnNleHQ7XCIsXCLwnZSwXCI6XCImc2ZyO1wiLFwi4pmvXCI6XCImc2hhcnA7XCIsXCLRiVwiOlwiJnNoY2hjeTtcIixcItGIXCI6XCImc2hjeTtcIixcIsKtXCI6XCImc2h5O1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+CXCI6XCImdmFyc2lnbWE7XCIsXCLiqapcIjpcIiZzaW1kb3Q7XCIsXCLiqp5cIjpcIiZzaW1nO1wiLFwi4qqgXCI6XCImc2ltZ0U7XCIsXCLiqp1cIjpcIiZzaW1sO1wiLFwi4qqfXCI6XCImc2ltbEU7XCIsXCLiiYZcIjpcIiZzaW1uZTtcIixcIuKopFwiOlwiJnNpbXBsdXM7XCIsXCLipbJcIjpcIiZzaW1yYXJyO1wiLFwi4qizXCI6XCImc21hc2hwO1wiLFwi4qekXCI6XCImc21lcGFyc2w7XCIsXCLijKNcIjpcIiZzc21pbGU7XCIsXCLiqqpcIjpcIiZzbXQ7XCIsXCLiqqxcIjpcIiZzbXRlO1wiLFwi4qqs77iAXCI6XCImc210ZXM7XCIsXCLRjFwiOlwiJnNvZnRjeTtcIixcIi9cIjpcIiZzb2w7XCIsXCLip4RcIjpcIiZzb2xiO1wiLFwi4oy/XCI6XCImc29sYmFyO1wiLFwi8J2VpFwiOlwiJnNvcGY7XCIsXCLimaBcIjpcIiZzcGFkZXN1aXQ7XCIsXCLiipPvuIBcIjpcIiZzcWNhcHM7XCIsXCLiipTvuIBcIjpcIiZzcWN1cHM7XCIsXCLwnZOIXCI6XCImc3NjcjtcIixcIuKYhlwiOlwiJnN0YXI7XCIsXCLiioJcIjpcIiZzdWJzZXQ7XCIsXCLiq4VcIjpcIiZzdWJzZXRlcXE7XCIsXCLiqr1cIjpcIiZzdWJkb3Q7XCIsXCLiq4NcIjpcIiZzdWJlZG90O1wiLFwi4quBXCI6XCImc3VibXVsdDtcIixcIuKri1wiOlwiJnN1YnNldG5lcXE7XCIsXCLiiopcIjpcIiZzdWJzZXRuZXE7XCIsXCLiqr9cIjpcIiZzdWJwbHVzO1wiLFwi4qW5XCI6XCImc3VicmFycjtcIixcIuKrh1wiOlwiJnN1YnNpbTtcIixcIuKrlVwiOlwiJnN1YnN1YjtcIixcIuKrk1wiOlwiJnN1YnN1cDtcIixcIuKZqlwiOlwiJnN1bmc7XCIsXCLCuVwiOlwiJnN1cDE7XCIsXCLCslwiOlwiJnN1cDI7XCIsXCLCs1wiOlwiJnN1cDM7XCIsXCLiq4ZcIjpcIiZzdXBzZXRlcXE7XCIsXCLiqr5cIjpcIiZzdXBkb3Q7XCIsXCLiq5hcIjpcIiZzdXBkc3ViO1wiLFwi4quEXCI6XCImc3VwZWRvdDtcIixcIuKfiVwiOlwiJnN1cGhzb2w7XCIsXCLiq5dcIjpcIiZzdXBoc3ViO1wiLFwi4qW7XCI6XCImc3VwbGFycjtcIixcIuKrglwiOlwiJnN1cG11bHQ7XCIsXCLiq4xcIjpcIiZzdXBzZXRuZXFxO1wiLFwi4oqLXCI6XCImc3Vwc2V0bmVxO1wiLFwi4quAXCI6XCImc3VwcGx1cztcIixcIuKriFwiOlwiJnN1cHNpbTtcIixcIuKrlFwiOlwiJnN1cHN1YjtcIixcIuKrllwiOlwiJnN1cHN1cDtcIixcIuKHmVwiOlwiJnN3QXJyO1wiLFwi4qSqXCI6XCImc3dud2FyO1wiLFwiw59cIjpcIiZzemxpZztcIixcIuKMllwiOlwiJnRhcmdldDtcIixcIs+EXCI6XCImdGF1O1wiLFwixaVcIjpcIiZ0Y2Fyb247XCIsXCLFo1wiOlwiJnRjZWRpbDtcIixcItGCXCI6XCImdGN5O1wiLFwi4oyVXCI6XCImdGVscmVjO1wiLFwi8J2UsVwiOlwiJnRmcjtcIixcIs64XCI6XCImdGhldGE7XCIsXCLPkVwiOlwiJnZhcnRoZXRhO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsOXXCI6XCImdGltZXM7XCIsXCLiqLFcIjpcIiZ0aW1lc2JhcjtcIixcIuKosFwiOlwiJnRpbWVzZDtcIixcIuKMtlwiOlwiJnRvcGJvdDtcIixcIuKrsVwiOlwiJnRvcGNpcjtcIixcIvCdlaVcIjpcIiZ0b3BmO1wiLFwi4quaXCI6XCImdG9wZm9yaztcIixcIuKAtFwiOlwiJnRwcmltZTtcIixcIuKWtVwiOlwiJnV0cmk7XCIsXCLiiZxcIjpcIiZ0cmllO1wiLFwi4pesXCI6XCImdHJpZG90O1wiLFwi4qi6XCI6XCImdHJpbWludXM7XCIsXCLiqLlcIjpcIiZ0cmlwbHVzO1wiLFwi4qeNXCI6XCImdHJpc2I7XCIsXCLiqLtcIjpcIiZ0cml0aW1lO1wiLFwi4o+iXCI6XCImdHJwZXppdW07XCIsXCLwnZOJXCI6XCImdHNjcjtcIixcItGGXCI6XCImdHNjeTtcIixcItGbXCI6XCImdHNoY3k7XCIsXCLFp1wiOlwiJnRzdHJvaztcIixcIuKlo1wiOlwiJnVIYXI7XCIsXCLDulwiOlwiJnVhY3V0ZTtcIixcItGeXCI6XCImdWJyY3k7XCIsXCLFrVwiOlwiJnVicmV2ZTtcIixcIsO7XCI6XCImdWNpcmM7XCIsXCLRg1wiOlwiJnVjeTtcIixcIsWxXCI6XCImdWRibGFjO1wiLFwi4qW+XCI6XCImdWZpc2h0O1wiLFwi8J2UslwiOlwiJnVmcjtcIixcIsO5XCI6XCImdWdyYXZlO1wiLFwi4paAXCI6XCImdWhibGs7XCIsXCLijJxcIjpcIiZ1bGNvcm5lcjtcIixcIuKMj1wiOlwiJnVsY3JvcDtcIixcIuKXuFwiOlwiJnVsdHJpO1wiLFwixatcIjpcIiZ1bWFjcjtcIixcIsWzXCI6XCImdW9nb247XCIsXCLwnZWmXCI6XCImdW9wZjtcIixcIs+FXCI6XCImdXBzaWxvbjtcIixcIuKHiFwiOlwiJnV1YXJyO1wiLFwi4oydXCI6XCImdXJjb3JuZXI7XCIsXCLijI5cIjpcIiZ1cmNyb3A7XCIsXCLFr1wiOlwiJnVyaW5nO1wiLFwi4pe5XCI6XCImdXJ0cmk7XCIsXCLwnZOKXCI6XCImdXNjcjtcIixcIuKLsFwiOlwiJnV0ZG90O1wiLFwixalcIjpcIiZ1dGlsZGU7XCIsXCLDvFwiOlwiJnV1bWw7XCIsXCLipqdcIjpcIiZ1d2FuZ2xlO1wiLFwi4quoXCI6XCImdkJhcjtcIixcIuKrqVwiOlwiJnZCYXJ2O1wiLFwi4qacXCI6XCImdmFuZ3J0O1wiLFwi4oqK77iAXCI6XCImdnN1Ym5lO1wiLFwi4quL77iAXCI6XCImdnN1Ym5FO1wiLFwi4oqL77iAXCI6XCImdnN1cG5lO1wiLFwi4quM77iAXCI6XCImdnN1cG5FO1wiLFwi0LJcIjpcIiZ2Y3k7XCIsXCLiirtcIjpcIiZ2ZWViYXI7XCIsXCLiiZpcIjpcIiZ2ZWVlcTtcIixcIuKLrlwiOlwiJnZlbGxpcDtcIixcIvCdlLNcIjpcIiZ2ZnI7XCIsXCLwnZWnXCI6XCImdm9wZjtcIixcIvCdk4tcIjpcIiZ2c2NyO1wiLFwi4qaaXCI6XCImdnppZ3phZztcIixcIsW1XCI6XCImd2NpcmM7XCIsXCLiqZ9cIjpcIiZ3ZWRiYXI7XCIsXCLiiZlcIjpcIiZ3ZWRnZXE7XCIsXCLihJhcIjpcIiZ3cDtcIixcIvCdlLRcIjpcIiZ3ZnI7XCIsXCLwnZWoXCI6XCImd29wZjtcIixcIvCdk4xcIjpcIiZ3c2NyO1wiLFwi8J2UtVwiOlwiJnhmcjtcIixcIs6+XCI6XCImeGk7XCIsXCLii7tcIjpcIiZ4bmlzO1wiLFwi8J2VqVwiOlwiJnhvcGY7XCIsXCLwnZONXCI6XCImeHNjcjtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwi0Y9cIjpcIiZ5YWN5O1wiLFwixbdcIjpcIiZ5Y2lyYztcIixcItGLXCI6XCImeWN5O1wiLFwiwqVcIjpcIiZ5ZW47XCIsXCLwnZS2XCI6XCImeWZyO1wiLFwi0ZdcIjpcIiZ5aWN5O1wiLFwi8J2VqlwiOlwiJnlvcGY7XCIsXCLwnZOOXCI6XCImeXNjcjtcIixcItGOXCI6XCImeXVjeTtcIixcIsO/XCI6XCImeXVtbDtcIixcIsW6XCI6XCImemFjdXRlO1wiLFwixb5cIjpcIiZ6Y2Fyb247XCIsXCLQt1wiOlwiJnpjeTtcIixcIsW8XCI6XCImemRvdDtcIixcIs62XCI6XCImemV0YTtcIixcIvCdlLdcIjpcIiZ6ZnI7XCIsXCLQtlwiOlwiJnpoY3k7XCIsXCLih51cIjpcIiZ6aWdyYXJyO1wiLFwi8J2Vq1wiOlwiJnpvcGY7XCIsXCLwnZOPXCI6XCImenNjcjtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjFwiOlwiJnp3bmo7XCJ9fX07IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLm51bWVyaWNVbmljb2RlTWFwPXswOjY1NTMzLDEyODo4MzY0LDEzMDo4MjE4LDEzMTo0MDIsMTMyOjgyMjIsMTMzOjgyMzAsMTM0OjgyMjQsMTM1OjgyMjUsMTM2OjcxMCwxMzc6ODI0MCwxMzg6MzUyLDEzOTo4MjQ5LDE0MDozMzgsMTQyOjM4MSwxNDU6ODIxNiwxNDY6ODIxNywxNDc6ODIyMCwxNDg6ODIyMSwxNDk6ODIyNiwxNTA6ODIxMSwxNTE6ODIxMiwxNTI6NzMyLDE1Mzo4NDgyLDE1NDozNTMsMTU1OjgyNTAsMTU2OjMzOSwxNTg6MzgyLDE1OTozNzZ9OyIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5mcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50fHxmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludC02NTUzNikvMTAyNCkrNTUyOTYsKGFzdHJhbENvZGVQb2ludC02NTUzNiklMTAyNCs1NjMyMCl9O2V4cG9ydHMuZ2V0Q29kZVBvaW50PVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ/ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbil9OmZ1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4oaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiktNTUyOTYpKjEwMjQraW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbisxKS01NjMyMCs2NTUzNn07ZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbT01NTI5NjtleHBvcnRzLmhpZ2hTdXJyb2dhdGVUbz01NjMxOTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZShcIi4vbm9ybWFsaXplLXVybFwiKTtcblxudmFyIHNyY0J5TW9kdWxlSWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudmFyIG5vRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCI7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG5cbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZShcIi5qc1wiLCBcIi5jc3NcIildO1xuICAgIH1cblxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZShcIi5qc1wiLCBcIi5jc3NcIildO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlTWFwLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCBcImdcIik7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdChcIj9cIilbMF07XG4gIH1cblxuICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgIC8vIFdlIHNlZW0gdG8gYmUgYWJvdXQgdG8gcmVwbGFjZSBhIGNzcyBsaW5rIHRoYXQgaGFzbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gV2UncmUgcHJvYmFibHkgY2hhbmdpbmcgdGhlIHNhbWUgZmlsZSBtb3JlIHRoYW4gb25jZS5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXVybCB8fCAhKHVybC5pbmRleE9mKFwiLmNzc1wiKSA+IC0xKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuaHJlZiA9IFwiXCIuY29uY2F0KHVybCwgXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtcblxuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZWwubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbG9hZFVybChocmVmLCBzcmMpIHtcbiAgdmFyIHJldDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cbiAgaHJlZiA9IG5vcm1hbGl6ZVVybChocmVmLCB7XG4gICAgc3RyaXBXV1c6IGZhbHNlXG4gIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG5cbiAgc3JjLnNvbWUoZnVuY3Rpb24gKHVybCkge1xuICAgIGlmIChocmVmLmluZGV4T2Yoc3JjKSA+IC0xKSB7XG4gICAgICByZXQgPSB1cmw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkU3R5bGUoc3JjKSB7XG4gIGlmICghc3JjKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG5cbiAgICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZEFsbCgpIHtcbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo6Ly50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtcbiAgICByZXR1cm4gbm9vcDtcbiAgfVxuXG4gIHZhciBnZXRTY3JpcHRTcmMgPSBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKTtcblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHNyYyA9IGdldFNjcmlwdFNyYyhvcHRpb25zLmZpbGVuYW1lKTtcbiAgICB2YXIgcmVsb2FkZWQgPSByZWxvYWRTdHlsZShzcmMpO1xuXG4gICAgaWYgKG9wdGlvbnMubG9jYWxzKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIltITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzc1wiKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBjc3MgcmVsb2FkICVzXCIsIHNyYy5qb2luKFwiIFwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlIFwiLi5cIjpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiLlwiOlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIFtdKS5qb2luKFwiL1wiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG5cbiAgaWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcbiAgICByZXR1cm4gdXJsU3RyaW5nO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoXCIvL1wiKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoXCIvL1wiKVswXSArIFwiLy9cIiA6IFwiXCI7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgXCJpXCIpLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCBcIlwiKTtcbiAgY29tcG9uZW50c1swXSA9IFwiXCI7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwiLy8gY2hlY2sgZG9jdW1lbnQgZmlyc3Qgc28gaXQgZG9lc24ndCBlcnJvciBpbiBub2RlLmpzXG52YXIgc3R5bGUgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGVcbiAgOiB7fVxuXG52YXIgcHJlZml4ZXMgPSBbJ08nLCAnbXMnLCAnTW96JywgJ1dlYmtpdCddXG52YXIgdXBwZXIgPSAvKFtBLVpdKS9nXG52YXIgbWVtbyA9IHt9XG5cbi8qKlxuICogcHJlZml4IGBrZXlgXG4gKlxuICogICBwcmVmaXgoJ3RyYW5zZm9ybScpIC8vID0+IFdlYmtpdFRyYW5zZm9ybVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeChrZXkpe1xuICAvLyBDYW1lbCBjYXNlXG4gIGtleSA9IGtleS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbihfLCBjaGFyKXtcbiAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpXG4gIH0pXG5cbiAgLy8gV2l0aG91dCBwcmVmaXhcbiAgaWYgKHN0eWxlW2tleV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGtleVxuXG4gIC8vIFdpdGggcHJlZml4XG4gIHZhciBLZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSlcbiAgdmFyIGkgPSBwcmVmaXhlcy5sZW5ndGhcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ZXNbaV0gKyBLZXlcbiAgICBpZiAoc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG5hbWVcbiAgfVxuXG4gIHJldHVybiBrZXlcbn1cblxuLyoqXG4gKiBNZW1vaXplZCB2ZXJzaW9uIG9mIGBwcmVmaXhgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4TWVtb3ppZWQoa2V5KXtcbiAgcmV0dXJuIGtleSBpbiBtZW1vXG4gICAgPyBtZW1vW2tleV1cbiAgICA6IG1lbW9ba2V5XSA9IHByZWZpeChrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGFzaGVkIHByZWZpeFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeERhc2hlZChrZXkpe1xuICBrZXkgPSBwcmVmaXgoa2V5KVxuICBpZiAodXBwZXIudGVzdChrZXkpKSB7XG4gICAga2V5ID0gJy0nICsga2V5LnJlcGxhY2UodXBwZXIsICctJDEnKVxuICAgIHVwcGVyLmxhc3RJbmRleCA9IDBcbiAgfVxuICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmaXhNZW1vemllZFxubW9kdWxlLmV4cG9ydHMuZGFzaCA9IHByZWZpeERhc2hlZFxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBvYmpba10ubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwiLyoqXG4gKiBTcGxpdFR5cGVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlUGVhdmV5L1NwbGl0VHlwZVxuICogQHZlcnNpb24gMC4zLjNcbiAqIEBhdXRob3IgTHVrZSBQZWF2ZXkgPGx3cGVhdmV5QGdtYWlsLmNvbT5cbiAqL1xuXG4vLyBQb2x5ZmlsbCB0aGUgZm9sbG93aW5nIERPTSBtZXRob2RzIHRoYXQgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTEuXG5cbigoKSA9PiB7XG4gIGZ1bmN0aW9uIGFwcGVuZCguLi5ub2Rlcykge1xuICAgIGNvbnN0IGxlbmd0aCA9IG5vZGVzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKSB0aGlzLmFwcGVuZENoaWxkKG5vZGUpO2Vsc2UgdGhpcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcobm9kZSkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlQ2hpbGRyZW4oLi4ubm9kZXMpIHtcbiAgICB3aGlsZSAodGhpcy5sYXN0Q2hpbGQpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQodGhpcy5sYXN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChub2Rlcy5sZW5ndGgpIHRoaXMuYXBwZW5kKC4uLm5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VXaXRoKC4uLm5vZGVzKSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGxldCBpID0gbm9kZXMubGVuZ3RoO1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gICAgaWYgKCFpKSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBsZXQgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIG5vZGUgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaSkge1xuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLnByZXZpb3VzU2libGluZywgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUuYXBwZW5kKSB7XG4gICAgICBFbGVtZW50LnByb3RvdHlwZS5hcHBlbmQgPSBhcHBlbmQ7XG4gICAgICBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5hcHBlbmQgPSBhcHBlbmQ7XG4gICAgfVxuXG4gICAgaWYgKCFFbGVtZW50LnByb3RvdHlwZS5yZXBsYWNlQ2hpbGRyZW4pIHtcbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VDaGlsZHJlbiA9IHJlcGxhY2VDaGlsZHJlbjtcbiAgICAgIERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnJlcGxhY2VDaGlsZHJlbiA9IHJlcGxhY2VDaGlsZHJlbjtcbiAgICB9XG5cbiAgICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoKSB7XG4gICAgICBFbGVtZW50LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IHJlcGxhY2VXaXRoO1xuICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucmVwbGFjZVdpdGggPSByZXBsYWNlV2l0aDtcbiAgICB9XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogU2hhbGxvdyBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHdpdGggdGhlIHRhcmdldCBvYmplY3QuIE9ubHlcbiAqIGluY2x1ZGVzIHByb3BlcnRpZXMgdGhhdCBleGlzdCBvbiB0aGUgdGFyZ2V0IG9iamVjdC4gTm9uLXdyaXRhYmxlIHByb3BlcnRpZXNcbiAqIG9uIHRoZSB0YXJnZXQgb2JqZWN0IHdpbGwgbm90IGJlIG92ZXItd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0KHRhcmdldCkpLnJlZHVjZSgoZXh0ZW5kZWQsIGtleSkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0KHRhcmdldCksIGtleSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdChvYmplY3QpLCBrZXkpO1xuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXh0ZW5kZWQsIGtleSwgbmV3VmFsdWUgfHwgY3VycmVudFZhbHVlKTtcbiAgfSwge30pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBnaXZlbiB2YWx1ZSBpcyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYFxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbi8qKlxuICogUGFyc2VzIHVzZXIgc3VwcGxpZWQgc2V0dGluZ3Mgb2JqZWN0cy5cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVNldHRpbmdzKHNldHRpbmdzID0ge30pIHtcbiAgY29uc3Qgb2JqZWN0ID0gZXh0ZW5kKHNldHRpbmdzKTsgLy8gYHNwbGl0YCBtYXkgYmUgdXNlZCBhcyBhbiBhbGlhcyBmb3IgdGhlIGB0eXBlc2Agb3B0aW9uXG4gIC8vIFBhcnNlIHRoZSBgdHlwZXNgIHNldHRpbmdzIGludG8gYW4gYXJyYXkgb2YgdmFsaWQgc3BsaXQgdHlwZXMuXG4gIC8vIElmIGB0eXBlc2AgaXMgZXhwbGljaXRseSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGFycmF5LCB0ZXh0IHdpbGwgbm90IGJlXG4gIC8vIHNwbGl0IGF0IGFsbC5cblxuICBsZXQgdHlwZXM7XG5cbiAgaWYgKG9iamVjdC50eXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdHlwZXMgPSBvYmplY3QudHlwZXM7XG4gIH0gZWxzZSBpZiAob2JqZWN0LnNwbGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB0eXBlcyA9IG9iamVjdC5zcGxpdDtcbiAgfVxuXG4gIGlmICh0eXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgb2JqZWN0LnR5cGVzID0gKGlzU3RyaW5nKHR5cGVzKSB8fCBpc0FycmF5KHR5cGVzKSA/IFN0cmluZyh0eXBlcykgOiAnJykuc3BsaXQoJywnKS5tYXAodHlwZSA9PiBTdHJpbmcodHlwZSkudHJpbSgpKS5maWx0ZXIodHlwZSA9PiAvKChsaW5lKXwod29yZCl8KGNoYXIpKS9pLnRlc3QodHlwZSkpO1xuICB9IC8vIFN1cHBvcnQgYHBvc2l0aW9uOiBhYnNvbHV0ZWAgYXMgYW4gYWxpYXMgZm9yIGBhYnNvbHV0ZTogdHJ1ZWBcblxuXG4gIGlmIChvYmplY3QuYWJzb2x1dGUgfHwgb2JqZWN0LnBvc2l0aW9uKSB7XG4gICAgb2JqZWN0LmFic29sdXRlID0gb2JqZWN0LmFic29sdXRlIHx8IC9hYnNvbHV0ZS8udGVzdChzZXR0aW5ncy5wb3NpdGlvbik7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIFRha2VzIGEgbGlzdCBvZiBgdHlwZXNgIGFuZCByZXR1cm5zIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IHZhbHVlIGEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2Ygc3BsaXQgdHlwZXNcbiAqIEByZXR1cm4ge3tsaW5lczogYm9vbGVhbiwgd29yZHM6IGJvb2xlYW4sIGNoYXJzOiBib29sZWFufX1cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVR5cGVzKHZhbHVlKSB7XG4gIGNvbnN0IHR5cGVzID0gaXNTdHJpbmcodmFsdWUpIHx8IGlzQXJyYXkodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6ICcnO1xuICByZXR1cm4ge1xuICAgIG5vbmU6ICF0eXBlcyxcbiAgICBsaW5lczogL2xpbmUvaS50ZXN0KHR5cGVzKSxcbiAgICB3b3JkczogL3dvcmQvaS50ZXN0KHR5cGVzKSxcbiAgICBjaGFyczogL2NoYXIvaS50ZXN0KHR5cGVzKVxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGEgbm9uLW51bGwgb2JqZWN0LlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYGlucHV0YCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqIC0gYEVsZW1lbnRgXG4gKiAtIGBUZXh0YFxuICogLSBgRG9jdW1lbnRGcmFnbWVudGBcbiAqL1xuXG5mdW5jdGlvbiBpc05vZGUoaW5wdXQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGlucHV0KSAmJiAvXigxfDN8MTEpJC8udGVzdChpbnB1dC5ub2RlVHlwZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqIE9yaWdpbmFsIHNvdXJjZTogTG9kYXNoXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpXG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKVxuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KVxuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJylcbiAqIC8vID0+IGZhbHNlXG4gKi9cblxuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT09IDA7XG59XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0XG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlYCwgZWxzZSBgZmFsc2VgXG4gKiBAZXhhbXBsZVxuICogaXNBcnJheUxpa2UobmV3IEFycmF5KCkpXG4gKiAvLyA9PiB0cnVlXG4gKlxuICogaXNBcnJheUxpa2UoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2JykpXG4gKiAvLyA9PiB0cnVlXG4gKlxuICogaXNBcnJheUxpa2UoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpKVxuICogLy8gPT4gdHJ1ZVxuICpcbiAqIGlzQXJyYXlMaWtlKCgpID0+IHt9KVxuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBpc0FycmF5TGlrZSh7Zm9vOiAnYmFyJ30pXG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqICogaXNBcnJheUxpa2UobnVsbClcbiAqIC8vID0+IGZhbHNlXG4gKi9cblxuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29lcmNlcyBgdmFsdWVgIHRvIGFuIGBBcnJheWAuXG4gKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqIEBleGFtcGxlXG4gKiAvLyBJZiBgdmFsdWVgIGlzIGFueSBgQXJyYXlgLCByZXR1cm5zIG9yaWdpbmFsIGBBcnJheWBcbiAqIGxldCBhcnIgPSBbMSwgMl1cbiAqIHRvQXJyYXkoYXJyKVxuICogLy8gPT4gYXJyXG4gKlxuICogLy8gSWYgYHZhbHVlYCBpcyBhbiBgQXJyYXlMaWtlYCwgaXRzIGVxdWl2YWxlbnQgdG8gYEFycmF5LmZyb20odmFsdWUpYFxuICogbGV0IG5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2JylcbiAqIHRvQXJyYXkobm9kZUxpc3QpXG4gKiAvLyA9PiBIVE1MRWxlbWVudFtdIHNcbiAqXG4gKiAvLyBJZiB2YWx1ZSBpcyBmYWxzeSwgcmV0dXJucyBlbXB0eSBhcnJheVxuICogdG9BcnJheShudWxsKVxuICogLy8gPT4gW11cbiAqXG4gKiAvLyBGb3IgYW55IG90aGVyIHR5cGUgb2YgdmFsdWUsIGl0cyBlcXVpdmFsZW50IHRvIGBBcnJheS5vZih2YWx1ZSlgXG4gKiBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gKiB0b0FycmF5KGVsZW1lbnQpXG4gKiAvLyA9PiBbZWxlbWVudF1cbiAqXG4gKi9cblxuZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBbXTtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKHZhbHVlKSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbHVlKSA6IFt2YWx1ZV07XG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIHRhcmdldCBlbGVtZW50cyBmb3IgdGhlIHNwbGl0VHlwZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdGFyZ2V0IENhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqIDEuIGBzdHJpbmdgIC0gQSBjc3Mgc2VsZWN0b3JcbiAqIDIuIGBIVE1MRWxlbWVudGAgLSBBIHNpbmdsZSBlbGVtZW50XG4gKiAzLiBgTm9kZUxpc3RgIC0gQSBub2RlTGlzdFxuICogNC4gYEVsZW1lbnRbXWAgLSBBbiBhcnJheSBvZiBlbGVtZW50c1xuICogNS4gYEFycmF5PE5vZGVMaXN0fEVsZW1lbnRbXT5gIC0gQW4gbmVzdGVkIGFycmF5IG9mIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7RWxlbWVudFtdfSBBIGZsYXQgYXJyYXkgSFRNTCBlbGVtZW50c1xuICogQHJldHVybiBBIGZsYXQgYXJyYXkgb2YgZWxlbWVudHMgb3IgZW1wdHkgYXJyYXkgaWYgbm8gZWxlbWVudHMgYXJlIGZvdW5kXG4gKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0RWxlbWVudHModGFyZ2V0KSB7XG4gIGxldCBlbGVtZW50cyA9IHRhcmdldDsgLy8gSWYgYHRhcmdldGAgaXMgYSBzZWxlY3RvciBzdHJpbmcuLi5cblxuICBpZiAoaXNTdHJpbmcodGFyZ2V0KSkge1xuICAgIGlmICgvXigjW2Etel1cXHcrKSQvLnRlc3QodGFyZ2V0LnRyaW0oKSkpIHtcbiAgICAgIC8vIElmIGB0YXJnZXRgIGlzIGFuIElELCB1c2UgYGdldEVsZW1lbnRCeUlkYFxuICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQudHJpbSgpLnNsaWNlKDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRWxzZSB1c2UgYHF1ZXJ5U2VsZWN0b3JBbGxgXG4gICAgICBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KTtcbiAgICB9XG4gIH0gLy8gUmV0dXJuIGEgZmxhdHRlbmVkIGFycmF5IG9mIGVsZW1lbnRzXG5cblxuICByZXR1cm4gdG9BcnJheShlbGVtZW50cykucmVkdWNlKChyZXN1bHQsIGVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gWy4uLnJlc3VsdCwgLi4udG9BcnJheShlbGVtZW50KS5maWx0ZXIoaXNOb2RlKV07XG4gIH0sIFtdKTtcbn1cblxuY29uc3Qge1xuICBlbnRyaWVzLFxuICBrZXlzLFxuICB2YWx1ZXNcbn0gPSBPYmplY3Q7XG5cbmNvbnN0IGV4cGFuZG8gPSBgX3NwbGl0dHlwZWA7XG5jb25zdCBjYWNoZSA9IHt9O1xubGV0IHVpZCA9IDA7XG4vKipcbiAqIFN0b3JlcyBkYXRhIGFzc29jaWF0ZWQgd2l0aCBET00gZWxlbWVudHMgb3Igb3RoZXIgb2JqZWN0cy4gVGhpcyBpcyBhXG4gKiBzaW1wbGlmaWVkIHZlcnNpb24gb2YgalF1ZXJ5J3MgZGF0YSBtZXRob2QuXG4gKlxuICogQHNpZ25hdHVyZSBEYXRhKG93bmVyKVxuICogQGRlc2NyaXB0aW9uIEdldCB0aGUgZGF0YSBzdG9yZSBvYmplY3QgZm9yIHRoZSBnaXZlbiBvd25lci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvd25lciB0aGUgb2JqZWN0IHRoYXQgZGF0YSB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGRhdGEgb2JqZWN0IGZvciBnaXZlbiBgb3duZXJgLiBJZiBubyBkYXRhIGV4aXN0c1xuICogICAgIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LCBjcmVhdGVzIGEgbmV3IGRhdGEgc3RvcmUgYW5kIHJldHVybnMgaXQuXG4gKlxuICogQHNpZ25hdHVyZSBEYXRhKG93bmVyLCBrZXkpXG4gKiBAZGVzY3JpcHRpb24gR2V0IHRoZSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IG93bmVyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgcHJvdmlkZWQga2V5LiBJZiBrZXkgZG9lcyBub3QgZXhpc3QsIHJldHVybnNcbiAqICAgICB1bmRlZmluZWQuXG4gKlxuICogQHNpZ25hdHVyZSBEYXRhKG93bmVyLCBrZXksIHZhbHVlKVxuICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIGdpdmVuIGtleS92YWx1ZSBwYWlyIGluIGRhdGEgc3RvcmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvd25lclxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gc2V0KG93bmVyLCBrZXksIHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3Qob3duZXIpKSB7XG4gICAgY29uc29sZS53YXJuKCdbZGF0YS5zZXRdIG93bmVyIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGlkID0gb3duZXJbZXhwYW5kb10gfHwgKG93bmVyW2V4cGFuZG9dID0gKyt1aWQpO1xuICBjb25zdCBkYXRhID0gY2FjaGVbaWRdIHx8IChjYWNoZVtpZF0gPSB7fSk7XG5cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoISFrZXkgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGtleSkgPT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgIGNhY2hlW2lkXSA9IHsgLi4uZGF0YSxcbiAgICAgICAgLi4ua2V5XG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gZ2V0KG93bmVyLCBrZXkpIHtcbiAgY29uc3QgaWQgPSBpc09iamVjdChvd25lcikgPyBvd25lcltleHBhbmRvXSA6IG51bGw7XG4gIGNvbnN0IGRhdGEgPSBpZCAmJiBjYWNoZVtpZF0gfHwge307XG5cbiAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICByZXR1cm4gZGF0YVtrZXldO1xufVxuLyoqXG4gKiBSZW1vdmUgYWxsIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQpIHtcbiAgY29uc3QgaWQgPSBlbGVtZW50ICYmIGVsZW1lbnRbZXhwYW5kb107XG5cbiAgaWYgKGlkKSB7XG4gICAgZGVsZXRlIGVsZW1lbnRbaWRdO1xuICAgIGRlbGV0ZSBjYWNoZVtpZF07XG4gIH1cbn1cbi8qKlxuICogUmVtb3ZlIGFsbCB0ZW1wb3JhcnkgZGF0YSBmcm9tIHRoZSBzdG9yZS5cbiAqL1xuXG5mdW5jdGlvbiBjbGVhbnVwKCkge1xuICBlbnRyaWVzKGNhY2hlKS5mb3JFYWNoKChbaWQsIHtcbiAgICBpc1Jvb3QsXG4gICAgaXNTcGxpdFxuICB9XSkgPT4ge1xuICAgIGlmICghaXNSb290IHx8ICFpc1NwbGl0KSB7XG4gICAgICBjYWNoZVtpZF0gPSBudWxsO1xuICAgICAgZGVsZXRlIGNhY2hlW2lkXTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNwbGl0cyBhIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHdvcmRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nIHwgUmVnRXhwfSBbc2VwYXJhdG9yID0gJyAnXVxuICogQHJldHVybiB7c3RyaW5nW119IEFycmF5IG9mIHdvcmRzXG4gKi9cbmZ1bmN0aW9uIHRvV29yZHModmFsdWUsIHNlcGFyYXRvciA9ICcgJykge1xuICBjb25zdCBzdHJpbmcgPSB2YWx1ZSA/IFN0cmluZyh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHN0cmluZy50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KHNlcGFyYXRvcik7XG59XG5cbi8qKlxuICogQmFzZWQgb24gbG9kYXNoI3NwbGl0IDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJlxuICogRWRpdG9yc1xuICovXG5jb25zdCByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnO1xuY29uc3QgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMjMnO1xuY29uc3QgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGYwJztcbmNvbnN0IHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cblxuY29uc3QgcnNBc3RyYWwgPSBgWyR7cnNBc3RyYWxSYW5nZX1dYDtcbmNvbnN0IHJzQ29tYm8gPSBgWyR7cnNDb21ib01hcmtzUmFuZ2V9JHtyc0NvbWJvU3ltYm9sc1JhbmdlfV1gO1xuY29uc3QgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXSc7XG5jb25zdCByc01vZGlmaWVyID0gYCg/OiR7cnNDb21ib318JHtyc0ZpdHp9KWA7XG5jb25zdCByc05vbkFzdHJhbCA9IGBbXiR7cnNBc3RyYWxSYW5nZX1dYDtcbmNvbnN0IHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfSc7XG5jb25zdCByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXSc7XG5jb25zdCByc1pXSiA9ICdcXFxcdTIwMGQnO1xuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG5cbmNvbnN0IHJlT3B0TW9kID0gYCR7cnNNb2RpZmllcn0/YDtcbmNvbnN0IHJzT3B0VmFyID0gYFske3JzVmFyUmFuZ2V9XT9gO1xuY29uc3QgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJztcbmNvbnN0IHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbjtcbmNvbnN0IHJzU3ltYm9sID0gYCg/OiR7W2Ake3JzTm9uQXN0cmFsfSR7cnNDb21ib30/YCwgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKX1cbilgO1xuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cblxuY29uc3QgcmVVbmljb2RlID0gUmVnRXhwKGAke3JzRml0en0oPz0ke3JzRml0en0pfCR7cnNTeW1ib2x9JHtyc1NlcX1gLCAnZycpO1xuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG5cbmNvbnN0IHVuaWNvZGVSYW5nZSA9IFtyc1pXSiwgcnNBc3RyYWxSYW5nZSwgcnNDb21ib01hcmtzUmFuZ2UsIHJzQ29tYm9TeW1ib2xzUmFuZ2UsIHJzVmFyUmFuZ2VdO1xuY29uc3QgcmVIYXNVbmljb2RlID0gUmVnRXhwKGBbJHt1bmljb2RlUmFuZ2Uuam9pbignJyl9XWApO1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5cblxuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5cblxuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKSA/IHVuaWNvZGVUb0FycmF5KHN0cmluZykgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbn1cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBTdHJpbmcodmFsdWUpO1xufVxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBjaGFyYWN0ZXJzLiBJZiBgc2VwYXJhdG9yYCBpcyBvbWl0dGVkLFxuICogaXQgYmVoYXZlcyBsaWtlcyBzcGxpdC5zcGxpdCgnJykuXG4gKlxuICogVW5saWtlIG5hdGl2ZSBzdHJpbmcuc3BsaXQoJycpLCBpdCBjYW4gc3BsaXQgc3RyaW5ncyB0aGF0IGNvbnRhaW4gdW5pY29kZVxuICogY2hhcmFjdGVycyBsaWtlIGVtb2ppcyBhbmQgc3ltYm9scy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3NlcGFyYXRvcj0nJ10gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gKiBAZXhhbXBsZVxuICogdG9DaGFycygnZm9vJyk7XG4gKiAvLyA9PiBbJ2YnLCAnbycsICdvJ11cbiAqXG4gKiB0b0NoYXJzKCdmb28gYmFyJyk7XG4gKiAvLyA9PiBbXCJmXCIsIFwib1wiLCBcIm9cIiwgXCIgXCIsIFwiYlwiLCBcImFcIiwgXCJyXCJdXG4gKlxuICogdG9DaGFycygnZvCfmIBvJyk7XG4gKiAvLyA9PiBbJ2YnLCAn8J+YgCcsICdvJ11cbiAqXG4gKiB0b0NoYXJzKCdmLfCfmIAtbycsIC8tLyk7XG4gKiAvLyA9PiBbJ2YnLCAn8J+YgCcsICdvJ11cbiAqXG4gKi9cblxuXG5mdW5jdGlvbiB0b0NoYXJzKHN0cmluZywgc2VwYXJhdG9yID0gJycpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICBpZiAoc3RyaW5nICYmIGlzU3RyaW5nKHN0cmluZykpIHtcbiAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgIHJldHVybiBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBIVE1MIGVsZW1lbnQgd2l0aCB0aGUgdGhlIGdpdmVuIGF0dHJpYnV0ZXNcbiAqXG4gKiBhdHRyaWJ1dGVzIGNhbiBpbmNsdWRlIHN0YW5kYXJkIEhUTUwgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBmb2xsb3dpbmdcbiAqIFwic3BlY2lhbFwiIHByb3BlcnRpZXM6XG4gKiAgIC0gY2hpbGRyZW46IEhUTUxFbGVtZW50IHwgQXJyYXlMaWtlPEhUTUxFbGVtZW50PlxuICogICAtIHRleHRDb250ZW50OiBzdHJpbmdcbiAqICAgLSBpbm5lckhUTUw6IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0gIHtPYmplY3R9IFthdHRyaWJ1dGVzXVxuICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQobmFtZSwgYXR0cmlidXRlcykge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcblxuICBpZiAoIWF0dHJpYnV0ZXMpIHtcbiAgICAvLyBXaGVuIGNhbGxlZCB3aXRob3V0IHRoZSBzZWNvbmQgYXJndW1lbnQsIGl0cyBqdXN0IHJldHVybiB0aGUgcmVzdWx0XG4gICAgLy8gb2YgYGRvY3VtZW50LmNyZWF0ZUVsZW1lbnRgXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGF0dHJpYnV0ZSA9PiB7XG4gICAgY29uc3QgcmF3VmFsdWUgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV07XG4gICAgY29uc3QgdmFsdWUgPSBpc1N0cmluZyhyYXdWYWx1ZSkgPyByYXdWYWx1ZS50cmltKCkgOiByYXdWYWx1ZTsgLy8gSWdub3JlIGF0dHJpYnV0ZSBpZiB0aGUgdmFsdWUgaXMgYG51bGxgIG9yIGFuIGVtcHR5IHN0cmluZ1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJykgcmV0dXJuO1xuXG4gICAgaWYgKGF0dHJpYnV0ZSA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgLy8gQ2hpbGRyZW4gY2FuIGJlIG9uZSBvciBtb3JlIEVsZW1lbnRzIG9yIERPTSBzdHJpbmdzXG4gICAgICBlbGVtZW50LmFwcGVuZCguLi50b0FycmF5KHZhbHVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBzdGFuZGFyZCBIVE1MIGF0dHJpYnV0ZXNcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHNwbGl0Q2xhc3M6ICcnLFxuICBsaW5lQ2xhc3M6ICdsaW5lJyxcbiAgd29yZENsYXNzOiAnd29yZCcsXG4gIGNoYXJDbGFzczogJ2NoYXInLFxuICB0eXBlczogWydsaW5lcycsICd3b3JkcycsICdjaGFycyddLFxuICBhYnNvbHV0ZTogZmFsc2UsXG4gIHRhZ05hbWU6ICdkaXYnXG59O1xuXG4vKipcbiAqIFNwbGl0cyB0aGUgdGV4dCBjb250ZW50IG9mIGEgc2luZ2xlIFRleHROb2RlIGludG8gd29yZHMgYW5kL29yIGNoYXJhY3RlcnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbnMgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IHRleHQgbm9kZSBpbnNpZGUgdGhlIHRhcmdldCBlbGVtZW50LiBJdFxuICogcmVwbGFjZXMgdGhlIHRleHQgbm9kZSB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgY29udGFpbmluZyB0aGUgc3BsaXQgdGV4dC5cbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHNwbGl0IHdvcmQgYW5kIGNoYXJhY3RlciBlbGVtZW50cyBmcm9tIHRoaXMgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge1RleHROb2RlfSB0ZXh0Tm9kZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gKiBAcmV0dXJuIHt7d29yZHM6IEVsZW1lbnRbXSwgY2hhcnM6IEVsZW1lbnRbXX19XG4gKi9cblxuZnVuY3Rpb24gc3BsaXRXb3Jkc0FuZENoYXJzKHRleHROb2RlLCBzZXR0aW5ncykge1xuICBzZXR0aW5ncyA9IGV4dGVuZChkZWZhdWx0cywgc2V0dGluZ3MpOyAvLyBUaGUgc3BsaXQgdHlwZXNcblxuICBjb25zdCB0eXBlcyA9IHBhcnNlVHlwZXMoc2V0dGluZ3MudHlwZXMpOyAvLyB0aGUgdGFnIG5hbWUgZm9yIHNwbGl0IHRleHQgbm9kZXNcblxuICBjb25zdCBUQUdfTkFNRSA9IHNldHRpbmdzLnRhZ05hbWU7IC8vIHZhbHVlIG9mIHRoZSB0ZXh0IG5vZGVcblxuICBjb25zdCBWQUxVRSA9IHRleHROb2RlLm5vZGVWYWx1ZTsgLy8gYHNwbGl0VGV4dGAgaXMgYSB3cmFwcGVyIHRvIGhvbGQgdGhlIEhUTUwgc3RydWN0dXJlXG5cbiAgY29uc3Qgc3BsaXRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOyAvLyBBcnJheXMgb2Ygc3BsaXQgd29yZCBhbmQgY2hhcmFjdGVyIGVsZW1lbnRzXG5cbiAgbGV0IHdvcmRzID0gW107XG4gIGxldCBjaGFycyA9IFtdO1xuXG4gIGlmICgvXlxccy8udGVzdChWQUxVRSkpIHtcbiAgICBzcGxpdFRleHQuYXBwZW5kKCcgJyk7XG4gIH0gLy8gQ3JlYXRlIGFuIGFycmF5IG9mIHdyYXBwZWQgd29yZCBlbGVtZW50cy5cblxuXG4gIHdvcmRzID0gdG9Xb3JkcyhWQUxVRSkucmVkdWNlKChyZXN1bHQsIFdPUkQsIGlkeCwgYXJyKSA9PiB7XG4gICAgLy8gTGV0IGB3b3JkRWxlbWVudGAgYmUgdGhlIHdyYXBwZWQgZWxlbWVudCBmb3IgdGhlIGN1cnJlbnQgd29yZFxuICAgIGxldCB3b3JkRWxlbWVudDtcbiAgICBsZXQgY2hhcmFjdGVyRWxlbWVudHNGb3JDdXJyZW50V29yZDsgLy8gLT4gSWYgc3BsaXR0aW5nIHRleHQgaW50byBjaGFyYWN0ZXJzLi4uXG5cbiAgICBpZiAodHlwZXMuY2hhcnMpIHtcbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hhcmFjdGVycyBpbiB0aGUgY3VycmVudCB3b3JkXG4gICAgICBjaGFyYWN0ZXJFbGVtZW50c0ZvckN1cnJlbnRXb3JkID0gdG9DaGFycyhXT1JEKS5tYXAoQ0hBUiA9PiB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlckVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFRBR19OQU1FLCB7XG4gICAgICAgICAgY2xhc3M6IGAke3NldHRpbmdzLnNwbGl0Q2xhc3N9ICR7c2V0dGluZ3MuY2hhckNsYXNzfWAsXG4gICAgICAgICAgc3R5bGU6ICdkaXNwbGF5OiBpbmxpbmUtYmxvY2s7JyxcbiAgICAgICAgICBjaGlsZHJlbjogQ0hBUlxuICAgICAgICB9KTtcbiAgICAgICAgc2V0KGNoYXJhY3RlckVsZW1lbnQsICdpc0NoYXInLCB0cnVlKTtcbiAgICAgICAgY2hhcnMgPSBbLi4uY2hhcnMsIGNoYXJhY3RlckVsZW1lbnRdO1xuICAgICAgICByZXR1cm4gY2hhcmFjdGVyRWxlbWVudDtcbiAgICAgIH0pO1xuICAgIH0gLy8gRU5EIElGO1xuXG5cbiAgICBpZiAodHlwZXMud29yZHMgfHwgdHlwZXMubGluZXMpIHtcbiAgICAgIC8vIC0+IElmIFNwbGl0dGluZyBUZXh0IEludG8gV29yZHMuLi5cbiAgICAgIC8vICAgIENyZWF0ZSBhbiBlbGVtZW50IHRvIHdyYXAgdGhlIGN1cnJlbnQgd29yZC4gSWYgd2UgYXJlIGFsc29cbiAgICAgIC8vICAgIHNwbGl0dGluZyB0ZXh0IGludG8gY2hhcmFjdGVycywgdGhlIHdvcmQgZWxlbWVudCB3aWxsIGNvbnRhaW4gdGhlXG4gICAgICAvLyAgICB3cmFwcGVkIGNoYXJhY3RlciBub2RlcyBmb3IgdGhpcyB3b3JkLiBJZiBub3QsIGl0IHdpbGwgY29udGFpbiB0aGVcbiAgICAgIC8vICAgIHBsYWluIHRleHQgY29udGVudCAoV09SRClcbiAgICAgIHdvcmRFbGVtZW50ID0gY3JlYXRlRWxlbWVudChUQUdfTkFNRSwge1xuICAgICAgICBjbGFzczogYCR7c2V0dGluZ3Mud29yZENsYXNzfSAke3NldHRpbmdzLnNwbGl0Q2xhc3N9YCxcbiAgICAgICAgc3R5bGU6IGBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICR7dHlwZXMud29yZHMgJiYgc2V0dGluZ3MuYWJzb2x1dGUgPyBgcG9zaXRpb246IHJlbGF0aXZlO2AgOiAnJ31gLFxuICAgICAgICBjaGlsZHJlbjogdHlwZXMuY2hhcnMgPyBjaGFyYWN0ZXJFbGVtZW50c0ZvckN1cnJlbnRXb3JkIDogV09SRFxuICAgICAgfSk7XG4gICAgICBzZXQod29yZEVsZW1lbnQsIHtcbiAgICAgICAgaXNXb3JkOiB0cnVlLFxuICAgICAgICBpc1dvcmRTdGFydDogdHJ1ZSxcbiAgICAgICAgaXNXb3JkRW5kOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHNwbGl0VGV4dC5hcHBlbmRDaGlsZCh3b3JkRWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0+IElmIE5PVCBzcGxpdHRpbmcgaW50byB3b3JkcyBPUiBsaW5lcy4uLlxuICAgICAgLy8gICAgQXBwZW5kIHRoZSBjaGFyYWN0ZXJzIGVsZW1lbnRzIGRpcmVjdGx5IHRvIHNwbGl0VGV4dC5cbiAgICAgIGNoYXJhY3RlckVsZW1lbnRzRm9yQ3VycmVudFdvcmQuZm9yRWFjaChjaGFyYWN0ZXJFbGVtZW50ID0+IHtcbiAgICAgICAgc3BsaXRUZXh0LmFwcGVuZENoaWxkKGNoYXJhY3RlckVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlkeCA8IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAvLyBBZGQgYSBzcGFjZSBhZnRlciB0aGUgd29yZC5cbiAgICAgIHNwbGl0VGV4dC5hcHBlbmQoJyAnKTtcbiAgICB9IC8vIElmIG5vdCBzcGxpdHRpbmcgdGV4dCBpbnRvIHdvcmRzLCB3ZSByZXR1cm4gYW4gZW1wdHkgYXJyYXlcblxuXG4gICAgcmV0dXJuIHR5cGVzLndvcmRzID8gcmVzdWx0LmNvbmNhdCh3b3JkRWxlbWVudCkgOiByZXN1bHQ7XG4gIH0sIFtdKTsgLy8gRU5EIExPT1A7XG4gIC8vIEFkZCBhIHRyYWlsaW5nIHdoaXRlIHNwYWNlIHRvIG1haW50YWluIHdvcmQgc3BhY2luZ1xuXG4gIGlmICgvXFxzJC8udGVzdChWQUxVRSkpIHtcbiAgICBzcGxpdFRleHQuYXBwZW5kKCcgJyk7XG4gIH1cblxuICB0ZXh0Tm9kZS5yZXBsYWNlV2l0aChzcGxpdFRleHQpO1xuICByZXR1cm4ge1xuICAgIHdvcmRzLFxuICAgIGNoYXJzXG4gIH07XG59XG5cbi8qKlxuICogU3BsaXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSB0YXJnZXQgZWxlbWVudCBpbnRvIHdvcmRzIGFuZC9vciBjaGFyYWN0ZXJzLlxuICogVGhlIGZ1bmN0aW9uIGlzIHJlY3Vyc2l2ZSwgaXQgd2lsbCBhbHNvIHNwbGl0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgYW55IGNoaWxkXG4gKiBlbGVtZW50cyBpbnRvIHdvcmRzL2NoYXJhY3RlcnMsIHdoaWxlIHByZXNlcnZpbmcgdGhlIG5lc3RlZCBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgYW4gSFRNTCBFbGVtZW50IG9yIFRleHQgTm9kZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmcgc3BsaXRUeXBlIHNldHRpbmdzXG4gKi9cblxuZnVuY3Rpb24gc3BsaXQobm9kZSwgc2V0dGluZ3MpIHtcbiAgY29uc3QgdHlwZSA9IG5vZGUubm9kZVR5cGU7IC8vIEFycmF5cyBvZiBzcGxpdCB3b3JkcyBhbmQgY2hhcmFjdGVyc1xuXG4gIGNvbnN0IHdvcmRzQW5kQ2hhcnMgPSB7XG4gICAgd29yZHM6IFtdLFxuICAgIGNoYXJzOiBbXVxuICB9OyAvLyBPbmx5IHByb2NlZWQgaWYgYG5vZGVgIGlzIGFuIGBFbGVtZW50YCwgYEZyYWdtZW50YCwgb3IgYFRleHRgXG5cbiAgaWYgKCEvKDF8M3wxMSkvLnRlc3QodHlwZSkpIHtcbiAgICByZXR1cm4gd29yZHNBbmRDaGFycztcbiAgfSAvLyBBKSBJRiBgbm9kZWAgaXMgVGV4dE5vZGUgdGhhdCBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gd2hpdGUgc3BhY2UuLi5cbiAgLy8gICAgU3BsaXQgdGhlIHRleHQgY29udGVudCBvZiB0aGUgbm9kZSBpbnRvIHdvcmRzIGFuZC9vciBjaGFyYWN0ZXJzXG4gIC8vICAgIHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgc3BsaXQgd29yZCBhbmQgY2hhcmFjdGVyIGVsZW1lbnRzXG5cblxuICBpZiAodHlwZSA9PT0gMyAmJiAvXFxTLy50ZXN0KG5vZGUubm9kZVZhbHVlKSkge1xuICAgIHJldHVybiBzcGxpdFdvcmRzQW5kQ2hhcnMobm9kZSwgc2V0dGluZ3MpO1xuICB9IC8vIEIpIEVMU0UgYG5vZGVgIGlzIGFuICdFbGVtZW50J1xuICAvLyAgICBJdGVyYXRlIHRocm91Z2ggaXRzIGNoaWxkIG5vZGVzLCBjYWxsaW5nIHRoZSBgc3BsaXRgIGZ1bmN0aW9uXG4gIC8vICAgIHJlY3Vyc2l2ZWx5IGZvciBlYWNoIGNoaWxkIG5vZGUuXG5cblxuICBjb25zdCBjaGlsZE5vZGVzID0gdG9BcnJheShub2RlLmNoaWxkTm9kZXMpO1xuXG4gIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgIHNldChub2RlLCAnaXNTcGxpdCcsIHRydWUpOyAvLyB3ZSBuZWVkIHRvIHNldCBhIGZldyBzdHlsZXMgb24gbmVzdGVkIGh0bWwgZWxlbWVudHNcblxuICAgIGlmICghZ2V0KG5vZGUpLmlzUm9vdCkge1xuICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJzsgLy8gVG8gbWFpbnRhaW4gb3JpZ2luYWwgc3BhY2luZyBhcm91bmQgbmVzdGVkIGVsZW1lbnRzIHdoZW4gd2UgYXJlXG4gICAgICAvLyBzcGxpdHRpbmcgdGV4dCBpbnRvIGxpbmVzLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBlbGVtZW50IHNob3VsZFxuICAgICAgLy8gaGF2ZSBhIHNwYWNlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZCBzdG9yZSB0aGF0IHZhbHVlIGZvciBsYXRlci5cbiAgICAgIC8vIE5vdGU6IHRoaXMgd2FzIG5lY2Vzc2FyeSB0byBtYWludGFpbiB0aGUgY29ycmVjdCBzcGFjaW5nIHdoZW4gbmVzdGVkXG4gICAgICAvLyBlbGVtZW50cyBkbyBub3QgYWxpZ24gd2l0aCB3b3JkIGJvdW5kYXJpZXMuIEZvciBleGFtcGxlLCBhIG5lc3RlZFxuICAgICAgLy8gZWxlbWVudCBvbmx5IHdyYXBzIHBhcnQgb2YgYSB3b3JkLlxuXG4gICAgICBjb25zdCBuZXh0U2libGluZyA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICBjb25zdCBwcmV2U2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgY29uc3QgdGV4dCA9IG5vZGUudGV4dENvbnRlbnQgfHwgJyc7XG4gICAgICBjb25zdCB0ZXh0QWZ0ZXIgPSBuZXh0U2libGluZyA/IG5leHRTaWJsaW5nLnRleHRDb250ZW50IDogJyAnO1xuICAgICAgY29uc3QgdGV4dEJlZm9yZSA9IHByZXZTaWJsaW5nID8gcHJldlNpYmxpbmcudGV4dENvbnRlbnQgOiAnICc7XG4gICAgICBzZXQobm9kZSwge1xuICAgICAgICBpc1dvcmRFbmQ6IC9cXHMkLy50ZXN0KHRleHQpIHx8IC9eXFxzLy50ZXN0KHRleHRBZnRlciksXG4gICAgICAgIGlzV29yZFN0YXJ0OiAvXlxccy8udGVzdCh0ZXh0KSB8fCAvXFxzJC8udGVzdCh0ZXh0QmVmb3JlKVxuICAgICAgfSk7XG4gICAgfVxuICB9IC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBub2RlcywgY2FsbGluZyBgc3BsaXRgIHJlY3Vyc2l2ZWx5XG4gIC8vIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHNwbGl0IHdvcmRzIGFuZCBjaGFyc1xuXG5cbiAgcmV0dXJuIGNoaWxkTm9kZXMucmVkdWNlKChyZXN1bHQsIGNoaWxkKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgd29yZHMsXG4gICAgICBjaGFyc1xuICAgIH0gPSBzcGxpdChjaGlsZCwgc2V0dGluZ3MpO1xuICAgIHJldHVybiB7XG4gICAgICB3b3JkczogWy4uLnJlc3VsdC53b3JkcywgLi4ud29yZHNdLFxuICAgICAgY2hhcnM6IFsuLi5yZXN1bHQuY2hhcnMsIC4uLmNoYXJzXVxuICAgIH07XG4gIH0sIHdvcmRzQW5kQ2hhcnMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhlaWdodCBhbmQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBvZmZzZXQgcGFyZW50LlxuICogU2hvdWxkIGJlIGVxdWl2YWxlbnQgdG8gb2Zmc2V0VG9wIGFuZCBvZmZzZXRIZWlnaHQsIGJ1dCB3aXRoIHN1Yi1waXhlbFxuICogcHJlY2lzaW9uLlxuICpcbiAqIFRPRE8gbmVlZHMgd29ya1xuICovXG5mdW5jdGlvbiBnZXRQb3NpdGlvbihub2RlLCBpc1dvcmQsIHNldHRpbmdzLCBzY3JvbGxQb3MpIHtcbiAgaWYgKCFzZXR0aW5ncy5hYnNvbHV0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGlzV29yZCA/IG5vZGUub2Zmc2V0VG9wIDogbnVsbFxuICAgIH07XG4gIH1cblxuICBjb25zdCBwYXJlbnQgPSBub2RlLm9mZnNldFBhcmVudDtcbiAgY29uc3QgW3Njcm9sbFgsIHNjcm9sbFldID0gc2Nyb2xsUG9zO1xuICBsZXQgcGFyZW50WCA9IDA7XG4gIGxldCBwYXJlbnRZID0gMDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgIGNvbnN0IHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcGFyZW50WCA9IHBhcmVudFJlY3QueCArIHNjcm9sbFg7XG4gICAgcGFyZW50WSA9IHBhcmVudFJlY3QueSArIHNjcm9sbFk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHgsXG4gICAgeVxuICB9ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgdG9wID0geSArIHNjcm9sbFkgLSBwYXJlbnRZO1xuICBjb25zdCBsZWZ0ID0geCArIHNjcm9sbFggLSBwYXJlbnRYO1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB0b3AsXG4gICAgbGVmdFxuICB9O1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IFwidW4tc3BsaXRzXCIgdGV4dCBpbnRvIHdvcmRzLlxuICogVGhpcyBpcyB1c2VkIHdoZW4gc3BsaXR0aW5nIHRleHQgaW50byBsaW5lcyBidXQgbm90IHdvcmRzLlxuICogV2UgaW5pdGlhbGx5IHNwbGl0IHRoZSB0ZXh0IGludG8gd29yZHMgc28gd2UgY2FuIG1haW50YWluIHRoZSBjb3JyZWN0IGxpbmVcbiAqIGJyZWFrcy4gT25jZSB0ZXh0IGhhcyBiZWVuIHNwbGl0IGludG8gbGluZXMsIHdlIFwidW4tc3BsaXRcIiB0aGUgd29yZHMuLi5cbiAqIEBwYXJhbSB7RWxlbWVudH1cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gdW5TcGxpdFdvcmRzKGVsZW1lbnQpIHtcbiAgaWYgKCFnZXQoZWxlbWVudCkuaXNXb3JkKSB7XG4gICAgdG9BcnJheShlbGVtZW50LmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHVuU3BsaXRXb3JkcyhjaGlsZCkpO1xuICB9IGVsc2Uge1xuICAgIHJlbW92ZShlbGVtZW50KTtcbiAgICBlbGVtZW50LnJlcGxhY2VXaXRoKC4uLmVsZW1lbnQuY2hpbGROb2Rlcyk7XG4gIH1cbn1cblxuY29uc3QgY3JlYXRlRnJhZ21lbnQgPSAoKSA9PiBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbmZ1bmN0aW9uIHJlcG9zaXRpb25BZnRlclNwbGl0KGVsZW1lbnQsIHNldHRpbmdzLCBzY3JvbGxQb3MpIHtcbiAgY29uc3QgdHlwZXMgPSBwYXJzZVR5cGVzKHNldHRpbmdzLnR5cGVzKTtcbiAgY29uc3QgVEFHX05BTUUgPSBzZXR0aW5ncy50YWdOYW1lO1xuICBjb25zdCBub2RlcyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTtcbiAgY29uc3Qgd29yZHNJbkVhY2hMaW5lID0gW107XG4gIGxldCB3b3Jkc0luQ3VycmVudExpbmUgPSBbXTtcbiAgbGV0IGxpbmVPZmZzZXRZID0gbnVsbDtcbiAgbGV0IGVsZW1lbnRIZWlnaHQ7XG4gIGxldCBlbGVtZW50V2lkdGg7XG4gIGxldCBjb250ZW50Qm94O1xuICBsZXQgbGluZXMgPSBbXTtcbiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqKiBHRVQgU1RZTEVTIEFORCBQT1NJVElPTlNcbiAgICoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAvLyBUaGVyZSBpcyBubyBidWlsdC1pbiB3YXkgdG8gZGV0ZWN0IG5hdHVyYWwgbGluZSBicmVha3MgaW4gdGV4dCAod2hlbiBhXG4gIC8vIGJsb2NrIG9mIHRleHQgd3JhcHMgdG8gZml0IGl0cyBjb250YWluZXIpLiBUbyBzcGxpdCB0ZXh0IGludG8gbGluZXMsIHdlXG4gIC8vIGhhdmUgdG8gZGV0ZWN0IGxpbmUgYnJlYWtzIGJ5IGNoZWNraW5nIHRoZSB0b3Agb2Zmc2V0IG9mIHdvcmRzLiBUaGlzIGlzXG4gIC8vIHdoeSB0ZXh0IHdhcyBzcGxpdCBpbnRvIHdvcmRzIGZpcnN0LiBUbyBhcHBseSBhYnNvbHV0ZVxuICAvLyBwb3NpdGlvbmluZywgaXRzIGFsc28gbmVjZXNzYXJ5IHRvIHJlY29yZCB0aGUgc2l6ZSBhbmQgcG9zaXRpb24gb2YgZXZlcnlcbiAgLy8gc3BsaXQgbm9kZSAobGluZXMsIHdvcmRzLCBjaGFyYWN0ZXJzKS5cbiAgLy8gVG8gY29uc29saWRhdGUgRE9NIGdldHRpbmcvc2V0dGluZ3MsIHRoaXMgaXMgYWxsIGRvbmUgYXQgdGhlIHNhbWUgdGltZSxcbiAgLy8gYmVmb3JlIGFjdHVhbGx5IHNwbGl0dGluZyB0ZXh0IGludG8gbGluZXMsIHdoaWNoIGludm9sdmVzIHJlc3RydWN0dXJpbmdcbiAgLy8gdGhlIERPTSBhZ2Fpbi5cbiAgLy8gQ2FjaGUgdGhlIGVsZW1lbnQncyBwYXJlbnQgYW5kIG5leHQgc2libGluZyAoZm9yIERPTSByZW1vdmFsKS5cblxuICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIGNvbnN0IG5leHRTaWJsaW5nID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGEgd3JhcHBlciBmb3IgdGhlIG5ldyBIVE1MIHN0cnVjdHVyZVxuXG4gIGNvbnN0IHNwbGl0VGV4dCA9IGNyZWF0ZUZyYWdtZW50KCk7IC8vIGdldCB0aGUgY29tcHV0ZWQgc3R5bGUgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuXG4gIGNvbnN0IGNzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIGNvbnN0IGFsaWduID0gY3MudGV4dEFsaWduO1xuICBjb25zdCBmb250U2l6ZSA9IHBhcnNlRmxvYXQoY3MuZm9udFNpemUpO1xuICBjb25zdCBsaW5lVGhyZXNob2xkID0gZm9udFNpemUgKiAwLjI7IC8vIElGIHVzaW5nIGFic29sdXRlIHBvc2l0aW9uLi4uXG5cbiAgaWYgKHNldHRpbmdzLmFic29sdXRlKSB7XG4gICAgLy8gTGV0IGNvbnRlbnRCb3ggYmUgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHdpZHRoIGFuZCBvZmZzZXQgcG9zaXRpb24gb2ZcbiAgICAvLyB0aGUgZWxlbWVudCdzIGNvbnRlbnQgYm94ICh0aGUgYXJlYSBpbnNpZGUgcGFkZGluZyBib3gpLiBUaGlzIGlzIG5lZWRlZFxuICAgIC8vIChmb3IgYWJzb2x1dGUgcG9zaXRpb25pbmcpIHRvIHNldCB0aGUgd2lkdGggYW5kIHBvc2l0aW9uIG9mIGxpbmVcbiAgICAvLyBlbGVtZW50cywgd2hpY2ggaGF2ZSBub3QgYmVlbiBjcmVhdGVkIHlldC5cbiAgICBjb250ZW50Qm94ID0ge1xuICAgICAgbGVmdDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgICAgdG9wOiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoXG4gICAgfTsgLy8gTGV0IGVsZW1lbnRXaWR0aCBhbmQgZWxlbWVudEhlaWdodCBiZSB0aGUgYWN0dWFsIHdpZHRoL2hlaWdodCBvZiB0aGVcbiAgICAvLyBlbGVtZW50LiBBbHNvIGNoZWNrIGlmIHRoZSBlbGVtZW50IGhhcyBpbmxpbmUgaGVpZ2h0IG9yIHdpZHRoIHN0eWxlc1xuICAgIC8vIGFscmVhZHkgc2V0LiBJZiBpdCBkb2VzLCBjYWNoZSB0aG9zZSB2YWx1ZXMgZm9yIGxhdGVyLlxuXG4gICAgZWxlbWVudFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7IC8vIFN0b3JlIHRoZSBvcmlnaW5hbCBpbmxpbmUgaGVpZ2h0IGFuZCB3aWR0aCBvZiB0aGUgZWxlbWVudFxuXG4gICAgc2V0KGVsZW1lbnQsIHtcbiAgICAgIGNzc1dpZHRoOiBlbGVtZW50LnN0eWxlLndpZHRoLFxuICAgICAgY3NzSGVpZ2h0OiBlbGVtZW50LnN0eWxlLmhlaWdodFxuICAgIH0pO1xuICB9IC8vIEl0ZXJhdGUgb3ZlciBldmVyeSBub2RlIGluIHRoZSB0YXJnZXQgZWxlbWVudFxuXG5cbiAgdG9BcnJheShub2RlcykuZm9yRWFjaChub2RlID0+IHtcbiAgICAvLyBub2RlIGlzIGEgd29yZCBlbGVtZW50IG9yIGN1c3RvbSBodG1sIGVsZW1lbnRcbiAgICBjb25zdCBpc1dvcmRMaWtlID0gbm9kZS5wYXJlbnRFbGVtZW50ID09PSBlbGVtZW50OyAvLyBUT0RPIG5lZWRzIHdvcmtcbiAgICAvLyBHZXQgdGUgc2l6ZSBhbmQgcG9zaXRpb24gb2Ygc3BsaXQgdGV4dCBub2Rlc1xuXG4gICAgY29uc3Qge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICB0b3AsXG4gICAgICBsZWZ0XG4gICAgfSA9IGdldFBvc2l0aW9uKG5vZGUsIGlzV29yZExpa2UsIHNldHRpbmdzLCBzY3JvbGxQb3MpOyAvLyBJZiBlbGVtZW50IGlzIGEgYDxicj5gIHRhZyByZXR1cm4gaGVyZVxuXG4gICAgaWYgKC9eYnIkL2kudGVzdChub2RlLm5vZGVOYW1lKSkgcmV0dXJuO1xuXG4gICAgaWYgKHR5cGVzLmxpbmVzICYmIGlzV29yZExpa2UpIHtcbiAgICAgIC8vIFdlIGNvbXBhcmUgdGhlIHRvcCBvZmZzZXQgb2YgdGhlIGN1cnJlbnQgd29yZCB0byB0aGUgdG9wIG9mZnNldCBvZlxuICAgICAgLy8gcHJldmlvdXMgd29yZHMgb24gdGhlIGN1cnJlbnQgbGluZS4gSWYgdGhlIGRpZmZlcmVuY2UgaXMgZ3JlYXRlciB0aGFuXG4gICAgICAvLyBvdXIgZGVmaW5lZCB0aHJlc2hvbGQgKDIwJSksIHdlIGFzc3VtZSB0aGlzIHdvcmQgaXMgb24gYSBuZXcgbGluZS5cbiAgICAgIGlmIChsaW5lT2Zmc2V0WSA9PT0gbnVsbCB8fCB0b3AgLSBsaW5lT2Zmc2V0WSA+PSBsaW5lVGhyZXNob2xkKSB7XG4gICAgICAgIGxpbmVPZmZzZXRZID0gdG9wO1xuICAgICAgICB3b3Jkc0luRWFjaExpbmUucHVzaCh3b3Jkc0luQ3VycmVudExpbmUgPSBbXSk7XG4gICAgICB9IC8vIEFkZCB0aGUgY3VycmVudCB3b3JkIG5vZGUgdG8gdGhlIGxpbmUgYXJyYXlcblxuXG4gICAgICB3b3Jkc0luQ3VycmVudExpbmUucHVzaChub2RlKTtcbiAgICB9IC8vIEVORCBJRlxuXG5cbiAgICBpZiAoc2V0dGluZ3MuYWJzb2x1dGUpIHtcbiAgICAgIC8vIFN0b3JlIHRoZSBzaXplIGFuZCBwb3NpdGlvbiBzcGxpdCB0ZXh0IG5vZGVzXG4gICAgICBzZXQobm9kZSwge1xuICAgICAgICB0b3AsXG4gICAgICAgIGxlZnQsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7IC8vIEVORCBMT09QXG4gIC8vIFJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBET01cblxuICBpZiAocGFyZW50KSB7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICB9XG4gIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiogU1BMSVQgTElORVNcbiAgICoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cbiAgaWYgKHR5cGVzLmxpbmVzKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGxpbmVzIG9mIHRleHQgKHNlZSAxMSBiKVxuICAgIC8vIExldCBgbGluZWAgYmUgdGhlIGFycmF5IG9mIHdvcmRzIGluIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgLy8gUmV0dXJuIGFuIGFycmF5IG9mIHRoZSB3cmFwcGVkIGxpbmUgZWxlbWVudHMgKGxpbmVFbGVtZW50cylcbiAgICBsaW5lcyA9IHdvcmRzSW5FYWNoTGluZS5tYXAod29yZHNJblRoaXNMaW5lID0+IHtcbiAgICAgIC8vIENyZWF0ZSBhbiBlbGVtZW50IHRvIHdyYXAgdGhlIGN1cnJlbnQgbGluZS5cbiAgICAgIGNvbnN0IGxpbmVFbGVtZW50ID0gY3JlYXRlRWxlbWVudChUQUdfTkFNRSwge1xuICAgICAgICBjbGFzczogYCR7c2V0dGluZ3Muc3BsaXRDbGFzc30gJHtzZXR0aW5ncy5saW5lQ2xhc3N9YCxcbiAgICAgICAgc3R5bGU6IGBkaXNwbGF5OiBibG9jazsgdGV4dC1hbGlnbjogJHthbGlnbn07IHdpZHRoOiAxMDAlO2BcbiAgICAgIH0pO1xuICAgICAgc2V0KGxpbmVFbGVtZW50LCAnaXNMaW5lJywgdHJ1ZSk7XG4gICAgICBjb25zdCBsaW5lRGltZW5zaW9ucyA9IHtcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB0b3A6IDFlNFxuICAgICAgfTsgLy8gQXBwZW5kIHRoZSBgbGluZUVsZW1lbnRgIHRvIGBjb250YWluZXJgXG5cbiAgICAgIHNwbGl0VGV4dC5hcHBlbmRDaGlsZChsaW5lRWxlbWVudCk7IC8vIEl0ZXJhdGUgb3ZlciB0aGUgd29yZC1sZXZlbCBlbGVtZW50cyBpbiB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgLy8gTm90ZTogd29yZE9yRWxlbWVudCBjYW4gZWl0aGVyIGJlIGEgd29yZCBub2RlIG9yIG5lc3RlZCBlbGVtZW50XG5cbiAgICAgIHdvcmRzSW5UaGlzTGluZS5mb3JFYWNoKCh3b3JkT3JFbGVtZW50LCBpZHgsIGFycikgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgaXNXb3JkRW5kLFxuICAgICAgICAgIHRvcCxcbiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfSA9IGdldCh3b3JkT3JFbGVtZW50KTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGFycltpZHggKyAxXTsgLy8gRGV0ZXJtaW5lIGxpbmUgaGVpZ2h0IC8geS1wb3NpdGlvblxuICAgICAgICAvLyB3ZSB1c2UgdGhlIGhlaWdodCBhbmQgb2Zmc2V0VG9wIG9mIHRoZSB3b3JkcyB3aGljaCB3ZSBhbHJlYWR5XG4gICAgICAgIC8vIHJlY29yZGVkLiBCZWNhdXNlIGN1c3RvbSBuZXN0ZWQgZWxlbWVudHMgY291bGQgaGF2ZSB0aGVpciBvd25cbiAgICAgICAgLy8gc3R5bGVzLCB0aGUgd29yZHMgb24gYSBsaW5lIG1heSBub3QgYWxsIGJlIHRoZSBzYW1lIGhlaWdodCBvclxuICAgICAgICAvLyB5IHBvc2l0aW9uLiBTbyB3ZSB0YWtlIHRoZSBncmVhdGVzdCBoZWlnaHQgLyB5IC0gb2Zmc2V0IG9mIHRoZVxuICAgICAgICAvLyB3b3JkcyBvbiB0aGlzIGxpbmUuXG5cbiAgICAgICAgbGluZURpbWVuc2lvbnMuaGVpZ2h0ID0gTWF0aC5tYXgobGluZURpbWVuc2lvbnMuaGVpZ2h0LCBoZWlnaHQpO1xuICAgICAgICBsaW5lRGltZW5zaW9ucy50b3AgPSBNYXRoLm1pbihsaW5lRGltZW5zaW9ucy50b3AsIHRvcCk7IC8vIGFwcGVuZCB0aGUgY3VycmVudCB3b3JkL2VsZW1lbnRcblxuICAgICAgICBsaW5lRWxlbWVudC5hcHBlbmRDaGlsZCh3b3JkT3JFbGVtZW50KTsgLy8gRGV0ZXJtaW5lIGlmIHRoZXJlIHNob3VsZCBzcGFjZSBhZnRlciB0aGUgY3VycmVudCBlbGVtZW50Li4uXG4gICAgICAgIC8vIElmIHRoaXMgaXMgbm90IHRoZSBsYXN0IHdvcmQgb24gdGhlIGN1cnJlbnQgbGluZS5cbiAgICAgICAgLy8gVE9ETyAtIGxvZ2ljIGZvciBoYW5kaW5nIHNwYWNpbmcgY2FuIGJlIGltcHJvdmVkXG5cbiAgICAgICAgaWYgKGlzV29yZEVuZCAmJiBnZXQobmV4dCkuaXNXb3JkU3RhcnQpIHtcbiAgICAgICAgICBsaW5lRWxlbWVudC5hcHBlbmQoJyAnKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIEVORCBMT09QXG5cbiAgICAgIGlmIChzZXR0aW5ncy5hYnNvbHV0ZSkge1xuICAgICAgICBzZXQobGluZUVsZW1lbnQsIHtcbiAgICAgICAgICBoZWlnaHQ6IGxpbmVEaW1lbnNpb25zLmhlaWdodCxcbiAgICAgICAgICB0b3A6IGxpbmVEaW1lbnNpb25zLnRvcFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpbmVFbGVtZW50O1xuICAgIH0pOyAvLyBFTkQgTE9PUFxuXG4gICAgaWYgKCF0eXBlcy53b3Jkcykge1xuICAgICAgdW5TcGxpdFdvcmRzKHNwbGl0VGV4dCk7XG4gICAgfSAvLyAxMC4gSW5zZXJ0IHRoZSBuZXcgY29udGFpbmVyXG5cblxuICAgIGVsZW1lbnQucmVwbGFjZUNoaWxkcmVuKHNwbGl0VGV4dCk7XG4gIH1cbiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqKiAgU0VUIEFCU09MVVRFIFBPU0lUSU9OXG4gICAqKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgLy8gQXBwbHkgYWJzb2x1dGUgcG9zaXRpb25pbmcgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIG9mIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgLy8gVGhpcyBpbmNsdWRlcyBzcGxpdCBsaW5lcywgd29yZHMsIGNoYXJzLCBhbmQgY3VzdG9tIEhUTUwgZWxlbWVudHMgdGhhdCB3ZXJlXG4gIC8vIGluY2x1ZGVkIGJ5IHRoZSB1c2VyLiBUaGUgc2l6ZSBhbmQgcG9zaXRpb24gb2YgY2hpbGQgZWxlbWVudHMgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiByZWNvcmRlZCBiZWZvcmUgc3BsaXR0aW5nIHRleHQgaW50byBsaW5lcy5cblxuXG4gIGlmIChzZXR0aW5ncy5hYnNvbHV0ZSkge1xuICAgIC8vIFNldCB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBwYXJlbnQgZWxlbWVudCBzbyBpdCBkb2VzIG5vdCBjb2xsYXBzZVxuICAgIC8vIHdoZW4gaXRzIGNoaWxkcmVuIGFyZSBzZXQgdG8gYWJzb2x1dGUgcG9zaXRpb24uXG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke2VsZW1lbnQuc3R5bGUud2lkdGggfHwgZWxlbWVudFdpZHRofXB4YDtcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke2VsZW1lbnRIZWlnaHR9cHhgOyAvLyBJdGVyYXRlIG92ZXIgYWxsIGNoaWxkIGVsZW1lbnRzXG5cbiAgICB0b0FycmF5KG5vZGVzKS5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpc0xpbmUsXG4gICAgICAgIHRvcCxcbiAgICAgICAgbGVmdCxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgfSA9IGdldChub2RlKTtcbiAgICAgIGNvbnN0IHBhcmVudERhdGEgPSBnZXQobm9kZS5wYXJlbnRFbGVtZW50KTtcbiAgICAgIGNvbnN0IGlzQ2hpbGRPZkxpbmVOb2RlID0gIWlzTGluZSAmJiBwYXJlbnREYXRhLmlzTGluZTsgLy8gU2V0IHRoZSB0b3AgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgIC8vIC0+IElmIGBub2RlYCBhIGxpbmUgZWxlbWVudCwgd2UgdXNlIHRoZSB0b3Agb2Zmc2V0IG9mIGl0cyBmaXJzdCBjaGlsZFxuICAgICAgLy8gLT4gSWYgYG5vZGVgIHRoZSBjaGlsZCBvZiBsaW5lIGVsZW1lbnQsIHRoZW4gaXRzIHRvcCBvZmZzZXQgaXMgemVyb1xuXG4gICAgICBub2RlLnN0eWxlLnRvcCA9IGAke2lzQ2hpbGRPZkxpbmVOb2RlID8gdG9wIC0gcGFyZW50RGF0YS50b3AgOiB0b3B9cHhgOyAvLyBTZXQgdGhlIGxlZnQgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgIC8vIC0+IElGIGBub2RlYCBpcyBhIGxpbmUgZWxlbWVudCwgdGhpcyBpcyBlcXVhbCB0byB0aGUgcG9zaXRpb24gbGVmdCBvZlxuICAgICAgLy8gICAgdGhlIGNvbnRlbnQgYm94IG9mIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgLy8gLT4gSUYgYG5vZGVgIGlzIHRoZSBjaGlsZCBvZiBhIGxpbmUgZWxlbWVudCwgdGhlIHZhbHVlIGhhcyB0byBhZGp1c3RlZFxuICAgICAgLy8gICAgc28gaXRzIHJlbGF0aXZlIHRvIHRoZSBsaW5lIGVsZW1lbnRcblxuICAgICAgbm9kZS5zdHlsZS5sZWZ0ID0gaXNMaW5lID8gYCR7Y29udGVudEJveC5sZWZ0fXB4YCA6IGAke2xlZnQgLSAoaXNDaGlsZE9mTGluZU5vZGUgPyBjb250ZW50Qm94LmxlZnQgOiAwKX1weGA7IC8vIFNldCB0aGUgaGVpZ2h0IG9mIHRoZSBjdXJyZW50IG5vZGUgdG8gdGhlIGNhY2hlZCB2YWx1ZS5cblxuICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgOyAvLyAgU2V0IHRoZSB3aWR0aCBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgICAgLy8gIElmIGl0cyBhIGxpbmUgZWxlbWVudCwgd2lkdGggaXMgZXF1YWwgdG8gdGhlIHdpZHRoIG9mIHRoZSBjb250ZW50Qm94LlxuXG4gICAgICBub2RlLnN0eWxlLndpZHRoID0gaXNMaW5lID8gYCR7Y29udGVudEJveC53aWR0aH1weGAgOiBgJHt3aWR0aH1weGA7IC8vIEZpbmFsbHksIHNldCB0aGUgbm9kZSdzIHBvc2l0aW9uIHRvIGFic29sdXRlLlxuXG4gICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICB9KTtcbiAgfSAvLyBlbmQgaWY7XG4gIC8vIDE0LiBSZS1hdHRhY2ggdGhlIGVsZW1lbnQgdG8gdGhlIERPTVxuXG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChuZXh0U2libGluZykgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBuZXh0U2libGluZyk7ZWxzZSBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gbGluZXM7XG59XG5cbmxldCBfZGVmYXVsdHMgPSBleHRlbmQoZGVmYXVsdHMsIHt9KTtcblxuY2xhc3MgU3BsaXRUeXBlIHtcbiAgLyoqXG4gICAqIFRoZSBpbnRlcm5hbCBkYXRhIHN0b3JlXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsIHNwbGl0VHlwZSBpbnN0YW5jZXNcbiAgICogQHN0YXRpY1xuICAgKi9cblxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIF9kZWZhdWx0cztcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsIFNwbGl0VHlwZSBpbnN0YW5jZXMuXG4gICAqXG4gICAqIFNldHRpbmcgYFNwbGl0VHlwZS5kZWZhdWx0c2AgdG8gYW4gb2JqZWN0IHdpbGwgbWVyZ2UgdGhhdCBvYmplY3Qgd2l0aCB0aGVcbiAgICogZXhpc3RpbmcgZGVmYXVsdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5ncyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgc2V0dGluZ3MgdG8gb3ZlcnJpZGVcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHN0YXRpY1xuICAgKiBAZXhhbXBsZVxuICAgKiBTcGxpdFR5cGUuZGVmYXVsdHMgPSB7IFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiIH1cbiAgICovXG5cblxuICBzdGF0aWMgc2V0IGRlZmF1bHRzKG9wdGlvbnMpIHtcbiAgICBfZGVmYXVsdHMgPSBleHRlbmQoX2RlZmF1bHRzLCBwYXJzZVNldHRpbmdzKG9wdGlvbnMpKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsIFNwbGl0VHlwZSBpbnN0YW5jZXMuXG4gICAqIFRoZSBwcm92aWRlZCBvYmplY3Qgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgZGVmYXVsdHMgb2JqZWN0cy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzZXR0aW5ncyB0byBvdmVycmlkZVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgbmV3IGRlZmF1bHQgc2V0dGluZ3NcbiAgICogQHB1YmxpY1xuICAgKiBAc3RhdGljXG4gICAqIEBleGFtcGxlXG4gICAqIFNwbGl0VHlwZS5zZXREZWZhdWx0cyh7IFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiIH0pXG4gICAqL1xuXG5cbiAgc3RhdGljIHNldERlZmF1bHRzKG9wdGlvbnMpIHtcbiAgICBfZGVmYXVsdHMgPSBleHRlbmQoX2RlZmF1bHRzLCBwYXJzZVNldHRpbmdzKG9wdGlvbnMpKTtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbiAgLyoqXG4gICAqIFJldmVydCB0YXJnZXQgZWxlbWVudHMgdG8gdGhlaXIgb3JpZ2luYWwgaHRtbCBjb250ZW50XG4gICAqIEhhcyBubyBlZmZlY3Qgb24gdGhhdFxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gZWxlbWVudHMgVGhlIHRhcmdldCBlbGVtZW50cyB0byByZXZlcnQuIE9uZSBvZjpcbiAgICogIC0ge3N0cmluZ30gQSBjc3Mgc2VsZWN0b3JcbiAgICogIC0ge0hUTUxFbGVtZW50fSBBIHNpbmdsZSBlbGVtZW50XG4gICAqIC0gIHtOb2RlTGlzdH0gQSBOb2RlTGlzdCBvciBjb2xsZWN0aW9uXG4gICAqICAtIHtIVE1MRWxlbWVudFtdfSBBbiBhcnJheSBvZiBFbGVtZW50c1xuICAgKiAtICB7QXJyYXk8SFRNTEVsZW1lbnR8Tm9kZUxpc3R8SFRNTEVsZW1lbnRbXT59IEEgbmVzdGVkIGFycmF5IG9mIGVsZW1lbnRzXG4gICAqIEBzdGF0aWNcbiAgICovXG5cblxuICBzdGF0aWMgcmV2ZXJ0KGVsZW1lbnRzKSB7XG4gICAgZ2V0VGFyZ2V0RWxlbWVudHMoZWxlbWVudHMpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlzU3BsaXQsXG4gICAgICAgIGh0bWwsXG4gICAgICAgIGNzc1dpZHRoLFxuICAgICAgICBjc3NIZWlnaHRcbiAgICAgIH0gPSBnZXQoZWxlbWVudCk7XG5cbiAgICAgIGlmIChpc1NwbGl0KSB7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGNzc1dpZHRoIHx8ICcnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGNzc0hlaWdodCB8fCAnJztcbiAgICAgICAgcmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFNwbGl0VHlwZSBpbnN0YW5jZVxuICAgKiBUaGlzIHN0YXRpYyBtZXRob2QgcHJvdmlkZXMgYSB3YXkgdG8gY3JlYXRlIGEgYFNwbGl0VHlwZWAgaW5zdGFuY2Ugd2l0aG91dFxuICAgKiB1c2luZyB0aGUgYG5ld2Aga2V5d29yZC5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHRhcmdldCBUaGUgdGFyZ2V0IGVsZW1lbnRzIHRvIHNwbGl0LiBPbmUgb2Y6XG4gICAqICAtIHtzdHJpbmd9IEEgY3NzIHNlbGVjdG9yXG4gICAqICAtIHtIVE1MRWxlbWVudH0gQSBzaW5nbGUgZWxlbWVudFxuICAgKiAtICB7Tm9kZUxpc3R9IEEgTm9kZUxpc3Qgb3IgY29sbGVjdGlvblxuICAgKiAgLSB7SFRNTEVsZW1lbnRbXX0gQW4gYXJyYXkgb2YgRWxlbWVudHNcbiAgICogLSAge0FycmF5PEhUTUxFbGVtZW50fE5vZGVMaXN0fEhUTUxFbGVtZW50W10+fSBBIG5lc3RlZCBhcnJheSBvZiBlbGVtZW50c1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFNldHRpbmdzIGZvciB0aGUgU3BsaXRUeXBlIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge1NwbGl0VHlwZX0gdGhlIFNwbGl0VHlwZSBpbnN0YW5jZVxuICAgKiBAc3RhdGljXG4gICAqL1xuXG5cbiAgc3RhdGljIGNyZWF0ZSh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0VHlwZSh0YXJnZXQsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGBTcGxpdFR5cGVgIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBlbGVtZW50cyBUaGUgdGFyZ2V0IGVsZW1lbnRzIHRvIHNwbGl0LiBPbmUgb2Y6XG4gICAqICAtIHtzdHJpbmd9IEEgY3NzIHNlbGVjdG9yXG4gICAqICAtIHtIVE1MRWxlbWVudH0gQSBzaW5nbGUgZWxlbWVudFxuICAgKiAtICB7Tm9kZUxpc3R9IEEgTm9kZUxpc3Qgb3IgY29sbGVjdGlvblxuICAgKiAgLSB7SFRNTEVsZW1lbnRbXX0gQW4gYXJyYXkgb2YgRWxlbWVudHNcbiAgICogLSAge0FycmF5PEhUTUxFbGVtZW50fE5vZGVMaXN0fEhUTUxFbGVtZW50W10+fSBBIG5lc3RlZCBhcnJheSBvZiBlbGVtZW50c1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFNldHRpbmdzIGZvciB0aGUgU3BsaXRUeXBlIGluc3RhbmNlXG4gICAqL1xuXG5cbiAgY29uc3RydWN0b3IoZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmlzU3BsaXQgPSBmYWxzZTtcbiAgICB0aGlzLnNldHRpbmdzID0gZXh0ZW5kKF9kZWZhdWx0cywgcGFyc2VTZXR0aW5ncyhvcHRpb25zKSk7XG4gICAgdGhpcy5lbGVtZW50cyA9IGdldFRhcmdldEVsZW1lbnRzKGVsZW1lbnRzKTsgLy8gU3RhcnQgdGhlIHNwbGl0IHByb2Nlc3NcblxuICAgIHRoaXMuc3BsaXQoKTtcbiAgfVxuICAvKipcbiAgICogU3BsaXRzIHRoZSB0ZXh0IGluIGFsbCB0YXJnZXQgZWxlbWVudHMuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZFxuICAgKiBhdXRvbWF0aWNhbGx5IHdoZW4gYSBuZXcgU3BsaXRUeXBlIGluc3RhbmNlIGlzIGNyZWF0ZWQuIEl0IGNhbiBhbHNvIGJlXG4gICAqIGNhbGxlZCBtYW51YWxseSB0byByZS1zcGxpdCB0ZXh0IHdpdGggbmV3IG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwdWJsaWNcbiAgICovXG5cblxuICBzcGxpdChvcHRpb25zKSB7XG4gICAgLy8gUmV2ZXJ0IHRhcmdldCBlbGVtZW50cyAoaWYgdGhleSBhcmUgYWxyZWFkeSBzcGxpdClcbiAgICAvLyBOb3RlOiByZXZlcnQgd2FzIGFscmVhZHkgY2FsbGVkIG9uY2UgaW4gdGhlIGNvbnN0cnVjdG9yLiBIb3dldmVyLCB3ZVxuICAgIC8vIG5lZWQgdG8gY2FsbCBpdCBhZ2FpbiBoZXJlIHNvIHRleHQgaXMgcmV2ZXJ0ZWQgd2hlbiB0aGUgdXNlciBtYW51YWxseVxuICAgIC8vIGNhbGxzIHRoZSBgc3BsaXRgIG1ldGhvZCB0byByZS1zcGxpdCB0ZXh0LlxuICAgIHRoaXMucmV2ZXJ0KCk7IC8vIFN0b3JlIHRoZSBvcmlnaW5hbCBodG1sIGNvbnRlbnQgb2YgZWFjaCB0YXJnZXQgZWxlbWVudFxuXG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgc2V0KGVsZW1lbnQsICdodG1sJywgZWxlbWVudC5pbm5lckhUTUwpO1xuICAgIH0pOyAvLyBDcmVhdGUgYXJyYXlzIHRvIGhvbGQgdGhlIHNwbGl0IGxpbmVzLCB3b3JkcywgYW5kIGNoYXJhY3RlcnNcblxuICAgIHRoaXMubGluZXMgPSBbXTtcbiAgICB0aGlzLndvcmRzID0gW107XG4gICAgdGhpcy5jaGFycyA9IFtdOyAvLyBjYWNoZSB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24gYmVmb3JlIHNwbGl0dGluZ1xuXG4gICAgY29uc3Qgc2Nyb2xsUG9zID0gW3dpbmRvdy5wYWdlWE9mZnNldCwgd2luZG93LnBhZ2VZT2Zmc2V0XTsgLy8gSWYgbmV3IG9wdGlvbnMgd2VyZSBwYXNzZWQgaW50byB0aGUgYHNwbGl0KClgIG1ldGhvZCwgdXBkYXRlIHNldHRpbmdzXG5cbiAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNldHRpbmdzID0gZXh0ZW5kKHRoaXMuc2V0dGluZ3MsIHBhcnNlU2V0dGluZ3Mob3B0aW9ucykpO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGVzID0gcGFyc2VUeXBlcyh0aGlzLnNldHRpbmdzLnR5cGVzKTsgLy8gSWYgdGhlIGB0eXBlc2Agb3B0aW9uIGlzIHNldCB0byBhbiBlbXB0eSBhcnJheSwgdGV4dCB3aWxsIG5vdCBiZSBzcGxpdC5cbiAgICAvLyBAZXhhbXBsZSBuZXcgU3BsaXRUeXBlKCcjdGFyZ2V0JywgeyB0eXBlczogW10gfSlcblxuICAgIGlmICh0eXBlcy5ub25lKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTcGxpdCB0ZXh0IGluIGVhY2ggdGFyZ2V0IGVsZW1lbnRcblxuXG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgLy8gQWRkIHRoZSBzcGxpdCB0ZXh0IG5vZGVzIGZyb20gdGhpcyBlbGVtZW50IHRvIHRoZSBhcnJheXMgb2YgYWxsIHNwbGl0XG4gICAgICAvLyB0ZXh0IG5vZGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAgc2V0KGVsZW1lbnQsICdpc1Jvb3QnLCB0cnVlKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd29yZHMsXG4gICAgICAgIGNoYXJzXG4gICAgICB9ID0gc3BsaXQoZWxlbWVudCwgdGhpcy5zZXR0aW5ncyk7XG4gICAgICB0aGlzLndvcmRzID0gWy4uLnRoaXMud29yZHMsIC4uLndvcmRzXTtcbiAgICAgIHRoaXMuY2hhcnMgPSBbLi4udGhpcy5jaGFycywgLi4uY2hhcnNdO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmICh0eXBlcy5saW5lcyB8fCB0aGlzLnNldHRpbmdzLmFic29sdXRlKSB7XG4gICAgICAgIGNvbnN0IGxpbmVzID0gcmVwb3NpdGlvbkFmdGVyU3BsaXQoZWxlbWVudCwgdGhpcy5zZXR0aW5ncywgc2Nyb2xsUG9zKTtcbiAgICAgICAgdGhpcy5saW5lcyA9IFsuLi50aGlzLmxpbmVzLCAuLi5saW5lc107XG4gICAgICB9XG4gICAgfSk7IC8vIFNldCBpc1NwbGl0IHRvIHRydWUgZm9yIHRoZSBTcGxpdFR5cGUgaW5zdGFuY2VcblxuICAgIHRoaXMuaXNTcGxpdCA9IHRydWU7IC8vIFNldCBzY3JvbGwgcG9zaXRpb24gdG8gY2FjaGVkIHZhbHVlLlxuXG4gICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFBvc1swXSwgc2Nyb2xsUG9zWzFdKTsgLy8gQ2xlYW4gdXAgc3RvcmVkIGRhdGFcblxuICAgIGNsZWFudXAoKTtcbiAgfVxuICAvKipcbiAgICogUmV2ZXJ0cyB0YXJnZXQgZWxlbWVudChzKSBiYWNrIHRvIHRoZWlyIG9yaWdpbmFsIGh0bWwgY29udGVudFxuICAgKiBEZWxldGVzIGFsbCBzdG9yZWQgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHRhcmdldCBlbGVtZW50c1xuICAgKiBSZXNldHMgdGhlIHByb3BlcnRpZXMgb24gdGhlIHNwbGl0VHlwZSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuXG5cbiAgcmV2ZXJ0KCkge1xuICAgIGlmICh0aGlzLmlzU3BsaXQpIHtcbiAgICAgIC8vIFJlc2V0IGluc3RhbmNlIHByb3BlcnRpZXMgaWYgbmVjZXNzYXJ5XG4gICAgICB0aGlzLmxpbmVzID0gbnVsbDtcbiAgICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgICAgdGhpcy5jaGFycyA9IG51bGw7XG4gICAgICB0aGlzLmlzU3BsaXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBTcGxpdFR5cGUucmV2ZXJ0KHRoaXMuZWxlbWVudHMpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgU3BsaXRUeXBlIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIEUgKCkge1xuICAvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG4gIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2tcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcbiAgfSxcblxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBkYXRhID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGV2dEFyci5sZW5ndGg7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XG4gICAgdmFyIGxpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZXZ0c1tpXS5mbiAhPT0gY2FsbGJhY2sgJiYgZXZ0c1tpXS5mbi5fICE9PSBjYWxsYmFjaylcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGZyb20gcXVldWUgdG8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgIC8vIFN1Z2dlc3RlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbGF6ZFxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcblxuICAgIChsaXZlRXZlbnRzLmxlbmd0aClcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcbiAgICAgIDogZGVsZXRlIGVbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFO1xubW9kdWxlLmV4cG9ydHMuVGlueUVtaXR0ZXIgPSBFO1xuIiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS4zLjIgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuMy4yJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuZXhwb3J0cy5wYXJzZSA9IHVybFBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG5leHBvcnRzLmZvcm1hdCA9IHVybEZvcm1hdDtcblxuZXhwb3J0cy5VcmwgPSBVcmw7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICAgIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIHVuc2FmZVByb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgICAnaHR0cCc6IHRydWUsXG4gICAgICAnaHR0cHMnOiB0cnVlLFxuICAgICAgJ2Z0cCc6IHRydWUsXG4gICAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAgICdmaWxlJzogdHJ1ZSxcbiAgICAgICdodHRwOic6IHRydWUsXG4gICAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAgICdmdHA6JzogdHJ1ZSxcbiAgICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAgICdmaWxlOic6IHRydWVcbiAgICB9LFxuICAgIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHV0aWwuaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCF1dGlsLmlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgICBzcGxpdHRlciA9XG4gICAgICAgICAgKHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpKSA/ICc/JyA6ICcjJyxcbiAgICAgIHVTcGxpdCA9IHVybC5zcGxpdChzcGxpdHRlciksXG4gICAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3Q7XG4gICAgICB0aGlzLmhyZWYgPSByZXN0O1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmXG4gICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8vIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55Y29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWZcbiAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5xdWVyeSk7XG4gICAgfVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWRcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgfVxuICBpZiAocmVzdCkgdGhpcy5wYXRobmFtZSA9IHJlc3Q7XG4gIGlmIChzbGFzaGVkUHJvdG9jb2xbbG93ZXJQcm90b10gJiZcbiAgICAgIHRoaXMuaG9zdG5hbWUgJiYgIXRoaXMucGF0aG5hbWUpIHtcbiAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkge1xuICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJztcbiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnO1xuICAgIHRoaXMucGF0aCA9IHAgKyBzO1xuICB9XG5cbiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gIHRoaXMuaHJlZiA9IHRoaXMuZm9ybWF0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmICh1dGlsLmlzU3RyaW5nKG9iaikpIG9iaiA9IHVybFBhcnNlKG9iaik7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICAgIGhvc3QgPSBmYWxzZSxcbiAgICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgP1xuICAgICAgICB0aGlzLmhvc3RuYW1lIDpcbiAgICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiZcbiAgICAgIHV0aWwuaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKHV0aWwuaXNTdHJpbmcocmVsYXRpdmUpKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAvLyBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpXG4gICAgICAgIHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldO1xuICAgIH1cblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgICAgaXNSZWxBYnMgPSAoXG4gICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICApLFxuICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSxcbiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvLyBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgLy8gdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAvLyByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0O1xuICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpO1xuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICBlbHNlIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBubyBwYXRoIGF0IGFsbC4gIGVhc3kuXG4gICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS5cbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnNlYXJjaCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgLy8gaG93ZXZlciwgaWYgaXQgZW5kcyBpbiBhbnl0aGluZyBlbHNlIG5vbi1zbGFzaHksXG4gIC8vIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKFxuICAgICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgICAgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAgICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8XG4gICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChyZXN1bHQuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IHNyY1BhdGguam9pbignLycpO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IHJlcXVlc3QuaHR0cFxuICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlfHxzZWxmKS52aXJ0dWFsU2Nyb2xsPXQoKX0odGhpcyxmdW5jdGlvbigpe3ZhciBlPTA7ZnVuY3Rpb24gdCh0KXtyZXR1cm5cIl9fcHJpdmF0ZV9cIitlKysrXCJfXCIrdH1mdW5jdGlvbiBpKGUsdCl7aWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gdXNlIHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiBlfWZ1bmN0aW9uIG4oKXt9bi5wcm90b3R5cGU9e29uOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzLmV8fCh0aGlzLmU9e30pO3JldHVybihuW2VdfHwobltlXT1bXSkpLnB1c2goe2ZuOnQsY3R4Oml9KSx0aGlzfSxvbmNlOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzO2Z1bmN0aW9uIG8oKXtuLm9mZihlLG8pLHQuYXBwbHkoaSxhcmd1bWVudHMpfXJldHVybiBvLl89dCx0aGlzLm9uKGUsbyxpKX0sZW1pdDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksaT0oKHRoaXMuZXx8KHRoaXMuZT17fSkpW2VdfHxbXSkuc2xpY2UoKSxuPTAsbz1pLmxlbmd0aDtuPG87bisrKWlbbl0uZm4uYXBwbHkoaVtuXS5jdHgsdCk7cmV0dXJuIHRoaXN9LG9mZjpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMuZXx8KHRoaXMuZT17fSksbj1pW2VdLG89W107aWYobiYmdClmb3IodmFyIHM9MCxoPW4ubGVuZ3RoO3M8aDtzKyspbltzXS5mbiE9PXQmJm5bc10uZm4uXyE9PXQmJm8ucHVzaChuW3NdKTtyZXR1cm4gby5sZW5ndGg/aVtlXT1vOmRlbGV0ZSBpW2VdLHRoaXN9fTt2YXIgbz1uO28uVGlueUVtaXR0ZXI9bjt2YXIgcyxoPVwidmlydHVhbHNjcm9sbFwiLHI9dChcIm9wdGlvbnNcIiksYT10KFwiZWxcIiksbD10KFwiZW1pdHRlclwiKSx1PXQoXCJldmVudFwiKSxjPXQoXCJ0b3VjaFN0YXJ0XCIpLGQ9dChcImJvZHlUb3VjaEFjdGlvblwiKTtyZXR1cm4gZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXM7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMscix7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYSx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbCx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsdSx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYyx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsZCx7d3JpdGFibGU6ITAsdmFsdWU6dm9pZCAwfSksdGhpcy5fb25XaGVlbD1mdW5jdGlvbihlKXt2YXIgbj1pKHQscilbcl0sbz1pKHQsdSlbdV07by5kZWx0YVg9ZS53aGVlbERlbHRhWHx8LTEqZS5kZWx0YVgsby5kZWx0YVk9ZS53aGVlbERlbHRhWXx8LTEqZS5kZWx0YVkscy5pc0ZpcmVmb3gmJjE9PT1lLmRlbHRhTW9kZSYmKG8uZGVsdGFYKj1uLmZpcmVmb3hNdWx0aXBsaWVyLG8uZGVsdGFZKj1uLmZpcmVmb3hNdWx0aXBsaWVyKSxvLmRlbHRhWCo9bi5tb3VzZU11bHRpcGxpZXIsby5kZWx0YVkqPW4ubW91c2VNdWx0aXBsaWVyLHQuX25vdGlmeShlKX0sdGhpcy5fb25Nb3VzZVdoZWVsPWZ1bmN0aW9uKGUpe3ZhciBuPWkodCx1KVt1XTtuLmRlbHRhWD1lLndoZWVsRGVsdGFYP2Uud2hlZWxEZWx0YVg6MCxuLmRlbHRhWT1lLndoZWVsRGVsdGFZP2Uud2hlZWxEZWx0YVk6ZS53aGVlbERlbHRhLHQuX25vdGlmeShlKX0sdGhpcy5fb25Ub3VjaFN0YXJ0PWZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0VG91Y2hlcz9lLnRhcmdldFRvdWNoZXNbMF06ZTtpKHQsYylbY10ueD1uLnBhZ2VYLGkodCxjKVtjXS55PW4ucGFnZVl9LHRoaXMuX29uVG91Y2hNb3ZlPWZ1bmN0aW9uKGUpe3ZhciBuPWkodCxyKVtyXTtuLnByZXZlbnRUb3VjaCYmIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhuLnVucHJldmVudFRvdWNoQ2xhc3MpJiZlLnByZXZlbnREZWZhdWx0KCk7dmFyIG89aSh0LHUpW3VdLHM9ZS50YXJnZXRUb3VjaGVzP2UudGFyZ2V0VG91Y2hlc1swXTplO28uZGVsdGFYPShzLnBhZ2VYLWkodCxjKVtjXS54KSpuLnRvdWNoTXVsdGlwbGllcixvLmRlbHRhWT0ocy5wYWdlWS1pKHQsYylbY10ueSkqbi50b3VjaE11bHRpcGxpZXIsaSh0LGMpW2NdLng9cy5wYWdlWCxpKHQsYylbY10ueT1zLnBhZ2VZLHQuX25vdGlmeShlKX0sdGhpcy5fb25LZXlEb3duPWZ1bmN0aW9uKGUpe3ZhciBuPWkodCx1KVt1XTtuLmRlbHRhWD1uLmRlbHRhWT0wO3ZhciBvPXdpbmRvdy5pbm5lckhlaWdodC00MDtzd2l0Y2goZS5rZXlDb2RlKXtjYXNlIDM3OmNhc2UgMzg6bi5kZWx0YVk9aSh0LHIpW3JdLmtleVN0ZXA7YnJlYWs7Y2FzZSAzOTpjYXNlIDQwOm4uZGVsdGFZPS1pKHQscilbcl0ua2V5U3RlcDticmVhaztjYXNlIDMyOm4uZGVsdGFZPW8qKGUuc2hpZnRLZXk/MTotMSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm59dC5fbm90aWZ5KGUpfSxpKHRoaXMsYSlbYV09d2luZG93LGUmJmUuZWwmJihpKHRoaXMsYSlbYV09ZS5lbCxkZWxldGUgZS5lbCksc3x8KHM9e2hhc1doZWVsRXZlbnQ6XCJvbndoZWVsXCJpbiBkb2N1bWVudCxoYXNNb3VzZVdoZWVsRXZlbnQ6XCJvbm1vdXNld2hlZWxcImluIGRvY3VtZW50LGhhc1RvdWNoOlwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudCxoYXNUb3VjaFdpbjpuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyYmbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHM+MSxoYXNQb2ludGVyOiEhd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkLGhhc0tleURvd246XCJvbmtleWRvd25cImluIGRvY3VtZW50LGlzRmlyZWZveDpuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJGaXJlZm94XCIpPi0xfSksaSh0aGlzLHIpW3JdPU9iamVjdC5hc3NpZ24oe21vdXNlTXVsdGlwbGllcjoxLHRvdWNoTXVsdGlwbGllcjoyLGZpcmVmb3hNdWx0aXBsaWVyOjE1LGtleVN0ZXA6MTIwLHByZXZlbnRUb3VjaDohMSx1bnByZXZlbnRUb3VjaENsYXNzOlwidnMtdG91Y2htb3ZlLWFsbG93ZWRcIix1c2VLZXlib2FyZDohMCx1c2VUb3VjaDohMH0sZSksaSh0aGlzLGwpW2xdPW5ldyBvLGkodGhpcyx1KVt1XT17eTowLHg6MCxkZWx0YVg6MCxkZWx0YVk6MH0saSh0aGlzLGMpW2NdPXt4Om51bGwseTpudWxsfSxpKHRoaXMsZClbZF09bnVsbCx2b2lkIDAhPT1pKHRoaXMscilbcl0ucGFzc2l2ZSYmKHRoaXMubGlzdGVuZXJPcHRpb25zPXtwYXNzaXZlOmkodGhpcyxyKVtyXS5wYXNzaXZlfSl9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuX25vdGlmeT1mdW5jdGlvbihlKXt2YXIgdD1pKHRoaXMsdSlbdV07dC54Kz10LmRlbHRhWCx0LnkrPXQuZGVsdGFZLGkodGhpcyxsKVtsXS5lbWl0KGgse3g6dC54LHk6dC55LGRlbHRhWDp0LmRlbHRhWCxkZWx0YVk6dC5kZWx0YVksb3JpZ2luYWxFdmVudDplfSl9LHQuX2JpbmQ9ZnVuY3Rpb24oKXtzLmhhc1doZWVsRXZlbnQmJmkodGhpcyxhKVthXS5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIix0aGlzLl9vbldoZWVsLHRoaXMubGlzdGVuZXJPcHRpb25zKSxzLmhhc01vdXNlV2hlZWxFdmVudCYmaSh0aGlzLGEpW2FdLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsdGhpcy5fb25Nb3VzZVdoZWVsLHRoaXMubGlzdGVuZXJPcHRpb25zKSxzLmhhc1RvdWNoJiZpKHRoaXMscilbcl0udXNlVG91Y2gmJihpKHRoaXMsYSlbYV0uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLl9vblRvdWNoU3RhcnQsdGhpcy5saXN0ZW5lck9wdGlvbnMpLGkodGhpcyxhKVthXS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5fb25Ub3VjaE1vdmUsdGhpcy5saXN0ZW5lck9wdGlvbnMpKSxzLmhhc1BvaW50ZXImJnMuaGFzVG91Y2hXaW4mJihpKHRoaXMsZClbZF09ZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RvdWNoQWN0aW9uLGRvY3VtZW50LmJvZHkuc3R5bGUubXNUb3VjaEFjdGlvbj1cIm5vbmVcIixpKHRoaXMsYSlbYV0uYWRkRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlckRvd25cIix0aGlzLl9vblRvdWNoU3RhcnQsITApLGkodGhpcyxhKVthXS5hZGRFdmVudExpc3RlbmVyKFwiTVNQb2ludGVyTW92ZVwiLHRoaXMuX29uVG91Y2hNb3ZlLCEwKSkscy5oYXNLZXlEb3duJiZpKHRoaXMscilbcl0udXNlS2V5Ym9hcmQmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5fb25LZXlEb3duKX0sdC5fdW5iaW5kPWZ1bmN0aW9uKCl7cy5oYXNXaGVlbEV2ZW50JiZpKHRoaXMsYSlbYV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsdGhpcy5fb25XaGVlbCkscy5oYXNNb3VzZVdoZWVsRXZlbnQmJmkodGhpcyxhKVthXS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLHRoaXMuX29uTW91c2VXaGVlbCkscy5oYXNUb3VjaCYmKGkodGhpcyxhKVthXS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHRoaXMuX29uVG91Y2hTdGFydCksaSh0aGlzLGEpW2FdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIix0aGlzLl9vblRvdWNoTW92ZSkpLHMuaGFzUG9pbnRlciYmcy5oYXNUb3VjaFdpbiYmKGRvY3VtZW50LmJvZHkuc3R5bGUubXNUb3VjaEFjdGlvbj1pKHRoaXMsZClbZF0saSh0aGlzLGEpW2FdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJNU1BvaW50ZXJEb3duXCIsdGhpcy5fb25Ub3VjaFN0YXJ0LCEwKSxpKHRoaXMsYSlbYV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlck1vdmVcIix0aGlzLl9vblRvdWNoTW92ZSwhMCkpLHMuaGFzS2V5RG93biYmaSh0aGlzLHIpW3JdLnVzZUtleWJvYXJkJiZkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuX29uS2V5RG93bil9LHQub249ZnVuY3Rpb24oZSx0KXtpKHRoaXMsbClbbF0ub24oaCxlLHQpO3ZhciBuPWkodGhpcyxsKVtsXS5lO24mJm5baF0mJjE9PT1uW2hdLmxlbmd0aCYmdGhpcy5fYmluZCgpfSx0Lm9mZj1mdW5jdGlvbihlLHQpe2kodGhpcyxsKVtsXS5vZmYoaCxlLHQpO3ZhciBuPWkodGhpcyxsKVtsXS5lOyghbltoXXx8bltoXS5sZW5ndGg8PTApJiZ0aGlzLl91bmJpbmQoKX0sdC5kZXN0cm95PWZ1bmN0aW9uKCl7aSh0aGlzLGwpW2xdLm9mZigpLHRoaXMuX3VuYmluZCgpfSxlfSgpfSk7XG4iLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi91dGlscy9sb2cuanNcIjtcblxudmFyIFdlYlNvY2tldENsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFdlYlNvY2tldENsaWVudCh1cmwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViU29ja2V0Q2xpZW50KTtcblxuICAgIHRoaXMuY2xpZW50ID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuXG4gICAgdGhpcy5jbGllbnQub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFdlYlNvY2tldENsaWVudCwgW3tcbiAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm9wZW4gPSBmO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25jbG9zZSA9IGY7XG4gICAgfSAvLyBjYWxsIGYgd2l0aCB0aGUgbWVzc2FnZSBzdHJpbmcgYXMgdGhlIGZpcnN0IGFyZ3VtZW50XG5cbiAgfSwge1xuICAgIGtleTogXCJvbk1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZXNzYWdlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGYoZS5kYXRhKTtcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFdlYlNvY2tldENsaWVudDtcbn0oKTtcblxuZXhwb3J0IHsgV2ViU29ja2V0Q2xpZW50IGFzIGRlZmF1bHQgfTsiLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5LCBfX3dlYnBhY2tfaGFzaF9fICovXG5pbXBvcnQgd2VicGFja0hvdExvZyBmcm9tIFwid2VicGFjay9ob3QvbG9nLmpzXCI7XG5pbXBvcnQgc3RyaXBBbnNpIGZyb20gXCIuL21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiO1xuaW1wb3J0IHBhcnNlVVJMIGZyb20gXCIuL3V0aWxzL3BhcnNlVVJMLmpzXCI7XG5pbXBvcnQgc29ja2V0IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UHJvYmxlbSwgc2hvdywgaGlkZSB9IGZyb20gXCIuL292ZXJsYXkuanNcIjtcbmltcG9ydCB7IGxvZywgc2V0TG9nTGV2ZWwgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjtcbmltcG9ydCBzZW5kTWVzc2FnZSBmcm9tIFwiLi91dGlscy9zZW5kTWVzc2FnZS5qc1wiO1xuaW1wb3J0IHJlbG9hZEFwcCBmcm9tIFwiLi91dGlscy9yZWxvYWRBcHAuanNcIjtcbmltcG9ydCBjcmVhdGVTb2NrZXRVUkwgZnJvbSBcIi4vdXRpbHMvY3JlYXRlU29ja2V0VVJMLmpzXCI7XG52YXIgc3RhdHVzID0ge1xuICBpc1VubG9hZGluZzogZmFsc2UsXG4gIC8vIFRPRE8gV29ya2Fyb3VuZCBmb3Igd2VicGFjayB2NCwgYF9fd2VicGFja19oYXNoX19gIGlzIG5vdCByZXBsYWNlZCB3aXRob3V0IEhvdE1vZHVsZVJlcGxhY2VtZW50XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgY3VycmVudEhhc2g6IHR5cGVvZiBfX3dlYnBhY2tfaGFzaF9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX2hhc2hfXyA6IFwiXCJcbn07IC8vIGNvbnNvbGUubG9nKF9fd2VicGFja19oYXNoX18pO1xuXG52YXIgb3B0aW9ucyA9IHtcbiAgaG90OiBmYWxzZSxcbiAgbGl2ZVJlbG9hZDogZmFsc2UsXG4gIHByb2dyZXNzOiBmYWxzZSxcbiAgb3ZlcmxheTogZmFsc2Vcbn07XG52YXIgcGFyc2VkUmVzb3VyY2VRdWVyeSA9IHBhcnNlVVJMKF9fcmVzb3VyY2VRdWVyeSk7XG5cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICBsb2cuaW5mbyhcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZC5cIik7XG59XG5cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gIGxvZy5pbmZvKFwiTGl2ZSBSZWxvYWRpbmcgZW5hYmxlZC5cIik7XG59XG5cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmcpIHtcbiAgb3B0aW9ucy5sb2dnaW5nID0gcGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nO1xufVxuXG5mdW5jdGlvbiBzZXRBbGxMb2dMZXZlbChsZXZlbCkge1xuICAvLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBITVIgbG9nZ2VyIG9wZXJhdGUgc2VwYXJhdGVseSBmcm9tIGRldiBzZXJ2ZXIgbG9nZ2VyXG4gIHdlYnBhY2tIb3RMb2cuc2V0TG9nTGV2ZWwobGV2ZWwgPT09IFwidmVyYm9zZVwiIHx8IGxldmVsID09PSBcImxvZ1wiID8gXCJpbmZvXCIgOiBsZXZlbCk7XG4gIHNldExvZ0xldmVsKGxldmVsKTtcbn1cblxuaWYgKG9wdGlvbnMubG9nZ2luZykge1xuICBzZXRBbGxMb2dMZXZlbChvcHRpb25zLmxvZ2dpbmcpO1xufVxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICBzdGF0dXMuaXNVbmxvYWRpbmcgPSB0cnVlO1xufSk7XG52YXIgb25Tb2NrZXRNZXNzYWdlID0ge1xuICBob3Q6IGZ1bmN0aW9uIGhvdCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgICBsb2cuaW5mbyhcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZC5cIik7XG4gIH0sXG4gIGxpdmVSZWxvYWQ6IGZ1bmN0aW9uIGxpdmVSZWxvYWQoKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnlbXCJsaXZlLXJlbG9hZFwiXSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgICBsb2cuaW5mbyhcIkxpdmUgUmVsb2FkaW5nIGVuYWJsZWQuXCIpO1xuICB9LFxuICBpbnZhbGlkOiBmdW5jdGlvbiBpbnZhbGlkKCkge1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlY29tcGlsaW5nLi4uXCIpOyAvLyBGaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIkludmFsaWRcIik7XG4gIH0sXG4gIGhhc2g6IGZ1bmN0aW9uIGhhc2goX2hhc2gpIHtcbiAgICBzdGF0dXMucHJldmlvdXNIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoO1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICBsb2dnaW5nOiBzZXRBbGxMb2dMZXZlbCxcbiAgb3ZlcmxheTogZnVuY3Rpb24gb3ZlcmxheSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLm92ZXJsYXkgPSB2YWx1ZTtcbiAgfSxcbiAgcHJvZ3Jlc3M6IGZ1bmN0aW9uIHByb2dyZXNzKF9wcm9ncmVzcykge1xuICAgIG9wdGlvbnMucHJvZ3Jlc3MgPSBfcHJvZ3Jlc3M7XG4gIH0sXG4gIFwicHJvZ3Jlc3MtdXBkYXRlXCI6IGZ1bmN0aW9uIHByb2dyZXNzVXBkYXRlKGRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lID8gXCJbXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgXCJdIFwiKSA6IFwiXCIpLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJQcm9ncmVzc1wiLCBkYXRhKTtcbiAgfSxcbiAgXCJzdGlsbC1va1wiOiBmdW5jdGlvbiBzdGlsbE9rKCkge1xuICAgIGxvZy5pbmZvKFwiTm90aGluZyBjaGFuZ2VkLlwiKTtcblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIlN0aWxsT2tcIik7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZShcIk9rXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAvLyBUT0RPOiByZW1vdmUgaW4gdjUgaW4gZmF2b3Igb2YgJ3N0YXRpYy1jaGFuZ2VkJ1xuICBcImNvbnRlbnQtY2hhbmdlZFwiOiBmdW5jdGlvbiBjb250ZW50Q2hhbmdlZChmaWxlKSB7XG4gICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZmlsZSA/IFwiXFxcIlwiLmNvbmNhdChmaWxlLCBcIlxcXCJcIikgOiBcIkNvbnRlbnRcIiwgXCIgZnJvbSBzdGF0aWMgZGlyZWN0b3J5IHdhcyBjaGFuZ2VkLiBSZWxvYWRpbmcuLi5cIikpO1xuICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0sXG4gIFwic3RhdGljLWNoYW5nZWRcIjogZnVuY3Rpb24gc3RhdGljQ2hhbmdlZChmaWxlKSB7XG4gICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZmlsZSA/IFwiXFxcIlwiLmNvbmNhdChmaWxlLCBcIlxcXCJcIikgOiBcIkNvbnRlbnRcIiwgXCIgZnJvbSBzdGF0aWMgZGlyZWN0b3J5IHdhcyBjaGFuZ2VkLiBSZWxvYWRpbmcuLi5cIikpO1xuICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0sXG4gIHdhcm5pbmdzOiBmdW5jdGlvbiB3YXJuaW5ncyhfd2FybmluZ3MpIHtcbiAgICBsb2cud2FybihcIldhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy5cIik7XG5cbiAgICB2YXIgcHJpbnRhYmxlV2FybmluZ3MgPSBfd2FybmluZ3MubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtID0gZm9ybWF0UHJvYmxlbShcIndhcm5pbmdcIiwgZXJyb3IpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGhlYWRlciwgXCJcXG5cIikuY29uY2F0KHN0cmlwQW5zaShib2R5KSk7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZShcIldhcm5pbmdzXCIsIHByaW50YWJsZVdhcm5pbmdzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlV2FybmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy53YXJuKHByaW50YWJsZVdhcm5pbmdzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcImJvb2xlYW5cIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkud2FybmluZ3M7XG5cbiAgICBpZiAobmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MpIHtcbiAgICAgIHNob3coXCJ3YXJuaW5nXCIsIF93YXJuaW5ncyk7XG4gICAgfVxuXG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIGVycm9yczogZnVuY3Rpb24gZXJyb3JzKF9lcnJvcnMpIHtcbiAgICBsb2cuZXJyb3IoXCJFcnJvcnMgd2hpbGUgY29tcGlsaW5nLiBSZWxvYWQgcHJldmVudGVkLlwiKTtcblxuICAgIHZhciBwcmludGFibGVFcnJvcnMgPSBfZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbTIgPSBmb3JtYXRQcm9ibGVtKFwiZXJyb3JcIiwgZXJyb3IpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtMi5oZWFkZXIsXG4gICAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtMi5ib2R5O1xuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKFwiRXJyb3JzXCIsIHByaW50YWJsZUVycm9ycyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZUVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLmVycm9yKHByaW50YWJsZUVycm9yc1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIG5lZWRTaG93T3ZlcmxheUZvckVycm9ycyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS5lcnJvcnM7XG5cbiAgICBpZiAobmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzKSB7XG4gICAgICBzaG93KFwiZXJyb3JcIiwgX2Vycm9ycyk7XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgbG9nLmVycm9yKF9lcnJvcik7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBsb2cuaW5mbyhcIkRpc2Nvbm5lY3RlZCFcIik7XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJDbG9zZVwiKTtcbiAgfVxufTtcbnZhciBzb2NrZXRVUkwgPSBjcmVhdGVTb2NrZXRVUkwocGFyc2VkUmVzb3VyY2VRdWVyeSk7XG5zb2NrZXQoc29ja2V0VVJMLCBvblNvY2tldE1lc3NhZ2UpOyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbnZhciBMb2dUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVycm9yOiBcImVycm9yXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIHdhcm46IFwid2FyblwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOiBcImluZm9cIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgbG9nOiBcImxvZ1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBkZWJ1ZzogXCJkZWJ1Z1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB0cmFjZTogXCJ0cmFjZVwiLFxuICAvLyBubyBhcmd1bWVudHNcbiAgZ3JvdXA6IFwiZ3JvdXBcIixcbiAgLy8gW2xhYmVsXVxuICBncm91cENvbGxhcHNlZDogXCJncm91cENvbGxhcHNlZFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwRW5kOiBcImdyb3VwRW5kXCIsXG4gIC8vIFtsYWJlbF1cbiAgcHJvZmlsZTogXCJwcm9maWxlXCIsXG4gIC8vIFtwcm9maWxlTmFtZV1cbiAgcHJvZmlsZUVuZDogXCJwcm9maWxlRW5kXCIsXG4gIC8vIFtwcm9maWxlTmFtZV1cbiAgdGltZTogXCJ0aW1lXCIsXG4gIC8vIG5hbWUsIHRpbWUgYXMgW3NlY29uZHMsIG5hbm9zZWNvbmRzXVxuICBjbGVhcjogXCJjbGVhclwiLFxuICAvLyBubyBhcmd1bWVudHNcbiAgc3RhdHVzOiBcInN0YXR1c1wiIC8vIG1lc3NhZ2UsIGFyZ3VtZW50c1xuXG59KTtcbmV4cG9ydHMuTG9nVHlwZSA9IExvZ1R5cGU7XG4vKiogQHR5cGVkZWYge3R5cGVvZiBMb2dUeXBlW2tleW9mIHR5cGVvZiBMb2dUeXBlXX0gTG9nVHlwZUVudW0gKi9cblxudmFyIExPR19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIHJhdyBsb2cgbWV0aG9kXCIpO1xudmFyIFRJTUVSU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIHRpbWVzXCIpO1xudmFyIFRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgYWdncmVnYXRlZCB0aW1lc1wiKTtcblxudmFyIFdlYnBhY2tMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbihMb2dUeXBlRW51bSwgYW55W109KTogdm9pZH0gbG9nIGxvZyBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyB8IGZ1bmN0aW9uKCk6IHN0cmluZyk6IFdlYnBhY2tMb2dnZXJ9IGdldENoaWxkTG9nZ2VyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBjaGlsZCBsb2dnZXJcbiAgICovXG4gIGZ1bmN0aW9uIFdlYnBhY2tMb2dnZXIobG9nLCBnZXRDaGlsZExvZ2dlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJwYWNrTG9nZ2VyKTtcblxuICAgIHRoaXNbTE9HX1NZTUJPTF0gPSBsb2c7XG4gICAgdGhpcy5nZXRDaGlsZExvZ2dlciA9IGdldENoaWxkTG9nZ2VyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFdlYnBhY2tMb2dnZXIsIFt7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndhcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2FybigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS53YXJuLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmZvKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmluZm8sIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmxvZywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlYnVnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmRlYnVnLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXNzZXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2VydChhc3NlcnRpb24pIHtcbiAgICAgIGlmICghYXNzZXJ0aW9uKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiA+IDEgPyBfbGVuNiAtIDEgOiAwKSwgX2tleTYgPSAxOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NiAtIDFdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYWNlKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRyYWNlLCBbXCJUcmFjZVwiXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmNsZWFyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdHVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXR1cygpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5zdGF0dXMsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgICAgICBhcmdzW19rZXk4XSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwQ29sbGFwc2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwQ29sbGFwc2VkKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW45KSwgX2tleTkgPSAwOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwQ29sbGFwc2VkLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBFbmQoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4xMCksIF9rZXkxMCA9IDA7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MTBdID0gYXJndW1lbnRzW19rZXkxMF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cEVuZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInByb2ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZShsYWJlbCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGUsIFtsYWJlbF0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGVFbmQobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlRW5kLCBbbGFiZWxdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLnNldChsYWJlbCwgcHJvY2Vzcy5ocnRpbWUoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVMb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUxvZyhsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVMb2coKVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVFbmQoKVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVBZ2dyZWdhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUFnZ3JlZ2F0ZShsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVBZ2dyZWdhdGUoKVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGltZVsxXSArIGN1cnJlbnRbMV0gPiAxZTkpIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF0gKyAxO1xuICAgICAgICAgIHRpbWVbMV0gPSB0aW1lWzFdIC0gMWU5ICsgY3VycmVudFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF07XG4gICAgICAgICAgdGltZVsxXSArPSBjdXJyZW50WzFdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5zZXQobGFiZWwsIHRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGVFbmQobGFiZWwpIHtcbiAgICAgIGlmICh0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdmFyIHRpbWUgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2VicGFja0xvZ2dlcjtcbn0oKTtcblxuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICAgIExvZ1R5cGUgPSBfcmVxdWlyZS5Mb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVyVHlwZXN9IEZpbHRlclR5cGVzICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNsZWFyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mb1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGxvZ1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm5cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvclxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBkZWJ1Z1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cEVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7ZmFsc2V8dHJ1ZXxcIm5vbmVcInxcImVycm9yXCJ8XCJ3YXJuXCJ8XCJpbmZvXCJ8XCJsb2dcInxcInZlcmJvc2VcIn0gbGV2ZWwgbG9nbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nXG4gKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0ZpbHRlckl0ZW1UeXBlc30gaXRlbSBhbiBpbnB1dCBpdGVtXG4gKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvblxuICovXG5cblxudmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFwvXVwiLmNvbmNhdChpdGVtLnJlcGxhY2UoIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cblxuICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG5cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG4vKipcbiAqIEBwYXJhbSB7TG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBvcHRpb25zIG9iamVjdFxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyBcImluZm9cIiA6IF9yZWYkbGV2ZWwsXG4gICAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZyxcbiAgICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgICAgY29uc29sZSA9IF9yZWYuY29uc29sZTtcbiAgdmFyIGRlYnVnRmlsdGVycyA9IHR5cGVvZiBkZWJ1ZyA9PT0gXCJib29sZWFuXCIgPyBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfV0gOlxuICAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1xuICBbXS5jb25jYXQoZGVidWcpLm1hcChmaWx0ZXJUb0Z1bmN0aW9uKTtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIGxvZ2xldmVsID0gTG9nTGV2ZWxbXCJcIi5jb25jYXQobGV2ZWwpXSB8fCAwO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEBwYXJhbSB7YW55W119IGFyZ3MgYXJndW1lbnRzIG9mIHRoZSBsb2cgZW50cnlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZihuYW1lKTtcbiAgICB9KTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZGVidWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUubG9nOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUud2FybjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5ncm91cC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwRW5kOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnRpbWU6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgICAgdmFyIG1zID0gYXJnc1sxXSAqIDEwMDAgKyBhcmdzWzJdIC8gMTAwMDAwMDtcbiAgICAgICAgICB2YXIgbXNnID0gXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0sIFwiOiBcIikuY29uY2F0KG1zLCBcIiBtc1wiKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBMb2dUeXBlIFwiLmNvbmNhdCh0eXBlKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgU3luY0JhaWxIb29rID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZS9saWIvU3luY0JhaWxIb29rICovIFwiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanNcIik7XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIiksXG4gICAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyO1xuXG52YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3JlYXRlQ29uc29sZUxvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiKTtcbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xuXG5cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXJcbiAqIEByZXR1cm5zIHtMb2dnZXJ9IGEgbG9nZ2VyXG4gKi9cblxuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmhvb2tzID0ge1xuICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soW1wib3JpZ2luXCIsIFwidHlwZVwiLCBcImFyZ3NcIl0pXG59O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCIvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIGJpbmRpbmcgKi8gc3RyaXBBbnNpOyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBhbnNpLXJlZ2V4ICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qc1wiKTtcblxuZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGBcIi5jb25jYXQodHlwZW9mIHN0cmluZywgXCJgXCIpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgoMCxhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKSgpLCAnJyk7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBhbnNpUmVnZXg7IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuZnVuY3Rpb24gYW5zaVJlZ2V4KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJG9ubHlGaXJzdCA9IF9yZWYub25seUZpcnN0LFxuICAgICAgb25seUZpcnN0ID0gX3JlZiRvbmx5Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5Rmlyc3Q7XG5cbiAgdmFyIHBhdHRlcm4gPSBbXCJbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpXCIsICcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKSddLmpvaW4oJ3wnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgb25seUZpcnN0ID8gdW5kZWZpbmVkIDogJ2cnKTtcbn1cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWQgdG8gYmUgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2UgaXQgbmVlZCB0byBiZSBpc29sYXRlZCBhZ2FpbnN0IG90aGVyIG1vZHVsZXMgaW4gdGhlIGNodW5rLlxuIWZ1bmN0aW9uKCkge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpcC1hbnNpICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKTtcbn0oKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fID0gZXhwb3J0cztcbmZvcih2YXIgaSBpbiBfX3dlYnBhY2tfZXhwb3J0c19fKSBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fW2ldID0gX193ZWJwYWNrX2V4cG9ydHNfX1tpXTtcbmlmKF9fd2VicGFja19leHBvcnRzX18uX19lc01vZHVsZSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gfSkoKVxuOyIsIi8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuaW1wb3J0IGFuc2lIVE1MIGZyb20gXCJhbnNpLWh0bWwtY29tbXVuaXR5XCI7XG5pbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwiaHRtbC1lbnRpdGllc1wiO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG52YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDtcbnZhciBjb250YWluZXJFbGVtZW50O1xudmFyIG9uTG9hZFF1ZXVlID0gW107XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKCkge1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5XCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3JjID0gXCJhYm91dDpibGFua1wiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnRvcCA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUucmlnaHQgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMHZ3XCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnpJbmRleCA9IDk5OTk5OTk5OTk7XG5cbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29udGFpbmVyRWxlbWVudCA9IGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiYSgwLCAwLCAwLCAwLjg1KVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNFOEU4RThcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBcIk1lbmxvLCBDb25zb2xhcywgbW9ub3NwYWNlXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwibGFyZ2VcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjJyZW1cIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEuMlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlLXdyYXBcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICB2YXIgY2xvc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gXCJYXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwiMjBweFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPSBcInJpZ2h0XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLnN0eWxlRmxvYXQgPSBcInJpZ2h0XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBoaWRlKCk7XG4gICAgfSk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbGVtZW50KTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uRWxlbWVudCk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgb25Mb2FkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIH0pO1xuICAgIG9uTG9hZFF1ZXVlID0gW107XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlFeGlzdHMoY2FsbGJhY2spIHtcbiAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgIGNhbGxiYWNrKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uTG9hZFF1ZXVlLnB1c2goY2FsbGJhY2spO1xuXG4gIGlmIChpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3JlYXRlQ29udGFpbmVyKCk7XG59IC8vIFN1Y2Nlc3NmdWwgY29tcGlsYXRpb24uXG5cblxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgaWYgKCFpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENsZWFuIHVwIGFuZCByZXNldCBpbnRlcm5hbCBzdGF0ZS5cblxuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQgPSBudWxsO1xuICBjb250YWluZXJFbGVtZW50ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJvYmxlbSh0eXBlLCBpdGVtKSB7XG4gIHZhciBoZWFkZXIgPSB0eXBlID09PSBcIndhcm5pbmdcIiA/IFwiV0FSTklOR1wiIDogXCJFUlJPUlwiO1xuICB2YXIgYm9keSA9IFwiXCI7XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgYm9keSArPSBpdGVtO1xuICB9IGVsc2Uge1xuICAgIHZhciBmaWxlID0gaXRlbS5maWxlIHx8IFwiXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuXG4gICAgdmFyIG1vZHVsZU5hbWUgPSBpdGVtLm1vZHVsZU5hbWUgPyBpdGVtLm1vZHVsZU5hbWUuaW5kZXhPZihcIiFcIikgIT09IC0xID8gXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLnJlcGxhY2UoL14oXFxzfFxcUykqIS8sIFwiXCIpLCBcIiAoXCIpLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUsIFwiKVwiKSA6IFwiXCIuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSkgOiBcIlwiO1xuICAgIHZhciBsb2MgPSBpdGVtLmxvYztcbiAgICBoZWFkZXIgKz0gXCJcIi5jb25jYXQobW9kdWxlTmFtZSB8fCBmaWxlID8gXCIgaW4gXCIuY29uY2F0KG1vZHVsZU5hbWUgPyBcIlwiLmNvbmNhdChtb2R1bGVOYW1lKS5jb25jYXQoZmlsZSA/IFwiIChcIi5jb25jYXQoZmlsZSwgXCIpXCIpIDogXCJcIikgOiBmaWxlKS5jb25jYXQobG9jID8gXCIgXCIuY29uY2F0KGxvYykgOiBcIlwiKSA6IFwiXCIpO1xuICAgIGJvZHkgKz0gaXRlbS5tZXNzYWdlIHx8IFwiXCI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlYWRlcjogaGVhZGVyLFxuICAgIGJvZHk6IGJvZHlcbiAgfTtcbn0gLy8gQ29tcGlsYXRpb24gd2l0aCBlcnJvcnMgKGUuZy4gc3ludGF4IGVycm9yIG9yIG1pc3NpbmcgbW9kdWxlcykuXG5cblxuZnVuY3Rpb24gc2hvdyh0eXBlLCBtZXNzYWdlcykge1xuICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHZhciB0eXBlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcblxuICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyO1xuICAgICAgdHlwZUVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNcIi5jb25jYXQoY29sb3JzLnJlZCk7IC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cblxuICAgICAgdmFyIHRleHQgPSBhbnNpSFRNTChlbmNvZGUoYm9keSkpO1xuICAgICAgdmFyIG1lc3NhZ2VUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBtZXNzYWdlVGV4dE5vZGUuaW5uZXJIVE1MID0gdGV4dDtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZCh0eXBlRWxlbWVudCk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VUZXh0Tm9kZSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbnRyeUVsZW1lbnQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgZm9ybWF0UHJvYmxlbSwgc2hvdywgaGlkZSB9OyIsIi8qIGdsb2JhbCBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAqL1xuaW1wb3J0IFdlYlNvY2tldENsaWVudCBmcm9tIFwiLi9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qc1wiOyAvLyB0aGlzIFdlYnNvY2tldENsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZFxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cblxudmFyIENsaWVudCA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2UsIG5vLW5lc3RlZC10ZXJuYXJ5XG50eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gIT09IFwidW5kZWZpbmVkXCIgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG50eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgOiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IFdlYlNvY2tldENsaWVudDtcbi8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG5cbnZhciByZXRyaWVzID0gMDtcbnZhciBjbGllbnQgPSBudWxsO1xuXG52YXIgc29ja2V0ID0gZnVuY3Rpb24gaW5pdFNvY2tldCh1cmwsIGhhbmRsZXJzKSB7XG4gIGNsaWVudCA9IG5ldyBDbGllbnQodXJsKTtcbiAgY2xpZW50Lm9uT3BlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0cmllcyA9IDA7XG4gIH0pO1xuICBjbGllbnQub25DbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJldHJpZXMgPT09IDApIHtcbiAgICAgIGhhbmRsZXJzLmNsb3NlKCk7XG4gICAgfSAvLyBUcnkgdG8gcmVjb25uZWN0LlxuXG5cbiAgICBjbGllbnQgPSBudWxsOyAvLyBBZnRlciAxMCByZXRyaWVzIHN0b3AgdHJ5aW5nLCB0byBwcmV2ZW50IGxvZ3NwYW0uXG5cbiAgICBpZiAocmV0cmllcyA8PSAxMCkge1xuICAgICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aW1lb3V0IHRvIHJlY29ubmVjdC5cbiAgICAgIC8vIFJlc3BlY3RmdWxseSBjb3BpZWQgZnJvbSB0aGUgcGFja2FnZSBgZ290YC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRvcnMsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICAgICAgdmFyIHJldHJ5SW5NcyA9IDEwMDAgKiBNYXRoLnBvdygyLCByZXRyaWVzKSArIE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgICByZXRyaWVzICs9IDE7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc29ja2V0KHVybCwgaGFuZGxlcnMpO1xuICAgICAgfSwgcmV0cnlJbk1zKTtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25NZXNzYWdlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgaWYgKGhhbmRsZXJzW21lc3NhZ2UudHlwZV0pIHtcbiAgICAgIGhhbmRsZXJzW21lc3NhZ2UudHlwZV0obWVzc2FnZS5kYXRhKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc29ja2V0OyIsImltcG9ydCB1cmwgZnJvbSBcInVybFwiOyAvLyBXZSBoYW5kbGUgbGVnYWN5IEFQSSB0aGF0IGlzIE5vZGUuanMgc3BlY2lmaWMsIGFuZCBhIG5ld2VyIEFQSSB0aGF0IGltcGxlbWVudHMgdGhlIHNhbWUgV0hBVFdHIFVSTCBTdGFuZGFyZCB1c2VkIGJ5IHdlYiBicm93c2Vyc1xuLy8gUGxlYXNlIGxvb2sgYXQgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS91cmwuaHRtbCN1cmxfdXJsX3N0cmluZ3NfYW5kX3VybF9vYmplY3RzXG5cbmZ1bmN0aW9uIGNyZWF0ZVNvY2tldFVSTChwYXJzZWRVUkwpIHtcbiAgdmFyIGhvc3RuYW1lID0gcGFyc2VkVVJMLmhvc3RuYW1lOyAvLyBOb2RlLmpzIG1vZHVsZSBwYXJzZXMgaXQgYXMgYDo6YFxuICAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMc3RyaW5nXSlgIHBhcnNlcyBpdCBhcyAnWzo6XSdcblxuICB2YXIgaXNJbkFkZHJBbnkgPSBob3N0bmFtZSA9PT0gXCIwLjAuMC4wXCIgfHwgaG9zdG5hbWUgPT09IFwiOjpcIiB8fCBob3N0bmFtZSA9PT0gXCJbOjpdXCI7IC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/XG4gIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL3B1bGwvMzg0XG5cbiAgaWYgKGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgIGhvc3RuYW1lID0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxuXG4gIHZhciBzb2NrZXRVUkxQcm90b2NvbCA9IHBhcnNlZFVSTC5wcm90b2NvbCB8fCBzZWxmLmxvY2F0aW9uLnByb3RvY29sOyAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYiBzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWIgc29ja2V0cy5cblxuICBpZiAoc29ja2V0VVJMUHJvdG9jb2wgPT09IFwiYXV0bzpcIiB8fCBob3N0bmFtZSAmJiBpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgc29ja2V0VVJMUHJvdG9jb2wgPSBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuICB9XG5cbiAgc29ja2V0VVJMUHJvdG9jb2wgPSBzb2NrZXRVUkxQcm90b2NvbC5yZXBsYWNlKC9eKD86aHR0cHwuKy1leHRlbnNpb258ZmlsZSkvaSwgXCJ3c1wiKTtcbiAgdmFyIHNvY2tldFVSTEF1dGggPSBcIlwiOyAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMc3RyaW5nXSlgIGRvZXNuJ3QgaGF2ZSBgYXV0aGAgcHJvcGVydHlcbiAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW1cblxuICBpZiAocGFyc2VkVVJMLnVzZXJuYW1lKSB7XG4gICAgc29ja2V0VVJMQXV0aCA9IHBhcnNlZFVSTC51c2VybmFtZTsgLy8gU2luY2UgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBlbXB0eSB1c2VybmFtZSxcbiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgcGFzc3dvcmQgaWYgdGhlIHVzZXJuYW1lIGlzIG5vdCBlbXB0eS5cblxuICAgIGlmIChwYXJzZWRVUkwucGFzc3dvcmQpIHtcbiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPjo8cGFzc3dvcmQ+XG4gICAgICBzb2NrZXRVUkxBdXRoID0gc29ja2V0VVJMQXV0aC5jb25jYXQoXCI6XCIsIHBhcnNlZFVSTC5wYXNzd29yZCk7XG4gICAgfVxuICB9IC8vIEluIGNhc2UgdGhlIGhvc3QgaXMgYSByYXcgSVB2NiBhZGRyZXNzLCBpdCBjYW4gYmUgZW5jbG9zZWQgaW5cbiAgLy8gdGhlIGJyYWNrZXRzIGFzIHRoZSBicmFja2V0cyBhcmUgbmVlZGVkIGluIHRoZSBmaW5hbCBVUkwgc3RyaW5nLlxuICAvLyBOZWVkIHRvIHJlbW92ZSB0aG9zZSBhcyB1cmwuZm9ybWF0IGJsaW5kbHkgYWRkcyBpdHMgb3duIHNldCBvZiBicmFja2V0c1xuICAvLyBpZiB0aGUgaG9zdCBzdHJpbmcgY29udGFpbnMgY29sb25zLiBUaGF0IHdvdWxkIGxlYWQgdG8gbm9uLXdvcmtpbmdcbiAgLy8gZG91YmxlIGJyYWNrZXRzIChlLmcuIFtbOjpdXSkgaG9zdFxuICAvL1xuICAvLyBBbGwgb2YgdGhlc2Ugd2ViIHNvY2tldCB1cmwgcGFyYW1zIGFyZSBvcHRpb25hbGx5IHBhc3NlZCBpbiB0aHJvdWdoIHJlc291cmNlUXVlcnksXG4gIC8vIHNvIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZFxuXG5cbiAgdmFyIHNvY2tldFVSTEhvc3RuYW1lID0gKGhvc3RuYW1lIHx8IHNlbGYubG9jYXRpb24uaG9zdG5hbWUgfHwgXCJsb2NhbGhvc3RcIikucmVwbGFjZSgvXlxcWyguKilcXF0kLywgXCIkMVwiKTtcbiAgdmFyIHNvY2tldFVSTFBvcnQgPSBwYXJzZWRVUkwucG9ydDtcblxuICBpZiAoIXNvY2tldFVSTFBvcnQgfHwgc29ja2V0VVJMUG9ydCA9PT0gXCIwXCIpIHtcbiAgICBzb2NrZXRVUkxQb3J0ID0gc2VsZi5sb2NhdGlvbi5wb3J0O1xuICB9IC8vIElmIHBhdGggaXMgcHJvdmlkZWQgaXQnbGwgYmUgcGFzc2VkIGluIHZpYSB0aGUgcmVzb3VyY2VRdWVyeSBhcyBhXG4gIC8vIHF1ZXJ5IHBhcmFtIHNvIGl0IGhhcyB0byBiZSBwYXJzZWQgb3V0IG9mIHRoZSBxdWVyeXN0cmluZyBpbiBvcmRlciBmb3IgdGhlXG4gIC8vIGNsaWVudCB0byBvcGVuIHRoZSBzb2NrZXQgdG8gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG5cblxuICB2YXIgc29ja2V0VVJMUGF0aG5hbWUgPSBcIi93c1wiO1xuXG4gIGlmIChwYXJzZWRVUkwucGF0aG5hbWUgJiYgIXBhcnNlZFVSTC5mcm9tQ3VycmVudFNjcmlwdCkge1xuICAgIHNvY2tldFVSTFBhdGhuYW1lID0gcGFyc2VkVVJMLnBhdGhuYW1lO1xuICB9XG5cbiAgcmV0dXJuIHVybC5mb3JtYXQoe1xuICAgIHByb3RvY29sOiBzb2NrZXRVUkxQcm90b2NvbCxcbiAgICBhdXRoOiBzb2NrZXRVUkxBdXRoLFxuICAgIGhvc3RuYW1lOiBzb2NrZXRVUkxIb3N0bmFtZSxcbiAgICBwb3J0OiBzb2NrZXRVUkxQb3J0LFxuICAgIHBhdGhuYW1lOiBzb2NrZXRVUkxQYXRobmFtZSxcbiAgICBzbGFzaGVzOiB0cnVlXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTb2NrZXRVUkw7IiwiZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpIHtcbiAgLy8gYGRvY3VtZW50LmN1cnJlbnRTY3JpcHRgIGlzIHRoZSBtb3N0IGFjY3VyYXRlIHdheSB0byBmaW5kIHRoZSBjdXJyZW50IHNjcmlwdCxcbiAgLy8gYnV0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWxsIGJyb3dzZXJzLlxuICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSAvLyBGYWxsYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIHJ1bm5pbmcgaW4gdGhlIGRvY3VtZW50LlxuXG5cbiAgdmFyIHNjcmlwdEVsZW1lbnRzID0gZG9jdW1lbnQuc2NyaXB0cyB8fCBbXTtcbiAgdmFyIHNjcmlwdEVsZW1lbnRzV2l0aFNyYyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChzY3JpcHRFbGVtZW50cywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0pO1xuXG4gIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0gLy8gRmFpbCBhcyB0aGVyZSB3YXMgbm8gc2NyaXB0IHRvIHVzZS5cblxuXG4gIHRocm93IG5ldyBFcnJvcihcIlt3ZWJwYWNrLWRldi1zZXJ2ZXJdIEZhaWxlZCB0byBnZXQgY3VycmVudCBzY3JpcHQgc291cmNlLlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZTsiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9tb2R1bGVzL2xvZ2dlci9pbmRleC5qc1wiO1xudmFyIG5hbWUgPSBcIndlYnBhY2stZGV2LXNlcnZlclwiOyAvLyBkZWZhdWx0IGxldmVsIGlzIHNldCBvbiB0aGUgY2xpZW50IHNpZGUsIHNvIGl0IGRvZXMgbm90IG5lZWRcbi8vIHRvIGJlIHNldCBieSB0aGUgQ0xJIG9yIEFQSVxuXG52YXIgZGVmYXVsdExldmVsID0gXCJpbmZvXCI7XG5cbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gIGxvZ2dlci5jb25maWd1cmVEZWZhdWx0TG9nZ2VyKHtcbiAgICBsZXZlbDogbGV2ZWxcbiAgfSk7XG59XG5cbnNldExvZ0xldmVsKGRlZmF1bHRMZXZlbCk7XG52YXIgbG9nID0gbG9nZ2VyLmdldExvZ2dlcihuYW1lKTtcbmV4cG9ydCB7IGxvZywgc2V0TG9nTGV2ZWwgfTsiLCJpbXBvcnQgdXJsIGZyb20gXCJ1cmxcIjtcbmltcG9ydCBnZXRDdXJyZW50U2NyaXB0U291cmNlIGZyb20gXCIuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanNcIjtcblxuZnVuY3Rpb24gcGFyc2VVUkwocmVzb3VyY2VRdWVyeSkge1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcmVzb3VyY2VRdWVyeSA9PT0gXCJzdHJpbmdcIiAmJiByZXNvdXJjZVF1ZXJ5ICE9PSBcIlwiKSB7XG4gICAgdmFyIHNlYXJjaFBhcmFtcyA9IHJlc291cmNlUXVlcnkuc3Vic3RyKDEpLnNwbGl0KFwiJlwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFpciA9IHNlYXJjaFBhcmFtc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICBvcHRpb25zW3BhaXJbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFbHNlLCBnZXQgdGhlIHVybCBmcm9tIHRoZSA8c2NyaXB0PiB0aGlzIGZpbGUgd2FzIGNhbGxlZCB3aXRoLlxuICAgIHZhciBzY3JpcHRTb3VyY2UgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG5cbiAgICBpZiAoc2NyaXB0U291cmNlKSB7XG4gICAgICB2YXIgc2NyaXB0U291cmNlVVJMO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgICAgLy8gaXMgdG8gYWxsb3cgcGFyc2luZyBvZiBwYXRoLXJlbGF0aXZlIG9yIHByb3RvY29sLXJlbGF0aXZlIFVSTHMsXG4gICAgICAgIC8vIGFuZCB3aWxsIGhhdmUgbm8gZWZmZWN0IGlmIGBzY3JpcHRTb3VyY2VgIGlzIGEgZnVsbHkgdmFsaWQgVVJMLlxuICAgICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ly8gVVJMIHBhcnNpbmcgZmFpbGVkLCBkbyBub3RoaW5nLlxuICAgICAgICAvLyBXZSB3aWxsIHN0aWxsIHByb2NlZWQgdG8gc2VlIGlmIHdlIGNhbiByZWNvdmVyIHVzaW5nIGByZXNvdXJjZVF1ZXJ5YFxuICAgICAgfVxuXG4gICAgICBpZiAoc2NyaXB0U291cmNlVVJMKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzY3JpcHRTb3VyY2VVUkw7XG4gICAgICAgIG9wdGlvbnMuZnJvbUN1cnJlbnRTY3JpcHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gdXJsLnBhcnNlKHNlbGYubG9jYXRpb24uaHJlZiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBvcHRpb25zLmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VVUkw7IiwiLyogZ2xvYmFsIF9fd2VicGFja19oYXNoX18gKi9cbmltcG9ydCBob3RFbWl0dGVyIGZyb20gXCJ3ZWJwYWNrL2hvdC9lbWl0dGVyLmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi9sb2cuanNcIjtcblxuZnVuY3Rpb24gcmVsb2FkQXBwKF9yZWYsIHN0YXR1cykge1xuICB2YXIgaG90ID0gX3JlZi5ob3QsXG4gICAgICBsaXZlUmVsb2FkID0gX3JlZi5saXZlUmVsb2FkO1xuXG4gIGlmIChzdGF0dXMuaXNVbmxvYWRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VycmVudEhhc2ggPSBzdGF0dXMuY3VycmVudEhhc2gsXG4gICAgICBwcmV2aW91c0hhc2ggPSBzdGF0dXMucHJldmlvdXNIYXNoO1xuICB2YXIgaXNJbml0aWFsID0gY3VycmVudEhhc2guaW5kZXhPZihwcmV2aW91c0hhc2gpID49IDA7XG5cbiAgaWYgKGlzSW5pdGlhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLlwiKTtcbiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHNlbGYubG9jYXRpb24uc2VhcmNoLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbGxvd1RvSG90ID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItaG90PWZhbHNlXCIpID09PSAtMTtcbiAgdmFyIGFsbG93VG9MaXZlUmVsb2FkID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItbGl2ZS1yZWxvYWQ9ZmFsc2VcIikgPT09IC0xO1xuXG4gIGlmIChob3QgJiYgYWxsb3dUb0hvdCkge1xuICAgIGxvZy5pbmZvKFwiQXBwIGhvdCB1cGRhdGUuLi5cIik7XG4gICAgaG90RW1pdHRlci5lbWl0KFwid2VicGFja0hvdFVwZGF0ZVwiLCBzdGF0dXMuY3VycmVudEhhc2gpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoc3RhdHVzLmN1cnJlbnRIYXNoKSwgXCIqXCIpO1xuICAgIH1cbiAgfSAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZFxuICBlbHNlIGlmIChsaXZlUmVsb2FkICYmIGFsbG93VG9MaXZlUmVsb2FkKSB7XG4gICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmOyAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcblxuICAgIHZhciBpbnRlcnZhbElkID0gc2VsZi5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gXCJhYm91dDpcIikge1xuICAgICAgICAvLyByZWxvYWQgaW1tZWRpYXRlbHkgaWYgcHJvdG9jb2wgaXMgdmFsaWRcbiAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290V2luZG93ID0gcm9vdFdpbmRvdy5wYXJlbnQ7XG5cbiAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgLy8gaWYgcGFyZW50IGVxdWFscyBjdXJyZW50IHdpbmRvdyB3ZSd2ZSByZWFjaGVkIHRoZSByb290IHdoaWNoIHdvdWxkIGNvbnRpbnVlIGZvcmV2ZXIsIHNvIHRyaWdnZXIgYSByZWxvYWQgYW55d2F5c1xuICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVsb2FkQXBwOyIsIi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgKi9cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG5mdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09IFwidW5kZWZpbmVkXCIgfHwgIShzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpKSkge1xuICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJ3ZWJwYWNrXCIuY29uY2F0KHR5cGUpLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0sIFwiKlwiKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzZW5kTXNnOyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vKiBnbG9iYWxzIF9fd2VicGFja19oYXNoX18gKi9cbmlmIChtb2R1bGUuaG90KSB7XG5cdHZhciBsYXN0SGFzaDtcblx0dmFyIHVwVG9EYXRlID0gZnVuY3Rpb24gdXBUb0RhdGUoKSB7XG5cdFx0cmV0dXJuIGxhc3RIYXNoLmluZGV4T2YoX193ZWJwYWNrX2hhc2hfXykgPj0gMDtcblx0fTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblx0dmFyIGNoZWNrID0gZnVuY3Rpb24gY2hlY2soKSB7XG5cdFx0bW9kdWxlLmhvdFxuXHRcdFx0LmNoZWNrKHRydWUpXG5cdFx0XHQudGhlbihmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0aWYgKCF1cGRhdGVkTW9kdWxlcykge1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBDYW5ub3QgZmluZCB1cGRhdGUuIE5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIik7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIChQcm9iYWJseSBiZWNhdXNlIG9mIHJlc3RhcnRpbmcgdGhlIHdlYnBhY2stZGV2LXNlcnZlcilcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGNoZWNrKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXF1aXJlKFwiLi9sb2ctYXBwbHktcmVzdWx0XCIpKHVwZGF0ZWRNb2R1bGVzLCB1cGRhdGVkTW9kdWxlcyk7XG5cblx0XHRcdFx0aWYgKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0dmFyIHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG5cdFx0XHRcdGlmIChbXCJhYm9ydFwiLCBcImZhaWxcIl0uaW5kZXhPZihzdGF0dXMpID49IDApIHtcblx0XHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFx0XHRcdFwiW0hNUl0gQ2Fubm90IGFwcGx5IHVwZGF0ZS4gTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkIVwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gXCIgKyBsb2cuZm9ybWF0RXJyb3IoZXJyKSk7XG5cdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBVcGRhdGUgZmFpbGVkOiBcIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH07XG5cdHZhciBob3RFbWl0dGVyID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcblx0aG90RW1pdHRlci5vbihcIndlYnBhY2tIb3RVcGRhdGVcIiwgZnVuY3Rpb24gKGN1cnJlbnRIYXNoKSB7XG5cdFx0bGFzdEhhc2ggPSBjdXJyZW50SGFzaDtcblx0XHRpZiAoIXVwVG9EYXRlKCkgJiYgbW9kdWxlLmhvdC5zdGF0dXMoKSA9PT0gXCJpZGxlXCIpIHtcblx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBDaGVja2luZyBmb3IgdXBkYXRlcyBvbiB0aGUgc2VydmVyLi4uXCIpO1xuXHRcdFx0Y2hlY2soKTtcblx0XHR9XG5cdH0pO1xuXHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gV2FpdGluZyBmb3IgdXBkYXRlIHNpZ25hbCBmcm9tIFdEUy4uLlwiKTtcbn0gZWxzZSB7XG5cdHRocm93IG5ldyBFcnJvcihcIltITVJdIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgaXMgZGlzYWJsZWQuXCIpO1xufVxuIiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcywgcmVuZXdlZE1vZHVsZXMpIHtcblx0dmFyIHVuYWNjZXB0ZWRNb2R1bGVzID0gdXBkYXRlZE1vZHVsZXMuZmlsdGVyKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdHJldHVybiByZW5ld2VkTW9kdWxlcyAmJiByZW5ld2VkTW9kdWxlcy5pbmRleE9mKG1vZHVsZUlkKSA8IDA7XG5cdH0pO1xuXHR2YXIgbG9nID0gcmVxdWlyZShcIi4vbG9nXCIpO1xuXG5cdGlmICh1bmFjY2VwdGVkTW9kdWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0bG9nKFxuXHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcIltITVJdIFRoZSBmb2xsb3dpbmcgbW9kdWxlcyBjb3VsZG4ndCBiZSBob3QgdXBkYXRlZDogKFRoZXkgd291bGQgbmVlZCBhIGZ1bGwgcmVsb2FkISlcIlxuXHRcdCk7XG5cdFx0dW5hY2NlcHRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICghcmVuZXdlZE1vZHVsZXMgfHwgcmVuZXdlZE1vZHVsZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdIE5vdGhpbmcgaG90IHVwZGF0ZWQuXCIpO1xuXHR9IGVsc2Uge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBVcGRhdGVkIG1vZHVsZXM6XCIpO1xuXHRcdHJlbmV3ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRpZiAodHlwZW9mIG1vZHVsZUlkID09PSBcInN0cmluZ1wiICYmIG1vZHVsZUlkLmluZGV4T2YoXCIhXCIpICE9PSAtMSkge1xuXHRcdFx0XHR2YXIgcGFydHMgPSBtb2R1bGVJZC5zcGxpdChcIiFcIik7XG5cdFx0XHRcdGxvZy5ncm91cENvbGxhcHNlZChcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIHBhcnRzLnBvcCgpKTtcblx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdFx0XHRsb2cuZ3JvdXBFbmQoXCJpbmZvXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBudW1iZXJJZHMgPSByZW5ld2VkTW9kdWxlcy5ldmVyeShmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdHJldHVybiB0eXBlb2YgbW9kdWxlSWQgPT09IFwibnVtYmVyXCI7XG5cdFx0fSk7XG5cdFx0aWYgKG51bWJlcklkcylcblx0XHRcdGxvZyhcblx0XHRcdFx0XCJpbmZvXCIsXG5cdFx0XHRcdCdbSE1SXSBDb25zaWRlciB1c2luZyB0aGUgb3B0aW1pemF0aW9uLm1vZHVsZUlkczogXCJuYW1lZFwiIGZvciBtb2R1bGUgbmFtZXMuJ1xuXHRcdFx0KTtcblx0fVxufTtcbiIsInZhciBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBkdW1teSgpIHt9XG5cbmZ1bmN0aW9uIHNob3VsZExvZyhsZXZlbCkge1xuXHR2YXIgc2hvdWxkTG9nID1cblx0XHQobG9nTGV2ZWwgPT09IFwiaW5mb1wiICYmIGxldmVsID09PSBcImluZm9cIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCIsIFwiZXJyb3JcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJlcnJvclwiKTtcblx0cmV0dXJuIHNob3VsZExvZztcbn1cblxuZnVuY3Rpb24gbG9nR3JvdXAobG9nRm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdFx0aWYgKHNob3VsZExvZyhsZXZlbCkpIHtcblx0XHRcdGxvZ0ZuKG1zZyk7XG5cdFx0fVxuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cbnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7XG52YXIgZ3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkIHx8IGR1bW15O1xudmFyIGdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZCB8fCBkdW1teTtcbi8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG5cdGxvZ0xldmVsID0gbGV2ZWw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc3RhY2s7XG5cdH1cbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjY5NjczMDA3NzQxXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkQ6L0pPQlMvV0VCL0EtQSB3ZWJzaXRlL0EtQSBXRUJTSVRFL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIlwiLFwibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiaW1wb3J0IHQgZnJvbVwidGlueS1lbWl0dGVyXCI7aW1wb3J0IGkgZnJvbVwidmlydHVhbC1zY3JvbGxcIjtmdW5jdGlvbiBlKCl7cmV0dXJuIGU9T2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduLmJpbmQoKTpmdW5jdGlvbih0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgZT1hcmd1bWVudHNbaV07Zm9yKHZhciBzIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscykmJih0W3NdPWVbc10pfXJldHVybiB0fSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBzKHQsaSl7bGV0IGU9dCVpO3JldHVybiBlPDAmJihlKz1pKSxlfWNvbnN0IHI9W1wiZHVyYXRpb25cIixcImVhc2luZ1wiXTtjbGFzcyBve3RvKHQsaT17fSl7bGV0e2R1cmF0aW9uOnM9MSxlYXNpbmc6bz0odD0+dCl9PWksbj1mdW5jdGlvbih0LGkpe2lmKG51bGw9PXQpcmV0dXJue307dmFyIGUscyxyPXt9LG89T2JqZWN0LmtleXModCk7Zm9yKHM9MDtzPG8ubGVuZ3RoO3MrKylpLmluZGV4T2YoZT1vW3NdKT49MHx8KHJbZV09dFtlXSk7cmV0dXJuIHJ9KGkscik7dGhpcy50YXJnZXQ9dCx0aGlzLmZyb21LZXlzPWUoe30sbiksdGhpcy50b0tleXM9ZSh7fSxuKSx0aGlzLmtleXM9T2JqZWN0LmtleXMoZSh7fSxuKSksdGhpcy5rZXlzLmZvckVhY2goaT0+e3RoaXMuZnJvbUtleXNbaV09dFtpXX0pLHRoaXMuZHVyYXRpb249cyx0aGlzLmVhc2luZz1vLHRoaXMuY3VycmVudFRpbWU9MCx0aGlzLmlzUnVubmluZz0hMH1zdG9wKCl7dGhpcy5pc1J1bm5pbmc9ITF9cmFmKHQpe2lmKCF0aGlzLmlzUnVubmluZylyZXR1cm47dGhpcy5jdXJyZW50VGltZT1NYXRoLm1pbih0aGlzLmN1cnJlbnRUaW1lK3QsdGhpcy5kdXJhdGlvbik7Y29uc3QgaT10aGlzLmVhc2luZyh0aGlzLnByb2dyZXNzKTt0aGlzLmtleXMuZm9yRWFjaCh0PT57Y29uc3QgZT10aGlzLmZyb21LZXlzW3RdO3RoaXMudGFyZ2V0W3RdPWUrKHRoaXMudG9LZXlzW3RdLWUpKml9KSwxPT09aSYmdGhpcy5zdG9wKCl9Z2V0IHByb2dyZXNzKCl7cmV0dXJuIHRoaXMuY3VycmVudFRpbWUvdGhpcy5kdXJhdGlvbn19Y2xhc3MgbiBleHRlbmRzIHR7Y29uc3RydWN0b3Ioe2R1cmF0aW9uOnQ9MS4yLGVhc2luZzplPSh0PT5NYXRoLm1pbigxLDEuMDAxLU1hdGgucG93KDIsLTEwKnQpKSksc21vb3RoOnM9ITAsbW91c2VNdWx0aXBsaWVyOnI9MSxzbW9vdGhUb3VjaDpuPSExLHRvdWNoTXVsdGlwbGllcjpoPTIsZGlyZWN0aW9uOmw9XCJ2ZXJ0aWNhbFwiLGdlc3R1cmVEaXJlY3Rpb246Yz1cInZlcnRpY2FsXCIsaW5maW5pdGU6YT0hMSx3cmFwcGVyOnA9d2luZG93LGNvbnRlbnQ6ZD1kb2N1bWVudC5ib2R5fT17fSl7dmFyIHUsZixnO3N1cGVyKCksdGhpcy5vbldpbmRvd1Jlc2l6ZT0oKT0+e3RoaXMud3JhcHBlcldpZHRoPXdpbmRvdy5pbm5lcldpZHRoLHRoaXMud3JhcHBlckhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHR9LHRoaXMub25XcmFwcGVyUmVzaXplPShbdF0pPT57aWYodCl7Y29uc3QgaT10LmNvbnRlbnRSZWN0O3RoaXMud3JhcHBlcldpZHRoPWkud2lkdGgsdGhpcy53cmFwcGVySGVpZ2h0PWkuaGVpZ2h0fX0sdGhpcy5vbkNvbnRlbnRSZXNpemU9KFt0XSk9PntpZih0KXtjb25zdCBpPXQuY29udGVudFJlY3Q7dGhpcy5jb250ZW50V2lkdGg9aS53aWR0aCx0aGlzLmNvbnRlbnRIZWlnaHQ9aS5oZWlnaHR9fSx0aGlzLm9uVmlydHVhbFNjcm9sbD0oe2RlbHRhWTp0LGRlbHRhWDppLG9yaWdpbmFsRXZlbnQ6ZX0pPT57Y29uc3Qgcz0hIWUuY29tcG9zZWRQYXRoKCkuZmluZCh0PT50Lmhhc0F0dHJpYnV0ZSYmdC5oYXNBdHRyaWJ1dGUoXCJkYXRhLWxlbmlzLXByZXZlbnRcIikpO2lmKGUuY3RybEtleXx8cylyZXR1cm47aWYodGhpcy5zbW9vdGg9ZS5jaGFuZ2VkVG91Y2hlcz90aGlzLnNtb290aFRvdWNoOnRoaXMub3B0aW9ucy5zbW9vdGgsdGhpcy5zdG9wcGVkKXJldHVybiB2b2lkIGUucHJldmVudERlZmF1bHQoKTtpZighdGhpcy5zbW9vdGgpcmV0dXJuO2lmKDQ9PT1lLmJ1dHRvbnMpcmV0dXJuO3RoaXMuc21vb3RoJiZlLnByZXZlbnREZWZhdWx0KCk7bGV0IHI9MDtyPVwiYm90aFwiPT09dGhpcy5nZXN0dXJlRGlyZWN0aW9uP2krdDpcImhvcml6b250YWxcIj09PXRoaXMuZ2VzdHVyZURpcmVjdGlvbj9pOnQsdGhpcy50YXJnZXRTY3JvbGwtPXIsdGhpcy5zY3JvbGxUbyh0aGlzLnRhcmdldFNjcm9sbCl9LHRoaXMub25TY3JvbGw9dD0+e3RoaXMuaXNTY3JvbGxpbmcmJnRoaXMuc21vb3RofHwodGhpcy50YXJnZXRTY3JvbGw9dGhpcy5zY3JvbGw9dGhpcy5sYXN0U2Nyb2xsPXRoaXMud3JhcHBlck5vZGVbdGhpcy5zY3JvbGxQcm9wZXJ0eV0sdGhpcy5ub3RpZnkoKSl9LHdpbmRvdy5sZW5pc1ZlcnNpb249XCIwLjIuMjBcIix0aGlzLm9wdGlvbnM9e2R1cmF0aW9uOnQsZWFzaW5nOmUsc21vb3RoOnMsbW91c2VNdWx0aXBsaWVyOnIsc21vb3RoVG91Y2g6bix0b3VjaE11bHRpcGxpZXI6aCxkaXJlY3Rpb246bCxnZXN0dXJlRGlyZWN0aW9uOmMsaW5maW5pdGU6YSx3cmFwcGVyOnAsY29udGVudDpkfSx0aGlzLmR1cmF0aW9uPXQsdGhpcy5lYXNpbmc9ZSx0aGlzLnNtb290aD1zLHRoaXMubW91c2VNdWx0aXBsaWVyPXIsdGhpcy5zbW9vdGhUb3VjaD1uLHRoaXMudG91Y2hNdWx0aXBsaWVyPWgsdGhpcy5kaXJlY3Rpb249bCx0aGlzLmdlc3R1cmVEaXJlY3Rpb249Yyx0aGlzLmluZmluaXRlPWEsdGhpcy53cmFwcGVyTm9kZT1wLHRoaXMuY29udGVudE5vZGU9ZCx0aGlzLndyYXBwZXJOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLm9uU2Nyb2xsKSx0aGlzLndyYXBwZXJOb2RlPT09d2luZG93Pyh0aGlzLndyYXBwZXJOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzLm9uV2luZG93UmVzaXplKSx0aGlzLm9uV2luZG93UmVzaXplKCkpOih0aGlzLndyYXBwZXJIZWlnaHQ9dGhpcy53cmFwcGVyTm9kZS5vZmZzZXRIZWlnaHQsdGhpcy53cmFwcGVyV2lkdGg9dGhpcy53cmFwcGVyTm9kZS5vZmZzZXRXaWR0aCx0aGlzLndyYXBwZXJPYnNlcnZlcj1uZXcgUmVzaXplT2JzZXJ2ZXIodGhpcy5vbldyYXBwZXJSZXNpemUpLHRoaXMud3JhcHBlck9ic2VydmVyLm9ic2VydmUodGhpcy53cmFwcGVyTm9kZSkpLHRoaXMuY29udGVudEhlaWdodD10aGlzLmNvbnRlbnROb2RlLm9mZnNldEhlaWdodCx0aGlzLmNvbnRlbnRXaWR0aD10aGlzLmNvbnRlbnROb2RlLm9mZnNldFdpZHRoLHRoaXMuY29udGVudE9ic2VydmVyPW5ldyBSZXNpemVPYnNlcnZlcih0aGlzLm9uQ29udGVudFJlc2l6ZSksdGhpcy5jb250ZW50T2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmNvbnRlbnROb2RlKSx0aGlzLnRhcmdldFNjcm9sbD10aGlzLnNjcm9sbD10aGlzLmxhc3RTY3JvbGw9dGhpcy53cmFwcGVyTm9kZVt0aGlzLnNjcm9sbFByb3BlcnR5XSx0aGlzLmFuaW1hdGU9bmV3IG87Y29uc3Qgdz0obnVsbD09KHU9bmF2aWdhdG9yKXx8bnVsbD09KGY9dS51c2VyQWdlbnREYXRhKT92b2lkIDA6Zi5wbGF0Zm9ybSl8fChudWxsPT0oZz1uYXZpZ2F0b3IpP3ZvaWQgMDpnLnBsYXRmb3JtKXx8XCJ1bmtub3duXCI7dGhpcy52aXJ0dWFsU2Nyb2xsPW5ldyBpKHtlbDp0aGlzLndyYXBwZXJOb2RlLGZpcmVmb3hNdWx0aXBsaWVyOjUwLG1vdXNlTXVsdGlwbGllcjp0aGlzLm1vdXNlTXVsdGlwbGllcioody5pbmNsdWRlcyhcIldpblwiKT8uODQ6LjQpLHRvdWNoTXVsdGlwbGllcjp0aGlzLnRvdWNoTXVsdGlwbGllcixwYXNzaXZlOiExfSksdGhpcy52aXJ0dWFsU2Nyb2xsLm9uKHRoaXMub25WaXJ0dWFsU2Nyb2xsKX1nZXQgc2Nyb2xsUHJvcGVydHkoKXtsZXQgdDtyZXR1cm4gdD10aGlzLndyYXBwZXJOb2RlPT09d2luZG93P1wiaG9yaXpvbnRhbFwiPT09dGhpcy5kaXJlY3Rpb24/XCJzY3JvbGxYXCI6XCJzY3JvbGxZXCI6XCJob3Jpem9udGFsXCI9PT10aGlzLmRpcmVjdGlvbj9cInNjcm9sbExlZnRcIjpcInNjcm9sbFRvcFwiLHR9c3RhcnQoKXt0aGlzLnN0b3BwZWQ9ITF9c3RvcCgpe3RoaXMuc3RvcHBlZD0hMCx0aGlzLmFuaW1hdGUuc3RvcCgpfWRlc3Ryb3koKXt2YXIgdDt0aGlzLndyYXBwZXJOb2RlPT09d2luZG93JiZ0aGlzLndyYXBwZXJOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzLm9uV2luZG93UmVzaXplKSx0aGlzLndyYXBwZXJOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLm9uU2Nyb2xsKSx0aGlzLnZpcnR1YWxTY3JvbGwuZGVzdHJveSgpLG51bGw9PSh0PXRoaXMud3JhcHBlck9ic2VydmVyKXx8dC5kaXNjb25uZWN0KCksdGhpcy5jb250ZW50T2JzZXJ2ZXIuZGlzY29ubmVjdCgpfWdldCBsaW1pdCgpe3JldHVyblwiaG9yaXpvbnRhbFwiPT09dGhpcy5kaXJlY3Rpb24/dGhpcy5jb250ZW50V2lkdGgtdGhpcy53cmFwcGVyV2lkdGg6dGhpcy5jb250ZW50SGVpZ2h0LXRoaXMud3JhcHBlckhlaWdodH1yYWYodCl7Y29uc3QgaT10LSh0aGlzLm5vd3x8MCk7dGhpcy5ub3c9dCwhdGhpcy5zdG9wcGVkJiZ0aGlzLnNtb290aCYmKHRoaXMubGFzdFNjcm9sbD10aGlzLnNjcm9sbCx0aGlzLmFuaW1hdGUucmFmKC4wMDEqaSksdGhpcy5zY3JvbGw9PT10aGlzLnRhcmdldFNjcm9sbCYmKHRoaXMubGFzdFNjcm9sbD10aGlzLnNjcm9sbCksdGhpcy5pc1Njcm9sbGluZyYmKHRoaXMuc2V0U2Nyb2xsKHRoaXMuc2Nyb2xsKSx0aGlzLm5vdGlmeSgpKSx0aGlzLmlzU2Nyb2xsaW5nPXRoaXMuc2Nyb2xsIT09dGhpcy50YXJnZXRTY3JvbGwpfWdldCB2ZWxvY2l0eSgpe3JldHVybiB0aGlzLnNjcm9sbC10aGlzLmxhc3RTY3JvbGx9c2V0U2Nyb2xsKHQpe2xldCBpPXRoaXMuaW5maW5pdGU/cyh0LHRoaXMubGltaXQpOnQ7XCJob3Jpem9udGFsXCI9PT10aGlzLmRpcmVjdGlvbj90aGlzLndyYXBwZXJOb2RlLnNjcm9sbFRvKGksMCk6dGhpcy53cmFwcGVyTm9kZS5zY3JvbGxUbygwLGkpfW5vdGlmeSgpe2xldCB0PXRoaXMuaW5maW5pdGU/cyh0aGlzLnNjcm9sbCx0aGlzLmxpbWl0KTp0aGlzLnNjcm9sbDt0aGlzLmVtaXQoXCJzY3JvbGxcIix7c2Nyb2xsOnQsbGltaXQ6dGhpcy5saW1pdCx2ZWxvY2l0eTp0aGlzLnZlbG9jaXR5LGRpcmVjdGlvbjp0aGlzLmxhc3RTY3JvbGw8dD8xOi0xLHByb2dyZXNzOnQvdGhpcy5saW1pdH0pfXNjcm9sbFRvKHQse29mZnNldDppPTAsaW1tZWRpYXRlOmU9ITEsZHVyYXRpb246cz10aGlzLmR1cmF0aW9uLGVhc2luZzpyPXRoaXMuZWFzaW5nfT17fSl7aWYobnVsbD09dClyZXR1cm47bGV0IG87aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpbz10O2Vsc2UgaWYoXCJ0b3BcIj09PXR8fFwiI3RvcFwiPT09dClvPTA7ZWxzZSBpZihcImJvdHRvbVwiPT09dClvPXRoaXMubGltaXQ7ZWxzZXtsZXQgaTtpZihcInN0cmluZ1wiPT10eXBlb2YgdClpPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk7ZWxzZXtpZihudWxsPT10fHwhdC5ub2RlVHlwZSlyZXR1cm47aT10fWlmKCFpKXJldHVybjtsZXQgZT0wO2lmKHRoaXMud3JhcHBlck5vZGUhPT13aW5kb3cpe2NvbnN0IHQ9dGhpcy53cmFwcGVyTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlPVwiaG9yaXpvbnRhbFwiPT09dGhpcy5kaXJlY3Rpb24/dC5sZWZ0OnQudG9wfWNvbnN0IHM9aS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtvPShcImhvcml6b250YWxcIj09PXRoaXMuZGlyZWN0aW9uP3MubGVmdDpzLnRvcCkrdGhpcy5zY3JvbGwtZX1vKz1pLHRoaXMudGFyZ2V0U2Nyb2xsPXRoaXMuaW5maW5pdGU/bzpNYXRoLm1heCgwLE1hdGgubWluKG8sdGhpcy5saW1pdCkpLCF0aGlzLnNtb290aHx8ZT8odGhpcy5zY3JvbGw9dGhpcy5sYXN0U2Nyb2xsPXRoaXMudGFyZ2V0U2Nyb2xsLHRoaXMuc2V0U2Nyb2xsKHRoaXMudGFyZ2V0U2Nyb2xsKSk6dGhpcy5hbmltYXRlLnRvKHRoaXMse2R1cmF0aW9uOnMsZWFzaW5nOnIsc2Nyb2xsOnRoaXMudGFyZ2V0U2Nyb2xsfSl9fWV4cG9ydHtuIGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGVuaXMubW9kZXJuLm1qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IChcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCI5MzJiZGQzYWJiY2FhOWY0YjhlYVwiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXM7XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIF9tYWluID0gY3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZDtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfYWNjZXB0ZWRFcnJvckhhbmRsZXJzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBfbWFpbixcblx0XHRfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gbWUucGFyZW50cy5zbGljZSgpO1xuXHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gX21haW4gPyB1bmRlZmluZWQgOiBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2ssIGVycm9ySGFuZGxlcikge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBbaV1dID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIiAmJiBkZXAgIT09IG51bGwpXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG5cdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG5cdFx0fSxcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG5cdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcblx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG5cdFx0XHRcdFx0KHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChcblx0XHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvLyBpZ25vcmUgcmVxdWVzdHMgaW4gZXJyb3Igc3RhdGVzXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE1hbmFnZW1lbnQgQVBJXG5cdFx0Y2hlY2s6IGhvdENoZWNrLFxuXHRcdGFwcGx5OiBob3RBcHBseSxcblx0XHRzdGF0dXM6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRpZiAoIWwpIHJldHVybiBjdXJyZW50U3RhdHVzO1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0cmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0dmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblxuXHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHtcblx0aWYgKGJsb2NraW5nUHJvbWlzZXMubGVuZ3RoID09PSAwKSByZXR1cm4gZm4oKTtcblx0dmFyIGJsb2NrZXIgPSBibG9ja2luZ1Byb21pc2VzO1xuXHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdHJldHVybiBQcm9taXNlLmFsbChibG9ja2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRyZXR1cm4gc2V0U3RhdHVzKFwiY2hlY2tcIilcblx0XHQudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpLnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicHJlcGFyZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0XHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRrZXlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yQ1trZXldKFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5tLFxuXHRcdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZWRNb2R1bGVzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0W10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJhYm9ydFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHR2YXIgZGlzcG9zZVByb21pc2UgPSBzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHZhciBhcHBseVByb21pc2UgPSBzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChbZGlzcG9zZVByb21pc2UsIGFwcGx5UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiZmFpbFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBsaXN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImlkbGVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVmbG9lbWFcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCB8fCBtb2R1bGUuaG90Ll9tYWluKSAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGVycm9ySGFuZGxlcnNba10gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyc1trXShlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9ICgpID0+IHtcblx0aWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0OiBuZWVkIGZldGNoIEFQSVwiKTtcblx0cmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSByZXR1cm47IC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcblx0XHRpZighcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHR9KTtcbn07XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanM/cHJvdG9jb2w9d3MlM0EmaG9zdG5hbWU9MC4wLjAuMCZwb3J0PTgwODAmcGF0aG5hbWU9JTJGd3MmbG9nZ2luZz1pbmZvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanNcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9hcHAvaW5kZXguanNcIik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3N0eWxlcy9pbmRleC5zY3NzXCIpO1xuIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsImNyZWF0ZVN0eWxlc2hlZXQiLCJmaW5kU3R5bGVzaGVldCIsIm9sZFRhZ3MiLCJuZXdUYWdzIiwiYXBwbHlIYW5kbGVyIiwiaXNQaG9uZSIsInRoaXMiLCJpc1Bob25lQ2hlY2tlZCIsImlzUGhvbmVDaGVjayIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJpc1RhYmxldCIsIlRhYmxldENoZWNrZWQiLCJUYWJsZXRDaGVjayIsImlzRGVza3RvcCIsIkRlc2t0b3BDaGVja2VkIiwiRGVza3RvcENoZWNrIiwiUGFnZSIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImVsZW1lbnRzIiwiZWwiLCJxdWVyeVNlbGVjdG9yIiwibmF2Iiwic29jaWFscyIsImNvbnRhaW5lciIsImxlZnQiLCJtaWRkbGUiLCJhX2xlZnQiLCJkYXNoIiwiYV9yaWdodCIsInJpZ2h0IiwibmF2X21lbnUiLCJzZXJ2aWNlcyIsIkRyYWdUZXh0IiwidHJhbnNmb3JtUHJlZml4IiwiUHJlZml4IiwiZ3NhcCIsIlNjcm9sbFRyaWdnZXIiLCJjcmVhdGUiLCJzY3JvbGwiLCJjdXJyZW50IiwidGFyZ2V0IiwibGFzdCIsImxpbWl0IiwibW92ZSIsImNvbnNvbGUiLCJsb2ciLCJjcmVhdGVBbmltYXRpb24iLCJzY3JvbGxEaXJlY3Rpb24iLCJvbldoZWVsIiwiZXZlbnQiLCJkZWx0YVkiLCJvblJlc2l6ZSIsIndyYXBwZXIiLCJjbGllbnRIZWlnaHQiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsInVwZGF0ZSIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwic3R5bGUiLCJzbW9vdGhTY3JvbGwiLCJsZW5pcyIsIkxlbmlzIiwibGVycCIsInNtb290aCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZiIsInRpbWUiLCJsYXN0U2Nyb2xsVG9wIiwiY3VycmVudFNjcm9sbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXREaXJlY3Rpb24iLCJiaW5kIiwiZ2V0TW9iaWxlRGlyZWN0aW9uIiwic2VydmljZXNJbnZpZXciLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsImRpcmVjdGlvbiIsImRvd25TY3JvbGwiLCJ1cFNjcm9sbCIsImFkZCIsImUiLCJjdXJyZW50UG9pbnQiLCJjbGllbnRYIiwidG91Y2hlcyIsImxhc3RQb2ludCIsInJlbW92ZSIsImFuaW1hdGlvbnMiLCJ0eXBlU3BsaXQiLCJTcGxpdFR5cGUiLCJ0eXBlcyIsInRhZ05hbWUiLCJlbGVtZW50c1RpdGxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtZW50c1BhcmFncmFwaCIsIkN1cnNvciIsImxpbmtzIiwiY3JlYXRlQ3Vyc29yIiwiY3Vyc29yIiwiY3Vyc29yaW5uZXIiLCJ4IiwieSIsImNsaWVudFkiLCJ0cmFuc2Zvcm0iLCJmb3JFYWNoIiwiaXRlbSIsIlByZWxvYWRlciIsIkV2ZW50RW1paXRlciIsInN1cGVyIiwiaW1hZ2VzIiwicHJvZ3Jlc3NfYmFyIiwibGVuZ3RoIiwibW92ZURpc3RhbmNlIiwidGwiLCJvblJlcGVhdCIsInJlcGVhdERlbGF5IiwiZGVmYXVsdHMiLCJlYXNlIiwiZHVyYXRpb24iLCJkZWxheSIsInJlc2l6ZSIsImNyZWF0ZUxvYWRlciIsImFuaW1hdGVMb2dvIiwicmVwZWF0IiwieW95byIsInNjYWxlIiwidG8iLCJvcGFjaXR5IiwiZ2V0TW92ZURpc3RhbmNlIiwibmF2TGluayIsIm5hdkxpbmtUb3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoZWlnaHQiLCJsb2FkZXJIZWlnaHQiLCJEZXRlY3Rpb24iLCJzY2FsZURpZmYiLCJvZmZzZXRUb3AiLCJyZXZlcnRMb2dvIiwib25Db21wbGV0ZSIsImVtaXQiLCJhdXRvQWxwaGEiLCJ0b3RhbCIsImltZ0VsZW1lbnRzIiwic2VsZiIsImltZyIsImluZGV4IiwibG9hZFByb2dyZXNzIiwiaW1nRWxlbWVudCIsIkltYWdlIiwib25sb2FkIiwicHVzaCIsInBlcmNlbnQiLCJ3aWR0aCIsIk1hdGgiLCJyb3VuZCIsImFsbExvYWRlZCIsInNyYyIsImdldEF0dHJpYnV0ZSIsImYwIiwiZjEiLCJ0IiwiRHJhZ1Njcm9sbCIsIm9iaiIsIndyYXAiLCJpdGVtcyIsImJhciIsImxlZnRCdG4iLCJyaWdodEJ0biIsInNlY3Rpb24iLCJzbGlkZXIiLCJwcm9ncmVzc051bWJlciIsImluaXQiLCJpblZpZXciLCJjZW50ZXJTbGlkZSIsInByb2dyZXNzIiwic3BlZWQiLCJvbGRYIiwicGxheXJhdGUiLCJiaW5kaW5ncyIsImNhbGN1bGF0ZSIsImFjdGl2ZVNsaWRlIiwiZXZlbnRzIiwiaSIsIndpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsIndyYXBXaWR0aCIsIkl0ZW1XaWR0aCIsIm1pblNjcm9sbCIsIndpbmRvd0NlbnRlciIsIndpbmRvd0xlZnQiLCJtYXhTY3JvbGwiLCJjbGllbnRXaWR0aCIsInNlY3Rpb25Ub3AiLCJ0b3AiLCJpdGVtQm91bmRzTGVmdCIsImlzQ2VudGVyIiwiY2VudGVyU2xpZGVJbmRleCIsImFjdGl2ZVNsaWRlQ2xpY2siLCJyaWdodENsaWNrIiwiaGFuZGxlV2hlZWwiLCJoYW5kbGVMZWZ0Q2xpY2tzIiwic2xpZGVFbmQiLCJzZXRUaW1lb3V0IiwiaGFuZGxlUmlnaHRDbGlja3MiLCJjbGlja2VkIiwic2xpZGVTdGFydCIsImhhbmRsZVRvdWNoU3RhcnQiLCJwcmV2ZW50RGVmYXVsdCIsImRyYWdnaW5nIiwic3RhcnRYIiwiY2xpY2siLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsInZhbCIsIm1pbiIsIm1heCIsImJvZHkiLCJzbGlkZVkiLCJzY3JvbGxUcmlnZ2VyIiwidHJpZ2dlciIsInN0YXJ0IiwidG9nZ2xlQWN0aW9ucyIsInRsMSIsImVuZCIsInBpbiIsInNjcnViIiwib25FbnRlciIsIm9uTGVhdmUiLCJvbkxlYXZlQmFjayIsIm9uRW50ZXJCYWNrIiwibWFya2VycyIsInN0YXJ0Q29sb3IiLCJvblVwZGF0ZSIsInNjcm9sbFNsaWRlciIsIm1hcmtlckVuZCIsInRleHRDb250ZW50IiwiZnJvbSIsImRpc3BsYXkiLCJtb3ZlU2xpZGVyIiwicHJvZ3Jlc3NOdW0iLCJpbm5lckhUTUwiLCJhYnMiLCJjcmVhdGVDb250ZW50IiwiY3JlYXRlUGFnZXMiLCJjcmVhdGVQcmVsb2FkZXIiLCJhZGRFdmVudExpc3RlbmVycyIsImNvbnRlbnQiLCJ0ZW1wbGF0ZSIsInNjcm9sbFRvIiwicHJlbG9hZGVyIiwib25jZSIsInBhZ2UiLCJhbmltYXRlUGFnZUluIiwiY3JlYXRlU2xpZGVyIiwicGFnZXMiLCJob21lIiwiSG9tZSIsImFib3V0IiwiQWJvdXQiLCJmcmFtZSIsIkFuaW1hdGVJbWFnZXMiLCJob21lQWJvdXQiLCJtYWluVGV4dCIsInN1YldvcmRzIiwiTWVkaWFzIiwiYWRkTGFiZWwiLCJ5UGVyY2VudCIsInN0YWdnZXIiLCJhbW91bnQiLCJ4UGVyY2VudCIsIm5hdl9saW5rIiwicHJlbG9hZGVyX19sb2dvIiwiYW5pbWF0ZUhvbWVBYm91dCIsInNldCIsInNjYWxlWSIsInRyYW5zZm9ybU9yaWdpbiIsImRlc2t0b3AiLCJ0YWJsZXQiLCJwaG9uZSIsInRsMiIsImZyb21UbyIsIm1vZHVsZSIsImV4cG9ydHMiLCJhbnNpSFRNTCIsIl9yZWdBTlNJIiwiX2RlZkNvbG9ycyIsInJlc2V0IiwiYmxhY2siLCJyZWQiLCJncmVlbiIsInllbGxvdyIsImJsdWUiLCJtYWdlbnRhIiwiY3lhbiIsImxpZ2h0Z3JleSIsImRhcmtncmV5IiwiX3N0eWxlcyIsIl9vcGVuVGFncyIsIl9jbG9zZVRhZ3MiLCJ0ZXh0IiwidGVzdCIsImFuc2lDb2RlcyIsInJldCIsInJlcGxhY2UiLCJtYXRjaCIsInNlcSIsIm90IiwiaW5kZXhPZiIsInBvcCIsImN0IiwibCIsIkFycmF5Iiwiam9pbiIsIl9zZXRUYWdzIiwiY29sb3JzIiwiY29kZSIsIm9yaUNvbG9yIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsIm4iLCJzZXRDb2xvcnMiLCJFcnJvciIsIl9maW5hbENvbG9ycyIsImtleSIsImhleCIsImhhc093blByb3BlcnR5IiwiaXNBcnJheSIsInNvbWUiLCJoIiwiZGVmSGV4Q29sb3IiLCJzbGljZSIsInRhZ3MiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIm9wZW4iLCJjbG9zZSIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJhcHBseSIsInJlY2VpdmVyIiwiYXJncyIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwiY2FsbCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsInZhbHVlIiwiRXZlbnRFbWl0dGVyIiwiZW1pdHRlciIsIm5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yTGlzdGVuZXIiLCJlcnIiLCJyZW1vdmVMaXN0ZW5lciIsInJlc29sdmVyIiwiYXJndW1lbnRzIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwib24iLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJ1bmRlZmluZWQiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIlR5cGVFcnJvciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwidHlwZSIsInByZXBlbmQiLCJtIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsIlN0cmluZyIsImNvdW50Iiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsIndyYXBMaXN0ZW5lciIsImFyZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbnVtZXJhYmxlIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVycm9yIiwiZXIiLCJtZXNzYWdlIiwiY29udGV4dCIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3JldmVydGluZyIsIl9zdXBwb3J0czNEIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJQSSIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiYXRhbjIiLCJfY2Fwc0V4cCIsIl9ob3Jpem9udGFsRXhwIiwiX2NvbXBsZXhFeHAiLCJfcHJvcGVydHlBbGlhc2VzIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsInJhdGlvIiwiZGF0YSIsInAiLCJzIiwiYyIsInUiLCJfcmVuZGVyUHJvcFdpdGhFbmQiLCJfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmciLCJiIiwiX3JlbmRlclJvdW5kZWRDU1NQcm9wIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCIsIl9zZXR0ZXJDU1NTdHlsZSIsInByb3BlcnR5IiwiX3NldHRlckNTU1Byb3AiLCJzZXRQcm9wZXJ0eSIsIl9zZXR0ZXJUcmFuc2Zvcm0iLCJfZ3NhcCIsIl9zZXR0ZXJTY2FsZSIsInNjYWxlWCIsIl9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIiLCJjYWNoZSIsInJlbmRlclRyYW5zZm9ybSIsIl9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyIiwiX3RyYW5zZm9ybVByb3AiLCJfdHJhbnNmb3JtT3JpZ2luUHJvcCIsIl9zYXZlU3R5bGUiLCJpc05vdENTUyIsIl90aGlzIiwidGZtIiwic3BsaXQiLCJhIiwiX2dldCIsInByb3BzIiwic3ZnIiwic3ZnbyIsIl9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMiLCJ0cmFuc2xhdGUiLCJyZW1vdmVQcm9wZXJ0eSIsIl9yZXZlcnRTdHlsZSIsInRvTG93ZXJDYXNlIiwic2V0QXR0cmlidXRlIiwiaXNTdGFydCIsInVuY2FjaGUiLCJfZ2V0U3R5bGVTYXZlciIsInByb3BlcnRpZXMiLCJzYXZlciIsInJldmVydCIsInNhdmUiLCJfY3JlYXRlRWxlbWVudCIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRWxlbWVudCIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIl9pbml0Q29yZSIsImNzc1RleHQiLCJfZ2V0QkJveEhhY2siLCJzd2FwSWZQb3NzaWJsZSIsImJib3giLCJvd25lclNWR0VsZW1lbnQiLCJvbGRQYXJlbnQiLCJwYXJlbnROb2RlIiwib2xkU2libGluZyIsIm5leHRTaWJsaW5nIiwib2xkQ1NTIiwiYXBwZW5kQ2hpbGQiLCJnZXRCQm94IiwiX2dzYXBCQm94IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJfZ2V0QXR0cmlidXRlRmFsbGJhY2tzIiwiYXR0cmlidXRlc0FycmF5IiwiaGFzQXR0cmlidXRlIiwiX2dldEJCb3giLCJib3VuZHMiLCJfaXNTVkciLCJnZXRDVE0iLCJfcmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfYWRkTm9uVHdlZW5pbmdQVCIsInBsdWdpbiIsImJlZ2lubmluZyIsIm9ubHlTZXRBdEVuZCIsInB0IiwiUHJvcFR3ZWVuIiwiX3B0IiwiX3Byb3BzIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX25vblN0YW5kYXJkTGF5b3V0cyIsImdyaWQiLCJmbGV4IiwiX2NvbnZlcnRUb1VuaXQiLCJ1bml0IiwicHgiLCJwYXJlbnQiLCJpc1NWRyIsImN1clZhbHVlIiwiY3VyVW5pdCIsInRyaW0iLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwibWVhc3VyZVByb3BlcnR5IiwidG9QaXhlbHMiLCJ0b1BlcmNlbnQiLCJfdGlja2VyIiwiX3JvdW5kIiwiX2dldENhY2hlIiwiX3BhcnNlVHJhbnNmb3JtIiwib3JpZ2luIiwiX2ZpcnN0VHdvT25seSIsInpPcmlnaW4iLCJfc3BlY2lhbFByb3BzIiwiX2dldFByb3BlcnR5IiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInByb3AiLCJyZXN1bHQiLCJzdGFydFZhbHVlcyIsInN0YXJ0TnVtIiwiY29sb3IiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIm1hdGNoSW5kZXgiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJfbnVtV2l0aFVuaXRFeHAiLCJzdWJzdHJpbmciLCJfcGFyc2VSZWxhdGl2ZSIsIl9jb25maWciLCJfbmV4dCIsInIiLCJfcmVsRXhwIiwiX2tleXdvcmRUb1BlcmNlbnQiLCJib3R0b20iLCJjZW50ZXIiLCJfcmVuZGVyQ2xlYXJQcm9wcyIsInR3ZWVuIiwiX3RpbWUiLCJfZHVyIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsInByIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJfcm90YXRpb25hbFByb3BlcnRpZXMiLCJfaXNOdWxsVHJhbnNmb3JtIiwiX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSIsIm1hdHJpeFN0cmluZyIsIl9udW1FeHAiLCJtYXAiLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsInRlbXAiLCJhZGRlZFRvRE9NIiwibWF0cml4IiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwiZCIsImYiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJfYXBwbHlTVkdPcmlnaW4iLCJvcmlnaW5Jc0Fic29sdXRlIiwibWF0cml4QXJyYXkiLCJwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbyIsImRldGVybWluYW50IiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJHU0NhY2hlIiwieiIsInJvdGF0aW9uIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2tld1giLCJza2V3WSIsInBlcnNwZWN0aXZlIiwiYW5nbGUiLCJjb3MiLCJzaW4iLCJhMTIiLCJhMjIiLCJ0MSIsInQyIiwidDMiLCJhMTMiLCJhMjMiLCJhMzMiLCJhNDIiLCJhNDMiLCJhMzIiLCJpbnZlcnRlZFNjYWxlWCIsInJvdGF0ZSIsInNxcnQiLCJmb3JjZUNTUyIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJmb3JjZTNEIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJnZXRVbml0IiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsImExMSIsImEyMSIsIl9yZWYyIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJpc1N0cmluZyIsIl9pc1N0cmluZyIsImNoYW5nZSIsImZpbmFsVmFsdWUiLCJfYXNzaWduIiwic291cmNlIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsImVuZENhY2hlIiwic3RhcnRDYWNoZSIsIl9mb3JFYWNoTmFtZSIsInNpZGUiLCJ2YXJzIiwicG9zaXRpb25BbmRTY2FsZSIsImFsbCIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsIm5vZGVUeXBlIiwidGFyZ2V0cyIsInNwZWNpYWxQcm9wIiwicmVsYXRpdmUiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJoYXNQcmlvcml0eSIsImlubGluZVByb3BzIiwic3RhcnRBdCIsInN0eWxlcyIsIl9wbHVnaW5zIiwiX2NoZWNrUGx1Z2luIiwiX3JlcGxhY2VSYW5kb20iLCJfY29sb3JFeHAiLCJ2aXNpYmlsaXR5IiwicGFyc2VUcmFuc2Zvcm0iLCJzbW9vdGhPcmlnaW4iLCJkZXAiLCJhdXRvUm91bmQiLCJfbWlzc2luZ1BsdWdpbiIsIl9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkiLCJyZW5kZXIiLCJhbGlhc2VzIiwiZ2V0U2V0dGVyIiwiX2lzVW5kZWZpbmVkIiwiX2dldFNldHRlciIsImNvcmUiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jb3JlSW5pdHRlZCIsIl9kb2NFbCIsIl9ib2R5IiwiX2lzVG91Y2giLCJfcG9pbnRlclR5cGUiLCJfcm9vdCIsIl9ub3JtYWxpemVyIiwiX2V2ZW50VHlwZXMiLCJfZ2V0R1NBUCIsInJlZ2lzdGVyUGx1Z2luIiwiX3N0YXJ0dXAiLCJfb2JzZXJ2ZXJzIiwiX3Njcm9sbGVycyIsIl9wcm94aWVzIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiX2JyaWRnZSIsIl9nZXRQcm94eVByb3AiLCJfaXNWaWV3cG9ydCIsImZ1bmMiLCJub25QYXNzaXZlIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJfcmVtb3ZlTGlzdGVuZXIiLCJfc2Nyb2xsTGVmdCIsIl9zY3JvbGxUb3AiLCJfb25TY3JvbGwiLCJpc1ByZXNzZWQiLCJfc2Nyb2xsQ2FjaGVGdW5jIiwiZG9Ob3RDYWNoZSIsImNhY2hpbmdGdW5jIiwiaGlzdG9yeSIsInNjcm9sbFJlc3RvcmF0aW9uIiwiaXNOb3JtYWxpemluZyIsInYiLCJpT1MiLCJjYWNoZUlEIiwib2Zmc2V0IiwiX2hvcml6b250YWwiLCJwMiIsIm9zIiwib3MyIiwiZDIiLCJzYyIsIl92ZXJ0aWNhbCIsInBhZ2VYT2Zmc2V0Iiwib3AiLCJfZ2V0VGFyZ2V0IiwidXRpbHMiLCJ0b0FycmF5IiwiY29uZmlnIiwibnVsbFRhcmdldFdhcm4iLCJfZ2V0U2Nyb2xsRnVuYyIsInNjcm9sbGluZ0VsZW1lbnQiLCJwcmV2IiwiZ2V0UHJvcGVydHkiLCJfZ2V0VmVsb2NpdHlQcm9wIiwibWluVGltZVJlZnJlc2giLCJ1c2VEZWx0YSIsInYxIiwidjIiLCJkcm9wVG9aZXJvVGltZSIsImZvcmNlIiwiZ2V0VmVsb2NpdHkiLCJsYXRlc3RWYWx1ZSIsInRPbGQiLCJ2T2xkIiwiX2dldEV2ZW50IiwiX2dzYXBBbGxvdyIsImNoYW5nZWRUb3VjaGVzIiwiX2dldEFic29sdXRlTWF4IiwiX3NldFNjcm9sbFRyaWdnZXIiLCJzY3JvbGxlcnMiLCJwcm94aWVzIiwiZ2xvYmFscyIsImJyaWRnZSIsImNsYW1wIiwiT2JzZXJ2ZXIiLCJpc1RvdWNoIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJldmVudFR5cGVzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJ0b2xlcmFuY2UiLCJkcmFnTWluaW11bSIsImxpbmVIZWlnaHQiLCJkZWJvdW5jZSIsIm9uU3RvcCIsIm9uU3RvcERlbGF5IiwiaWdub3JlIiwid2hlZWxTcGVlZCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwib25EcmFnIiwib25QcmVzcyIsIm9uUmVsZWFzZSIsIm9uUmlnaHQiLCJvbkxlZnQiLCJvblVwIiwib25Eb3duIiwib25DaGFuZ2VYIiwib25DaGFuZ2VZIiwib25DaGFuZ2UiLCJvblRvZ2dsZVgiLCJvblRvZ2dsZVkiLCJvbkhvdmVyIiwib25Ib3ZlckVuZCIsIm9uTW92ZSIsImlnbm9yZUNoZWNrIiwiaXNOb3JtYWxpemVyIiwib25HZXN0dXJlU3RhcnQiLCJvbkdlc3R1cmVFbmQiLCJvbkVuYWJsZSIsIm9uRGlzYWJsZSIsIm9uQ2xpY2siLCJzY3JvbGxTcGVlZCIsImFsbG93Q2xpY2tzIiwibG9ja0F4aXMiLCJvbkxvY2tBeGlzIiwiaWQiLCJvblN0b3BEZWxheWVkQ2FsbCIsImRyYWdnZWQiLCJtb3ZlZCIsIndoZWVsZWQiLCJsb2NrZWQiLCJheGlzIiwicHJldkRlbHRhWCIsInByZXZEZWx0YVkiLCJzY3JvbGxGdW5jWCIsInNjcm9sbEZ1bmNZIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJsaW1pdFRvVG91Y2giLCJpc1ZpZXdwb3J0Iiwib3duZXJEb2MiLCJvd25lckRvY3VtZW50IiwiZGVsdGFYIiwib25DbGlja1RpbWUiLCJjbGlja0NhcHR1cmUiLCJfaWdub3JlQ2hlY2siLCJpc1BvaW50ZXJPclRvdWNoIiwicG9pbnRlclR5cGUiLCJkeCIsImR5IiwiY2hhbmdlZFgiLCJjaGFuZ2VkWSIsIm9uRGVsdGEiLCJfdngiLCJfdnkiLCJvblRvdWNoT3JQb2ludGVyRGVsdGEiLCJfb25EcmFnIiwiaXNEcmFnZ2luZyIsInN0YXJ0WSIsIl9vblByZXNzIiwicGF1c2UiLCJfb25SZWxlYXNlIiwid2FzRHJhZ2dpbmciLCJldmVudERhdGEiLCJkZWxheWVkQ2FsbCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJjcmVhdGVFdmVudCIsInN5bnRoZXRpY0V2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImRpc3BhdGNoRXZlbnQiLCJpc0dlc3R1cmluZyIsInJlc3RhcnQiLCJfb25HZXN0dXJlU3RhcnQiLCJfb25HZXN0dXJlRW5kIiwib25TY3JvbGwiLCJfb25XaGVlbCIsIm11bHRpcGxpZXIiLCJkZWx0YU1vZGUiLCJfb25Nb3ZlIiwiX29uSG92ZXIiLCJfb25Ib3ZlckVuZCIsIl9vbkNsaWNrIiwiX2RjIiwiZW5hYmxlIiwiaXNFbmFibGVkIiwiZGlzYWJsZSIsImZpbHRlciIsIm8iLCJraWxsIiwic3BsaWNlIiwidmVyc2lvbiIsImdldEFsbCIsImdldEJ5SWQiLCJfcmVzaXplRGVsYXkiLCJfdG9BcnJheSIsIl9jbGFtcCIsIl90aW1lMiIsIl9zeW5jSW50ZXJ2YWwiLCJfcmVmcmVzaGluZyIsIl9wb2ludGVySXNEb3duIiwiX2kiLCJfcHJldldpZHRoIiwiX3ByZXZIZWlnaHQiLCJfYXV0b1JlZnJlc2giLCJfc29ydCIsIl9zdXBwcmVzc092ZXJ3cml0ZXMiLCJfaWdub3JlUmVzaXplIiwiX2lnbm9yZU1vYmlsZVJlc2l6ZSIsIl9iYXNlU2NyZWVuSGVpZ2h0IiwiX2Jhc2VTY3JlZW5XaWR0aCIsIl9maXhJT1NCdWciLCJfY29udGV4dCIsIl9zY3JvbGxSZXN0b3JhdGlvbiIsIl9saW1pdENhbGxiYWNrcyIsIl9yYWZJRCIsIl9yZWZyZXNoaW5nQWxsIiwiX3F1ZXVlUmVmcmVzaElEIiwiX3ByaW1hcnkiLCJfdGltZTEiLCJfbGFzdFNjcm9sbFRpbWUiLCJfZW5hYmxlZCIsIl9wb2ludGVyRG93bkhhbmRsZXIiLCJfcG9pbnRlclVwSGFuZGxlciIsIl9wYXNzVGhyb3VnaCIsIl93aW5kb3dFeGlzdHMiLCJfZ2V0Qm91bmRzRnVuYyIsIl93aW5PZmZzZXRzIiwiX2dldEJvdW5kcyIsIl9tYXhTY3JvbGwiLCJfaXRlcmF0ZUF1dG9SZWZyZXNoIiwiX2lzRnVuY3Rpb24iLCJfaXNOdW1iZXIiLCJfaXNPYmplY3QiLCJfZW5kQW5pbWF0aW9uIiwiYW5pbWF0aW9uIiwicmV2ZXJzZWQiLCJfY2FsbGJhY2siLCJlbmFibGVkIiwidG90YWxUaW1lIiwiY2FsbGJhY2tBbmltYXRpb24iLCJfYWJzIiwiX2xlZnQiLCJfcmlnaHQiLCJfYm90dG9tIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9wYWRkaW5nIiwiX21hcmdpbiIsIl9XaWR0aCIsIl9weCIsIl9nZXRDb21wdXRlZFN0eWxlIiwiX3NldERlZmF1bHRzIiwid2l0aG91dFRyYW5zZm9ybXMiLCJfZ2V0U2l6ZSIsIl9yZWYzIiwiX2dldExhYmVsUmF0aW9BcnJheSIsInRpbWVsaW5lIiwibGFiZWxzIiwiX3NuYXBEaXJlY3Rpb25hbCIsInNuYXBJbmNyZW1lbnRPckFycmF5Iiwic25hcCIsInNvcnQiLCJ0aHJlc2hvbGQiLCJzbmFwcGVkIiwiX211bHRpTGlzdGVuZXIiLCJjYWxsYmFjayIsIl93aGVlbExpc3RlbmVyIiwic2Nyb2xsRnVuYyIsIndoZWVsSGFuZGxlciIsIl9tYXJrZXJEZWZhdWx0cyIsImVuZENvbG9yIiwiaW5kZW50IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiX2RlZmF1bHRzIiwiYW50aWNpcGF0ZVBpbiIsIl9rZXl3b3JkcyIsIl9vZmZzZXRUb1B4Iiwic2l6ZSIsImVxSW5kZXgiLCJfY3JlYXRlTWFya2VyIiwiX3JlZjQiLCJtYXRjaFdpZHRoRWwiLCJjb250YWluZXJBbmltYXRpb24iLCJ1c2VGaXhlZFBvc2l0aW9uIiwiaXNTY3JvbGxlciIsImNzcyIsIl9pc1N0YXJ0IiwiaW5uZXJUZXh0IiwiY2hpbGRyZW4iLCJfb2Zmc2V0IiwiX3Bvc2l0aW9uTWFya2VyIiwibWFya2VyIiwiZmxpcHBlZCIsIm9wcG9zaXRlU2lkZSIsIl9pc0ZsaXBwZWQiLCJfdHJpZ2dlcnMiLCJfaWRzIiwiX3N5bmMiLCJfdXBkYXRlQWxsIiwiX2Rpc3BhdGNoIiwiX3NldEJhc2VEaW1lbnNpb25zIiwiX29uUmVzaXplIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIl9lbXB0eUFycmF5IiwiX3NvZnRSZWZyZXNoIiwiX3JlZnJlc2hBbGwiLCJfc2F2ZWRTdHlsZXMiLCJfcmV2ZXJ0UmVjb3JkZWQiLCJtZWRpYSIsInF1ZXJ5IiwiX3JldmVydEFsbCIsIl9jdHgiLCJfY2xlYXJTY3JvbGxNZW1vcnkiLCJyZWMiLCJfcmVmcmVzaElEIiwic2tpcFJldmVydCIsImlzUmVmcmVzaGluZyIsInJlZnJlc2hJbml0cyIsInNjcm9sbEJlaGF2aW9yIiwicmVmcmVzaCIsIl9zdWJQaW5PZmZzZXQiLCJvcmlnaW5hbCIsImFkanVzdFBpblNwYWNpbmciLCJzZXRQb3NpdGlvbnMiLCJzY3JvbGxlciIsIl9kaXIiLCJvblJlZnJlc2giLCJfbGFzdFNjcm9sbCIsIl9kaXJlY3Rpb24iLCJpc1VwZGF0aW5nIiwicmVjb3JkVmVsb2NpdHkiLCJfcHJvcE5hbWVzVG9Db3B5IiwiX3N0YXRlUHJvcHMiLCJfc3dhcFBpbkluIiwic3BhY2VyIiwic3BhY2VyU3RhdGUiLCJzd2FwcGVkSW4iLCJzcGFjZXJTdHlsZSIsInBpblN0eWxlIiwiZmxleEJhc2lzIiwib3ZlcmZsb3ciLCJib3hTaXppbmciLCJfc2V0U3RhdGUiLCJnZXRDYWNoZSIsIl9nZXRTdGF0ZSIsIl9wYXJzZVBvc2l0aW9uIiwic2Nyb2xsZXJTaXplIiwibWFya2VyU2Nyb2xsZXIiLCJzY3JvbGxlckJvdW5kcyIsImJvcmRlcldpZHRoIiwic2Nyb2xsZXJNYXgiLCJwMSIsInNlZWsiLCJsb2NhbE9mZnNldCIsImdsb2JhbE9mZnNldCIsIm9mZnNldHMiLCJfY2FTY3JvbGxEaXN0IiwiX3ByZWZpeEV4cCIsIl9yZXBhcmVudCIsIl9zdE9yaWciLCJfZ2V0VHdlZW5DcmVhdG9yIiwibGFzdFNjcm9sbDEiLCJsYXN0U2Nyb2xsMiIsImdldFNjcm9sbCIsImdldFR3ZWVuIiwiaW5pdGlhbFZhbHVlIiwiY2hhbmdlMSIsImNoYW5nZTIiLCJtb2RpZmllcnMiLCJ0d2VlblRvIiwicGluQ2FjaGUiLCJzbmFwRnVuYyIsInNjcm9sbDEiLCJzY3JvbGwyIiwibWFya2VyU3RhcnQiLCJtYXJrZXJTdGFydFRyaWdnZXIiLCJtYXJrZXJFbmRUcmlnZ2VyIiwibWFya2VyVmFycyIsInBpbk9yaWdpbmFsU3RhdGUiLCJwaW5BY3RpdmVTdGF0ZSIsInBpblN0YXRlIiwicGluR2V0dGVyIiwicGluU2V0dGVyIiwicGluU3RhcnQiLCJwaW5DaGFuZ2UiLCJzcGFjaW5nU3RhcnQiLCJtYXJrZXJTdGFydFNldHRlciIsIm1hcmtlckVuZFNldHRlciIsInNuYXAxIiwic25hcDIiLCJzY3J1YlR3ZWVuIiwic2NydWJTbW9vdGgiLCJzbmFwRHVyQ2xhbXAiLCJzbmFwRGVsYXllZENhbGwiLCJwcmV2UHJvZ3Jlc3MiLCJwcmV2U2Nyb2xsIiwicHJldkFuaW1Qcm9ncmVzcyIsImNhTWFya2VyU2V0dGVyIiwiY3VzdG9tUmV2ZXJ0UmV0dXJuIiwiX3ZhcnMiLCJ0b2dnbGVDbGFzcyIsIm9uVG9nZ2xlIiwicGluU3BhY2luZyIsImludmFsaWRhdGVPblJlZnJlc2giLCJvblNjcnViQ29tcGxldGUiLCJvblNuYXBDb21wbGV0ZSIsInBpblJlcGFyZW50IiwicGluU3BhY2VyIiwiZmFzdFNjcm9sbEVuZCIsInByZXZlbnRPdmVybGFwcyIsImlzVG9nZ2xlIiwic2Nyb2xsZXJDYWNoZSIsInBpblR5cGUiLCJjYWxsYmFja3MiLCJvblJlZnJlc2hJbml0IiwiZ2V0U2Nyb2xsZXJTaXplIiwiX2dldFNpemVGdW5jIiwiZ2V0U2Nyb2xsZXJPZmZzZXRzIiwiX2dldE9mZnNldHNGdW5jIiwibGFzdFNuYXAiLCJsYXN0UmVmcmVzaCIsInJlZnJlc2hQcmlvcml0eSIsInR3ZWVuU2Nyb2xsIiwic2NydWJEdXJhdGlvbiIsInRvdGFsUHJvZ3Jlc3MiLCJwYXVzZWQiLCJsYXp5IiwiX2luaXR0ZWQiLCJpbW1lZGlhdGVSZW5kZXIiLCJzbmFwVG8iLCJfZ2V0Q2xvc2VzdExhYmVsIiwic3QiLCJkaXJlY3Rpb25hbCIsInJlZnJlc2hlZFJlY2VudGx5IiwiaXNBY3RpdmUiLCJ2ZWxvY2l0eSIsIm5hdHVyYWxFbmQiLCJpbmVydGlhIiwiZW5kU2Nyb2xsIiwiX3NuYXAiLCJvblN0YXJ0IiwiX29uSW50ZXJydXB0Iiwib25JbnRlcnJ1cHQiLCJfb25Db21wbGV0ZSIsInN0UmV2ZXJ0IiwiY2xhc3NOYW1lIiwibmF0aXZlRWxlbWVudCIsInNwYWNlcklzTmF0aXZlIiwicXVpY2tTZXR0ZXIiLCJvbGRPblVwZGF0ZSIsIm9sZFBhcmFtcyIsIm9uVXBkYXRlUGFyYW1zIiwiZXZlbnRDYWxsYmFjayIsInByZXZpb3VzIiwibmV4dCIsInByZXZSZWZyZXNoaW5nIiwiaXNSZXZlcnRlZCIsIl9zd2FwUGluT3V0Iiwic29mdCIsImludmFsaWRhdGUiLCJpc1ZlcnRpY2FsIiwib3ZlcnJpZGUiLCJjdXJUcmlnZ2VyIiwiY3VyUGluIiwib3Bwb3NpdGVTY3JvbGwiLCJpbml0dGVkIiwicmV2ZXJ0ZWRQaW5zIiwib3RoZXJQaW5PZmZzZXQiLCJwYXJzZWRFbmQiLCJwYXJzZWRFbmRUcmlnZ2VyIiwiZW5kVHJpZ2dlciIsInBhcnNlZFN0YXJ0IiwicGlubmVkQ29udGFpbmVyIiwidHJpZ2dlckluZGV4IiwiX3BpblB1c2giLCJjZWlsIiwib21pdE9mZnNldHMiLCJfY29weVN0YXRlIiwiX3Bpbk9mZnNldCIsImVuZEFuaW1hdGlvbiIsImxhYmVsVG9TY3JvbGwiLCJsYWJlbCIsImdldFRyYWlsaW5nIiwicmV2ZXJzZSIsImZvcmNlRmFrZSIsInRvZ2dsZVN0YXRlIiwiYWN0aW9uIiwic3RhdGVDaGFuZ2VkIiwidG9nZ2xlZCIsImlzQXRNYXgiLCJpc1Rha2luZ0FjdGlvbiIsImNsaXBwZWQiLCJfZHAiLCJfc3RhcnQiLCJyZXNldFRvIiwiX3RUaW1lIiwiX3REdXIiLCJuZXdTdGFydCIsIm5ld0VuZCIsImFsbG93QW5pbWF0aW9uIiwib25LaWxsIiwiX3F1ZXVlUmVmcmVzaEFsbCIsImNsZWFySW50ZXJ2YWwiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJ1c2VyQWdlbnQiLCJtbSIsImJvZHlTdHlsZSIsImJvcmRlciIsImJvcmRlclRvcFN0eWxlIiwiQW5pbWF0aW9uUHJvdG8iLCJBbmltYXRpb24iLCJzZXRJbnRlcnZhbCIsImNoZWNrUHJlZml4IiwiaGlkZGVuIiwibGltaXRDYWxsYmFja3MiLCJtcyIsInN5bmNJbnRlcnZhbCIsImlnbm9yZU1vYmlsZVJlc2l6ZSIsImF1dG9SZWZyZXNoRXZlbnRzIiwic2Nyb2xsZXJQcm94eSIsImNsZWFyTWF0Y2hNZWRpYSIsImlzSW5WaWV3cG9ydCIsInBvc2l0aW9uSW5WaWV3cG9ydCIsInJlZmVyZW5jZVBvaW50Iiwia2lsbEFsbCIsImFsbG93TGlzdGVuZXJzIiwic2F2ZVN0eWxlcyIsInNhZmUiLCJjbGVhclNjcm9sbE1lbW9yeSIsImdldFNjcm9sbEZ1bmMiLCJpc1Njcm9sbGluZyIsInNuYXBEaXJlY3Rpb25hbCIsImJhdGNoIiwidmFyc0NvcHkiLCJpbnRlcnZhbCIsImJhdGNoTWF4IiwicHJveHlDYWxsYmFjayIsInRyaWdnZXJzIiwiX2lucHV0SXNGb2N1c2VkIiwiX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyIiwiX2FsbG93TmF0aXZlUGFubmluZyIsInRvdWNoQWN0aW9uIiwiX292ZXJmbG93IiwiYXV0byIsIl9uZXN0ZWRTY3JvbGwiLCJfcmVmNSIsIm5vZGUiLCJfaXNTY3JvbGxUIiwic2Nyb2xsSGVpZ2h0IiwiX2lzU2Nyb2xsIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwic3RvcFByb3BhZ2F0aW9uIiwiX2lucHV0T2JzZXJ2ZXIiLCJpbnB1dHMiLCJuZXN0ZWQiLCJfY2FwdHVyZUlucHV0cyIsIl9pbnB1dEV4cCIsImlzSW5wdXQiLCJfZ2V0U2Nyb2xsTm9ybWFsaXplciIsIm1heFkiLCJsYXN0UmVmcmVzaElEIiwic2tpcFRvdWNoTW92ZSIsInN0YXJ0U2Nyb2xsWCIsInN0YXJ0U2Nyb2xsWSIsIl92YXJzMiIsIm5vcm1hbGl6ZVNjcm9sbFgiLCJtb21lbnR1bSIsImFsbG93TmVzdGVkU2Nyb2xsIiwic21vb3RoZXIiLCJTY3JvbGxTbW9vdGhlciIsInNtb290aGVySW5zdGFuY2UiLCJpbml0aWFsU2NhbGUiLCJ2aXN1YWxWaWV3cG9ydCIsIm91dGVyV2lkdGgiLCJ3aGVlbFJlZnJlc2giLCJyZXNvbHZlTW9tZW50dW1EdXJhdGlvbiIsImlucHV0T2JzZXJ2ZXIiLCJyZXN1bWVUb3VjaE1vdmUiLCJzY3JvbGxDbGFtcFgiLCJzY3JvbGxDbGFtcFkiLCJ1cGRhdGVDbGFtcHMiLCJyZW1vdmVDb250ZW50T2Zmc2V0IiwiaWdub3JlRHJhZyIsInByZXZTY2FsZSIsImR1ciIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsInBsYXkiLCJfdHMiLCJ4QXJyYXkiLCJ5QXJyYXkiLCJ5Q2xhbXBlZCIsInRpY2tlciIsIm9ic2VydmUiLCJub3JtYWxpemVTY3JvbGwiLCJub3JtYWxpemVyIiwic3MiLCJyZWYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9nbG9iYWxUaW1lbGluZSIsIl9jb3JlUmVhZHkiLCJfbGFzdFJlbmRlcmVkRnJhbWUiLCJfcXVpY2tUd2VlbiIsIl90aWNrZXJBY3RpdmUiLCJuMSIsImVhc2VPdXQiLCJhdXRvU2xlZXAiLCJ1bml0cyIsIm92ZXJ3cml0ZSIsIl9iaWdOdW0iLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsIl9pc05vdEZhbHNlIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJfd2FybiIsInN1cHByZXNzIiwiX2FkZEdsb2JhbCIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwiX3JldmVydENvbmZpZ05vS2lsbCIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsIm5hbWVzIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJfc3RhcnRBdCIsIl9udW1lcmljSWZQb3NzaWJsZSIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiX2luaGVyaXREZWZhdWx0cyIsImV4Y2x1ZGVEdXJhdGlvbiIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwiX3ByZXYiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJfcmVtb3ZlRnJvbVBhcmVudCIsIm9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfYWN0IiwiX3VuY2FjaGUiLCJfZW5kIiwiX2RpcnR5IiwiX3JlY2FjaGVBbmNlc3RvcnMiLCJ0b3RhbER1cmF0aW9uIiwiX3Jld2luZFN0YXJ0QXQiLCJhdXRvUmV2ZXJ0IiwiX2hhc05vUGF1c2VkQW5jZXN0b3JzIiwiX2VsYXBzZWRDeWNsZUR1cmF0aW9uIiwiX3JlcGVhdCIsIl9hbmltYXRpb25DeWNsZSIsIl9yRGVsYXkiLCJ0VGltZSIsImN5Y2xlRHVyYXRpb24iLCJ3aG9sZSIsImZsb29yIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3Bvc3RBZGRDaGVja3MiLCJyYXdUaW1lIiwiX3pUaW1lIiwiX2FkZFRvVGltZWxpbmUiLCJza2lwQ2hlY2tzIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX2lzRnJvbU9yRnJvbVN0YXJ0IiwiX3JlY2VudCIsIl9zY3JvbGxUcmlnZ2VyIiwiX2F0dGVtcHRJbml0VHdlZW4iLCJfaW5pdFR3ZWVuIiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9sb2NrIiwiX3NldER1cmF0aW9uIiwic2tpcFVuY2FjaGUiLCJsZWF2ZVBsYXloZWFkIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwiaXNQZXJjZW50IiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlyVmFycyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwicnVuQmFja3dhcmRzIiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJleGVjIiwiX3NsaWNlIiwiX2lzQXJyYXlMaWtlIiwibm9uRW1wdHkiLCJfZmxhdHRlbiIsImFyIiwibGVhdmVTdHJpbmdzIiwiYWNjdW11bGF0b3IiLCJfYWNjdW11bGF0b3IiLCJzZWxlY3RvciIsIl93YWtlIiwic2h1ZmZsZSIsInJhbmRvbSIsImRpc3RyaWJ1dGUiLCJlYWNoIiwiX3BhcnNlRWFzZSIsImlzRGVjaW1hbCIsInJhdGlvcyIsInJhdGlvWCIsInJhdGlvWSIsImVkZ2VzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJqIiwid3JhcEF0IiwiZGlzdGFuY2VzIiwiX2ludmVydEVhc2UiLCJfcm91bmRNb2RpZmllciIsInBvdyIsInJhdyIsInJhZGl1cyIsImlzMkQiLCJ2YWx1ZXMiLCJpbmNyZW1lbnQiLCJjbG9zZXN0Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsInVuaXRpemUiLCJub3JtYWxpemUiLCJtYXBSYW5nZSIsIl93cmFwQXJyYXkiLCJyYW5nZSIsIndyYXBZb3lvIiwibnVtcyIsImluTWluIiwiaW5NYXgiLCJvdXRNaW4iLCJvdXRNYXgiLCJpblJhbmdlIiwib3V0UmFuZ2UiLCJpbnRlcnBvbGF0ZSIsIm11dGF0ZSIsImludGVycG9sYXRvcnMiLCJpbCIsIm1hc3RlciIsIl9hZGRQcm9wVHdlZW4iLCJfcmVuZGVyUHJvcFR3ZWVucyIsIl9nZXRMYWJlbEluRGlyZWN0aW9uIiwiZnJvbVRpbWUiLCJiYWNrd2FyZCIsImRpc3RhbmNlIiwiZXhlY3V0ZUxhenlGaXJzdCIsInByZXZDb250ZXh0IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJfY3JlYXRlUGx1Z2luIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsIm1hcm9vbiIsInRlYWwiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJwaW5rIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJnIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJSZWdFeHAiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJsYXN0SW5kZXgiLCJfaWQiLCJfcmVxIiwiX3JhZiIsIl9zZWxmIiwiX2RlbHRhIiwiX2xhZ1RocmVzaG9sZCIsIl9hZGp1c3RlZExhZyIsIl9zdGFydFRpbWUiLCJfbGFzdFVwZGF0ZSIsIl9nYXAiLCJfbmV4dFRpbWUiLCJfdGljayIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsImVsYXBzZWQiLCJtYW51YWwiLCJ0aWNrIiwiZGVsdGFSYXRpbyIsImZwcyIsIndha2UiLCJnc2FwVmVyc2lvbnMiLCJHcmVlblNvY2tHbG9iYWxzIiwic2xlZXAiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImxhZ1Ntb290aGluZyIsImFkanVzdGVkTGFnIiwiX2ZwcyIsInByaW9yaXRpemUiLCJfZWFzZU1hcCIsIl9jdXN0b21FYXNlRXhwIiwiX3F1b3Rlc0V4cCIsIl9wYXJzZU9iamVjdEluU3RyaW5nIiwicGFyc2VkVmFsIiwibGFzdEluZGV4T2YiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJfZmlyc3QiLCJ5b3lvRWFzZSIsIl95b3lvIiwiX2Vhc2UiLCJfeUVhc2UiLCJkZWZhdWx0RWFzZSIsIl9DRSIsIl9jb25maWdFYXNlRnJvbVN0cmluZyIsIl9pbnNlcnRFYXNlIiwiZWFzZUluIiwiZWFzZUluT3V0IiwibG93ZXJjYXNlTmFtZSIsIl9lYXNlSW5PdXRGcm9tT3V0IiwiX2NvbmZpZ0VsYXN0aWMiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiSW5maW5pdHkiLCJfcHJvdG8iLCJzdGFydFRpbWUiLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwiaXRlcmF0aW9uIiwiX3BzIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJpbmNsdWRlRGVsYXkiLCJhdFRpbWUiLCJyZXN1bWUiLCJfb25VcGRhdGUiLCJ0aGVuIiwib25GdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIl90aGVuIiwiX3Byb20iLCJfQW5pbWF0aW9uIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsImZyb21WYXJzIiwidG9WYXJzIiwic3RhZ2dlclRvIiwib25Db21wbGV0ZUFsbCIsIm9uQ29tcGxldGVBbGxQYXJhbXMiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwicHJldlBhdXNlZCIsInBhdXNlVHdlZW4iLCJwcmV2U3RhcnQiLCJwcmV2SXRlcmF0aW9uIiwicHJldlRpbWUiLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwicmVwZWF0UmVmcmVzaCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiX2xhc3QiLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsInBhcnNlZFRhcmdldHMiLCJpc0dsb2JhbFRpbWUiLCJfdGFyZ2V0cyIsIl9vblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsImNsZWFyIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwiX3NldHRlckZ1bmNXaXRoUGFyYW0iLCJfc2V0dGVyRnVuYyIsIl9zZXR0ZXJQbGFpbiIsIl9yZW5kZXJCb29sZWFuIiwiX3JlbmRlclBsYWluIiwicHRMb29rdXAiLCJfcGFyc2VGdW5jT3JTdHJpbmciLCJfcHJvY2Vzc1ZhcnMiLCJwcmlvcml0eSIsImNsZWFuVmFycyIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfZnJvbSIsIl9wdENhY2hlIiwiX29wIiwiX29uSW5pdCIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJzdGFydElzUmVsYXRpdmUiLCJyb290UFQiLCJsb29rdXAiLCJwdENhY2hlIiwiX3VwZGF0ZVByb3BUd2VlbnMiLCJvdmVyd3JpdHRlblByb3BzIiwiY3VyTG9va3VwIiwiY3VyT3ZlcndyaXRlUHJvcHMiLCJraWxsaW5nVGFyZ2V0cyIsInByb3BUd2Vlbkxvb2t1cCIsImZpcnN0UFQiLCJhMSIsImEyIiwiX2FycmF5c01hdGNoIiwicHJvcGVydHlBbGlhc2VzIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJvblJldmVyc2VDb21wbGV0ZSIsIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zIiwiX3NldHRlckF0dHJpYnV0ZSIsImhhc05vbkRlcGVuZGVudFJlbWFpbmluZyIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsInJlbmRlcmVyIiwiVHdlZW5NYXgiLCJUd2VlbkxpdGUiLCJUaW1lbGluZUxpdGUiLCJUaW1lbGluZU1heCIsIl9tZWRpYSIsIl9sYXN0TWVkaWFUaW1lIiwiX29uTWVkaWFDaGFuZ2UiLCJhbnlNYXRjaCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwib25NYXRjaCIsIkNvbnRleHQiLCJfciIsIl9wcm90bzUiLCJwcmV2U2VsZWN0b3IiLCJnZXRUd2VlbnMiLCJfdGhpczQiLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwibXEiLCJhY3RpdmUiLCJjb25kIiwiX2xlbjIiLCJfa2V5MiIsImdldHRlciIsImZvcm1hdCIsInNldHRlcnMiLCJxdWlja1RvIiwiX21lcmdlMiIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJpbnN0YWxsIiwiZWZmZWN0cyIsImdsb2JhbFRpbWVsaW5lIiwicmV2ZXJ0aW5nIiwidG9BZGQiLCJfZ2V0UGx1Z2luUHJvcFR3ZWVuIiwiX2J1aWxkTW9kaWZpZXJQbHVnaW4iLCJfYWRkTW9kaWZpZXJzIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiZ3NhcFdpdGhDU1MiLCJUd2Vlbk1heFdpdGhDU1MiLCJfX2Fzc2lnbiIsImFzc2lnbiIsIm5hbWVkX3JlZmVyZW5jZXNfMSIsInJlcXVpcmUiLCJudW1lcmljX3VuaWNvZGVfbWFwXzEiLCJzdXJyb2dhdGVfcGFpcnNfMSIsImFsbE5hbWVkUmVmZXJlbmNlcyIsIm5hbWVkUmVmZXJlbmNlcyIsImh0bWw1IiwiZW5jb2RlUmVnRXhwcyIsInNwZWNpYWxDaGFycyIsIm5vbkFzY2lpIiwibm9uQXNjaWlQcmludGFibGUiLCJleHRlbnNpdmUiLCJkZWZhdWx0RW5jb2RlT3B0aW9ucyIsIm1vZGUiLCJsZXZlbCIsIm51bWVyaWMiLCJlbmNvZGUiLCJfYSIsIl9jIiwiX2IiLCJfZCIsIl9lIiwiZW5jb2RlUmVnRXhwIiwicmVmZXJlbmNlcyIsImNoYXJhY3RlcnMiLCJpc0hleCIsInJlc3VsdF8xIiwiY29kZV8xIiwiZ2V0Q29kZVBvaW50IiwiY2hhckNvZGVBdCIsImRlZmF1bHREZWNvZGVPcHRpb25zIiwic3RyaWN0IiwiYXR0cmlidXRlIiwiYmFzZURlY29kZVJlZ0V4cHMiLCJ4bWwiLCJib2R5UmVnRXhwcyIsImh0bWw0IiwiZGVjb2RlUmVnRXhwcyIsImZyb21DaGFyQ29kZSIsIm91dE9mQm91bmRzQ2hhciIsImRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIiwiZGVjb2RlRW50aXR5IiwiZW50aXR5IiwiZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSIsImVudGl0aWVzIiwiZGVjb2RlU2Vjb25kQ2hhcl8xIiwiZGVjb2RlQ29kZV8xIiwiZnJvbUNvZGVQb2ludCIsIm51bWVyaWNVbmljb2RlTWFwIiwiZGVjb2RlIiwiZGVjb2RlUmVnRXhwIiwiaXNBdHRyaWJ1dGUiLCJpc1N0cmljdCIsInJlcGxhY2VSZXN1bHRfMSIsInJlcGxhY2VNYXRjaF8xIiwicmVwbGFjZUxhc3RJbmRleF8xIiwicmVwbGFjZUlucHV0XzEiLCJkZWNvZGVSZXN1bHRfMSIsImRlY29kZUVudGl0eUxhc3RDaGFyXzIiLCJkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yIiwiZGVjb2RlU2Vjb25kQ2hhcl8yIiwiZGVjb2RlQ29kZV8yIiwiXyIsIiQiLCJmaiIsImFzdHJhbENvZGVQb2ludCIsImNvZGVQb2ludEF0IiwiaW5wdXQiLCJoaWdoU3Vycm9nYXRlRnJvbSIsImhpZ2hTdXJyb2dhdGVUbyIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJub0RvY3VtZW50Iiwibm9vcCIsInVwZGF0ZUNzcyIsInVybCIsImhyZWYiLCJpc1VybFJlcXVlc3QiLCJpc0xvYWRlZCIsInZpc2l0ZWQiLCJuZXdFbCIsImNsb25lTm9kZSIsInJlbG9hZFN0eWxlIiwibG9hZGVkIiwic3RyaXBXV1ciLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRBbGwiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJmbiIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwUnVsZSIsInJlZyIsImdldEN1cnJlbnRTY3JpcHRVcmwiLCJyZWxvYWRlZCIsImxvY2FscyIsImZ1bmN0aW9uQ2FsbCIsInVybFN0cmluZyIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJwcmVmaXhlcyIsInVwcGVyIiwibWVtbyIsInByZWZpeCIsImNoYXIiLCJLZXkiLCJxcyIsInNlcCIsImVxIiwicmVnZXhwIiwibWF4S2V5cyIsImtzdHIiLCJ2c3RyIiwiayIsImlkeCIsImRlY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwia3MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZSIsInN0cmluZ2lmeSIsImV4dGVuZCIsIm9iamVjdCIsImV4dGVuZGVkIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmV3VmFsdWUiLCJwYXJzZVNldHRpbmdzIiwic2V0dGluZ3MiLCJhYnNvbHV0ZSIsInBhcnNlVHlwZXMiLCJsaW5lcyIsIndvcmRzIiwiY2hhcnMiLCJpc09iamVjdCIsImlzTm9kZSIsImlzTGVuZ3RoIiwiaXNBcnJheUxpa2UiLCJnZXRUYXJnZXRFbGVtZW50cyIsImdldEVsZW1lbnRCeUlkIiwiYXBwZW5kIiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsInJlcGxhY2VDaGlsZHJlbiIsImxhc3RDaGlsZCIsInJlcGxhY2VXaXRoIiwicHJldmlvdXNTaWJsaW5nIiwicmVwbGFjZUNoaWxkIiwiRWxlbWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJlbnRyaWVzIiwiZXhwYW5kbyIsInVpZCIsIm93bmVyIiwicnNBc3RyYWxSYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNDb21ib1N5bWJvbHNSYW5nZSIsInJzVmFyUmFuZ2UiLCJyc0FzdHJhbCIsInJzQ29tYm8iLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNaV0oiLCJyZU9wdE1vZCIsInJzT3B0VmFyIiwicnNTZXEiLCJyc1N5bWJvbCIsInJlVW5pY29kZSIsInJlSGFzVW5pY29kZSIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJzdHJpbmdUb0FycmF5IiwidW5pY29kZVRvQXJyYXkiLCJhc2NpaVRvQXJyYXkiLCJ0b0NoYXJzIiwic2VwYXJhdG9yIiwiYXR0cmlidXRlcyIsInJhd1ZhbHVlIiwic3BsaXRDbGFzcyIsImxpbmVDbGFzcyIsIndvcmRDbGFzcyIsImNoYXJDbGFzcyIsInNwbGl0V29yZHNBbmRDaGFycyIsInRleHROb2RlIiwiVEFHX05BTUUiLCJWQUxVRSIsIm5vZGVWYWx1ZSIsInNwbGl0VGV4dCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJ0b1dvcmRzIiwiV09SRCIsIndvcmRFbGVtZW50IiwiY2hhcmFjdGVyRWxlbWVudHNGb3JDdXJyZW50V29yZCIsIkNIQVIiLCJjaGFyYWN0ZXJFbGVtZW50IiwiY2xhc3MiLCJpc1dvcmQiLCJpc1dvcmRTdGFydCIsImlzV29yZEVuZCIsIndvcmRzQW5kQ2hhcnMiLCJjaGlsZE5vZGVzIiwiaXNSb290IiwicHJldlNpYmxpbmciLCJ0ZXh0QWZ0ZXIiLCJ0ZXh0QmVmb3JlIiwidW5TcGxpdFdvcmRzIiwicmVwb3NpdGlvbkFmdGVyU3BsaXQiLCJzY3JvbGxQb3MiLCJ3b3Jkc0luRWFjaExpbmUiLCJlbGVtZW50SGVpZ2h0IiwiZWxlbWVudFdpZHRoIiwiY29udGVudEJveCIsIndvcmRzSW5DdXJyZW50TGluZSIsImxpbmVPZmZzZXRZIiwicGFyZW50RWxlbWVudCIsImFsaWduIiwidGV4dEFsaWduIiwibGluZVRocmVzaG9sZCIsIm9mZnNldExlZnQiLCJjc3NXaWR0aCIsImNzc0hlaWdodCIsImlzV29yZExpa2UiLCJwYXJlbnRYIiwicGFyZW50WSIsInBhcmVudFJlY3QiLCJnZXRQb3NpdGlvbiIsIm5vZGVOYW1lIiwid29yZHNJblRoaXNMaW5lIiwibGluZUVsZW1lbnQiLCJsaW5lRGltZW5zaW9ucyIsIndvcmRPckVsZW1lbnQiLCJpc0xpbmUiLCJwYXJlbnREYXRhIiwiaXNDaGlsZE9mTGluZU5vZGUiLCJpc1NwbGl0IiwiaHRtbCIsIkUiLCJjdHgiLCJldnRBcnIiLCJldnRzIiwibGl2ZUV2ZW50cyIsIlRpbnlFbWl0dGVyIiwicm9vdCIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJwdW55Y29kZSIsIm1heEludCIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiZXJyb3JzIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwiYXJyYXkiLCJtYXBEb21haW4iLCJwYXJ0cyIsInVjczJkZWNvZGUiLCJleHRyYSIsIm91dHB1dCIsImNvdW50ZXIiLCJ1Y3MyZW5jb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJmbGFnIiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJvdXQiLCJiYXNpYyIsIm9sZGkiLCJiYXNlTWludXNUIiwiY29kZVBvaW50IiwiaW5wdXRMZW5ndGgiLCJiaWFzIiwiaGFuZGxlZENQQ291bnQiLCJiYXNpY0xlbmd0aCIsInEiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwiZGVmaW5lIiwidXRpbCIsIlVybCIsInNsYXNoZXMiLCJhdXRoIiwicG9ydCIsImhvc3RuYW1lIiwiaGFzaCIsInNlYXJjaCIsInBhdGhuYW1lIiwicGF0aCIsInVybFBhcnNlIiwicmVzb2x2ZU9iamVjdCIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicXVlcnlzdHJpbmciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJyZXN0Iiwic2ltcGxlUGF0aCIsInByb3RvIiwibG93ZXJQcm90byIsImF0U2lnbiIsImhvc3RFbmQiLCJoZWMiLCJwYXJzZUhvc3QiLCJpcHY2SG9zdG5hbWUiLCJob3N0cGFydHMiLCJwYXJ0IiwibmV3cGFydCIsInZhbGlkUGFydHMiLCJub3RIb3N0IiwiYml0IiwidG9BU0NJSSIsImFlIiwiZXNjIiwiZXNjYXBlIiwicW0iLCJyZWwiLCJ0a2V5cyIsInRrIiwidGtleSIsInJrZXlzIiwicmsiLCJya2V5IiwicmVsUGF0aCIsImlzU291cmNlQWJzIiwiaXNSZWxBYnMiLCJtdXN0RW5kQWJzIiwicmVtb3ZlQWxsRG90cyIsInNyY1BhdGgiLCJwc3ljaG90aWMiLCJpc051bGxPclVuZGVmaW5lZCIsImF1dGhJbkhvc3QiLCJpc051bGwiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0Fic29sdXRlIiwid2hlZWxEZWx0YVgiLCJ3aGVlbERlbHRhWSIsImlzRmlyZWZveCIsImZpcmVmb3hNdWx0aXBsaWVyIiwibW91c2VNdWx0aXBsaWVyIiwiX25vdGlmeSIsIl9vbk1vdXNlV2hlZWwiLCJ3aGVlbERlbHRhIiwiX29uVG91Y2hTdGFydCIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiX29uVG91Y2hNb3ZlIiwicHJldmVudFRvdWNoIiwidW5wcmV2ZW50VG91Y2hDbGFzcyIsInRvdWNoTXVsdGlwbGllciIsIl9vbktleURvd24iLCJrZXlDb2RlIiwia2V5U3RlcCIsInNoaWZ0S2V5IiwiaGFzV2hlZWxFdmVudCIsImhhc01vdXNlV2hlZWxFdmVudCIsImhhc1RvdWNoIiwiaGFzVG91Y2hXaW4iLCJoYXNQb2ludGVyIiwibXNQb2ludGVyRW5hYmxlZCIsImhhc0tleURvd24iLCJ1c2VLZXlib2FyZCIsInVzZVRvdWNoIiwibGlzdGVuZXJPcHRpb25zIiwib3JpZ2luYWxFdmVudCIsIl9iaW5kIiwibXNUb3VjaEFjdGlvbiIsIl91bmJpbmQiLCJkZXN0cm95IiwiV2ViU29ja2V0Q2xpZW50IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJjbGllbnQiLCJXZWJTb2NrZXQiLCJvbmVycm9yIiwib25vcGVuIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsInN0YXR1cyIsImlzVW5sb2FkaW5nIiwiY3VycmVudEhhc2giLCJfX3dlYnBhY2tfaGFzaF9fIiwiaG90IiwibGl2ZVJlbG9hZCIsIm92ZXJsYXkiLCJwYXJzZWRSZXNvdXJjZVF1ZXJ5IiwicGFyc2VVUkwiLCJzZXRBbGxMb2dMZXZlbCIsIndlYnBhY2tIb3RMb2ciLCJzZXRMb2dMZXZlbCIsImxvZ2dpbmciLCJvblNvY2tldE1lc3NhZ2UiLCJpbnZhbGlkIiwiaGlkZSIsInNlbmRNZXNzYWdlIiwiX2hhc2giLCJwcmV2aW91c0hhc2giLCJfcHJvZ3Jlc3MiLCJtc2ciLCJvayIsInJlbG9hZEFwcCIsImZpbGUiLCJsb2NhdGlvbiIsInJlbG9hZCIsIndhcm5pbmdzIiwiX3dhcm5pbmdzIiwicHJpbnRhYmxlV2FybmluZ3MiLCJfZm9ybWF0UHJvYmxlbSIsImZvcm1hdFByb2JsZW0iLCJoZWFkZXIiLCJzdHJpcEFuc2kiLCJzaG93IiwiX2Vycm9ycyIsInByaW50YWJsZUVycm9ycyIsIl9mb3JtYXRQcm9ibGVtMiIsIl9lcnJvciIsInNvY2tldFVSTCIsImNyZWF0ZVNvY2tldFVSTCIsInNvY2tldCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2l0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImFycjIiLCJMb2dUeXBlIiwiZnJlZXplIiwiaW5mbyIsImRlYnVnIiwidHJhY2UiLCJncm91cCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJwcm9maWxlIiwicHJvZmlsZUVuZCIsIkxPR19TWU1CT0wiLCJUSU1FUlNfU1lNQk9MIiwiVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MIiwiV2VicGFja0xvZ2dlciIsImdldENoaWxkTG9nZ2VyIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJfbGVuNSIsIl9rZXk1IiwiYXNzZXJ0aW9uIiwiX2xlbjYiLCJfa2V5NiIsIl9sZW43IiwiX2tleTciLCJfbGVuOCIsIl9rZXk4IiwiX2xlbjkiLCJfa2V5OSIsIl9sZW4xMCIsIl9rZXkxMCIsIk1hcCIsInByb2Nlc3MiLCJocnRpbWUiLCJkZWxldGUiLCJMb2dnZXIiLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZmlsdGVyVG9GdW5jdGlvbiIsInJlZ0V4cCIsImlkZW50IiwiTG9nTGV2ZWwiLCJmYWxzZSIsInRydWUiLCJ2ZXJib3NlIiwiX3JlZiRsZXZlbCIsIl9yZWYkZGVidWciLCJkZWJ1Z0ZpbHRlcnMiLCJsb2dsZXZlbCIsImxhYmVsZWRBcmdzIiwibG9nVGltZSIsIl9leHRlbmRzIiwiU3luY0JhaWxIb29rIiwiY3JlYXRlQ29uc29sZUxvZ2dlciIsImN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyIsImN1cnJlbnREZWZhdWx0TG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiaG9va3MiLCJjaGlsZE5hbWUiLCJjb25maWd1cmVEZWZhdWx0TG9nZ2VyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiY2FjaGVkTW9kdWxlIiwiZGVmaW5pdGlvbiIsInRvU3RyaW5nVGFnIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIndlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyIsIl9fZXNNb2R1bGUiLCJfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXyIsImFuc2lfcmVnZXhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImFuc2lSZWdleCIsIl9yZWYkb25seUZpcnN0Iiwib25seUZpcnN0IiwicGF0dGVybiIsInN0cmlwX2Fuc2lfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImlmcmFtZUNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXJFbGVtZW50Iiwib25Mb2FkUXVldWUiLCJlbnN1cmVPdmVybGF5RXhpc3RzIiwiekluZGV4IiwiY29udGVudERvY3VtZW50IiwiYmFja2dyb3VuZENvbG9yIiwiZm9udEZhbWlseSIsInBhZGRpbmciLCJ3aGl0ZVNwYWNlIiwiaGVhZGVyRWxlbWVudCIsImNsb3NlQnV0dG9uRWxlbWVudCIsImJhY2tncm91bmQiLCJjc3NGbG9hdCIsInN0eWxlRmxvYXQiLCJvbkxvYWQiLCJtb2R1bGVOYW1lIiwibG9jIiwibWVzc2FnZXMiLCJlbnRyeUVsZW1lbnQiLCJ0eXBlRWxlbWVudCIsIm1lc3NhZ2VUZXh0Tm9kZSIsIkNsaWVudCIsIl9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIiwiZGVmYXVsdCIsInJldHJpZXMiLCJoYW5kbGVycyIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJyZXRyeUluTXMiLCJvbk1lc3NhZ2UiLCJKU09OIiwicGFyc2VkVVJMIiwiaXNJbkFkZHJBbnkiLCJzb2NrZXRVUkxQcm90b2NvbCIsInNvY2tldFVSTEF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic29ja2V0VVJMSG9zdG5hbWUiLCJzb2NrZXRVUkxQb3J0Iiwic29ja2V0VVJMUGF0aG5hbWUiLCJmcm9tQ3VycmVudFNjcmlwdCIsInNjcmlwdEVsZW1lbnRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwibG9nZ2VyIiwicmVzb3VyY2VRdWVyeSIsInNlYXJjaFBhcmFtcyIsInBhaXIiLCJzY3JpcHRTb3VyY2UiLCJnZXRDdXJyZW50U2NyaXB0U291cmNlIiwic2NyaXB0U291cmNlVVJMIiwiVVJMIiwiYWxsb3dUb0hvdCIsImFsbG93VG9MaXZlUmVsb2FkIiwiaG90RW1pdHRlciIsInBvc3RNZXNzYWdlIiwicm9vdFdpbmRvdyIsImludGVydmFsSWQiLCJhcHBseVJlbG9hZCIsIldvcmtlckdsb2JhbFNjb3BlIiwibGFzdEhhc2giLCJ1cFRvRGF0ZSIsImNoZWNrIiwidXBkYXRlZE1vZHVsZXMiLCJjYXRjaCIsImZvcm1hdEVycm9yIiwicmVuZXdlZE1vZHVsZXMiLCJ1bmFjY2VwdGVkTW9kdWxlcyIsImV2ZXJ5IiwibG9nTGV2ZWwiLCJkdW1teSIsInNob3VsZExvZyIsImxvZ0dyb3VwIiwibG9nRm4iLCJzdGFjayIsImNzc1JlbG9hZCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJlYXNpbmciLCJmcm9tS2V5cyIsInRvS2V5cyIsImN1cnJlbnRUaW1lIiwiaXNSdW5uaW5nIiwic3RvcCIsInNtb290aFRvdWNoIiwiZ2VzdHVyZURpcmVjdGlvbiIsImluZmluaXRlIiwib25XaW5kb3dSZXNpemUiLCJ3cmFwcGVyV2lkdGgiLCJ3cmFwcGVySGVpZ2h0Iiwib25XcmFwcGVyUmVzaXplIiwiY29udGVudFJlY3QiLCJvbkNvbnRlbnRSZXNpemUiLCJjb250ZW50V2lkdGgiLCJjb250ZW50SGVpZ2h0Iiwib25WaXJ0dWFsU2Nyb2xsIiwiY29tcG9zZWRQYXRoIiwiZmluZCIsImN0cmxLZXkiLCJzdG9wcGVkIiwiYnV0dG9ucyIsInRhcmdldFNjcm9sbCIsImxhc3RTY3JvbGwiLCJ3cmFwcGVyTm9kZSIsInNjcm9sbFByb3BlcnR5Iiwibm90aWZ5IiwibGVuaXNWZXJzaW9uIiwiY29udGVudE5vZGUiLCJ3cmFwcGVyT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRPYnNlcnZlciIsImFuaW1hdGUiLCJ1c2VyQWdlbnREYXRhIiwicGxhdGZvcm0iLCJ2aXJ0dWFsU2Nyb2xsIiwiaW5jbHVkZXMiLCJkaXNjb25uZWN0Iiwic2V0U2Nyb2xsIiwiaW1tZWRpYXRlIiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiaHUiLCJjaHVua0lkIiwibWluaUNzc0YiLCJobXJGIiwiZ2xvYmFsVGhpcyIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwiY2hhcnNldCIsIm5jIiwib25TY3JpcHRDb21wbGV0ZSIsImRvbmVGbnMiLCJoZWFkIiwibm1kIiwicGF0aHMiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJibG9ja2luZ1Byb21pc2VzIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZXN1bHRzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiaG90Q2hlY2siLCJhcHBseU9uVXBkYXRlIiwiaG1yTSIsImhtckMiLCJwcm9taXNlcyIsImludGVybmFsQXBwbHkiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsImhvdEFwcGx5IiwiQm9vbGVhbiIsImRpc3Bvc2VQcm9taXNlIiwiYXBwbHlQcm9taXNlIiwicmVwb3J0RXJyb3IiLCJvdXRkYXRlZE1vZHVsZXMiLCJtb2R1bGVzIiwiaG1ySSIsImhtckQiLCJtZSIsIl9tYWluIiwicmVxdWVzdCIsInBhcmVudHMiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2FjY2VwdGVkRXJyb3JIYW5kbGVycyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfcmVxdWlyZVNlbGYiLCJlcnJvckhhbmRsZXIiLCJkZWNsaW5lIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImZ1bGxocmVmIiwibGlua1RhZyIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwidGFnIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJvbGRUYWciLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCJobXJTX2pzb25wIiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsImNoYWluIiwicXVldWVJdGVtIiwicGFyZW50SWQiLCJhZGRBbGxUb1NldCIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwib3V0ZGF0ZWRNb2R1bGVJZCIsImRlcGVuZGVuY3kiLCJkaXNwb3NlSGFuZGxlcnMiLCJlcnJvckhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJkZXBlbmRlbmN5SWQiLCJlcnIyIiwib25FcnJvcmVkIiwib3JpZ2luYWxFcnJvciIsImlnbm9yZUVycm9yZWQiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJqc29ucCIsImZldGNoIiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=