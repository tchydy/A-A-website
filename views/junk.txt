
     &__item-img-wrap {
    position: absolute;
    top: 0;
    left: 0;

    width: 100%;
    height: 100%;

    overflow: hidden;
  }
    &__item-img {
      max-width: unset;
      // width: calc(100% + var(--col-3)) !important;

      pointer-events: none;
      user-select: none;

      transform-origin: left center;
      transform: scale(1.75);
      will-change: transform;
      }

  function animate (){
  let mainHeight = main.getBoundingClientRect().height;
  let mainWidth = main.getBoundingClientRect().width;
  let mainBottom = main.getBoundingClientRect().bottom;
  let mainTop = main.getBoundingClientRect().top;
  let sliderRight = window.innerWidth - slider.getBoundingClientRect().right;
  current = parseFloat(lerp(current, target, ease).toFixed(2)); // parse float is to set the decimal place to 2
	console.log(window.scrollY);
  target = window.scrollY - mainTop;
  slider.style.transform = `translateX(${-current}}px)`;
  slider.style.left = `-${current}px`;

  if (window.scrollY >= mainTop && window.scrollY > mainTop+mainHeight   ) {
   main.classList.add('fixed');

  }else{

  }
  if (sliderRight > 0 ) {

  }
  imagesAnim();
  requestAnimationFrame(animate);

}


init();
animate();

function for moving images to create parallax
function imagesAnim(){
let ratio = current / imageWidth;
let intersectionValue;
// console.log(current);
images.forEach((image, idx) => {
 intersectionValue = ratio - (idx * 0.75);
  setTransform(image, `translateX(-${intersectionValue * 70}px)`);
})
}
   only perform parallax for images in viewport
  this.items.forEach((item) => {
      const { bounds } = item;
      const inView = scrollLast + window.innerWidth >= bounds.left && scrollLast < bounds.right;

      if (inView) {
        const min = bounds.left - window.innerWidth;
        const max = bounds.right;
        const percentage = ((scrollLast - min) * 100) / (max - min);
        const newMin = -(window.innerWidth / 12) * 3;
        const newMax = 0;
        item.x = ((percentage - 0) / (100 - 0)) * (newMax - newMin) + newMin;

        item.img.style.transform = `translate3d(${item.x}px, 0, 0) scale(1.75)`;
      }
    });
  update the progress bar
    if (this.state.scrollEnabled) {
      const min = 0;
      const max = -instances.scroll.state.bounds.width + window.innerWidth;
      this.state.progress = ((instances.scroll.state.last - min) * 100) / (max - min) / 100;

      this.dom.progress.style.transform = `scaleX(${this.state.progress})`;
    }
  }

// split text animation

Splitting({})

let tl = gsap.timeline()
tl.fromTo(
  ".char",
  {y: 100},
  {y: 0,
   duration: 0.5,
   stagger: 0.05,
   ease: "power3.inOut",
   repeat: -1,
   repeatDelay: .5,
   }
)

gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

const names = ["work", "service", "info"];

names.forEach(name => {
  let section = document.querySelector("#" + name);
  let nav = document.querySelector(".nav-" + name);
  // for class toggling - we'll trigger when it's 40% from the top
  ScrollTrigger.create({
    trigger: section,
    start: "top 40%",
    end: "bottom 40%",
    toggleClass: {targets: nav, className: "selected"},
    markers: true
  });

  // for clicking the nav and animating to the correct spot
  let trigger = ScrollTrigger.create({
        trigger: section,
        start: "top top"
      });
  nav.addEventListener("click", e => {
    e.preventDefault();
    gsap.to(window, {scrollTo: trigger.start});
  })
})


     const tlIn = gsap.timeline({ defaults: { duration: 0.5, delay: 0.3, } });

      if (this.itemBoundsLeft < this.windowCenter &&
          this.itemBoundsLeft > this.windowLeft
          ) {
            // tlIn.to(itemTitleSpans[1], {opacity: 0, y: '-100%'});
            // tlIn.to(itemTitleSpans[0], {opacity: 1, y:'0%',});
            console.log(itemTitleSpans[0].innerHTML, item);
      } else {
        // const tlOut = gsap.timeline({ defaults: { duration: 0.5, delay: 0.3,  } });
        // tlIn.to(itemTitleSpans[0], { opacity: 0, y: '100%',});
        // tlIn.to(itemTitleSpans[1], { opacity: 0.3, y:'0%' });
      }

      this.tl1
     .to('.about__idea__media', {
       delay: 0.5,
       duration: 1,
       opacity: 1,
       scale: 1,
     })
     .to(
       this.Medias[0],
       {
         duration: 1,
         scaleX: 2.6,
         scaleY: 2.4,
         left: '713px',
         top: '122px',
       },
       2
     )
     .to(
       '.home__about__movingtext',
       { autoAlpha: 1, left:0, duration: 1 }, '-=1')
     .to('.home__about__movingtext', { x: '-75%', duration: 12 });

     // Link timelines to scroll position
  function createScrollTrigger(triggerElement, timeline) {
    // Reset tl when scroll out of view past bottom of screen
    ScrollTrigger.create({
      trigger: triggerElement,
      start: "top bottom",
      onLeaveBack: () => {
        timeline.progress(0);
        timeline.pause();
      }
    });
    // Play tl when scrolled into view (60% from top of screen)
    ScrollTrigger.create({
      trigger: triggerElement,
      start: "top 60%",
      onEnter: () => timeline.play()
    });
  }

      $("[letters-slide-up]").each(function (index) {
    let tl = gsap.timeline({ paused: true });
    tl.from($(this).find(".char"), { yPercent: 100, duration: 0.2, ease: "power1.out", stagger: { amount: 0.6 } });
    createScrollTrigger($(this), tl);
  });

    $("[words-slide-from-right]").each(function (index) {
    let tl = gsap.timeline({ paused: true });
    tl.from($(this).find(".word"), { opacity: 0, x: "1em", duration: 0.6, ease: "power2.out", stagger: { amount: 0.2 } });
    createScrollTrigger($(this), tl);
  });

   .to(
        this.Medias[1],
        {
          duration: 1,
          scaleX: 2.4,
          scaleY: 1.4,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      .to(
        this.Medias[2],
        {
          duration: 1,
          scaleX: 2.1,
          scaleY: 2.8,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      .to(
        this.Medias[3],
        {
          duration: 1,
          scaleX: 1.73,
          scaleY: 2.6,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      .to(
        this.Medias[4],
        {
          duration: 1,
          scaleX: 1.5,
          scaleY: 3.3,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      .to(
        this.Medias[5],
        {
          duration: 1,
          scaleX: 1.6,
          scaleY: 1.9,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      .to(
        this.Medias[6],
        {
          duration: 1,
          scaleX: 2.1,
          scaleY: 3.35,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      .to(
        this.Medias[7],
        {
          duration: 1,
          scaleX: 2,
          scaleY: 2.6,
          left: '50%',
          top: '50%',
          xPercent: -50,
          yPercent: -50,
          x: 0,
          y: 0,
        },
        "imgT"
      )
      toggleActions: 'restart complete restart reset',


      gsap.from(word, {
          scrollTrigger: {
            trigger: title,
            start: 'top 60%',
            toggleActions: 'restart complete restart reset',
            markers: true,
          },
          yPercent: 100,
          duration: 0.4,
          ease: 'power1.out',
          stagger: { amount: 0.2 },
        });

         // function createScrollTrigger(triggerElement, timeline) {
    //   // Reset tl when scroll out of view past bottom of screen
    //   ScrollTrigger.create({
    //     trigger: triggerElement,
    //     start: 'top bottom',
    //     onLeaveBack: () => {
    //       timeline.progress(0);
    //       timeline.pause();
    //     },
    //   });
    //   // Play tl when scrolled into view (60% from top of screen)
    //   ScrollTrigger.create({
    //     trigger: triggerElement,
    //     start: 'top 30%',
    //     markers: true,
    //     onEnter: () => timeline.play(),
    //     onEnterBack: () => timeline.play(),
    //   });
    // }
    // console.log(typeSplit.words)
    this.tl = gsap.timeline({
        scrollTrigger: {
          trigger: title,
          start: 'top 60%',
          toggleActions: 'restart complete restart reset',
          markers: true,
        },
      });

      // onUpdate: function () {
      //   // console.log(this.progress());
      //   console.log(self.direction);
      //   if(self.direction === "up") return;
      //   if(this.progress() >= 0.82 ) {
      //     this.services = document.querySelector('.home__services');
      //     this.servicesTop = document
      //       .querySelector('.home__services')
      //       .getBoundingClientRect().top;
      //     this.servicesScrollTop =
      //       window.pageYOffset + (this.servicesTop - 100);
      //       window.scrollTo(0, this.servicesScrollTop)this.servicesTop = document
      //       .querySelector('.home__services')
      //       .getBoundingClientRect().top;
      //     this.servicesScrollTop =
      //       window.pageYOffset + (this.servicesTop - 100);
      //       window.scrollTo(0, this.servicesScrollTop)
      //     console.log(
      //       'scroll to services',
      //       this.servicesScrollTop,
      //       window.pageYOffset
      //     );
      //   }

      // },

    this.tl2.to('.home__about__transition__white', {scaleY:1, duration: 0.3})
    .to('.home__about__transition__black', {scaleY:1, duration: 0.3})
    .to('.home__about__transition__white', {scaleY:0, duration: 0.2, transformOrigin: "top"})
    .to('.home__about__transition__black', {scaleY:0, duration: 0.2, transformOrigin: "top"});


       onUpdate: function () {
              console.log(this.progress());
              if (this.progress() >= 0.1) {
                gsap.to(
                  '.home__about__scrolltext .word',
                  {
                    opacity: 1,
                    y: '0%',
                    stagger: 0.2,
                    duration: 0.5,
                    ease: 'expo.out',
                  },
                  '-=0.5'
                );
              }
            },

              // if (this.sectionTop < 10) {
    //   console.log('in view', window.scrollY);console.log('in view', window.scrollY);
    //   this.section.classList.add('fixed')
    //   this.inView = true;
    // } else {
    //   this.inView = false;
    // }

     // requestAnimationFrame(this.raf)
    // console.log(this.sectionTop);
    // if in view


     onComplete: function () {
          console.log('scroll', window.pageYOffset);
            // this.servicesTop = document
            //   .querySelector('.home__services')
            //   .getBoundingClientRect().top;
            // this.servicesScrollTop = window.scrollY + this.servicesTop;
            // window.scrollTo(0, this.servicesScrollTop);
            // console.log(
            //   'scroll to',
            //   this.servicesScrollTop,
            //   window.pageYOffset, window.scrollY
            // );

            // gsap.to('.home__services__wrapper', {opacity:1});

        },

        // get scroll value
    // lenis.on('scroll', ({ scroll, limit, velocity, direction, progress }) => {
    //   console.log({ scroll, limit, velocity, direction, progress });
    // });

    //   const lenis = new Lenis({
    // 	lerp: 0.1,
    // 	smooth: true,
    // });


    var lastPoint = null; //global

$(window).on('touchend', function(e){

    var currentPoint = e.originalEvent.changedTouches[0].pageY;

    if(lastPoint != null && lastPoint < currentPoint ){
        //swiped down
        console.log('you scrolled up');

    }else if(lastPoint != null && lastPoint > currentPoint){
        //swiped up
        console.log('you scrolled down');
    }

    lastPoint = currentPoint;
});

window.onbeforeunload = function () {
  window.scrollTo(0, 0);
}

const createRenders = async (api) => {
  const defaults = await handleRequest(api);
  const renderProjects = defaults.renderProjects;
  const Columns = [];
  const Col1 = [];
  const Col2 = [];
  const Col3 = [];

  renderProjects.forEach((project, index) => {
    if (index % 3 === 0) {
      renderProjects.projectColumn = 'col3';
      Col3.push(project);
    } else if (index % 2 === 0) {
      renderProjects.projectColumn = 'col2';
      Col2.push(project);
    } else {
      renderProjects.projectColumn = 'col1';
      if(project) {
        Col1.push(project);
      }
    }
  });
    Columns.push(Col1, Col2, Col3);
     return {
       renderProjects,
       Columns,
       Col1,
       Col2,
       Col3,
     };
}

app.get('/renderresults', async (req, res) => {
  const api = await initApi(req);
  const renders = await createRenders(api);
  const renderProjects = renders.renderProjects;

  res.json(renders.Col3);
});


// projects


    this.projectsColumns = [];
    this.projectsCol1 = [];
    this.projectsCol2 = [];
    this.projectsCol3 = [];

      create() {
    super.create();
    this.projectContent();
    // Initialize the column scroll
    // if (this.el) {
    //   console.log('true');
    // } else {
    //   console.log('false');
    // }
    // if (!this.allProject) return;
    // this.createColumns();
    this.colScroll();
    this.nav.classList.add('hide');
    this.socials.classList.add('hide');
  }

  createColumns() {
    this.columns = document.querySelectorAll('.col');
    this.columnItem = document.querySelectorAll('.column__item');
    this.projectsWrapper = document.querySelector('.projects__wrapper');

    this.columns[0].innerHTML = this.displayCol1;
    this.columns[1].innerHTML = this.displayCol2;
    this.columns[2].innerHTML = this.displayCol3;
    // console.log(this.columns[0].innerHTML, this);
  }
    findCategory(elementOne, elementTwo, element) {
    if(elementOne === elementTwo) return element;
  }

  async serviceSelected() {
    this.projectCategory = []
    this.allService.forEach((service) => {
      service.addEventListener('click', (e) => {
        // e.preventDefault();
        console.log('clicked', service.dataset.id);
        this.category = service.dataset.id;
        this.allProject.forEach((project) => {
          if (project.category === this.category) {
            this.projectCategory.push(project);
          }
        });
        console.log(this.projectCategory);
      });
    });
    if(this.projectCategory.length <= 0) return;
    if (!this.columns[0]) return;
    await this.columnItems(this.projectCategory);
    this.projectsWrapper.classList.remove('none');
  }

  async projectContent() {
    // eslint-disable-next-line no-undef
    const data = await fetch('http://localhost:8004/projectresults');
    this.allProject = await data.json();
    console.log('content created');
    // if (!this.columns[0]) return;
    // await this.columnItems(this.allProject);
    // this.projectsWrapper.classList.remove('none');
  }

  columnItems(Projects) {
    Projects.forEach((project, index) => {
      if (index % 3 === 0) {
        Projects[index].projectColumn = 'col3';
        this.projectsCol3.push(project);
      } else if (index % 2 === 0) {
        Projects[index].projectColumn = 'col2';
        this.projectsCol2.push(project);
      } else {
        Projects[index].projectColumn = 'col1';
        this.projectsCol1.push(project);
      }
    });
    this.projectsColumns.push(
      this.projectsCol1,
      this.projectsCol2,
      this.projectsCol3
    );

    //  this.projectsColumns.push(projectsCol1, projectsCol2, projectsCol3);

    this.displayCol1 = this.projectsCol1.map((project) => {
      // return project
      return `<figure class="column__item">
     <img class="column__item-img" data-src=${project.imageUrl} alt=${project.imageAlt} src=${project.imageUrl} data-tag=${project.tags}>
     </figure>`;
    });
    this.displayCol1 = this.displayCol1.join('');
    // console.log(this.displayCol1);

    this.displayCol2 = this.projectsCol2.map((project) => {
      return `<figure class="column__item">
     <img class="column__item-img" data-src=${project.imageUrl} alt=${project.imageAlt} src=${project.imageUrl} data-tag=${project.tags}>
     </figure>`;
    });
    this.displayCol2 = this.displayCol2.join('');

    this.displayCol3 = this.projectsCol3.map((project) => {
      return `<figure class="column__item">
     <img class="column__item-img" data-src=${project.imageUrl} alt=${project.imageAlt} src=${project.imageUrl} data-tag=${project.tags}>
     </figure>`;
    });
    this.displayCol3 = this.displayCol3.join('');

    this.createColumns();
    this.colScroll();
  }

openModal(e) {
    if (e.target.classList.contains('column__item-img')) {
      this.selectedImage = e.target;
      // All the other (that are inside the viewport)
      this.viewportGrids = this.gridItems
        .filter(
          (el) =>
            el !== this.selectedImage.parentElement &&
            el.classList.contains('in-view')
        )
      this.viewportGridItems = this.gridItems
        .filter(
          (el) =>
            el !== this.selectedImage.parentElement &&
            el.classList.contains('in-view')
        )
        .map((item) => item.querySelector('img'));
      // Remaining (not in the viewport)
      this.remainingGridItems = this.gridItems
        .filter(
          (el) =>
            !this.viewportGridItems.includes(el) &&
            el !== this.selectedImage.parentElement
        )
        .map((item) => item.querySelector('img'));

      // console.log('clicked', this.viewportGridItems, this.viewportGrids);

      const state = Flip.getState(this.selectedImage);
      this.itemState = Flip.getState(this.viewportGridItems);

      this.selectedImage.classList.remove('column__item-img');
      this.selectedImage.classList.add('contentpage__main__item-img');

      this.viewportGridItems.forEach( item => {
        const newFigure = document.createElement('figure');
        newFigure.classList.add('contentpage__nav-item');
        newFigure.classList.add('view-item');
        this.navWrapper.appendChild(newFigure);
      })
      this.remainingGridItems.forEach((item) => {
        const newFigure = document.createElement('figure');
        newFigure.classList.add('contentpage__nav-item');
        newFigure.classList.add('remaining-item');
        this.navWrapper.appendChild(newFigure);
      });


      this.content.classList.remove('none');
      // this.element.classList.add('none');
      this.selectedParent = this.selectedImage.parentElement;
      this.ViewItems = [...document.querySelectorAll('.view-item')];
      this.remainingItems = [...document.querySelectorAll('.remaining-item')];

			this.viewportGrids = this.gridItems.filter(
        (el) =>
          el !== this.selectedImage.parentElement &&
          el.classList.contains('in-view')
      );

      this.contentImg.appendChild(this.selectedImage);

      this.viewportGridItems.forEach((item, index) => {
        this.ViewItems[index].appendChild(item);
      });
      this.remainingGridItems.forEach((item, index) => {
        this.remainingItems[index].appendChild(item);
      });
      // console.log(this.ViewItems);

      Flip.from(this.itemState, {
        duration: 0.6,
        ease: 'sine.out',
        absolute: true,
      });

      Flip.from(state, {
        duration: 0.6,
        ease: 'sine.out',
        absolute: true,
      });

      if (Flip.isFlipping(this.selectedImage)) {
        console.log('flipping');
      }
      this.gridItems.forEach((item) => item.classList.add('pointer'));
    }
  }

  //- video#video(controls='' preload='metadata' )
            //- source(src='' type='video/mp4')
        //- iframe#video(width='100%' height='100%' frameborder='0' type='text/html' src='https://www.youtube.com/embed/f-9ijiN31LI?enablejsapi=1')
